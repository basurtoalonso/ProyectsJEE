--
-- Create Schema Script 
--   Database Version   : 11.2.0.1.0 
--   TOAD Version       : 9.1.0.62 
--   DB Connect String  : 10.50.70.248:1521/orcl 
--   Schema             : CALLCEN 
--   Script Created by  : CALLCEN 
--   Script Created at  : 08/01/2015 06:41:17 p.m. 
--   Physical Location  :  
--   Notes              :  
--

-- Object Counts: 
--   Functions: 31      Lines of Code: 1159 
--   Indexes: 131       Columns: 205        
--   Object Privileges: 2 
--   Packages: 13       Lines of Code: 328 
--   Package Bodies: 13 Lines of Code: 2222 
--   Procedures: 124    Lines of Code: 6075 
--   Sequences: 20 
--   Tables: 131        Columns: 1069       Constraints: 114    
--   Triggers: 30 
--   Views: 15          


CREATE SEQUENCE CAT_PROD_SEQ
  START WITH 126
  MAXVALUE 9999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE ID_COLONIA
  START WITH 0
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE ID_DIRECCION
  START WITH 170
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE ID_ESTADO
  START WITH 0
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE ID_PAIS
  START WITH 0
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE ID_PERSONA
  START WITH 381
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE ID_POBLACION
  START WITH 0
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE MYSEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;


CREATE SEQUENCE SEQREGISTRAOPCION
  START WITH 3629
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  ORDER;


CREATE SEQUENCE SEQ_BIT_ADM
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE SEQ_BIT_ERROR
  START WITH 1304141
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  CYCLE
  NOCACHE
  ORDER;


CREATE SEQUENCE SEQ_BIT_TOKEN
  START WITH 1459
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE SEQ_CAT_APLICACIONES
  START WITH 728
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SEQ_CAT_GRUPO
  START WITH 143
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SEQ_CAT_PERFIL
  START WITH 80
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE SEQ_DE_DATOS
  START WITH 0
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE SEQ_FOLIO_CANCELACION
  START WITH 21764
  MAXVALUE 999999999999999999999999999
  MINVALUE 1000
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SEQ_MOROSOS
  START WITH 30901
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SEQ_OPERACION
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE SEQ_QUE_DATOS
  START WITH 0
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE TABLE COMPRAMAX_ESTATUS
(
  IDESTATUS    NUMBER(2)                        NOT NULL,
  DESCESTATUS  VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE C_POBLACION
(
  FIPOBID      INTEGER,
  FIEDOID      INTEGER,
  FIPAISID     INTEGER,
  FCPOBDESC    VARCHAR2(250 BYTE),
  FISUCEXISTE  VARCHAR2(10 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE DE_DATOS
(
  FOLIO           NUMBER,
  FECHA_REPORTE   DATE,
  HORA_REPORTE    VARCHAR2(12 BYTE),
  NOMBRE          VARCHAR2(50 BYTE),
  A_PATERNO       VARCHAR2(50 BYTE),
  A_MATERNO       VARCHAR2(50 BYTE),
  LADA            VARCHAR2(6 BYTE),
  TELEFONO        VARCHAR2(15 BYTE),
  TIPO_TEL        VARCHAR2(15 BYTE),
  FECHA_PROBLEMA  DATE,
  HORA_PROBLEMA   VARCHAR2(12 BYTE),
  PAIS            NUMBER,
  CANAL           NUMBER,
  SUCURSAL        NUMBER,
  REF_UBICACION   VARCHAR2(50 BYTE),
  NOM_ATENDIO     VARCHAR2(50 BYTE),
  PUESTO          VARCHAR2(50 BYTE),
  DESCRIPCION     VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ENCUESTAEMAIL
(
  FOLIO      NUMBER                             NOT NULL,
  TIPO_CTE   VARCHAR2(20 BYTE)                  DEFAULT 'BAZ'                 NOT NULL,
  NOMBRE     VARCHAR2(200 BYTE),
  TELEFONO   VARCHAR2(15 BYTE),
  LADA       VARCHAR2(5 BYTE),
  CORREO     VARCHAR2(200 BYTE),
  FECHA      DATE,
  IPCLIENTE  VARCHAR2(15 BYTE),
  RES1A      NUMBER,
  RES2A      NUMBER,
  RES3A      NUMBER,
  RES4A      VARCHAR2(500 BYTE),
  LIGA       VARCHAR2(300 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ENCUESTATVAZTECATMK
(
  FOLIO            NUMBER                       NOT NULL,
  NOMBREEMPRESA    VARCHAR2(200 BYTE),
  CARGO            VARCHAR2(100 BYTE),
  NOMBREEJECUTIVO  VARCHAR2(100 BYTE),
  CORREO           VARCHAR2(200 BYTE),
  FECHA            DATE,
  IPCLIENTE        VARCHAR2(15 BYTE),
  RES1A            NUMBER,
  RES2A            NUMBER,
  RES3A            NUMBER,
  RES3B            VARCHAR2(400 BYTE),
  RES4A            NUMBER,
  RES4B            NUMBER,
  RES5A            NUMBER,
  RES4C            NUMBER,
  RES4D            NUMBER,
  RES4E            NUMBER,
  RES4F            NUMBER,
  RES4G            NUMBER,
  RES4H            NUMBER,
  RES5B            VARCHAR2(200 BYTE),
  RES6A            NUMBER,
  RES6B            NUMBER,
  RES6C            NUMBER,
  RES6D            NUMBER,
  RES6E            NUMBER,
  RES6F            NUMBER,
  RES6G            NUMBER,
  RES6H            NUMBER,
  RES6I            NUMBER,
  RES6J            NUMBER,
  RES6K            VARCHAR2(200 BYTE),
  RES7A            VARCHAR2(200 BYTE),
  LIGA             VARCHAR2(300 BYTE),
  TIPO_CTE         VARCHAR2(5 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ERROR_ADMON_USUARIOS
(
  OBJETO_BD            VARCHAR2(60 BYTE),
  ERROR                VARCHAR2(250 BYTE),
  PAIS                 INTEGER,
  HORA_MODIFICACION    VARCHAR2(12 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ESTADO
(
  ID_PAIS        INTEGER                        NOT NULL,
  ID_ESTADO      INTEGER                        NOT NULL,
  NOMBRE_ESTADO  VARCHAR2(50 BYTE)              NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE GRUPO_APLICACION
(
  ID_GRUPO             NUMBER                   NOT NULL,
  ID_APLICACION        NUMBER                   NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE HUELLAS_DESARROLLO
(
  ALNOVA  VARCHAR2(20 BYTE)                     NOT NULL,
  HUELLA  VARCHAR2(4000 BYTE)                   NOT NULL,
  MANO    INTEGER                               NOT NULL,
  DEDO    INTEGER                               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE INFORMACION
(
  ID_PAIS           INTEGER                     NOT NULL,
  LEYENDA_INVESTOR  VARCHAR2(500 BYTE),
  LEYENDA_BANNER    VARCHAR2(500 BYTE),
  LEYENDA_AYUDA     VARCHAR2(500 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_CANCELACIONTMK
(
  IDCANCELACION           NUMBER                NOT NULL,
  DESCRIPCIONCANCELACION  VARCHAR2(80 BYTE),
  IDCLIENTE               NUMBER,
  IDPROSPECTO             NUMBER,
  IDSUCURSAL              NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_CONSULTACLARACIONTMK
(
  IDCONSACLARACION           NUMBER             NOT NULL,
  DESCRIPCIONCONSACLARACION  VARCHAR2(80 BYTE),
  IDCLIENTE                  NUMBER,
  IDPROSPECTO                NUMBER,
  IDSUCURSAL                 NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_CONSULTAMOVIMIENTOTMK
(
  IDCONSULTAMOV           NUMBER                NOT NULL,
  DESCRIPCIONCONSULTAMOV  VARCHAR2(80 BYTE),
  IDCLIENTE               NUMBER,
  IDPROSPECTO             NUMBER,
  IDSUCURSAL              NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_CONSULTASALDOTMK
(
  IDCONSULTASALDO           NUMBER              NOT NULL,
  DESCRIPCIONCONSULTASALDO  VARCHAR2(80 BYTE),
  IDCLIENTE                 NUMBER,
  IDPROSPECTO               NUMBER,
  IDSUCURSAL                NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_INFORMACIONTMK
(
  IDINFORMACION           NUMBER                NOT NULL,
  DESCRIPCIONINFORMACION  VARCHAR2(80 BYTE),
  IDCLIENTE               NUMBER,
  IDPROSPECTO             NUMBER,
  IDSUCURSAL              NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_OTROTMK
(
  IDOTRO            NUMBER                      NOT NULL,
  DESCRIPCIONOTROS  VARCHAR2(80 BYTE),
  IDCLIENTE         NUMBER,
  IDPROSPECTO       NUMBER,
  IDSUCURSAL        NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_PERSONA
(
  IDPERSONA        INTEGER,
  NOMBRE           VARCHAR2(50 BYTE),
  PRIMERAPELLIDO   VARCHAR2(50 BYTE),
  SEGUNDOAPELLIDO  VARCHAR2(50 BYTE),
  SEXO             VARCHAR2(1 BYTE),
  ESTADOCIVIL      VARCHAR2(1 BYTE),
  FECHANACIMIENTO  DATE,
  LADA             VARCHAR2(5 BYTE),
  TELEFONO         VARCHAR2(8 BYTE),
  TELEFONOCELULAR  VARCHAR2(8 BYTE),
  IDDIRECCION      INTEGER,
  PASSWORD         VARCHAR2(20 BYTE),
  NUMOPERADOR      VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_QUEJATMK
(
  IDQUEJA            NUMBER                     NOT NULL,
  DESCRIPCIONQUEJAS  VARCHAR2(80 BYTE),
  IDCLIENTE          NUMBER,
  IDPROSPECTO        NUMBER,
  IDSUCURSAL         NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_REGISTRAOPCIONTMK
(
  IDREGISTRAOPCION  NUMBER                      NOT NULL,
  NUMUSEROPERADOR   VARCHAR2(15 BYTE)           NOT NULL,
  FECHATIME         DATE                        NOT NULL,
  IDTIPOUSUARIO     NUMBER,
  IDTIPOLLAMADA     NUMBER,
  IDOPCION          NUMBER,
  NUMSUCURSAL       NUMBER,
  TEXTOTRO          VARCHAR2(250 BYTE),
  TELEFONO          VARCHAR2(30 BYTE),
  IDLLAMADA         VARCHAR2(30 BYTE),
  NOTA              VARCHAR2(100 BYTE),
  GRABACION         VARCHAR2(50 BYTE),
  IP                VARCHAR2(15 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_TIPOLLAMADATMK
(
  IDTIPOLLAMADA           NUMBER                NOT NULL,
  DESCRIPCIONTIPOLLAMADA  VARCHAR2(80 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_TIPOTMK
(
  IDTIPOUSUARIO  NUMBER                         NOT NULL,
  IDTIPOLLAMADA  NUMBER                         NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LAZ_TIPOUSUARIOTMK
(
  IDTIPOUSUARIO           NUMBER                NOT NULL,
  DESCRIPCIONTIPOUSUARIO  VARCHAR2(80 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LLAMADAS
(
  ID              INTEGER                       NOT NULL,
  FECHA           DATE                          NOT NULL,
  AGENTE          VARCHAR2(50 BYTE)             NOT NULL,
  ID_PAIS         INTEGER                       NOT NULL,
  CLIENTE         VARCHAR2(50 BYTE),
  HORA_INICIAL    VARCHAR2(20 BYTE)             NOT NULL,
  HORA_FINAL      VARCHAR2(20 BYTE),
  ID_LLAMADA_IVR  VARCHAR2(30 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LOG_OPERACIONES
(
  USUARIO    VARCHAR2(10 BYTE),
  TABLA      VARCHAR2(30 BYTE),
  OPERACION  VARCHAR2(1 BYTE),
  FECHA      DATE,
  MAQUINA    VARCHAR2(30 BYTE),
  QUERY      VARCHAR2(300 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LOGS_ENTRADA
(
  AGENTE              VARCHAR2(50 BYTE)         NOT NULL,
  FECHA               DATE                      NOT NULL,
  HORA                VARCHAR2(50 BYTE)         NOT NULL,
  ID_PAIS             INTEGER                   NOT NULL,
  IP                  VARCHAR2(50 BYTE),
  PC                  VARCHAR2(50 BYTE),
  DOMINIO             VARCHAR2(50 BYTE),
  STATUS              VARCHAR2(10 BYTE)         NOT NULL,
  INTENTOS_FALLIDOS   NUMBER,
  TIPO_AUTENTICACION  NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE M_AGENDA
(
  ID_M   NUMBER                                 NOT NULL,
  FECHA  DATE                                   NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE M_BIT
(
  PROGRAMA  VARCHAR2(50 BYTE),
  ORIGEN    VARCHAR2(80 BYTE),
  ERROR     VARCHAR2(250 BYTE),
  FECHA     DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE M_HISTORICO
(
  ID_M          NUMBER                          NOT NULL,
  FECHALLAMADA  DATE                            NOT NULL,
  TIPIFICACION  NUMBER                          NOT NULL,
  FECHA_P_P     DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE M_LLAMADAS
(
  ID_M        NUMBER                            NOT NULL,
  NOMBRE      VARCHAR2(150 BYTE)                NOT NULL,
  LADA        VARCHAR2(10 BYTE),
  TELEFONO    VARCHAR2(15 BYTE),
  EXTENSION   VARCHAR2(10 BYTE),
  TIPO_PROD   VARCHAR2(30 BYTE)                 NOT NULL,
  RETRASOS    VARCHAR2(3 BYTE)                  NOT NULL,
  ADEUDO      VARCHAR2(10 BYTE)                 NOT NULL,
  IMP_MINIMO  VARCHAR2(10 BYTE)                 NOT NULL,
  LLAMAR      CHAR(5 BYTE)                      NOT NULL,
  LLAMAR_HOY  CHAR(5 BYTE)                      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE M_TIPIFICACION
(
  ID_T          NUMBER                          NOT NULL,
  TIPIFICACION  VARCHAR2(100 BYTE)              NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE M_TMP
(
  NOMBRE      VARCHAR2(150 BYTE),
  LADA        VARCHAR2(10 BYTE),
  TELEFONO    VARCHAR2(20 BYTE),
  EXTENSION   VARCHAR2(10 BYTE),
  TIPO_PROD   VARCHAR2(30 BYTE),
  RETRASOS    VARCHAR2(3 BYTE),
  ADEUDO      VARCHAR2(20 BYTE),
  IMP_MINIMO  VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PAIS
(
  ID_PAIS       INTEGER                         NOT NULL,
  NOMBRE_PAIS   VARCHAR2(50 BYTE)               NOT NULL,
  NOMBRE_CORTO  VARCHAR2(10 BYTE)               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PERFIL_APLICACION
(
  ID_PERFIL            NUMBER                   NOT NULL,
  ID_APLICACION        NUMBER                   NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PERFIL_GRUPO
(
  ID_PERFIL            NUMBER                   NOT NULL,
  ID_GRUPO             NUMBER                   NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PLAN_TABLE
(
  STATEMENT_ID     VARCHAR2(30 BYTE),
  TIMESTAMP        DATE,
  REMARKS          VARCHAR2(80 BYTE),
  OPERATION        VARCHAR2(30 BYTE),
  OPTIONS          VARCHAR2(30 BYTE),
  OBJECT_NODE      VARCHAR2(128 BYTE),
  OBJECT_OWNER     VARCHAR2(30 BYTE),
  OBJECT_NAME      VARCHAR2(30 BYTE),
  OBJECT_INSTANCE  NUMBER(38),
  OBJECT_TYPE      VARCHAR2(30 BYTE),
  OPTIMIZER        VARCHAR2(255 BYTE),
  SEARCH_COLUMNS   NUMBER,
  ID               NUMBER(38),
  PARENT_ID        NUMBER(38),
  POSITION         NUMBER(38),
  COST             NUMBER(38),
  CARDINALITY      NUMBER(38),
  BYTES            NUMBER(38),
  OTHER_TAG        VARCHAR2(255 BYTE),
  PARTITION_START  VARCHAR2(255 BYTE),
  PARTITION_STOP   VARCHAR2(255 BYTE),
  PARTITION_ID     NUMBER(38),
  OTHER            LONG,
  DISTRIBUTION     VARCHAR2(30 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE PROMOCIONES
(
  NOMBRE    VARCHAR2(50 BYTE)                   NOT NULL,
  LINK      VARCHAR2(300 BYTE),
  USERID    VARCHAR2(50 BYTE),
  PASSWORD  VARCHAR2(50 BYTE),
  ACCION    VARCHAR2(50 BYTE),
  BITACORA  CHAR(1 BYTE)                        NOT NULL,
  IMAGEN    VARCHAR2(300 BYTE),
  LEYENDA   VARCHAR2(100 BYTE),
  ID_PAIS   INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE QUE_DATOS
(
  FOLIO              NUMBER,
  FECHA_REPORTE      DATE,
  HORA_REPORTE       VARCHAR2(12 BYTE),
  NOMBRE             VARCHAR2(50 BYTE),
  A_PATERNO          VARCHAR2(50 BYTE),
  A_MATERNO          VARCHAR2(50 BYTE),
  LADA               VARCHAR2(6 BYTE),
  TELEFONO           VARCHAR2(15 BYTE),
  TIPO_TEL           VARCHAR2(15 BYTE),
  FECHA_PROBLEMA     DATE,
  HORA_PROBLEMA      VARCHAR2(12 BYTE),
  PAIS               NUMBER,
  CANAL              NUMBER,
  SUCURSAL           NUMBER,
  REF_UBICACION      VARCHAR2(50 BYTE),
  NOM_ATENDIO        VARCHAR2(50 BYTE),
  PUESTO             VARCHAR2(50 BYTE),
  DESCRIPCION        VARCHAR2(50 BYTE),
  ST_TRANSACCION     VARCHAR2(50 BYTE),
  FOLIO_TRANSACCION  VARCHAR2(20 BYTE),
  TIPO_TRANSACCION   VARCHAR2(50 BYTE),
  TIEMPO_ESPERA      VARCHAR2(50 BYTE),
  COMENTARIOS        VARCHAR2(100 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REPORTES
(
  ID_CLASIFICACION     INTEGER                  NOT NULL,
  ID_REPORTE           INTEGER                  NOT NULL,
  NOMBRE_REPORTE       VARCHAR2(250 BYTE)       NOT NULL,
  DESCRIPCION_REPORTE  VARCHAR2(300 BYTE)       NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE REPORTES_UNIFICADO
(
  NOMBRE_REPORTE    VARCHAR2(50 BYTE),
  ARCHIVO           VARCHAR2(50 BYTE),
  ID_CLASIFICACION  INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SCRIPT
(
  ID_SCRIPT       INTEGER                       NOT NULL,
  ID_PAIS         INTEGER                       NOT NULL,
  LEYENDA_SCRIPT  VARCHAR2(1000 BYTE)           NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SUCURSALES
(
  ID_PAIS          INTEGER                      NOT NULL,
  ID_ESTADO        INTEGER,
  ID_SUCURSAL      INTEGER                      NOT NULL,
  ID_CANAL         INTEGER                      NOT NULL,
  NOMBRE_SUCURSAL  VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE TFOLIOS_CANCELACION
(
  TIME_STAMP  VARCHAR2(15 BYTE)                 NOT NULL,
  FOLIO       NUMBER(27)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE TRATAMIENTOS_ESPECIALES
(
  FOLIO               VARCHAR2(50 BYTE)         NOT NULL,
  AGENTE              VARCHAR2(50 BYTE)         NOT NULL,
  SIGNO_CRITERIO      VARCHAR2(3 BYTE)          NOT NULL,
  CRITERIO            VARCHAR2(50 BYTE)         NOT NULL,
  MENSAJE             VARCHAR2(250 BYTE),
  FECHA_INICIO        DATE                      NOT NULL,
  FECHA_FIN           DATE                      NOT NULL,
  LINK                VARCHAR2(300 BYTE),
  NOMBRE_TRATAMIENTO  VARCHAR2(50 BYTE)         NOT NULL,
  ID_PAIS             INTEGER,
  IMAGEN              VARCHAR2(100 BYTE),
  BITACORA            CHAR(1 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE AGENTE_ALNOVA
(
  AGENTE   VARCHAR2(40 BYTE)                    NOT NULL,
  ID_PAIS  NUMBER                               NOT NULL,
  CUENTA   VARCHAR2(20 BYTE),
  ALNOVA   VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE AGENTE_MOCTEZUMA
(
  IDAGENTE             VARCHAR2(30 BYTE)        NOT NULL,
  NOMBRE               VARCHAR2(100 BYTE),
  APELLIDOPATERNO      VARCHAR2(100 BYTE),
  APELLIDOMATERNO      VARCHAR2(100 BYTE),
  PASSWORD             VARCHAR2(35 BYTE),
  ESTATUS              INTEGER,
  ULTIMA_MODIFICACION  DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE AGENTES
(
  AGENTE             VARCHAR2(40 BYTE)          NOT NULL,
  FECHA              DATE                       NOT NULL,
  ID_PAIS            INTEGER                    NOT NULL,
  ID_ESTATUS         INTEGER                    NOT NULL,
  ID_PERFIL          NUMBER,
  CAMBIO             NUMBER,
  NOMBRE             VARCHAR2(50 BYTE),
  APATERNO           VARCHAR2(50 BYTE),
  AMATERNO           VARCHAR2(50 BYTE),
  SESION             NUMBER,
  ID_SEG             INTEGER,
  INTENTOS_FALLIDOS  INTEGER                    DEFAULT 0
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ALNOVA_TERMINAL
(
  ID                INTEGER                     NOT NULL,
  CODE              VARCHAR2(10 BYTE)           NOT NULL,
  BUSY              INTEGER                     NOT NULL,
  SERVER            VARCHAR2(32 BYTE),
  TERMINAL2CHANNEL  INTEGER                     NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BASE_PAZ
(
  SUCURSAL   VARCHAR2(255 BYTE),
  PEDIDO     VARCHAR2(255 BYTE),
  NEGOCIO    VARCHAR2(255 BYTE),
  CTE        VARCHAR2(255 BYTE),
  TIENDA     VARCHAR2(255 BYTE),
  FIDG01     VARCHAR2(255 BYTE),
  TIPO       VARCHAR2(255 BYTE),
  FECSURT    VARCHAR2(30 BYTE),
  NOMBRE     VARCHAR2(50 BYTE),
  APATERNO   VARCHAR2(70 BYTE),
  MATERNO    VARCHAR2(70 BYTE),
  LADA       VARCHAR2(10 BYTE),
  TELEFONO   VARCHAR2(20 BYTE),
  POBLACION  VARCHAR2(255 BYTE),
  ESTADO     VARCHAR2(255 BYTE),
  LINEA      NUMBER,
  SUB        NUMBER,
  SKAU       VARCHAR2(10 BYTE),
  DESCR      VARCHAR2(255 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BINES_TARJETAS
(
  PAIS         NUMBER,
  BIN          NUMBER,
  SUBPRODUCTO  VARCHAR2(3 BYTE),
  CLAVE        VARCHAR2(5 BYTE),
  DESCRIPCION  VARCHAR2(50 BYTE),
  TIPO         VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA
(
  AGENTE        VARCHAR2(50 BYTE)               NOT NULL,
  ACCION        VARCHAR2(50 BYTE)               NOT NULL,
  CUENTA        VARCHAR2(50 BYTE)               NOT NULL,
  FECHA         DATE                            NOT NULL,
  HORA          VARCHAR2(50 BYTE)               NOT NULL,
  ID            INTEGER                         NOT NULL,
  ID_PAIS       INTEGER                         NOT NULL,
  CLIENTE       VARCHAR2(200 BYTE)              NOT NULL,
  ALNOVA        VARCHAR2(200 BYTE)              NOT NULL,
  PRODUCTO      VARCHAR2(200 BYTE)              NOT NULL,
  FI_PAIS       INTEGER                         NOT NULL,
  FI_CANAL      INTEGER                         NOT NULL,
  FI_SUCURSAL   INTEGER                         NOT NULL,
  FI_FOLIO      INTEGER                         NOT NULL,
  TRATAMIENTOS  VARCHAR2(300 BYTE),
  MOTIVOS       VARCHAR2(300 BYTE),
  TARJETA       VARCHAR2(100 BYTE),
  ESTATUS       VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_ADM
(
  ADMINISTRADOR  VARCHAR2(50 BYTE)              NOT NULL,
  FECHA          DATE                           NOT NULL,
  HORA           VARCHAR2(50 BYTE)              NOT NULL,
  ID_PAIS        INTEGER                        NOT NULL,
  AGENTE         VARCHAR2(50 BYTE)              NOT NULL,
  ACCION         VARCHAR2(50 BYTE)              NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_BUSQUEDA_NOMBRES
(
  AGENTE      VARCHAR2(50 BYTE)                 NOT NULL,
  FECHA       DATE                              NOT NULL,
  HORA        VARCHAR2(20 BYTE)                 NOT NULL,
  NOMBRE      VARCHAR2(50 BYTE),
  AP_PATERNO  VARCHAR2(50 BYTE),
  AP_MATERNO  VARCHAR2(50 BYTE),
  FECHANAC    VARCHAR2(50 BYTE),
  ID_PAIS     INTEGER                           NOT NULL,
  EXACTA      INTEGER                           NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_CANC
(
  FOLIO        VARCHAR2(50 BYTE)                NOT NULL,
  AGENTE       VARCHAR2(50 BYTE)                NOT NULL,
  ACCION       VARCHAR2(50 BYTE)                NOT NULL,
  CUENTA       VARCHAR2(50 BYTE)                NOT NULL,
  FECHA        DATE                             NOT NULL,
  HORA         VARCHAR2(50 BYTE)                NOT NULL,
  NUM_TARJETA  VARCHAR2(50 BYTE)                NOT NULL,
  ID_PAIS      INTEGER                          NOT NULL,
  ID_MOTIVO    CHAR(1 BYTE)                     NOT NULL,
  REPOSICION   CHAR(1 BYTE)                     NOT NULL,
  WEBSERVICE   VARCHAR2(3000 BYTE),
  MP00         VARCHAR2(3000 BYTE),
  FOLIO_PAG    VARCHAR2(30 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_CLIENTES
(
  FOLIO           VARCHAR2(50 BYTE)             NOT NULL,
  AGENTE          VARCHAR2(50 BYTE)             NOT NULL,
  FECHA           DATE                          NOT NULL,
  HORA            VARCHAR2(20 BYTE)             NOT NULL,
  NOMBRE          VARCHAR2(50 BYTE)             NOT NULL,
  AP_PATERNO      VARCHAR2(50 BYTE)             NOT NULL,
  AP_MATERNO      VARCHAR2(50 BYTE),
  CALLE           VARCHAR2(50 BYTE)             NOT NULL,
  COLONIA         VARCHAR2(50 BYTE)             NOT NULL,
  CP              VARCHAR2(50 BYTE)             NOT NULL,
  CUENTA          VARCHAR2(50 BYTE)             NOT NULL,
  ESTATUS_CORREO  CHAR(1 BYTE)                  NOT NULL,
  SUBPRODUCTO     VARCHAR2(300 BYTE)            NOT NULL,
  FECHANAC        VARCHAR2(50 BYTE)             NOT NULL,
  ALNOVA          INTEGER,
  FI_PAIS         INTEGER                       NOT NULL,
  FI_CANAL        INTEGER                       NOT NULL,
  FI_SUCURSAL     INTEGER                       NOT NULL,
  FI_FOLIO        INTEGER                       NOT NULL,
  ID_ACCION       INTEGER                       NOT NULL,
  ID_PAIS         INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_CUENTAS
(
  FOLIO           VARCHAR2(50 BYTE)             NOT NULL,
  AGENTE          VARCHAR2(50 BYTE)             NOT NULL,
  FECHA           DATE                          NOT NULL,
  HORA            VARCHAR2(50 BYTE)             NOT NULL,
  NUMERO          VARCHAR2(50 BYTE)             NOT NULL,
  TIPO            CHAR(1 BYTE)                  NOT NULL,
  NOMBRE          VARCHAR2(50 BYTE)             NOT NULL,
  AP_PATERNO      VARCHAR2(50 BYTE)             NOT NULL,
  AP_MATERNO      VARCHAR2(50 BYTE),
  SUBPRODUCTO     VARCHAR2(300 BYTE)            NOT NULL,
  ESTATUS_CORREO  CHAR(1 BYTE)                  NOT NULL,
  ID_ACCION       INTEGER                       NOT NULL,
  ID_PAIS         INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_CUENTAS_AUTO
(
  FOLIO           VARCHAR2(50 BYTE)             NOT NULL,
  AGENTE          VARCHAR2(50 BYTE)             NOT NULL,
  FECHA           DATE                          NOT NULL,
  HORA            VARCHAR2(50 BYTE)             NOT NULL,
  NUMERO          VARCHAR2(50 BYTE)             NOT NULL,
  TIPO            CHAR(1 BYTE)                  NOT NULL,
  NOMBRE          VARCHAR2(50 BYTE)             NOT NULL,
  AP_PATERNO      VARCHAR2(50 BYTE)             NOT NULL,
  AP_MATERNO      VARCHAR2(50 BYTE),
  SUBPRODUCTO     VARCHAR2(300 BYTE)            NOT NULL,
  ESTATUS_CORREO  CHAR(1 BYTE)                  NOT NULL,
  ID_ACCION       INTEGER                       NOT NULL,
  ID_PAIS         INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_TRATA
(
  FOLIO        VARCHAR2(50 BYTE)                NOT NULL,
  AGENTE       VARCHAR2(50 BYTE)                NOT NULL,
  CUENTA       VARCHAR2(50 BYTE)                NOT NULL,
  FECHA        DATE                             NOT NULL,
  HORA         VARCHAR2(50 BYTE)                NOT NULL,
  NUM_TARJETA  VARCHAR2(50 BYTE),
  ID_PAIS      INTEGER                          NOT NULL,
  FOLIO_TRATA  VARCHAR2(50 BYTE),
  ST           VARCHAR2(50 BYTE),
  FECHA_ST     DATE,
  HORA_ST      VARCHAR2(50 BYTE),
  MOTIVO       VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_AUX
(
  CUENTA         VARCHAR2(20 BYTE),
  TARJETA        VARCHAR2(16 BYTE),
  ACCION         VARCHAR2(50 BYTE),
  AGENTE         VARCHAR2(20 BYTE),
  FECHA          DATE,
  HORA           VARCHAR2(10 BYTE),
  WSIN           VARCHAR2(600 BYTE),
  WSOUT          VARCHAR2(900 BYTE),
  ID_PAIS        NUMBER,
  TRANSACCION    VARCHAR2(10 BYTE),
  OBSERVACIONES  VARCHAR2(256 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_CHEQUE
(
  ACCION       NUMBER,
  AGENTE       VARCHAR2(15 BYTE),
  FECHA        DATE,
  FOLIO        VARCHAR2(40 BYTE)                NOT NULL,
  WSIN         VARCHAR2(600 BYTE),
  WSOUT        VARCHAR2(900 BYTE),
  CUENTA       VARCHAR2(20 BYTE),
  HORA         VARCHAR2(15 BYTE),
  ID_PAIS      NUMBER,
  TRANSACCION  VARCHAR2(14 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_ERROR
(
  ID_ERROR     NUMBER                           NOT NULL,
  TIPO         NVARCHAR2(50),
  ORIGEN       NVARCHAR2(50),
  DESCRIPCION  NVARCHAR2(2000),
  FECHA        DATE,
  ERROR        NVARCHAR2(600)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_REPONIP
(
  ACCION         NUMBER,
  AGENTE         VARCHAR2(15 BYTE),
  FECHA          DATE,
  FOLIO          VARCHAR2(40 BYTE)              NOT NULL,
  WSIN           VARCHAR2(600 BYTE),
  WSOUT          VARCHAR2(900 BYTE),
  CUENTA         VARCHAR2(20 BYTE),
  HORA           VARCHAR2(15 BYTE),
  ID_PAIS        NUMBER,
  TRANSACCION    VARCHAR2(14 BYTE),
  OBSERVACIONES  VARCHAR2(300 BYTE),
  CTEALNOVA      VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_TARJETA_AZTECA
(
  AGENTE   VARCHAR2(20 BYTE),
  FECHA    DATE,
  PAIS     INTEGER,
  CUENTA   VARCHAR2(20 BYTE),
  TARJETA  VARCHAR2(20 BYTE),
  PUNTOS   VARCHAR2(10 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_TOKEN
(
  ID_BITACORA  INTEGER,
  CTE_ALNOVA   VARCHAR2(20 BYTE),
  TOKEN        VARCHAR2(20 BYTE),
  OPCION       VARCHAR2(20 BYTE),
  FECHA        DATE,
  HORA         VARCHAR2(15 BYTE),
  FOLIO        VARCHAR2(40 BYTE),
  WSIN         VARCHAR2(600 BYTE),
  WSOUT        VARCHAR2(900 BYTE),
  AGENTE       VARCHAR2(50 BYTE),
  ID_PAIS      INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BOLETINADOS
(
  FOLIO                 VARCHAR2(50 BYTE)       NOT NULL,
  AGENTE                VARCHAR2(50 BYTE)       NOT NULL,
  NOMBRE                VARCHAR2(50 BYTE)       NOT NULL,
  AP_PATERNO            VARCHAR2(50 BYTE)       NOT NULL,
  AP_MATERNO            VARCHAR2(50 BYTE),
  CUENTA                VARCHAR2(50 BYTE)       NOT NULL,
  FECHA_REGISTRO        DATE                    NOT NULL,
  FECHA_INICIO          DATE                    NOT NULL,
  FECHA_BAJA            DATE,
  ID_MOTIVO_BOLETINADO  CHAR(1 BYTE)            NOT NULL,
  ID_PAIS               INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CALLCENTER_MUNICIPIOS
(
  CITY_CODE    VARCHAR2(6 BYTE)                 NOT NULL,
  DESCRIPCION  VARCHAR2(60 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CALLCENTER_SUCURSALES
(
  SUCURSAL   VARCHAR2(6 BYTE)                   NOT NULL,
  NOMBRE     VARCHAR2(60 BYTE),
  DIRECCION  VARCHAR2(60 BYTE)                  NOT NULL,
  CP         VARCHAR2(6 BYTE)                   NOT NULL,
  CITY_CODE  VARCHAR2(6 BYTE)                   NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CANALES
(
  ID_CANAL      INTEGER                         NOT NULL,
  NOMBRE_CANAL  VARCHAR2(250 BYTE)              NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CANCELACIONES_XML
(
  SUCURSAL             VARCHAR2(10 BYTE)        NOT NULL,
  CLIENTE              VARCHAR2(200 BYTE)       NOT NULL,
  TARJETA              VARCHAR2(20 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  MOTIVO               VARCHAR2(15 BYTE)        NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_ACCIONES_VIP
(
  ID_ACCION    NUMBER,
  DESCRIPCION  VARCHAR2(200 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_ACCIONES
(
  ID_ACCION  INTEGER                            NOT NULL,
  ACCION     VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_ACCIONES_ADM
(
  ID_ACCION_ADM  INTEGER                        NOT NULL,
  ACCION         VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_ACCIONES_PROMOCIONES
(
  ID_ACCION     INTEGER                         NOT NULL,
  ID_SUBACCION  INTEGER                         NOT NULL,
  NOMBRE        VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_APLICACIONES
(
  ID_APLICACION        NUMBER                   NOT NULL,
  NOMBRE_APLICACION    VARCHAR2(60 BYTE)        NOT NULL,
  ID_PAIS              INTEGER                  NOT NULL,
  DESCRIPCION          VARCHAR2(100 BYTE),
  ARCHIVO_ASOCIADO     VARCHAR2(50 BYTE)        NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE,
  APLICACION_ADM       INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_ESTATUS
(
  ID_ESTATUS   INTEGER                          NOT NULL,
  DESCRIPCION  VARCHAR2(60 BYTE)                NOT NULL,
  NOM_CORTO    VARCHAR2(40 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_GRUPO
(
  ID_GRUPO             NUMBER                   NOT NULL,
  ID_PAIS              INTEGER                  NOT NULL,
  NOMBRE_GRUPO         VARCHAR2(60 BYTE)        NOT NULL,
  DESCRIPCION          VARCHAR2(80 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_MOTIVOS_BOLETINADOS
(
  ID_MOTIVO_BOLETINADO    CHAR(1 BYTE)          NOT NULL,
  DESCRIPCION_BOLETINADO  VARCHAR2(250 BYTE)    NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_MOTIVOS_CANC
(
  ID_MOTIVO    CHAR(1 BYTE)                     NOT NULL,
  DESCRIPCION  VARCHAR2(250 BYTE)               NOT NULL,
  REPOSICION   CHAR(1 BYTE)                     NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_PERFILES
(
  ID_PERFIL    NUMBER                           NOT NULL,
  PERFIL       VARCHAR2(50 BYTE)                NOT NULL,
  TIPO         VARCHAR2(50 BYTE),
  IDPAIS       INTEGER                          DEFAULT 1                     NOT NULL,
  DESCRIPCION  VARCHAR2(80 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_PRODUCTOS_TE
(
  NOMBRE_PRODUCTO  VARCHAR2(300 BYTE)           NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_SUBPRODUCTOS
(
  ID_SUBPRODUCTO      INTEGER                   NOT NULL,
  ID_PRODUCTO         INTEGER                   NOT NULL,
  NOMBRE_SUBPRODUCTO  VARCHAR2(50 BYTE)         NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_TARJETAS
(
  ID_TARJETA    INTEGER                         NOT NULL,
  TIPO_TARJETA  VARCHAR2(50 BYTE)               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CATALOGO_TRATAMIENTOS
(
  ID_TRATAMIENTO           CHAR(1 BYTE)         NOT NULL,
  NOMBRE_TRATAMIENTO       VARCHAR2(50 BYTE)    NOT NULL,
  DESCRIPCION_TRATAMIENTO  VARCHAR2(250 BYTE)   NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_ENCUESTAS
(
  ID_RES     NUMBER                             NOT NULL,
  RESPUESTA  VARCHAR2(40 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_IPS
(
  IP            VARCHAR2(20 BYTE)               NOT NULL,
  DESCRIPCION   VARCHAR2(50 BYTE),
  AGENTE        VARCHAR2(50 BYTE),
  SESION        VARCHAR2(200 BYTE),
  ID_ESTATUS    NUMBER                          DEFAULT 0,
  NUM_INTENTOS  NUMBER                          DEFAULT 0,
  FECHA         DATE                            DEFAULT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_LINEA
(
  LINEA      NUMBER,
  DESLINEA   VARCHAR2(100 BYTE),
  SLINEA     NUMBER,
  DESSLINEA  VARCHAR2(100 BYTE),
  CLASE      NUMBER,
  DESCLASE   VARCHAR2(100 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_OPCION_BLOQUEO_CH
(
  ID_MOTIVO  VARCHAR2(10 BYTE)                  NOT NULL,
  MOTIVO     VARCHAR2(50 BYTE),
  LEYENDA    VARCHAR2(100 BYTE),
  USAR       INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_RESP_CANCEL
(
  TRANSACCION        VARCHAR2(3000 BYTE),
  TIPO               NVARCHAR2(50),
  TRANSACCION_CORTA  VARCHAR2(500 BYTE),
  F_ALTA             DATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_SUCURSALES
(
  PAIS          NUMBER,
  CANAL         NUMBER,
  SUCURSAL      NUMBER,
  NOMSUCURSAL   VARCHAR2(100 BYTE),
  REGIONAL_BAN  VARCHAR2(100 BYTE),
  ID_ESTADO     NUMBER,
  DIVISION_BAN  VARCHAR2(100 BYTE),
  CP            VARCHAR2(10 BYTE),
  POBLACION     VARCHAR2(100 BYTE),
  PAISMI        NUMBER,
  CANALMI       NUMBER,
  SUCURSALMI    NUMBER,
  CIUDAD        VARCHAR2(100 BYTE),
  LADA          VARCHAR2(10 BYTE),
  DIVISION_EKT  VARCHAR2(50 BYTE),
  REGIONAL_EKT  VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_TABLAS
(
  ID               NUMBER,
  NOMBRE_TABLA     VARCHAR2(100 BYTE),
  TIPO             VARCHAR2(50 BYTE),
  TABLA_RELACION   NUMBER,
  CAMPOS_RELACION  VARCHAR2(200 BYTE),
  DESCRIPCION      VARCHAR2(200 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_TARJETAS_MP00
(
  NOMBRE       VARCHAR2(50 BYTE),
  DESCRIPCION  VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_TIPO_AUTENTICACION
(
  ID    NUMBER,
  TIPO  VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_TRANSACCIONES
(
  TRANSACCION  VARCHAR2(10 BYTE)                NOT NULL,
  DESCRIPCION  VARCHAR2(100 BYTE),
  RESP_ALNOVA  VARCHAR2(50 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE C_CODIGO_POSTAL
(
  FCCTECP    VARCHAR2(10 BYTE),
  FICONSEC   INTEGER,
  FCCOLONIA  VARCHAR2(250 BYTE),
  FIASENTID  INTEGER,
  FIPOBID    INTEGER,
  FIEDOID    INTEGER,
  FIPAISID   INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE C_ESTADO
(
  FIEDOID        INTEGER,
  FIPAISID       INTEGER,
  FCEDODESC      VARCHAR2(20 BYTE),
  FCCPINICIAL    INTEGER,
  FCCPFINAL      INTEGER,
  FCABREVIATURA  VARCHAR2(10 BYTE),
  FCCAPITAL      VARCHAR2(25 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE C_ESTADO_CIVIL
(
  FIESTCIVIL_NUM   INTEGER,
  FVESTCIVIL_DESC  VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CLASIFICACION_REPORTES
(
  ID_CLASIFICACION      INTEGER                 NOT NULL,
  NOMBRE_CLASIFICACION  VARCHAR2(250 BYTE)      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CLIENTE_MOCTEZUMA
(
  FECHA                DATE,
  NOMBRE               VARCHAR2(100 BYTE),
  TELEFONO             VARCHAR2(20 BYTE),
  COLONIA              VARCHAR2(100 BYTE),
  OBSERVACIONES        VARCHAR2(250 BYTE),
  ULTIMA_MODIFICACION  DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  APELLIDOPATERNO      VARCHAR2(100 BYTE),
  APELLIDOMATERNO      VARCHAR2(100 BYTE),
  IDAGENTE             VARCHAR2(30 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CLIENTES
(
  CTE_ALNOVA         VARCHAR2(20 BYTE),
  NOMBRE             VARCHAR2(50 BYTE),
  A_PATERNO          VARCHAR2(50 BYTE),
  A_MATERNO          VARCHAR2(50 BYTE),
  DIRECCION          VARCHAR2(100 BYTE),
  DIR_NUM_INT        VARCHAR2(5 BYTE),
  DIR_NUM_EXT        VARCHAR2(5 BYTE),
  COLONIA            VARCHAR2(50 BYTE),
  CIUDAD             VARCHAR2(50 BYTE),
  CP                 VARCHAR2(20 BYTE),
  TELEFONO           VARCHAR2(20 BYTE),
  FECHANAC           VARCHAR2(15 BYTE),
  FEC_INSERCION      DATE,
  FEC_ACTUALIZACION  DATE,
  PAIS               INTEGER                    DEFAULT 0
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CLIENTES_VIP
(
  CLIENTE       VARCHAR2(15 BYTE),
  NOMBRE        VARCHAR2(200 BYTE),
  ACCIONES_VIP  VARCHAR2(1 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE COMPRAMAX_BITACORA
(
  IDBITACORA         NUMBER(5)                  NOT NULL,
  FOLIOHIPOTECARIO   NUMBER(20),
  IDESTATUS          NUMBER(2),
  FECHA              TIMESTAMP(6),
  DESCRIPCIONCORREO  VARCHAR2(500 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE TOAD_PLAN_TABLE
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  PLAN_ID            NUMBER,
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(4000 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(30 BYTE),
  OBJECT_NAME        VARCHAR2(30 BYTE),
  OBJECT_ALIAS       VARCHAR2(65 BYTE),
  OBJECT_INSTANCE    INTEGER,
  OBJECT_TYPE        VARCHAR2(30 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 INTEGER,
  PARENT_ID          INTEGER,
  DEPTH              INTEGER,
  POSITION           INTEGER,
  COST               INTEGER,
  CARDINALITY        INTEGER,
  BYTES              INTEGER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       INTEGER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           INTEGER,
  IO_COST            INTEGER,
  TEMP_SPACE         INTEGER,
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE),
  PROJECTION         VARCHAR2(4000 BYTE),
  TIME               INTEGER,
  QBLOCK_NAME        VARCHAR2(30 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_BIOM_HIS
(
  FOLIO               VARCHAR2(30 BYTE)         NOT NULL,
  ESTATUS             VARCHAR2(30 BYTE),
  AGENTE              VARCHAR2(50 BYTE)         NOT NULL,
  CUENTA_CLIENTE      VARCHAR2(30 BYTE),
  CLIENTE_ALNOVA      VARCHAR2(30 BYTE),
  FECHA_REGISTRO      DATE,
  OBSERVACIONES       VARCHAR2(500 BYTE),
  MOTIVO              VARCHAR2(80 BYTE),
  SUCURSAL            NUMBER,
  CANAL_GESTORA       NUMBER,
  SUCURSAL_GESTORA    NUMBER,
  URL_DIGITALIZACION  VARCHAR2(250 BYTE),
  PAIS_SOLICITANTE    NUMBER                    NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(20 BYTE),
  FECHA_MODIFICACION  DATE                      NOT NULL,
  CTE_UNICO           VARCHAR2(30 BYTE),
  INICIO_ATENCION     DATE,
  SALTOS              NUMBER                    DEFAULT 0,
  ID_PRODUCTO_FULL    INTEGER,
  TUTORENCONTRADO     NUMBER                    DEFAULT 0,
  REC_FACIAL          NUMBER,
  TIP_IDENTIFICACION  NUMBER,
  NOMBRE_SUCURSAL     VARCHAR2(50 BYTE),
  URL_DIG_HISTORICA   VARCHAR2(250 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE STATUS_TARJETA
(
  ID_TARJETA             VARCHAR2(20 BYTE)      NOT NULL,
  ID_ALNOVA              VARCHAR2(8 BYTE)       NOT NULL,
  STATUS                 NUMBER                 NOT NULL,
  DESFASE                NUMBER                 NOT NULL,
  SINCRONIZACIONES       NUMBER                 NOT NULL,
  FECHA_ACTIVACION       DATE                   NOT NULL,
  FECHA_MODIF            DATE,
  ULTIMA_SINCRONIZACION  DATE                   NOT NULL,
  ULTIMA_AUTENTICACION   DATE                   NOT NULL,
  SISTEMA                VARCHAR2(25 BYTE),
  PAIS                   VARCHAR2(3 BYTE),
  ULTIMA_MODIFICACION    DATE                   NOT NULL,
  USUARIO_MODIFICO       VARCHAR2(30 BYTE)      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE SALDOS_LOG
(
  ID                   NUMBER                   NOT NULL,
  NUMERO               VARCHAR2(20 BYTE)        NOT NULL,
  F_CONSULTA           DATE                     DEFAULT SYSDATE               NOT NULL,
  CLIENTE_ALNOVA       VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ACTIVACION_TASA_LOG
(
  ID                   NUMBER                   NOT NULL,
  CUENTA               VARCHAR2(20 BYTE)        NOT NULL,
  CTE_ALNOVA           VARCHAR2(20 BYTE)        NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CONSULTAMOV_LOG
(
  ID                   NUMBER,
  CUENTA               VARCHAR2(20 BYTE),
  FECHA_CONSULTA       DATE                     DEFAULT SYSDATE,
  CLIENTE_ALNOVA       VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CONTRATOS_R15
(
  ANIO                        VARCHAR2(4 BYTE),
  MES                         VARCHAR2(2 BYTE),
  CONTRATOS_PERSONAS_FISICAS  INTEGER,
  CONTRATOS_PERSONAS_MORALES  INTEGER,
  USUARIO_MODIFICO            VARCHAR2(30 BYTE) NOT NULL,
  FECHA_MODIFICO              DATE              NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE ERRORES_CONTRATOS_R15
(
  DESCRIPCION_ERROR  VARCHAR2(500 BYTE)         NOT NULL,
  USUARIO_MODIFICO   VARCHAR2(30 BYTE)          NOT NULL,
  PATH_FILE          VARCHAR2(200 BYTE)         NOT NULL,
  FECHA_MODIFICO     DATE                       NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_PRODUCTO
(
  ID_PRODUCTO_FULL    INTEGER,
  ID_PRODUCTO         INTEGER,
  ID_SUBPRODUCTO      INTEGER,
  TUTOR               NUMBER                    DEFAULT 0,
  FECHA_MODIFICACION  DATE,
  USUARIO_MODIFICO    VARCHAR2(30 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_BIOM_TUTOR
(
  FOLIO               VARCHAR2(30 BYTE)         NOT NULL,
  NOMBRE              VARCHAR2(46 BYTE),
  CODIGO_POSTAL       VARCHAR2(15 BYTE),
  ESTADO_CIUDAD       VARCHAR2(90 BYTE),
  DIRECCION           VARCHAR2(90 BYTE),
  FECHA_NACIMIENTO    DATE,
  FECHA_MODIFICACION  DATE                      NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(30 BYTE)         NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_CU_PROCTO
(
  ID_PRODUCTO         INTEGER                   NOT NULL,
  NOMBRE              VARCHAR2(60 BYTE)         NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(30 BYTE)         NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CAT_CU_SBPROCTO
(
  ID_PRODUCTO         INTEGER                   NOT NULL,
  ID_SUBPRODUCTO      INTEGER                   NOT NULL,
  NOMBRE              VARCHAR2(60 BYTE)         NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(15 BYTE)         NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE HIST_CLNT_BIOM
(
  NOMBRE              VARCHAR2(65 BYTE),
  APELLIDO_PATERNO    VARCHAR2(65 BYTE),
  APELLIDO_MATERNO    VARCHAR2(65 BYTE),
  CLIENTE_UNICO       VARCHAR2(30 BYTE)         NOT NULL,
  ID_ALNOVA           VARCHAR2(30 BYTE)         NOT NULL,
  DIRECCION           VARCHAR2(85 BYTE),
  COLONIA             VARCHAR2(85 BYTE),
  ESTADO              VARCHAR2(35 BYTE),
  MUNICIPIO           VARCHAR2(35 BYTE),
  FECHA_NACIMIENTO    DATE,
  CODIGO_POSTAL       VARCHAR2(15 BYTE),
  TELEFONO            VARCHAR2(15 BYTE),
  USUARIO_MODIFICO    VARCHAR2(35 BYTE)         NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE AVISOS
(
  ID_AVISO             NUMBER,
  TITULO               VARCHAR2(50 BYTE),
  CONTENIDO_MENSAJE    VARCHAR2(150 BYTE),
  FECHA_INICIO         DATE,
  FECHA_FIN            DATE,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE               NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(10 BYTE)        DEFAULT 'CLUBAZTECA'          NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE CLIENTE_BIOM
(
  FOLIO                 VARCHAR2(30 BYTE)       NOT NULL,
  NOMBRE_CLIENTE        VARCHAR2(70 BYTE),
  CTE_UNICO             VARCHAR2(30 BYTE),
  CUENTA_CLIENTE        VARCHAR2(30 BYTE),
  CLIENTE_TIENDA        VARCHAR2(700 BYTE),
  FECHA_NACIMIENTO      DATE,
  ENTIDAD_NACIMIENTO    VARCHAR2(90 BYTE),
  FECHA_ALTA            DATE,
  FECHA_FOTO_HISTORICA  DATE,
  FECHA_MODIFICACION    DATE                    NOT NULL,
  USUARIO_MODIFICO      VARCHAR2(30 BYTE)       NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_ACERTUM
(
  AGENTE        VARCHAR2(50 BYTE)               NOT NULL,
  ACCION        VARCHAR2(50 BYTE)               NOT NULL,
  CUENTA        VARCHAR2(50 BYTE)               NOT NULL,
  FECHA         DATE                            NOT NULL,
  HORA          VARCHAR2(50 BYTE)               NOT NULL,
  ID            INTEGER                         NOT NULL,
  ID_PAIS       INTEGER                         NOT NULL,
  CLIENTE       VARCHAR2(200 BYTE)              NOT NULL,
  ALNOVA        VARCHAR2(200 BYTE)              NOT NULL,
  PRODUCTO      VARCHAR2(200 BYTE)              NOT NULL,
  FI_PAIS       INTEGER                         NOT NULL,
  FI_CANAL      INTEGER                         NOT NULL,
  FI_SUCURSAL   INTEGER                         NOT NULL,
  FI_FOLIO      INTEGER                         NOT NULL,
  TRATAMIENTOS  VARCHAR2(300 BYTE),
  MOTIVOS       VARCHAR2(300 BYTE),
  TARJETA       VARCHAR2(100 BYTE),
  ESTATUS       VARCHAR2(20 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EMPLOYEEPRUEBITA
(
  ID           VARCHAR2(4 BYTE),
  FIRST_NAME   VARCHAR2(10 BYTE),
  LAST_NAME    VARCHAR2(10 BYTE),
  START_DATE   DATE,
  END_DATE     DATE,
  SALARY       NUMBER(8,2),
  CITY         VARCHAR2(10 BYTE),
  DESCRIPTION  VARCHAR2(15 BYTE),
  ESTATUS      VARCHAR2(15 BYTE),
  FOLIO        VARCHAR2(15 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE EMPLOYEE
(
  ID           VARCHAR2(4 BYTE),
  FIRST_NAME   VARCHAR2(10 BYTE),
  LAST_NAME    VARCHAR2(10 BYTE),
  START_DATE   DATE,
  END_DATE     DATE,
  SALARY       NUMBER(8,2),
  CITY         VARCHAR2(10 BYTE),
  DESCRIPTION  VARCHAR2(15 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LIBERA_BIOM_SUP
(
  FOLIO               VARCHAR2(30 BYTE)         NOT NULL,
  ESTATUS             VARCHAR2(30 BYTE)         NOT NULL,
  AGENTE              VARCHAR2(50 BYTE),
  FECHA_REGISTRO      DATE                      NOT NULL,
  PAIS_SOLICITANTE    NUMBER                    NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(20 BYTE)         NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BIT_BIOM_SUP
(
  FOLIO               VARCHAR2(30 BYTE)         NOT NULL,
  CTE_UNICO           VARCHAR2(30 BYTE),
  PAIS_SOLICITANTE    NUMBER                    NOT NULL,
  ESTATUS             VARCHAR2(30 BYTE),
  AGENTE              VARCHAR2(50 BYTE)         NOT NULL,
  MOTIVO              VARCHAR2(80 BYTE),
  OBSERVACIONES       VARCHAR2(500 BYTE),
  SALTOS              NUMBER                    DEFAULT 0,
  FECHA_REGISTRO      DATE                      NOT NULL,
  INICIO_ATENCION     DATE,
  FECHA_LIBERACION    DATE,
  USUARIO_MODIFICO    VARCHAR2(20 BYTE)         NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BENEF_BIOMTRICO
(
  FOLIO               VARCHAR2(30 BYTE)         NOT NULL,
  NOMBRE              VARCHAR2(30 BYTE),
  A_PATERNO           VARCHAR2(30 BYTE),
  A_MATERNO           VARCHAR2(30 BYTE),
  FECHA_NACIMIENTO    DATE,
  FECHA_MODIFICACION  DATE                      NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(20 BYTE)         NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE GLOBAL TEMPORARY TABLE QUEST_SL_TEMP_EXPLAIN1
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(80 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(30 BYTE),
  OBJECT_NAME        VARCHAR2(30 BYTE),
  OBJECT_INSTANCE    NUMBER,
  OBJECT_TYPE        VARCHAR2(30 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 NUMBER,
  PARENT_ID          NUMBER,
  POSITION           NUMBER,
  COST               NUMBER,
  CARDINALITY        NUMBER,
  BYTES              NUMBER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       NUMBER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           NUMBER(38),
  IO_COST            NUMBER(38),
  TEMP_SPACE         NUMBER(38),
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE)
)
ON COMMIT PRESERVE ROWS
NOCACHE;


CREATE TABLE TOKENS_RSA
(
  USER_ID              VARCHAR2(30 BYTE),
  FIRST_NAME           VARCHAR2(30 BYTE),
  LAST_NAME            VARCHAR2(30 BYTE),
  LAST_AUTHENTICATION  VARCHAR2(11 BYTE),
  SERIAL_NUMBER        VARCHAR2(15 BYTE),
  TOKEN_TYPE           VARCHAR2(10 BYTE),
  TOKEN_EXPIRATION     VARCHAR2(11 BYTE),
  ENABLED              VARCHAR2(5 BYTE),
  USER_ENABLED         VARCHAR2(5 BYTE),
  USER_LOCKED          VARCHAR2(5 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE FOLIOBIOMETRICO
(
  FOLIO                   VARCHAR2(30 BYTE)     NOT NULL,
  NOMBRE_CLIENTE          VARCHAR2(60 BYTE)     NOT NULL,
  CUENTA_CLIENTE          VARCHAR2(30 BYTE),
  PAIS_SOLICITANTE        NUMBER                NOT NULL,
  SUCURSAL                NUMBER                NOT NULL,
  CANAL_GESTORA           NUMBER,
  SUCURSAL_GESTORA        NUMBER,
  FOTO_CLIENTE_NUEVA      BLOB                  NOT NULL,
  FOTO_CLIENTE_HISTORICO  BLOB,
  FOTO_EJECUTIVO          BLOB,
  FOTO_GERENTE            BLOB,
  ORIGEN_SOLICITUD        NUMBER                NOT NULL,
  USUARIO_MODIFICO        VARCHAR2(20 BYTE)     NOT NULL,
  FECHA_MODIFICACION      DATE,
  CTE_UNICO               VARCHAR2(30 BYTE),
  TIPO_SOLICITUD          VARCHAR2(15 BYTE),
  CLIENTE_TIENDA          VARCHAR2(700 BYTE),
  TIPO_TITULAR            NUMBER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
ENABLE ROW MOVEMENT;


CREATE TABLE FOLIO_CU
(
  FOLIO               VARCHAR2(21 BYTE)         NOT NULL,
  PAIS                NUMBER                    NOT NULL,
  CANAL               NUMBER                    NOT NULL,
  SUCURSAL            VARCHAR2(5 BYTE)          NOT NULL,
  NOMBRE              VARCHAR2(50 BYTE)         NOT NULL,
  APATERNO            VARCHAR2(50 BYTE),
  AMATERNO            VARCHAR2(50 BYTE),
  FECHASOLICITUD      DATE                      NOT NULL,
  FOTO                BLOB                      NOT NULL,
  FECHA_NACIMIENTO    DATE                      NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(15 BYTE)         NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE TOKENS_RSA_NUEVO
(
  USER_ID              VARCHAR2(30 BYTE),
  FIRST_NAME           VARCHAR2(30 BYTE),
  LAST_NAME            VARCHAR2(30 BYTE),
  LAST_AUTHENTICATION  VARCHAR2(11 BYTE),
  SERIAL_NUMBER        VARCHAR2(15 BYTE),
  TOKEN_TYPE           VARCHAR2(10 BYTE),
  TOKEN_EXPIRATION     VARCHAR2(11 BYTE),
  ENABLED              VARCHAR2(5 BYTE),
  USER_ENABLED         VARCHAR2(5 BYTE),
  USER_LOCKED          VARCHAR2(5 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE LIBERA_BIOM
(
  FOLIO               VARCHAR2(30 BYTE)         NOT NULL,
  ESTATUS             VARCHAR2(30 BYTE)         NOT NULL,
  AGENTE              VARCHAR2(50 BYTE),
  FECHA_REGISTRO      DATE                      NOT NULL,
  PAIS_SOLICITANTE    NUMBER                    NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(20 BYTE)         NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
ENABLE ROW MOVEMENT;


CREATE TABLE FOLIO_CTEU
(
  FOLIO               VARCHAR2(30 BYTE)         NOT NULL,
  CTE_UNICO           VARCHAR2(30 BYTE)         NOT NULL,
  FOTOHISTORICA       BLOB,
  NOMBRE              VARCHAR2(50 BYTE),
  APATERNO            VARCHAR2(50 BYTE),
  AMATERNO            VARCHAR2(50 BYTE),
  FECHA_NACIMIENTO    DATE,
  CALLE               VARCHAR2(40 BYTE),
  NUM_EXTERIOR        VARCHAR2(5 BYTE),
  NUM_INTERIOR        VARCHAR2(5 BYTE),
  COLONIA             VARCHAR2(65 BYTE),
  POBLACION           VARCHAR2(65 BYTE),
  ESTADO              VARCHAR2(65 BYTE),
  CODIGO_POSTAL       VARCHAR2(5 BYTE),
  ID_FOTO_HD          VARCHAR2(50 BYTE),
  PRODUCTO            VARCHAR2(50 BYTE),
  OSOCKET             INTEGER                   DEFAULT 0                     NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(15 BYTE)         NOT NULL,
  ORDEN_CU            INTEGER
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_BIOM
(
  FOLIO                 VARCHAR2(30 BYTE)       NOT NULL,
  ESTATUS               VARCHAR2(30 BYTE),
  AGENTE                VARCHAR2(50 BYTE)       NOT NULL,
  CUENTA_CLIENTE        VARCHAR2(30 BYTE),
  CLIENTE_ALNOVA        VARCHAR2(30 BYTE),
  FECHA_REGISTRO        DATE,
  OBSERVACIONES         VARCHAR2(500 BYTE),
  MOTIVO                VARCHAR2(80 BYTE),
  SUCURSAL              NUMBER,
  CANAL_GESTORA         NUMBER,
  SUCURSAL_GESTORA      NUMBER,
  URL_DIGITALIZACION    VARCHAR2(250 BYTE),
  PAIS_SOLICITANTE      NUMBER                  NOT NULL,
  USUARIO_MODIFICO      VARCHAR2(20 BYTE),
  FECHA_MODIFICACION    DATE                    NOT NULL,
  CTE_UNICO             VARCHAR2(30 BYTE),
  INICIO_ATENCION       DATE,
  SALTOS                NUMBER                  DEFAULT 0,
  ID_PRODUCTO_FULL      INTEGER,
  TUTORENCONTRADO       NUMBER                  DEFAULT 0,
  REC_FACIAL            NUMBER,
  TIP_IDENTIFICACION    NUMBER,
  NOMBRE_SUCURSAL       VARCHAR2(50 BYTE),
  URL_DIG_HISTORICA     VARCHAR2(250 BYTE),
  TRATAMIENTO_ESPECIAL  VARCHAR2(30 BYTE)
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING
ENABLE ROW MOVEMENT;


CREATE TABLE LIBERA_CU
(
  FOLIO               VARCHAR2(21 BYTE)         NOT NULL,
  ESTATUS             VARCHAR2(10 BYTE)         DEFAULT 'PENDIENTE'           NOT NULL,
  AGENTE              VARCHAR2(15 BYTE),
  FECHA_SOLICITUD     DATE                      NOT NULL,
  PAIS                NUMBER                    NOT NULL,
  FECHA_MODIFICACION  DATE                      NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(15 BYTE)         NOT NULL,
  FECHA_REGISTRO      DATE                      DEFAULT SYSDATE               NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE TABLE BITACORA_CU
(
  FOLIO               VARCHAR2(21 BYTE)         NOT NULL,
  OBSERVACIONES       VARCHAR2(80 BYTE),
  MOTIVO              VARCHAR2(80 BYTE),
  CADENAENVIADA       VARCHAR2(450 BYTE),
  AGENTE              VARCHAR2(15 BYTE),
  INICIO_ATENCION     DATE,
  ESTATUS             VARCHAR2(15 BYTE),
  DIGITALIZACION      VARCHAR2(250 BYTE),
  SALTOS              INTEGER                   DEFAULT 0                     NOT NULL,
  FECHA_REGISTRO      DATE                      DEFAULT SYSDATE,
  FECHA_MODIFICACION  DATE                      NOT NULL,
  USUARIO_MODIFICO    VARCHAR2(15 BYTE)         NOT NULL
)
LOGGING 
NOCOMPRESS 
NOCACHE
NOPARALLEL
MONITORING;


CREATE UNIQUE INDEX IDX_BITACORAHIS_BI ON BIT_BIOM_HIS
(FOLIO, PAIS_SOLICITANTE, AGENTE, FECHA_MODIFICACION)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITABIOMHIS_PS ON BIT_BIOM_HIS
(PAIS_SOLICITANTE)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITABIOMHIS_FR ON BIT_BIOM_HIS
(FECHA_REGISTRO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITABIOMHIS_AG ON BIT_BIOM_HIS
(AGENTE)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITABIOMHIS_ES ON BIT_BIOM_HIS
(ESTATUS)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX CAT_CU_SBPRO_PK ON CAT_CU_SBPROCTO
(ID_PRODUCTO, ID_SUBPRODUCTO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX CAT_CU_PROCTOPK ON CAT_CU_PROCTO
(ID_PRODUCTO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_SB_PRODUCTO ON CAT_PRODUCTO
(ID_SUBPRODUCTO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_PRODUCTO ON CAT_PRODUCTO
(ID_PRODUCTO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX CAT_PRODUCTO_PK ON CAT_PRODUCTO
(ID_PRODUCTO_FULL)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_TUTOR_PK ON BIT_BIOM_TUTOR
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_FOLIOCU ON LIBERA_CU
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_FECHAMODFCU ON LIBERA_CU
(FECHA_MODIFICACION)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_ESTATUSCU ON LIBERA_CU
(ESTATUS)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_AGENTELFCU ON LIBERA_CU
(AGENTE)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_FOLIOBCU ON BITACORA_CU
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_FECHABCU ON BITACORA_CU
(FECHA_REGISTRO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX FOLIO_CTEU_PK ON FOLIO_CTEU
(FOLIO, CTE_UNICO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX FOLIO_CU_PK ON FOLIO_CU
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITABIOM_AG ON BITACORA_BIOM
(AGENTE)
NOLOGGING
PARALLEL ( DEGREE 16 INSTANCES 1 );


CREATE UNIQUE INDEX IDX_BITACORA_BI ON BITACORA_BIOM
(FOLIO, PAIS_SOLICITANTE, AGENTE, FECHA_MODIFICACION)
NOLOGGING
PARALLEL ( DEGREE 16 INSTANCES 1 );


CREATE INDEX IDX_BITABIOM_FR ON BITACORA_BIOM
(FECHA_REGISTRO)
NOLOGGING
PARALLEL ( DEGREE 16 INSTANCES 1 );


CREATE INDEX IDX_BITABIOM_ES ON BITACORA_BIOM
(ESTATUS)
NOLOGGING
PARALLEL ( DEGREE 16 INSTANCES 1 );


CREATE UNIQUE INDEX IDX_ID_CONSULTAMOV_LOG ON CONSULTAMOV_LOG
(ID)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_ID_SALDOS_LOG ON SALDOS_LOG
(ID)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_ID_TASA ON ACTIVACION_TASA_LOG
(ID)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_CTEBIOM_PK ON CLIENTE_BIOM
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX ID_1100_SAL_R15_IDX ON SALDOS_LOG
(F_CONSULTA, CLIENTE_ALNOVA)
NOLOGGING
NOPARALLEL;


CREATE INDEX ID_1100_CON_R15_IDX ON CONSULTAMOV_LOG
(ID, FECHA_CONSULTA, CLIENTE_ALNOVA)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_BEFBIOM_PK ON BENEF_BIOMTRICO
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BIOM_FOLIO ON LIBERA_BIOM
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BIOM_ESTATU ON LIBERA_BIOM
(ESTATUS)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BIOM_AGENTE ON LIBERA_BIOM
(AGENTE)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_FOL_BIT_PK ON BIT_BIOM_SUP
(FOLIO, PAIS_SOLICITANTE)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITSUPB_FR ON BIT_BIOM_SUP
(FECHA_REGISTRO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITSUPB_ST ON BIT_BIOM_SUP
(ESTATUS)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITSUPB_AG ON BIT_BIOM_SUP
(AGENTE)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITSUPB_CU ON BIT_BIOM_SUP
(CTE_UNICO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_SUPBIOM_PK ON LIBERA_BIOM_SUP
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_SUPBIOM_STA ON LIBERA_BIOM_SUP
(ESTATUS)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_SUPBIOM_AGE ON LIBERA_BIOM_SUP
(AGENTE)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_FOLIO_BIOM ON FOLIOBIOMETRICO
(FOLIO, PAIS_SOLICITANTE)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_BITABIOM_CU ON BITACORA_BIOM
(CTE_UNICO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX HIST_CLTN_BIOM_PK ON HIST_CLNT_BIOM
(CLIENTE_UNICO, ID_ALNOVA)
LOGGING
NOPARALLEL;


CREATE INDEX ID_3000_R15_IDX ON BIT_TOKEN
(CTE_ALNOVA, FECHA, ID_PAIS)
NOLOGGING
NOPARALLEL;


CREATE INDEX ID_1200_R15_IDX ON BIT_REPONIP
(CTEALNOVA, FECHA, ID_PAIS)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_ERRORES_CONT_R15 ON ERRORES_CONTRATOS_R15
(FECHA_MODIFICO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IDX_CONTRATOS_R15 ON CONTRATOS_R15
(ANIO, MES, USUARIO_MODIFICO)
NOLOGGING
NOPARALLEL;


CREATE INDEX ID_1000_R15_IDX ON BITACORA
(ALNOVA, ACCION, FECHA, ID_PAIS)
NOLOGGING
NOPARALLEL;


CREATE INDEX ID_TARJ ON BITACORA_CANC
(NUM_TARJETA)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX TOKENSS_RSA_PK_1 ON TOKENS_RSA_NUEVO
(SERIAL_NUMBER)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX TOKENS_RSA_PK ON TOKENS_RSA
(SERIAL_NUMBER)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_TFOLIOS_CANCELACION ON TFOLIOS_CANCELACION
(FOLIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX PKM_TMP ON M_TMP
(NOMBRE)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_PERSONA ON LAZ_PERSONA
(IDPERSONA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_POBLACION ON C_POBLACION
(FIPOBID, FIEDOID, FIPAISID)
NOLOGGING
NOPARALLEL;


CREATE INDEX CTES01 ON CLIENTES
(CTE_ALNOVA, NOMBRE, A_PATERNO, A_MATERNO)
LOGGING
NOPARALLEL;


CREATE INDEX XIE3CLIENTE_MOCTEZUMA ON CLIENTE_MOCTEZUMA
(NOMBRE)
LOGGING
NOPARALLEL;


CREATE INDEX XIE2CLIENTE_MOCTEZUMA ON CLIENTE_MOCTEZUMA
(FECHA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_ESTADO_CIVIL ON C_ESTADO_CIVIL
(FIESTCIVIL_NUM)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_ESTADO ON C_ESTADO
(FIEDOID, FIPAISID)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CODIGO_POSTAL ON C_CODIGO_POSTAL
(FCCTECP, FCCOLONIA, FIPOBID, FIEDOID, FIPAISID)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CAT_TARJETAS_MP00 ON CAT_TARJETAS_MP00
(NOMBRE)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CAT_SUCURSALES ON CAT_SUCURSALES
(PAIS, CANAL, SUCURSAL)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CATALOGO_PERFILES ON CATALOGO_PERFILES
(ID_PERFIL)
LOGGING
NOPARALLEL;


CREATE INDEX N_CANCELACIONES_XML ON CANCELACIONES_XML
(CLIENTE)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CANCELACIONES_XML ON CANCELACIONES_XML
(TARJETA, ULTIMA_MODIFICACION)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CALLCENTER_SUCURSALES ON CALLCENTER_SUCURSALES
(SUCURSAL)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CALLCENTER_MUNICIPIOS ON CALLCENTER_MUNICIPIOS
(CITY_CODE)
LOGGING
NOPARALLEL;


CREATE INDEX IDX_BIT_CTE ON BITACORA
(CLIENTE)
LOGGING
NOPARALLEL;


CREATE INDEX IDX_BITACORA ON BITACORA
(ACCION)
LOGGING
NOPARALLEL;


CREATE INDEX XIE2AGENTE_MOCTEZUMA ON AGENTE_MOCTEZUMA
(ESTATUS)
LOGGING
NOPARALLEL;


CREATE INDEX XIE1AGENTE_MOCTEZUMA ON AGENTE_MOCTEZUMA
(PASSWORD)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKAGENTE_MOCTEZUMA ON AGENTE_MOCTEZUMA
(IDAGENTE)
LOGGING
NOPARALLEL;


CREATE INDEX IDX_STA_ALN ON STATUS_TARJETA
(ID_ALNOVA, STATUS)
NOLOGGING
NOPARALLEL;


CREATE INDEX TAR_NUM_ALN ON STATUS_TARJETA
(ID_ALNOVA, ID_TARJETA)
NOLOGGING
NOPARALLEL;


CREATE INDEX IDX_TAR_ALL ON STATUS_TARJETA
(STATUS)
LOGGING
NOPARALLEL;


CREATE OR REPLACE PACKAGE         Types AS

       TYPE cursorType IS REF CURSOR;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE         S_PK_ADMON_USUARIOS AS


--SSUSTITUYE AL PK_ADMON_USUARIOS


	   	-- 1.- Consulta del catalogo de Ip's una Ip en especifico para ver si existe o no
	   	FUNCTION F_call_Existe_Ip_rs ( V_IP IN VARCHAR DEFAULT NULL ) RETURN Types.cursorType;

	   	-- 2.- Consulta del catalogo de Perfiles un nombre de Perfil en especifico para obtener su Id
	   	FUNCTION F_call_Obten_Id_perfil_rs ( V_NOM_PERFIL IN VARCHAR DEFAULT NULL ) RETURN Types.cursorType;

		-- 3.- Consulta del catalogo de Perfil todos los perfiles existentes
	   	FUNCTION F_call_Obten_Perfiles_rs RETURN TYPES.cursorType;

		-- 4.- Consulta del catalogo de Perfil POR PAIS
	   	FUNCTION F_call_Obten_Perfiles_pais_rs (VPAIS IN INTEGER) RETURN TYPES.cursorType;


		-- 5.- Consulta del status y la sesion del agente
	   	FUNCTION F_call_Obten_estatus_rs (VAGENTE IN VARCHAR2, VPAIS IN NUMBER ) RETURN TYPES.cursorType;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE SPCC_CALL_RS_TRANSACCIONES IS
   FUNCTION ACQUIR (pid IN ALNOVA_TERMINAL.ID%TYPE)  RETURN VARCHAR;
   FUNCTION RELEAS (terminal IN ALNOVA_TERMINAL.code%TYPE) RETURN VARCHAR;
END SPCC_CALL_RS_TRANSACCIONES;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE Spcc_Call_Rs_Auditoria AS

 FUNCTION OBTEN_AGENTE_RS (V_AGENTE IN VARCHAR2 DEFAULT NULL) RETURN Types.CURSORTYPE;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE SPCC_CALL_RS_AGENTES AS
     -- Obtiene los agentes de el tipo de perfil BAZ
     FUNCTION F_CALL_OBTIENEAGENTES_RS(VID_PERFIL IN NUMBER DEFAULT NULL) RETURN TYPES.CURSORTYPE;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE SPCC_CALL_RS AS

	   	-- 1.- Consulta del catalogo de Promociones por pais
	   	FUNCTION F_call_Promociones_rs(VID_PAIS IN NUMBER DEFAULT NULL) RETURN Types.cursorType;

	   	-- 2.- Consulta del catalogo de Informacioon por pais
	   	FUNCTION F_call_Informacion_rs(VID_PAIS IN NUMBER DEFAULT NULL) RETURN Types.cursorType;

	   	-- 3.- Consulta a la tabla de Agentes
	   	FUNCTION F_call_AgentesDesbloqueo_rs(VAGENTE IN VARCHAR, VID_PAIS IN NUMBER DEFAULT NULL)
			RETURN Types.cursorType;

	   	-- 4.- Consulta a la tabla de SCRIPT
	   	FUNCTION F_call_Script_rs(VID_SCRIPT IN NUMBER, VID_PAIS IN NUMBER DEFAULT NULL)
			RETURN Types.cursorType;

	   	-- 5.- Consulta a la tabla de PROMOCIONES por ACCION
	   	FUNCTION F_call_Promociones_Accion_rs(VACCION IN VARCHAR, VID_PAIS IN NUMBER DEFAULT NULL)
			RETURN Types.cursorType;

		-- 6.- Consulta de Tratamientos especiales
	   	FUNCTION F_call_Tratamientos_rs(VCRITERIO IN VARCHAR)
			RETURN Types.cursorType;

		-- 7.- Consulta de Tratamientos especiales recuperando los signos y criterios
	   	FUNCTION F_call_TratamientosCrit_rs(VCRITERIO IN VARCHAR)
			RETURN Types.cursorType;

		-- 8.- Consulta de Tratamientos especiales para saldo
	   	FUNCTION F_call_TratamientosSaldo_rs(VCRITERIO IN VARCHAR, VSIGNO IN VARCHAR)
			RETURN Types.cursorType;

		-- 9.- Consulta de IP's
	   	FUNCTION F_call_Cat_Ips_rs(VAGENTE IN VARCHAR)
			RETURN Types.cursorType;

		-- 10.- Reportes_Unificado
	   	FUNCTION F_call_Reportes_Uni_rs(VIDCLASIF IN NUMBER)
			RETURN Types.cursorType;

		-- 11.- Boletinados del sistemas
	   	FUNCTION F_call_Boletinados_rs(VCUENTA IN VARCHAR)
			RETURN Types.cursorType;

		-- 12.- Obtenemos a los agentes con ID de Perfil determinado
	   	FUNCTION F_call_AgentesPerfil_rs(VID_PERFIL IN NUMBER, VID_ESTATUS IN NUMBER)
			RETURN Types.cursorType;

		-- 13- OBTENEMOS EL ID_SESION DEL NAVEGADOR QUE SE ENCUENTRA ACTIVO EN ESA IP
	   	FUNCTION F_MANEJO_SESIONES_RS(P_IP IN VARCHAR2)
			RETURN TYPES.CURSORTYPE;

		-- 14.- Obtenemos a los agentes con ID de Perfil determinado y con ID_SEG
	   	FUNCTION F_CALL_AGENTESPERFIL_SEG_RS(VID_PERFIL IN NUMBER, VID_ESTATUS IN NUMBER, VID_SEG IN NUMBER)
			RETURN TYPES.CURSORTYPE;

		-- 15.- Obtenemos las IP's bloqueadas
	   	FUNCTION F_Call_Ips_Desbloqueo_rs RETURN TYPES.CURSORTYPE;

		-- 16.- Obtenemos agentes con id_status diferente de 5 (inhabilitado)

	   	FUNCTION F_Call_AgentesValidos_rs RETURN TYPES.CURSORTYPE;
		-- 17.- Obtenemos tarjetas del catalogo CAT_TARJETS_MPOO

	   	FUNCTION F_Call_MP00_rs RETURN TYPES.CURSORTYPE ;

		-- 18.- Evalua cadena sin numeros

	   	FUNCTION F_Call_cadena_rs (VCADENA IN VARCHAR2)
		 RETURN TYPES.CURSORTYPE ;


	    -- 19- Obtenemos cadena sin numeros ni espacios

		FUNCTION F_Call_bitacora_rs (VCLIENTE IN VARCHAR2, VPAIS IN INTEGER)
		 RETURN TYPES.CURSORTYPE ;

		-- 20- Funcion para obtener el motivo de bloqueo de cheques

		FUNCTION F_Call_cheques_rs (VCADENA IN VARCHAR2 DEFAULT NULL)
		 RETURN TYPES.CURSORTYPE ;

		 -- 21- Funcion para obtener el id_seguimiento

	   	FUNCTION  F_Call_idseg_rs (VAGENTE IN VARCHAR2, VPAIS IN INTEGER)
		 RETURN TYPES.CURSORTYPE ;

		FUNCTION F_CALL_ENCUESTA_WEB (fInicio IN VARCHAR2, fFin IN VARCHAR2)
		 RETURN TYPES.CURSORTYPE;


END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE         Pk_Morosos AS
      PROCEDURE SP_MOROSOS_POBLAR;
      PROCEDURE SP_DEPURACION;
      PROCEDURE SP_CARGAR_LLAMADAS(FILAS IN NUMBER, REG_TOTALES OUT Types.CURSORTYPE, MSG OUT VARCHAR );
      PROCEDURE SP_TIPIFICAR(V_ID_M IN NUMBER, TIPIFICACION IN NUMBER , PP IN DATE DEFAULT NULL,MSG OUT VARCHAR);
      PROCEDURE SP_AGENDAR(V_ID_M IN NUMBER,V_FECHA IN DATE, MSG OUT VARCHAR);
      


      FUNCTION F_RECUPERAR_LLAMADA(V_ID_M IN NUMBER) RETURN Types.CURSORTYPE;
      FUNCTION F_RECUPERAR_HISTORIAL(V_ID_M IN NUMBER) RETURN Types.CURSORTYPE;
      FUNCTION F_LEER_AGENDA  RETURN Types.CURSORTYPE;
	  FUNCTION F_REPORTE(F_INICIO VARCHAR, F_FIN VARCHAR) RETURN Types.CURSORTYPE;
      FUNCTION FORMATEAR_NUM(TEL VARCHAR) RETURN VARCHAR;

END Pk_Morosos;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE PK_MOCTEZUMA AS
/******************************************************************************
   NAME:       PK_MOCTEZUMA
   PURPOSE:    STORES NECESARIOS PARA ALMACENAR LA INFORMACION
			   DE LOS CLIENTES MOCTEZUMA, ASI COMO PARA EL LOGIN DE AGENTES

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        12/01/2010   JUAN EDGAR       FUNCIONES DE LOGIN E INSERCION DE DATOS
******************************************************************************/

	/*PROCEDIMIENTO ALMACENADO QUE SE ENCARGA DE AUTHENTICAR AL USUARIO DEL SISTEMA*/
	PROCEDURE SP_AUTHENTICATEUSER(U_NOMBREUSUARIO    IN  VARCHAR2,
	                        U_PASSWORD         IN  VARCHAR2,
							RESPUESTA          OUT VARCHAR2,
							PERFIL             OUT VARCHAR2);

	PROCEDURE SP_INSERTACLIENTE(I_NOMBRE IN VARCHAR2, I_APATERNO IN VARCHAR2, I_AMATERNO IN VARCHAR2,
								I_FECHA IN DATE, I_TELEFONO IN VARCHAR2, I_COLONIA IN VARCHAR2, I_OBSERVACIONES IN VARCHAR2,
								I_AGENTE IN VARCHAR2, I_USRDB IN VARCHAR2, RESPUESTA_ OUT VARCHAR2  );

END PK_MOCTEZUMA;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE Pk_Campanias AS

	   FUNCTION F_CALL_ESTADOS_RS RETURN Types.CURSORTYPE;
	   FUNCTION F_CALL_ESTADO_CIVIL_RS RETURN Types.CURSORTYPE;
	   FUNCTION F_CALL_POBLACION_BY_EDO_RS(ID_EDO IN INTEGER) RETURN Types.CURSORTYPE;
	   FUNCTION F_CALL_POBLACION_BY_ID_RS(ID_EDO IN INTEGER, ID_POB IN INTEGER ) RETURN Types.CURSORTYPE;
	   FUNCTION F_CALL_CP(ID_EDO IN INTEGER, ID_POB IN NUMBER) RETURN Types.CURSORTYPE;
	   FUNCTION F_CALL_DATA_BY_CP(CP IN VARCHAR) RETURN Types.CURSORTYPE;
	   FUNCTION F_CALL_COLONIAS_RS (ID_EDO IN INTEGER, ID_POB IN INTEGER, CP IN VARCHAR ) RETURN Types.CURSORTYPE;

END Pk_Campanias;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE         PK_ADMON_USUARIOS AS

           -- 1.- Consulta del catalogo de Ip's una Ip en especifico para ver si existe o no
           FUNCTION F_call_Existe_Ip_rs ( V_IP IN VARCHAR DEFAULT NULL ) RETURN Types.cursorType;

           -- 2.- Consulta del catalogo de Perfiles un nombre de Perfil en especifico para obtener su Id
           FUNCTION F_call_Obten_Id_perfil_rs ( V_NOM_PERFIL IN VARCHAR DEFAULT NULL ) RETURN Types.cursorType;

        -- 3.- Consulta del catalogo de Perfil todos los perfiles existentes
           FUNCTION F_call_Obten_Perfiles_rs RETURN TYPES.cursorType;

        -- 4.- Consulta del catalogo de Perfil POR PAIS
           FUNCTION F_call_Obten_Perfiles_pais_rs (VAGENTE IN VARCHAR2, VPAIS IN INTEGER) RETURN TYPES.cursorType;
        
        --5 -Consulta el perfil por usuario y pais
        FUNCTION F_Call_Obten_Perfil_Usuario(VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN INTEGER;
        
        --6 -Consulta para obtener el menu del usuario de acuerdo al perfil
        FUNCTION F_Call_Obten_Menu_Usuario(VPERFIL IN NUMBER,VAGENTE IN VARCHAR, VPAIS IN INTEGER, IS_ADMIN IN INTEGER) RETURN TYPES.cursorType;
        
        --7 -Obtiene todas las aplicaiones por pais
        FUNCTION F_Call_Obten_Aplicaciones_Pais(VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType;
        
        --8 -Inserta un nuevo aplicativo
        PROCEDURE SP_Call_Inserta_Aplicacion(VNOMBRE_APLICATIVO IN VARCHAR, VDESCRIPCION IN VARCHAR, VARCHIVO IN VARCHAR,
                                            VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR);
     
        --9     -Modifica la descripcion o el nombre de la jsp de una Aplicacion
        PROCEDURE SP_Call_Modifica_Aplicacion(IDAPLICACION IN NUMBER, VNOMBRE IN VARCHAR, VDESCRIPCION IN VARCHAR,VARCHIVO IN VARCHAR, VAGENTE IN VARCHAR,
                                              VPAIS IN INTEGER, RESULTADO OUT VARCHAR);        
        
        --10 -Elimina la aplicacion seleccionada
        PROCEDURE SP_Call_Elimina_Aplicacion(IDAPLICACION IN NUMBER, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR);
        
        --11 -Obtiene todos los grupos por Pais
        FUNCTION F_Call_Obten_Grupos_Pais(VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType;    
        
        --12 -Obten Aplicaiones que pertenecen al grupo
        FUNCTION F_Call_Obten_Aplicaciones_Gpo(IDGRUPO IN VARCHAR,VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType;        
        
        --13 -Inserta grupo Nuevo
        PROCEDURE SP_Call_Inserta_Gpo(NOMBRE_GPO IN VARCHAR, DESCRIPCION IN VARCHAR,APLICACIONES IN VARCHAR,VAGENTE IN VARCHAR, 
                                      VPAIS IN INTEGER, RESULTADO OUT VARCHAR);                     

        --14 -Modifica las características del grupo 
        PROCEDURE SP_Call_Modifica_Gpo(ID_GPO IN VARCHAR, PDESCRIPCION IN VARCHAR, APLICACIONES IN VARCHAR, VAGENTE IN VARCHAR,
                                       VPAIS IN INTEGER, RESULTADO OUT VARCHAR);                                                                                                                 

        --15 -Elimina el grupo seleccionado
        PROCEDURE SP_Call_Elimina_Grupo(IDGRUPO IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR);

        --16 -Obtiene Aplicaiones que pertenecen al perfil
        FUNCTION F_Call_Obten_App_Perfil(IDPERFIL IN VARCHAR,VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType;

        --17 -Inserta perfil Nuevo
        PROCEDURE SP_Call_Inserta_Perfil(NOMBRE_PERFIL IN VARCHAR, PDESCRIPCION IN VARCHAR,IDGRUPO IN VARCHAR2, APLICACIONES IN VARCHAR,VAGENTE IN VARCHAR, 
                                      VPAIS IN INTEGER, RESULTADO OUT VARCHAR);

        --18 -Modifica las características del grupo 
        PROCEDURE SP_Call_Modifica_Perfil(IDPERFIL IN VARCHAR, PDESCRIPCION IN VARCHAR, IDGRUPO IN VARCHAR2, APLICACIONES IN VARCHAR, 
                                          VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR);

        --19 -Elimina el perfil seleccionado
        PROCEDURE SP_Call_Elimina_Perfil(IDPERFIL IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR);

        
        --20 -Obtiene Usuarios que pertenecen al perfil
        FUNCTION F_Call_Obten_Usrs_Perfil(IDPERFIL IN VARCHAR,VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType;

        --21 -Obtiene Perfiles que pertenecen al grupo
        FUNCTION F_Call_Obten_Perfil_Gpo(IDGRUPO IN VARCHAR,VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType;

        --22 -Obtiene Usuarios que pertenecen al pais
        FUNCTION F_Call_Obten_Usuarios_Pais( VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType;

        --23     -Inserta un usuario
        PROCEDURE SP_Call_Inserta_Usuario(IDAGENTE IN VARCHAR2, IDPERFIL IN VARCHAR, PNOMBRE IN VARCHAR, PAPATERNO IN VARCHAR2, 
                                              PAMATERNO IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR);
                                            
        --24     -Modifica un usuario
        PROCEDURE SP_Call_Modifica_Usuario(IDAGENTE IN VARCHAR2, IDPERFIL IN VARCHAR, PNOMBRE IN VARCHAR, PAPATERNO IN VARCHAR2, 
                                              PAMATERNO IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR);

        --25     -Elimina un usuario
        PROCEDURE SP_Call_Elimina_Usuario(IDAGENTE IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR);
        
END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE         pck_dsi IS

-- Para obtener usuarios
PROCEDURE dsi_callcen_usuarios( p_cursor OUT sys_refcursor );

-- Para obtener perfiles asociados a cada usuario
PROCEDURE dsi_callcen_perfiles( p_cursor OUT sys_refcursor );


-- Para obtener el catalogo de perfiles
PROCEDURE dsi_callcen_catprf( p_cursor OUT sys_refcursor);

END pck_dsi;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE CTEUNICO AS
/******************************************************************************
   NAME:       CTEUNICO
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        25/02/2009             1. Created this package.
******************************************************************************/

  FUNCTION SPSELAHRCLIENTEAHORRO(v_alnova IN VARCHAR) RETURN Types.CURSORTYPE;


END CTEUNICO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE AUDITORIA_BD AS
/******************************************************************************
   NAME:       AUDITORIA_BD
   PURPOSE:    RECUPERAR LA INFORMACION NECESARIA PARA LA CONSULTA DE LA
               INFORMACION REQUERIDA POR EL PERSONAL DE AUDITORIA DEL UNIFICADO

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        26/03/2009   JUAN EDGAR       FUNCIONES CONSULTA DATOS PARA AUD.          
******************************************************************************/

  FUNCTION F_GET_AGENTES RETURN Types.CURSORTYPE;
  FUNCTION F_GET_AGENTE_ID(V_ID_AGENTE VARCHAR2) RETURN Types.CURSORTYPE;
  FUNCTION F_GET_AGENTE(V_NOMBRE VARCHAR2, V_AP VARCHAR2, V_AM VARCHAR2) RETURN Types.CURSORTYPE;
  FUNCTION F_ACCIONES_AGENTE(V_AGENTE VARCHAR2, V_PAIS VARCHAR2, V_INI VARCHAR2, V_FIN VARCHAR2) RETURN Types.CURSORTYPE;  
  FUNCTION F_ACCIONES_AGENTES(V_PAIS VARCHAR2, V_INI VARCHAR2, V_FIN VARCHAR2) RETURN Types.CURSORTYPE;
  FUNCTION F_PAISES RETURN Types.CURSORTYPE;

END AUDITORIA_BD;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY Types AS

END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY         S_PK_ADMON_USUARIOS AS

		-- 1.- Consulta del catalogo de Ip's una Ip en especifico para ver si existe o no
	   	FUNCTION F_call_Existe_Ip_rs ( V_IP IN VARCHAR DEFAULT NULL ) RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
				IF V_IP IS NULL THEN
     			   OPEN cur FOR
					  	SELECT NVL(S.AGENTE,'NULO') AS EXISTE
					  	FROM CALLCEN.CAT_IPS S
						WHERE S.IP IS NULL;
				   RETURN cur;
				   CLOSE cur;
			    ELSE
					OPEN cur FOR
					  	SELECT NVL(S.AGENTE,'NULO') AS EXISTE
					  	FROM CALLCEN.CAT_IPS S
					  	WHERE TRIM(S.IP) = TRIM(V_IP);
				   RETURN cur;
				   CLOSE cur;
				END IF;

		END F_call_Existe_Ip_rs;


		-- 2.- Consulta del catalogo de Perfiles un nombre de Perfil en especifico para obtener su Id
	   	FUNCTION F_call_Obten_Id_perfil_rs ( V_NOM_PERFIL IN VARCHAR DEFAULT NULL ) RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
				 IF V_NOM_PERFIL IS NULL THEN
				 	OPEN cur FOR
					  	 SELECT P.ID_PERFIL
					  	 FROM CALLCEN.CATALOGO_PERFILES P
					  	 WHERE P.PERFIL IS NULL;
				    RETURN cur;
					CLOSE cur;
				 ELSE
				 	 OPEN cur FOR
					  	  SELECT P.ID_PERFIL
					  	  FROM CALLCEN.CATALOGO_PERFILES P
					  	  WHERE TRIM( UPPER(P.PERFIL) ) = TRIM( UPPER(V_NOM_PERFIL) );
					 RETURN cur;
					 CLOSE cur;
				 END IF;

		END F_call_Obten_Id_perfil_rs;

		-- 3.- Consulta del catalogo de Perfil todos los perfiles existentes
	   	FUNCTION F_call_Obten_Perfiles_rs RETURN TYPES.cursorType IS

			cur Types.cursorType;
			BEGIN
				 OPEN cur FOR
				 	  SELECT TRIM( UPPER(P.PERFIL) ) AS PERFIL
					  FROM CALLCEN.CATALOGO_PERFILES P
					  ORDER BY P.ID_PERFIL;
				 RETURN cur;
				 CLOSE cur;

		END F_call_Obten_Perfiles_rs;


		-- 4.- Consulta del catalogo de Perfil POR PAIS

		FUNCTION F_call_Obten_Perfiles_pais_rs (VPAIS IN INTEGER) RETURN TYPES.cursorType IS

			cur Types.cursorType;
			BEGIN
				 OPEN cur FOR
				 	 SELECT DISTINCT TRIM( UPPER(P.PERFIL) ) AS PERFIL, P.ID_PERFIL
					 FROM CALLCEN.CATALOGO_PERFILES P, CALLCEN.AGENTES A
					 WHERE P.ID_PERFIL = A.ID_PERFIL
					 AND A.ID_PAIS = VPAIS
					 AND A.ID_ESTATUS <> 5
					 ORDER BY TRIM( UPPER(P.PERFIL) );

		 /*
		   INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'FUNCION','F_call_Obten_Perfiles_pais_rs','PAIS'||VPAIS,SYSDATE ,'FUNCION');

		  commit;

			*/
				 RETURN cur;
				 CLOSE cur;


		END F_call_Obten_Perfiles_pais_rs;


		-- 5.- Consulta del status y la sesion del agente

		FUNCTION F_call_Obten_estatus_rs (VAGENTE IN VARCHAR2, VPAIS IN NUMBER ) RETURN TYPES.cursorType IS

			cur Types.cursorType;
			BEGIN
				 OPEN cur FOR
				 	 SELECT ID_ESTATUS, SESION
					 FROM CALLCEN.AGENTES
					 WHERE Agente = VAGENTE
					 AND ID_PAIS = VPAIS;

				 RETURN cur;
				 CLOSE cur;


		END F_call_Obten_estatus_rs;







END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY SPCC_CALL_RS_TRANSACCIONES AS


FUNCTION ACQUIR (pid IN ALNOVA_TERMINAL.ID%TYPE) RETURN VARCHAR IS
   terminal ALNOVA_TERMINAL.code%TYPE;

BEGIN
   SELECT code INTO terminal
   FROM ALNOVA_TERMINAL
   WHERE ID =pid
   AND BUSY=0
   FOR UPDATE;

   UPDATE ALNOVA_TERMINAL
   SET busy=1
   WHERE code=terminal;
   COMMIT;

   RETURN terminal;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       terminal:='C';
	   RETURN terminal;
     WHEN OTHERS THEN
	   ROLLBACK;
       terminal:=NULL;
	   RETURN terminal;
END ACQUIR;


FUNCTION RELEAS (terminal IN ALNOVA_TERMINAL.code%TYPE) RETURN VARCHAR IS
     resultado VARCHAR2(10):='Exitosa';
BEGIN
     UPDATE ALNOVA_TERMINAL
	 SET busy=0
	 WHERE code=terminal;
	 COMMIT;

	 RETURN resultado;
	 EXCEPTION
       WHEN OTHERS THEN
	     ROLLBACK;
         resultado:=NULL;
		 RETURN resultado;
END RELEAS;


END SPCC_CALL_RS_TRANSACCIONES;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY SPCC_CALL_RS_AUDITORIA AS
 /* OBTIENE EL NOMBRE COMPLETO DEL AGENTE */
 FUNCTION OBTEN_AGENTE_RS (V_AGENTE IN VARCHAR2 DEFAULT NULL) RETURN TYPES.CURSORTYPE IS CUR Types.cursorType;
   BEGIN
      OPEN CUR FOR

		SELECT A.NOMBRE, A.APATERNO, A.AMATERNO
		FROM AGENTES A
		WHERE A.AGENTE = V_AGENTE;


      RETURN CUR;
    END OBTEN_AGENTE_RS;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY Spcc_Call_Rs_Agentes AS
  -- Obtiene los agentes de el tipo de perfil BAZ
     FUNCTION F_CALL_OBTIENEAGENTES_RS(VID_PERFIL IN NUMBER DEFAULT NULL) RETURN Types.CURSORTYPE IS CUR Types.CURSORTYPE;
   BEGIN
        OPEN cur FOR

         SELECT AGENTE FROM AGENTES A WHERE A.ID_PERFIL = VID_PERFIL;

       RETURN cur;
   CLOSE cur;
  END F_CALL_OBTIENEAGENTES_RS;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY         SPCC_CALL_RS AS

		-- 1.- Consulta del catalogo de Promociones por pais
	   	FUNCTION F_call_Promociones_rs(VID_PAIS IN NUMBER DEFAULT NULL) RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					  SELECT * FROM PROMOCIONES WHERE ID_PAIS = VID_PAIS ORDER BY ACCION;
					  RETURN cur;
			CLOSE cur;

		END F_call_Promociones_rs;


		-- 2.- Consulta del catalogo de Promociones por pais
	   	FUNCTION F_call_Informacion_rs(VID_PAIS IN NUMBER DEFAULT NULL) RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					  SELECT * FROM INFORMACION WHERE ID_PAIS = VID_PAIS;
					  RETURN cur;
			CLOSE cur;

		END F_call_Informacion_rs;

		-- 3.- Consulta del catalogo de Agentes
	   	FUNCTION F_call_AgentesDesbloqueo_rs(VAGENTE IN VARCHAR, VID_PAIS IN NUMBER DEFAULT NULL)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR
					SELECT * FROM Agentes
						WHERE AGENTE <> VAGENTE
						AND ID_PAIS = VID_PAIS
						AND ID_ESTATUS IN (2,9)--NOT IN (0, 5)
						ORDER BY AGENTE;

					RETURN cur;

		END F_call_AgentesDesbloqueo_rs;

	   	-- 4.- Consulta a la tabla de SCRIPT
	   	FUNCTION F_call_Script_rs(VID_SCRIPT IN NUMBER, VID_PAIS IN NUMBER DEFAULT NULL)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR
					SELECT * FROM SCRIPT
						WHERE ID_SCRIPT = VID_SCRIPT
						AND ID_PAIS = VID_PAIS
						ORDER BY id_pais, id_script;

					RETURN cur;

		END F_call_Script_rs;

		-- 5.- Consulta del catalogo de Promociones por pais
	   	FUNCTION F_call_Promociones_Accion_rs(VACCION IN VARCHAR, VID_PAIS IN NUMBER DEFAULT NULL)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					  SELECT * FROM PROMOCIONES WHERE ACCION = VACCION
					  		AND ID_PAIS = VID_PAIS ORDER BY ACCION;
					  RETURN cur;

		END F_call_Promociones_Accion_rs;

		-- 6.- Consulta de Tratamientos especiales
	   	FUNCTION F_call_Tratamientos_rs(VCRITERIO IN VARCHAR)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					SELECT * FROM TRATAMIENTOS_ESPECIALES ESP
					Inner Join CATALOGO_TRATAMIENTOS CAT
					ON ESP.NOMBRE_TRATAMIENTO = CAT.NOMBRE_TRATAMIENTO
					WHERE ( TRIM(ESP.CRITERIO)=TRIM(VCRITERIO) ) AND (TRUNC(SYSDATE) BETWEEN ESP.FECHA_INICIO AND ESP.FECHA_FIN);


					  RETURN cur;

		END F_call_Tratamientos_rs;

		-- 7.- Consulta de Tratamientos especiales
	   	FUNCTION F_call_TratamientosCrit_rs(VCRITERIO IN VARCHAR)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					SELECT * FROM TRATAMIENTOS_ESPECIALES WHERE NOMBRE_TRATAMIENTO=VCRITERIO;


					  RETURN cur;
		END F_call_TratamientosCrit_rs;


		-- 8.- Consulta de Tratamientos especiales para saldo
	   	FUNCTION F_call_TratamientosSaldo_rs(VCRITERIO IN VARCHAR, VSIGNO IN VARCHAR)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					SELECT * FROM TRATAMIENTOS_ESPECIALES WHERE NOMBRE_TRATAMIENTO = VCRITERIO;

					  RETURN cur;
		END F_call_TratamientosSaldo_rs;


		-- 9.- Consulta de IP's
	   	FUNCTION F_call_Cat_Ips_rs(VAGENTE IN VARCHAR)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					SELECT * FROM CAT_IPS WHERE AGENTE = VAGENTE;

					  RETURN cur;
		END F_call_Cat_Ips_rs;


		-- 10.- Reportes_Unificado
	   	FUNCTION F_call_Reportes_Uni_rs(VIDCLASIF IN NUMBER)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					SELECT * FROM REPORTES_UNIFICADO WHERE ID_CLASIFICACION = VIDCLASIF ORDER BY NOMBRE_REPORTE;

					  RETURN cur;
		END F_call_Reportes_Uni_rs;

		-- 11.- Boletinados del sistemas
	   	FUNCTION F_call_Boletinados_rs(VCUENTA IN VARCHAR)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					SELECT CAT.id_motivo_boletinado, CAT.descripcion_boletinado
					FROM BOLETINADOS BOL INNER JOIN CATALOGO_MOTIVOS_BOLETINADOS CAT
					ON BOL.id_motivo_boletinado = CAT.id_motivo_boletinado
					WHERE (BOL.cuenta = VCUENTA) AND (TRUNC(SYSDATE) BETWEEN BOL.fecha_inicio AND BOL.fecha_baja);

					  RETURN cur;
		END F_call_Boletinados_rs;

		-- 12.- Obtenemos a los agentes con ID de Perfil determinado
	   	FUNCTION F_call_AgentesPerfil_rs(VID_PERFIL IN NUMBER, VID_ESTATUS IN NUMBER)
			RETURN Types.cursorType IS

			cur Types.cursorType;
			BEGIN
     			OPEN cur FOR

					SELECT A.AGENTE FROM AGENTES A
					WHERE A.ID_PERFIL = VID_PERFIL
					AND A.ID_ESTATUS <> VID_ESTATUS
					ORDER BY A.AGENTE;

					  RETURN cur;
		END F_call_AgentesPerfil_rs;


		-- 13.- OBTENEMOS EL ID_SESION DEL NAVEGADOR ACTIVO EN ESA IP
		FUNCTION F_MANEJO_SESIONES_RS(P_IP IN VARCHAR2)
			RETURN Types.cursorType IS

			CUR TYPES.CURSORTYPE;
			BEGIN
     			OPEN CUR FOR

					SELECT SESION
					FROM CAT_IPS
					WHERE IP = P_IP;

				RETURN CUR;
		END F_MANEJO_SESIONES_RS;

		-- 14.- Obtenemos a los agentes con ID de Perfil determinado y con ID_SEG
	   	FUNCTION F_CALL_AGENTESPERFIL_SEG_RS(VID_PERFIL IN NUMBER, VID_ESTATUS IN NUMBER, VID_SEG IN NUMBER) RETURN TYPES.CURSORTYPE IS

			CUR TYPES.CURSORTYPE;
			BEGIN
     			OPEN CUR FOR

					SELECT A.AGENTE FROM AGENTES A
					WHERE A.ID_PERFIL = VID_PERFIL
					AND A.ID_ESTATUS <> VID_ESTATUS
					AND A.ID_SEG = VID_SEG
					ORDER BY A.AGENTE;

					  RETURN CUR;
		END F_CALL_AGENTESPERFIL_SEG_RS;

		-- 15.- Obtenemos las IP's bloqueadas
	   	FUNCTION F_Call_Ips_Desbloqueo_rs RETURN TYPES.CURSORTYPE IS

			CUR TYPES.CURSORTYPE;
			BEGIN
     			OPEN CUR FOR

					SELECT DISTINCT I.IP
					FROM CAT_IPS I
					WHERE I.ID_ESTATUS = 2
					ORDER BY IP;

				RETURN CUR;
				CLOSE CUR;

		END F_Call_Ips_Desbloqueo_rs;


		-- 16.- Obtenemos agentes con id_status diferente de 5 (inhabilitado)

	   	FUNCTION F_Call_AgentesValidos_rs RETURN TYPES.CURSORTYPE IS

			CUR TYPES.CURSORTYPE;
			BEGIN
     			OPEN CUR FOR
					SELECT DISTINCT A.AGENTE
					FROM AGENTES A
					WHERE A.ID_ESTATUS <> 5
					AND A.AGENTE<>'TODOS'
					ORDER BY A.AGENTE;

				RETURN CUR;
				CLOSE CUR;

		END F_Call_AgentesValidos_rs;
		-- 17.- Obtenemos tarjetas del catalogo CAT_TARJETS_MPOO

	   	FUNCTION F_Call_MP00_rs  RETURN TYPES.CURSORTYPE IS

		CUR TYPES.CURSORTYPE;
			BEGIN
     			OPEN CUR FOR
					SELECT * FROM
					CAT_TARJETAS_MP00;
				RETURN CUR;
				CLOSE CUR;

		END F_Call_MP00_rs;



		-- 18- Obtenemos cadena sin numeros ni espacios

	   	FUNCTION F_Call_cadena_rs (VCADENA IN VARCHAR2) RETURN TYPES.CURSORTYPE IS

			CUR TYPES.CURSORTYPE;
				BEGIN
     			OPEN CUR FOR
					SELECT * FROM
					CAT_TARJETAS_MP00;
				RETURN CUR;
				CLOSE CUR;

		END F_Call_cadena_rs;


		-- 19- Obtenemos cadena sin numeros ni espacios

	   	FUNCTION F_Call_bitacora_rs (VCLIENTE IN VARCHAR2, VPAIS IN INTEGER) RETURN TYPES.CURSORTYPE IS


			CUR TYPES.CURSORTYPE;
				BEGIN
     			OPEN CUR FOR

    				SELECT  C.CUENTA ,C.ACCION,C.PRODUCTO,TO_CHAR(FECHA,'DD/MM/YYYY') AS FECHA, C.HORA , C.AGENTE
					  FROM  (SELECT CUENTA, B.ACCION, PRODUCTO, FECHA, HORA, AGENTE
	        				   FROM BITACORA A, CATALOGO_ACCIONES B
	        				  WHERE TO_CHAR(A.ACCION) =	TO_CHAR(B.ID_ACCION)
	        				    AND A.ACCION IS NOT NULL
	        				    AND A.CLIENTE=VCLIENTE
	        				    AND A.ID_PAIS=VPAIS
	        			   ORDER BY FECHA DESC,HORA DESC) C
				     WHERE ROWNUM<=3		
				  ORDER BY FECHA,HORA ASC;

				RETURN CUR;
				CLOSE CUR;

	END F_Call_bitacora_rs;

		-- 20.- Funcion para obtener el motivo de bloqueo de cheques

	   	FUNCTION F_Call_cheques_rs (VCADENA IN VARCHAR2 DEFAULT NULL) RETURN TYPES.CURSORTYPE IS

			CUR TYPES.CURSORTYPE;

			BEGIN


					 IF VCADENA LIKE '%CERTIFICA%' THEN

					 OPEN CUR FOR

    					  SELECT DISTINCT A.ID_MOTIVO,A.MOTIVO, A.LEYENDA
    					  FROM CAT_OPCION_BLOQUEO_CH A
    					  WHERE A.USAR = 1
    					  AND ID_MOTIVO IN ('9','O','P')
    					  ORDER BY A.ID_MOTIVO;

					  RETURN CUR;
					  CLOSE CUR;
					ELSE

					 OPEN CUR FOR

						  SELECT DISTINCT A.ID_MOTIVO,A.MOTIVO, A.LEYENDA
    					  FROM CAT_OPCION_BLOQUEO_CH A
    					  WHERE A.USAR = 1
    					  AND ID_MOTIVO NOT IN ('9','O','P','I','1','4')
    					  ORDER BY A.ID_MOTIVO;

					 RETURN CUR;
					 CLOSE CUR;
					END IF;
				END F_Call_cheques_rs;

-- 21- Funcion para obtener el id_seguimiento

	   	FUNCTION  F_Call_idseg_rs (VAGENTE IN VARCHAR2, VPAIS IN INTEGER ) RETURN TYPES.CURSORTYPE IS

			CUR TYPES.CURSORTYPE;
			BEGIN

				OPEN CUR FOR

				 SELECT ID_SEG, ID_PERFIL FROM AGENTES
				 WHERE TRIM(AGENTE) = TRIM(VAGENTE)
				 AND ID_PAIS=VPAIS
				 AND ID_ESTATUS NOT IN (4,5,9);

				 RETURN CUR;
				 CLOSE CUR;

		END F_Call_idseg_rs;

-- Funcion que se engarga de recuperer los resultados de encuesta WEB y mandarlos como respuesta

		 FUNCTION F_CALL_ENCUESTA_WEB (fInicio IN VARCHAR2, fFin IN VARCHAR2) RETURN TYPES.CURSORTYPE IS


			CUR TYPES.CURSORTYPE;
				BEGIN
     			OPEN CUR FOR

				SELECT FOLIO,TIPO_CTE,NOMBRE,TELEFONO,LADA,CORREO,FECHA,RES1A,
					(SELECT	RESPUESTA
					 FROM 	CAT_ENCUESTAS
					 WHERE 	RES1A=ID_RES) AS RES1PRUEBA,
					 RES2A,
					 (SELECT RESPUESTA
					  FROM  CAT_ENCUESTAS
					  WHERE RES2A=ID_RES) AS RES2PRUEBA, RES3A,RES4A
				FROM ENCUESTAEMAIL
				WHERE TRUNC(FECHA) BETWEEN  ( TRUNC( TO_DATE(fInicio,'DD/MM/YYYY') ) )
						   AND      ( TRUNC( TO_DATE( fFin  ,'DD/MM/YYYY') ) )
				ORDER BY FOLIO;


				RETURN CUR;
				CLOSE CUR;

		END F_CALL_ENCUESTA_WEB;


END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY         Pk_Morosos AS

       /********************************************************************************************************/

	   PROCEDURE SP_MOROSOS_POBLAR IS
		  error_origen VARCHAR2(80);
		  codigo_error VARCHAR2(250);

		  CURSOR ACTUALIZAR IS
		     SELECT Y.ID_M
		       FROM CALLCEN.M_LLAMADAS Y , CALLCEN.M_TMP X
		      WHERE Y.NOMBRE = X.NOMBRE (+)
		        AND Y.TELEFONO = X.TELEFONO (+)
		        AND Y.TIPO_PROD = X.TIPO_PROD (+)
		        AND X.TIPO_PROD IS NULL
				AND Y.LLAMAR = 'SI';

		CURSOR ACTUALIZAR_ADEUDO IS
		     SELECT X.NOMBRE,X.TELEFONO,X.TIPO_PROD,X.ADEUDO,X.IMP_MINIMO ,X.RETRASOS
                 FROM CALLCEN.M_TMP  X, CALLCEN.M_LLAMADAS Y
             WHERE X.NOMBRE = Y.NOMBRE
                    AND X.TELEFONO = Y.TELEFONO
                    AND X.TIPO_PROD = Y.TIPO_PROD
                    AND X.ADEUDO <> Y.ADEUDO;


		BEGIN
		 --ACTUALIZAR REGISTROS, SON PERSONAS QUE YA PAGARON SU ADEUDO

		   FOR REG IN ACTUALIZAR LOOP
		      BEGIN
			      error_origen := 'Error al actualizar la tabla M_LLAMADAS';
				  UPDATE CALLCEN.M_LLAMADAS
				     SET LLAMAR = 'NO'
				   WHERE ID_M = REG.ID_M;


				  error_origen := 'Error al insertar en la tabla M_HISTORICO';
				  INSERT INTO CALLCEN.M_HISTORICO (ID_M,FECHALLAMADA,TIPIFICACION)
				       VALUES (REG.ID_M,TRUNC(SYSDATE),9);
				  COMMIT;

				  error_origen := 'Borrar de la agenda la persona que ya pago';

				  DELETE CALLCEN.M_AGENDA
				  WHERE  CALLCEN.M_AGENDA.ID_M=REG.ID_M;
				  COMMIT;

		      END;
		   END LOOP;

		   FOR D IN ACTUALIZAR_ADEUDO LOOP
		      BEGIN
			    error_origen :='Error al actualizar la tabla M_LLAMADAS campo ADEUDO';
				UPDATE CALLCEN.M_LLAMADAS
				   SET ADEUDO = D.ADEUDO,
				       IMP_MINIMO = D.IMP_MINIMO,
					   RETRASOS = D.RETRASOS
				 WHERE NOMBRE = D.NOMBRE
				   AND TELEFONO = D.TELEFONO
				   AND TIPO_PROD = D.TIPO_PROD;

				COMMIT;

			  END;
		   END LOOP;


		  --INSERTA REGISTROS NUEVOS A LA TABLA M_LLAMADAS
		  error_origen := 'Error al insertar registros nuevos en la tabla M_LLAMADAS';

		   INSERT INTO CALLCEN.M_LLAMADAS (ID_M,NOMBRE,LADA,TELEFONO,EXTENSION,TIPO_PROD,RETRASOS,ADEUDO,IMP_MINIMO,LLAMAR,LLAMAR_HOY)
		     	SELECT CALLCEN.SEQ_MOROSOS.NEXTVAL,X.NOMBRE,X.LADA,X.TELEFONO,X.EXTENSION,X.TIPO_PROD,X.RETRASOS,X.ADEUDO,X.IMP_MINIMO,'SI','SI'
		          FROM CALLCEN.M_TMP X, CALLCEN.M_LLAMADAS Y
		         WHERE X.NOMBRE = Y.NOMBRE (+)
		           AND X.TELEFONO = Y.TELEFONO (+)
		           AND X.TIPO_PROD = Y.TIPO_PROD (+)
		           AND Y.TIPO_PROD IS NULL;
		    COMMIT;

			-- insertar los registros si el cliente ya habia pagado y cayo en morosidad de nuevo

			error_origen := 'Error al insertar registros de cliente que entraron en morosidad de nuevo.';

			INSERT INTO CALLCEN.M_LLAMADAS (ID_M,NOMBRE,LADA,TELEFONO,EXTENSION,TIPO_PROD,RETRASOS,ADEUDO,IMP_MINIMO,LLAMAR,LLAMAR_HOY)
				 SELECT CALLCEN.SEQ_MOROSOS.NEXTVAL,X.NOMBRE,X.LADA,X.TELEFONO,X.EXTENSION,X.TIPO_PROD,X.RETRASOS,X.ADEUDO,X.IMP_MINIMO,'SI','SI'
		           FROM CALLCEN.M_TMP X,(  SELECT LL.NOMBRE, LL.TELEFONO,LL.TIPO_PROD
												   FROM (
												   		  SELECT H.ID_M H_ID
												   		    FROM CALLCEN.M_HISTORICO H
												   		   WHERE H.TIPIFICACION=9
														),
														CALLCEN.M_LLAMADAS LL
												  WHERE H_ID=LL.ID_M
				  							   ) Y
		         WHERE X.NOMBRE    = Y.NOMBRE    (+)
		           AND X.TELEFONO  = Y.TELEFONO  (+)
		           AND X.TIPO_PROD = Y.TIPO_PROD (+)
		           AND Y.TIPO_PROD IS NOT NULL;
			COMMIT;

			--BORRA REGISTROS
			error_origen := 'Error al borrar registros de la tabla M_AGENDA';

			DELETE CALLCEN.M_AGENDA
			WHERE TRUNC(FECHA) <= TRUNC(SYSDATE);
			COMMIT;

			error_origen := 'Error al actualizar la tabla M_LLAMDAS';

			UPDATE CALLCEN.M_LLAMADAS LL
			SET LL.LLAMAR_HOY='SI';
			COMMIT;

			--VALIDA EL NUMERO DE TELEFONO DEL CLIENTE
			error_origen := 'Error al insertar en la tabla M_HISTORICO valida telefono';

            INSERT INTO CALLCEN.M_HISTORICO (ID_M,FECHALLAMADA,TIPIFICACION)
			           SELECT ID_M,TRUNC(SYSDATE-1),11
				          FROM CALLCEN.M_LLAMADAS
				     WHERE LLAMAR = 'SI'
			                AND NVL(LENGTH(TRIM(TELEFONO)),0) < 8;


			 error_origen := 'Error al actualizar la tabla M_LLAMADAS valida telefono';

			UPDATE CALLCEN.M_LLAMADAS
			         SET LLAMAR = 'NO'
			 WHERE LLAMAR = 'SI'
			        AND NVL(LENGTH(TRIM(TELEFONO)),0) < 8;

		    COMMIT;

		   EXCEPTION
		      WHEN OTHERS THEN
			  ROLLBACK;
              codigo_error := SUBSTR(SQLERRM, 1 , 250);

			  INSERT INTO CALLCEN.M_BIT
			       VALUES ('SP_MOROSOS_POBLAR',error_origen,codigo_error,SYSDATE);
			  COMMIT;



		END SP_MOROSOS_POBLAR;

 /********************************************************************************************************/
        PROCEDURE SP_DEPURACION IS
            CURSOR CURSOR_T IS
                SELECT * FROM M_TMP;
            TMP VARCHAR(30);
            TMP2 VARCHAR(30);
        BEGIN
            FOR CUR IN CURSOR_T LOOP
                TMP:=FORMATEAR_NUM(CUR.ADEUDO);
                TMP2:=FORMATEAR_NUM(CUR.IMP_MINIMO);
              
                UPDATE M_TMP SET ADEUDO=TMP,IMP_MINIMO=TMP2,TELEFONO=TRIM(REPLACE(CUR.TELEFONO,'-'))
                WHERE NOMBRE=CUR.NOMBRE AND  ADEUDO=CUR.ADEUDO AND  TELEFONO=TELEFONO AND  TIPO_PROD=CUR.TIPO_PROD;
                COMMIT;
		    END LOOP;
		
		    UPDATE M_TMP SET NOMBRE=TRIM(NOMBRE),TELEFONO=NVL(TRIM(TELEFONO),'0'),TIPO_PROD=NVL(TRIM(TIPO_PROD),'SIN ESPECIFICAR');
		    COMMIT;
	    
        END SP_DEPURACION;
 /*******************************************************************************************************/           
	   PROCEDURE SP_CARGAR_LLAMADAS(FILAS IN NUMBER, REG_TOTALES OUT Types.CURSORTYPE, MSG OUT VARCHAR ) IS

		CURSOR ACTUALIZAR IS
		   SELECT ID_M,NOMBRE,LADA,TELEFONO,EXTENSION,TIPO_PROD, RETRASOS,ADEUDO,IMP_MINIMO
				  FROM CALLCEN.M_LLAMADAS LLAMADAS
				 WHERE LLAMADAS.LLAMAR='SI'
				   AND LLAMADAS.LLAMAR_HOY='SI'
				   AND (LLAMADAS.ID_M
				   	   		NOT IN (
				 	 		    SELECT AGENDA.ID_M
								  FROM CALLCEN.M_AGENDA AGENDA
								 WHERE AGENDA.FECHA >= SYSDATE
								 UNION
								SELECT H.ID_M
								  FROM CALLCEN.M_HISTORICO H
								 WHERE H.FECHA_P_P >= TRUNC(SYSDATE)
				  	 		)
						)
					AND ROWNUM <= FILAS;

		BEGIN
			  OPEN REG_TOTALES FOR
			  SELECT ID_M,NOMBRE,LADA,TELEFONO,EXTENSION,TIPO_PROD, RETRASOS,ADEUDO,IMP_MINIMO
				  FROM CALLCEN.M_LLAMADAS LLAMADAS
				 WHERE LLAMADAS.LLAMAR='SI'
				   AND LLAMADAS.LLAMAR_HOY='SI'
				   AND (LLAMADAS.ID_M
				   	   		NOT IN (
				 	 		    SELECT AGENDA.ID_M
								  FROM CALLCEN.M_AGENDA AGENDA
								 WHERE AGENDA.FECHA >= SYSDATE
								 UNION
								SELECT H.ID_M
								  FROM CALLCEN.M_HISTORICO H
								 WHERE H.FECHA_P_P > TRUNC(SYSDATE-1)
				  	 		)
						)
					AND ROWNUM <= FILAS;


			  -- SE ACTUALIZAN LOS REGISTROS COMO TOMADOS EL DIA DE HOY
			  FOR REG IN ACTUALIZAR LOOP
			  	  UPDATE CALLCEN.M_LLAMADAS LLAMADAS
				     SET LLAMADAS.LLAMAR_HOY='NO'
				   WHERE LLAMADAS.ID_M=REG.ID_M;
				   COMMIT;
			  END LOOP;

			  MSG:='OK. OPERACION EFECTUADA CON EXITO';

		EXCEPTION
				WHEN OTHERS THEN
					 MSG:='ERROR. '||SQLERRM;

		END SP_CARGAR_LLAMADAS;

		/********************************************************************************************************/

		PROCEDURE SP_TIPIFICAR(V_ID_M IN NUMBER, TIPIFICACION IN NUMBER , PP IN DATE DEFAULT NULL,MSG OUT VARCHAR) IS

		 BEGIN

			  INSERT INTO CALLCEN.M_HISTORICO
			  VALUES (V_ID_M,SYSDATE, TIPIFICACION, PP);
			  COMMIT;

			  -- si es una de las isguiqntes tipificaciones, no se marca de nuevo al cliente
			 IF(TIPIFICACION=1 OR TIPIFICACION=4 OR
			    TIPIFICACION=5 OR TIPIFICACION=6 ) THEN

				UPDATE CALLCEN.M_LLAMADAS
				   SET LLAMAR='NO'
				 WHERE ID_M=V_ID_M;
				 COMMIT;

			 END IF;

			  MSG:='OK. OPERACION EFECTUADA CON EXITO';

		 EXCEPTION
		 		  WHEN OTHERS THEN
				  	    MSG:='ERROR. '||SQLERRM;

		END SP_TIPIFICAR;

		/********************************************************************************************************/

		PROCEDURE SP_AGENDAR(V_ID_M IN NUMBER,V_FECHA IN DATE, MSG OUT VARCHAR) IS

		  BEGIN

			   INSERT INTO CALLCEN.M_AGENDA
			   VALUES(V_ID_M,V_FECHA);
			   COMMIT;
			   MSG:='OK. OPERACION EFECTUADA CON EXITO';

		  EXCEPTION
		  		   WHEN OTHERS THEN
				   		MSG:='ERROR. '||SQLERRM;

		END SP_AGENDAR;

		/********************************************************************************************************/


		FUNCTION F_RECUPERAR_LLAMADA(V_ID_M IN NUMBER) RETURN Types.CURSORTYPE IS
		  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR
			   		SELECT ID_M,NOMBRE,LADA,TELEFONO,EXTENSION,TIPO_PROD, RETRASOS,ADEUDO,IMP_MINIMO
					  FROM CALLCEN.M_LLAMADAS LLAM
					 WHERE LLAM.ID_M=V_ID_M;
				RETURN CUR;
		END F_RECUPERAR_LLAMADA;

		/********************************************************************************************************/

		FUNCTION F_RECUPERAR_HISTORIAL(V_ID_M IN NUMBER) RETURN Types.CURSORTYPE IS
		  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR
				 SELECT H.ID_M,H.FECHALLAMADA,T.TIPIFICACION,H.FECHA_P_P
     			   FROM CALLCEN.M_HISTORICO H,
   		  		   		CALLCEN.M_TIPIFICACION T
    			  WHERE H.ID_M=V_ID_M
                    AND T.ID_T=H.TIPIFICACION
               ORDER BY	H.FECHALLAMADA DESC;

				RETURN CUR;

		END F_RECUPERAR_HISTORIAL;



		/********************************************************************************************************/

		FUNCTION F_LEER_AGENDA RETURN Types.CURSORTYPE IS
			  CUR Types.CURSORTYPE;
			BEGIN

			  OPEN CUR FOR
			  	  SELECT LL.ID_M,LL.NOMBRE, LL.LADA, LL.TELEFONO,
				         LL.EXTENSION,LL.TIPO_PROD, LL.RETRASOS,
						 LL.ADEUDO, LL.IMP_MINIMO, AG.FECHA
				   FROM CALLCEN.M_AGENDA AG, CALLCEN.M_LLAMADAS LL
				  WHERE AG.FECHA BETWEEN SYSDATE AND TRUNC(SYSDATE+1)
				    AND AG.ID_M=LL.ID_M
			   ORDER BY AG.FECHA;

			   RETURN CUR;
		END F_LEER_AGENDA;



		/********************************************************************************************************/

		 FUNCTION F_REPORTE(F_INICIO VARCHAR, F_FIN VARCHAR) RETURN Types.CURSORTYPE IS

			CUR Types.CURSORTYPE;
			BEGIN

			  OPEN CUR FOR
			  	 SELECT LL.NOMBRE,LL.LADA,LL.TELEFONO,LL.EXTENSION,LL.TIPO_PROD,
			   	 	    LL.RETRASOS,LL.ADEUDO,LL.IMP_MINIMO, HC.FECHALLAMADA,
			   			HC.TIPIFICACION, HC.FECHA_P_P
				   FROM (SELECT H.ID_M,H.FECHALLAMADA,T.TIPIFICACION,H.FECHA_P_P
     			   		   FROM CALLCEN.M_HISTORICO H,
   		  		   		        CALLCEN.M_TIPIFICACION T
    			  		  WHERE T.ID_T=H.TIPIFICACION
				             AND H.FECHALLAMADA BETWEEN TO_DATE(F_INICIO,'DD/MM/YYYY')
							                        AND (TO_DATE(F_FIN,'DD/MM/YYYY'))
						) HC,
						CALLCEN.M_LLAMADAS LL
				  WHERE HC.ID_M =LL.ID_M
		       ORDER BY LL.NOMBRE, HC.FECHALLAMADA DESC;

			   RETURN CUR;

		END F_REPORTE;
        
    /****************************************************************************************************************/        
        FUNCTION FORMATEAR_NUM(TEL VARCHAR) RETURN VARCHAR IS
            COUNTER NUMBER:=0;
            TAMA_TEL NUMBER:= LENGTH(NVL(TEL,'0'));
            TELEFONO NVARCHAR2(20);
            NUMERO CHAR(2);
            POSITIVO BOOLEAN:=FALSE;
            
        BEGIN
            TELEFONO:=TRIM(TEL);
            IF (TEL IS NULL) THEN
                RETURN '0.00';
            END IF;		   
    		
            IF (INSTR(TEL,'+') <> 0 ) THEN
                TELEFONO:=REPLACE(TEL,'+');
                POSITIVO:=TRUE;
            ELSIF (INSTR(TEL,'-') <> 0 ) THEN
                TELEFONO:=REPLACE(TEL,'-');
                POSITIVO:=FALSE;
            ELSE
                POSITIVO:=TRUE;
            END IF;
    		   	  
            FOR COUNTER IN 0..(TAMA_TEL-1) LOOP
                NUMERO:= SUBSTR(TRIM(TELEFONO), COUNTER, 1 );
                IF(NUMERO<>'0') THEN
                    TELEFONO:=SUBSTR(TRIM(TELEFONO),COUNTER);
                    EXIT;
                END IF;
            END LOOP;
    	
            IF(LENGTH(TELEFONO)<=3) THEN
                IF(POSITIVO) THEN
                    TELEFONO:='0'||TELEFONO;
                ELSE
                    TELEFONO:='- 0'||TELEFONO;
                END IF;
                RETURN TELEFONO;
            END IF;
    		
            IF(POSITIVO) THEN
                TELEFONO:=TELEFONO;
            ELSE
                TELEFONO:='- '||TELEFONO;
            END IF;
    		
            RETURN TELEFONO;
        END FORMATEAR_NUM;

END Pk_Morosos;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY PK_MOCTEZUMA AS

	PROCEDURE SP_AUTHENTICATEUSER(U_NOMBREUSUARIO    IN  VARCHAR2,
	                        	   U_PASSWORD         IN  VARCHAR2,
								   RESPUESTA          OUT VARCHAR2,
								   PERFIL          	  OUT VARCHAR2)
								   IS
		 USR VARCHAR2(30);
		 PWD VARCHAR2(35);
		 BDPERFIL VARCHAR2(70);
	BEGIN

   		  SELECT C.IDAGENTE,C.PASSWORD INTO USR, PWD
   		  FROM   CALLCEN.AGENTE_MOCTEZUMA C
		  WHERE  C.IDAGENTE = U_NOMBREUSUARIO
		  AND C.PASSWORD = U_PASSWORD;

  		IF U_NOMBREUSUARIO = USR AND U_PASSWORD = PWD THEN
		   RESPUESTA := 'Valido';
		END IF;

		IF RESPUESTA ='Valido' THEN

	  		PERFIL  := 'AGENTE_MOCTEZUMA';

		END IF;

		EXCEPTION

		   WHEN OTHERS THEN
		   IF PWD IS NULL THEN
		   RESPUESTA := 'InvalidCredentials';
		   PERFIL  	 := 'noOne';
		   ELSE
		   RESPUESTA := 'Error en Base de Datos, objeto (SP_AUTHENTICATEUSER) # '||SQLERRM;
		   END IF;

    END SP_AUTHENTICATEUSER;



	PROCEDURE SP_INSERTACLIENTE(I_NOMBRE IN VARCHAR2, I_APATERNO IN VARCHAR2, I_AMATERNO IN VARCHAR2,
								I_FECHA IN DATE, I_TELEFONO IN VARCHAR2, I_COLONIA IN VARCHAR2, I_OBSERVACIONES IN VARCHAR2,
								I_AGENTE IN VARCHAR2, I_USRDB IN VARCHAR2, RESPUESTA_ OUT VARCHAR2  )

	IS

	BEGIN

		INSERT INTO CALLCEN.CLIENTE_MOCTEZUMA(NOMBRE, APELLIDOPATERNO, APELLIDOMATERNO, FECHA, TELEFONO, COLONIA, OBSERVACIONES, IDAGENTE,
											  USUARIO_MODIFICO, ULTIMA_MODIFICACION)
		VALUES(I_NOMBRE,I_APATERNO, I_AMATERNO, I_FECHA, I_TELEFONO,I_COLONIA, I_OBSERVACIONES , I_AGENTE, I_USRDB, SYSDATE );
		COMMIT;

		RESPUESTA_:='OK. DATOS MOCTEZUMA INSERTADOS CON EXITO';
	EXCEPTION

		   WHEN OTHERS THEN
		   ROLLBACK;
			RESPUESTA_:='ERROR.#'||SQLERRM;

	END SP_INSERTACLIENTE;

END PK_MOCTEZUMA;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY Pk_Campanias AS

	   --fUNCION QUE TREA LOS ESTADOS DE LA REPUBLICA

	   FUNCTION F_CALL_ESTADOS_RS RETURN Types.CURSORTYPE IS

			cur Types.CURSORTYPE;

			BEGIN
     			OPEN cur FOR
					  SELECT *
					    FROM C_ESTADO
					   ORDER BY FCEDODESC;

					  RETURN cur;
				CLOSE cur;

		END F_CALL_ESTADOS_RS;

		--FUNCION QUE REGRESA EL CONJUNTO DE ESTADO CIVIL
		FUNCTION F_CALL_ESTADO_CIVIL_RS RETURN Types.CURSORTYPE IS
			cur Types.CURSORTYPE;

			BEGIN
     			OPEN cur FOR
					  SELECT *
					    FROM C_ESTADO_CIVIL
					   ORDER BY FIESTCIVIL_NUM;

					  RETURN cur;
				CLOSE cur;

		END F_CALL_ESTADO_CIVIL_RS;


		FUNCTION F_CALL_POBLACION_BY_ID_RS(ID_EDO IN INTEGER, ID_POB IN INTEGER ) RETURN Types.CURSORTYPE IS
				 cur Types.CURSORTYPE;

			BEGIN
     			OPEN cur FOR
					  SELECT *
					    FROM C_POBLACION
					   WHERE FIEDOID=ID_EDO
					   	 AND FIPOBID=ID_POB
					   ORDER BY FCPOBDESC;

					  RETURN cur;
				CLOSE cur;
		END F_CALL_POBLACION_BY_ID_RS;

		-- FUNCION QUE REGRESA LAS POBLACIONES DEL ESTADO INDICADO
		FUNCTION F_CALL_POBLACION_BY_EDO_RS(ID_EDO IN INTEGER) RETURN Types.CURSORTYPE IS

			cur Types.CURSORTYPE;

			BEGIN
     			OPEN cur FOR
					  SELECT *
					    FROM C_POBLACION
					   WHERE FIEDOID=ID_EDO
					   ORDER BY FCPOBDESC;

					  RETURN cur;
				CLOSE cur;

		END F_CALL_POBLACION_BY_EDO_RS;

		-- FUNCION QUE RETORNA EL CP SEGUN EL ESTADO Y LA POBLACION CORRESPONDIENTES
		FUNCTION F_CALL_CP(ID_EDO IN INTEGER, ID_POB IN NUMBER) RETURN Types.CURSORTYPE IS

			cur Types.CURSORTYPE;

			BEGIN
     			OPEN cur FOR
					  SELECT *
					    FROM C_CODIGO_POSTAL
					   WHERE FIEDOID=ID_EDO
					     AND FIPOBID=ID_POB
						 AND FICONSEC=1
					ORDER BY FCCTECP;

					  RETURN cur;
				CLOSE cur;

		END F_CALL_CP;
		--FUNCION QUE RETORNA LOS DATOS DE UN CP, PRINCIPALMENTE EL ID DEL ESTADO, Y ID DE POBLACION AL QUE PERTENECE
		FUNCTION F_CALL_DATA_BY_CP(CP IN VARCHAR) RETURN Types.CURSORTYPE IS

			cur Types.CURSORTYPE;

			BEGIN
     			OPEN cur FOR
					  SELECT *
					    FROM C_CODIGO_POSTAL
					   WHERE FCCTECP=CP
					   ORDER BY FCCOLONIA;

					  RETURN cur;
				CLOSE cur;

		END F_CALL_DATA_BY_CP;


		FUNCTION F_CALL_COLONIAS_RS (ID_EDO IN INTEGER, ID_POB IN INTEGER, CP IN VARCHAR ) RETURN Types.CURSORTYPE IS

				cur Types.CURSORTYPE;

			BEGIN
     			OPEN cur FOR
					  SELECT *
					    FROM C_CODIGO_POSTAL
					   WHERE FIEDOID=ID_EDO
					     AND FIPOBID=ID_POB
						 AND FCCTECP=CP
					   ORDER BY FCCOLONIA;

					  RETURN cur;
				CLOSE cur;

		END F_CALL_COLONIAS_RS;

END Pk_Campanias;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY         PK_ADMON_USUARIOS AS

 -- 1.- Consulta del catalogo de Ip's una Ip en especifico para ver si existe o no --
 FUNCTION F_call_Existe_Ip_rs ( V_IP IN VARCHAR DEFAULT NULL ) RETURN Types.cursorType IS

 cur Types.cursorType;
 BEGIN
 IF V_IP IS NULL THEN
 OPEN cur FOR
 SELECT NVL(S.AGENTE,'NULO') AS EXISTE
 FROM CALLCEN.CAT_IPS S
 WHERE S.IP IS NULL;
 RETURN cur;
 CLOSE cur;
 ELSE
 OPEN cur FOR
 SELECT NVL(S.AGENTE,'NULO') AS EXISTE
 FROM CALLCEN.CAT_IPS S
 WHERE TRIM(S.IP) = TRIM(V_IP);
 RETURN cur;
 CLOSE cur;
 END IF;

 END F_call_Existe_Ip_rs;


 -- 2.- Consulta del catalogo de Perfiles un nombre de Perfil en especifico para obtener su Id ---------------
 FUNCTION F_call_Obten_Id_perfil_rs ( V_NOM_PERFIL IN VARCHAR DEFAULT NULL ) RETURN Types.cursorType IS

 cur Types.cursorType;
 BEGIN
 IF V_NOM_PERFIL IS NULL THEN
 OPEN cur FOR
 SELECT P.ID_PERFIL
 FROM CALLCEN.CATALOGO_PERFILES P
 WHERE P.PERFIL IS NULL;
 RETURN cur;
 CLOSE cur;
 ELSE
 OPEN cur FOR
 SELECT P.ID_PERFIL
 FROM CALLCEN.CATALOGO_PERFILES P
 WHERE TRIM( UPPER(P.PERFIL) ) = TRIM( UPPER(V_NOM_PERFIL) );
 RETURN cur;
 CLOSE cur;
 END IF;

 END F_call_Obten_Id_perfil_rs;
 

 -- 3.- Consulta del catalogo de Perfil todos los perfiles existentes ---------------------------------------------
 FUNCTION F_call_Obten_Perfiles_rs RETURN TYPES.cursorType IS

 cur Types.cursorType;
 BEGIN
 OPEN cur FOR
 SELECT TRIM( UPPER(P.PERFIL) ) AS PERFIL
 FROM CALLCEN.CATALOGO_PERFILES P
 ORDER BY P.ID_PERFIL;
 RETURN cur;
 CLOSE cur;

 END F_call_Obten_Perfiles_rs;
 
 
 -- 4.- Consulta del catalogo de Perfil POR PAIS------------------------------------------------------------------------------
 FUNCTION F_call_Obten_Perfiles_pais_rs (VAGENTE IN VARCHAR2, VPAIS IN INTEGER) RETURN TYPES.cursorType IS

 cur Types.cursorType;
 BEGIN
 OPEN cur FOR
 SELECT DISTINCT P.ID_PERFIL, TRIM( UPPER(P.PERFIL) ) AS PERFIL, CG.NOMBRE_GRUPO, TRIM( UPPER(P.DESCRIPCION) ) AS DESCRIPCION
 FROM CALLCEN.CATALOGO_PERFILES P 
 JOIN CALLCEN.PERFIL_GRUPO PG
 ON PG.ID_PERFIL = P.ID_PERFIL 
 JOIN CALLCEN.CATALOGO_GRUPO CG
 ON CG.ID_GRUPO = PG.ID_GRUPO 
 WHERE P.IDPAIS = VPAIS
 ORDER BY TRIM( UPPER(P.PERFIL) );

 INSERT INTO CALLCEN.BIT_ERROR
 (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
 VALUES(CALLCEN.SEQ_BIT_ERROR.NEXTVAL,'FUNCION','F_call_Obten_Perfiles_pais_rs','PAIS'||VPAIS,SYSDATE ,'FUNCION');
 COMMIT;


 RETURN cur;
 CLOSE cur;

 END F_call_Obten_Perfiles_pais_rs;
 

 -- 5.- Consulta el perfil por usuario y pais ----------------------------------------------------------------------------------
 FUNCTION F_Call_Obten_Perfil_Usuario(VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN INTEGER IS

 v_perfil INTEGER;
 v_error VARCHAR2(250);

 BEGIN

 SELECT ID_PERFIL INTO v_perfil
 FROM CALLCEN.AGENTES
 WHERE AGENTE = VAGENTE
 AND ID_PAIS = VPAIS;
 
 RETURN v_perfil;

 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 RETURN 0;
 WHEN OTHERS THEN
 v_error := SQLERRM(SQLCODE);
 INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
 VALUES ('CALLCEN.PK_ADMON_USUARIOS.F_CALL_OBTEN_PERFIL_USUARIO',v_error,VPAIS,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
 COMMIT;
 RETURN -1;

 END F_Call_Obten_Perfil_Usuario;
 
 
 --6 -Consulta para obtener el menu del usuario de acuerdo al perfil ---------------------------------------------------------
 FUNCTION F_Call_Obten_Menu_Usuario(VPERFIL IN NUMBER,VAGENTE IN VARCHAR, VPAIS IN INTEGER, IS_ADMIN IN INTEGER) RETURN TYPES.cursorType IS
 
 c_aplicaciones Types.cursorType;
 v_error VARCHAR2(250);
 v_grupo NUMBER;
 
 BEGIN 
 
 OPEN c_aplicaciones FOR 
 SELECT C.NOMBRE_APLICACION, C.ARCHIVO_ASOCIADO 
 FROM CALLCEN.PERFIL_APLICACION P, CALLCEN.CATALOGO_APLICACIONES C 
 WHERE P.ID_APLICACION = C.ID_APLICACION 
 AND P.ID_PERFIL = VPERFIL 
 AND C.APLICACION_ADM = IS_ADMIN 
 ORDER BY C.NOMBRE_APLICACION ASC;

 return c_aplicaciones;
 
 EXCEPTION
 WHEN NO_DATA_FOUND THEN
 OPEN c_aplicaciones FOR
 SELECT 'Vacio' AS NOMBRE_APLICACION,
 'Vacio' AS ARCHIVO_ASOCIADO
 FROM DUAL;
 
 RETURN c_aplicaciones;
 
 WHEN OTHERS THEN 
 v_error := SQLERRM(SQLCODE);
 INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
 VALUES ('PK_ADMON_USUARIOS.F_CALL_OBTEN_MENU_USUARIO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
 COMMIT;
 
 END F_Call_Obten_Menu_Usuario;

 
 --7 -Obtiene todas las aplicaiones por pais ----------------------------------------------------------------------------------
        FUNCTION F_Call_Obten_Aplicaciones_Pais(VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType IS
        
        c_aplicaciones_pais Types.cursorType;
        v_error VARCHAR2(250);        
        
        BEGIN
        
          OPEN c_aplicaciones_pais FOR
               SELECT NOMBRE_APLICACION,DESCRIPCION,ID_APLICACION,ARCHIVO_ASOCIADO
               FROM CALLCEN.CATALOGO_APLICACIONES
               WHERE ID_PAIS = VPAIS
               ORDER BY NOMBRE_APLICACION ASC;
               
          RETURN c_aplicaciones_pais;        

        EXCEPTION
           WHEN OTHERS THEN    
                v_error := SQLERRM(SQLCODE);    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.F_CALL_OBTEN_APLICAIONES_PAIS',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;            
        
        END F_Call_Obten_Aplicaciones_Pais;
        
        
        --8 -Inserta un nuevo aplicativo --------------------------------------------------------------------------------------------------
        PROCEDURE SP_Call_Inserta_Aplicacion(VNOMBRE_APLICATIVO IN VARCHAR, VDESCRIPCION IN VARCHAR, VARCHIVO IN VARCHAR,
                                            VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
        v_error VARCHAR2(250);
        v_fecha VARCHAR2(30);
                                                    
        BEGIN
           
           v_fecha := TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
        
           INSERT INTO CALLCEN.CATALOGO_APLICACIONES (ID_APLICACION,NOMBRE_APLICACION,ID_PAIS,DESCRIPCION,ARCHIVO_ASOCIADO, USUARIO_MODIFICO,
                                              ULTIMA_MODIFICACION, APLICACION_ADM)
                  VALUES(CALLCEN.SEQ_CAT_APLICACIONES.NEXTVAL, VNOMBRE_APLICATIVO,VPAIS, VDESCRIPCION, VARCHIVO, VAGENTE, 
                         TO_DATE(v_fecha,'DD/MM/YYYY HH24:MI:SS'), 0);
                  
           COMMIT;
           
           RESULTADO := 'EXITO';
           
                                                         
        EXCEPTION
           WHEN OTHERS THEN    
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO := v_error;    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_INSERTA_APLICACION',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;               
        
        END SP_Call_Inserta_Aplicacion; 
        
        
        --9     -Modifica el nombre o la descripcion o el nombre de la jsp de una Aplicacion
        PROCEDURE SP_Call_Modifica_Aplicacion(IDAPLICACION IN NUMBER, VNOMBRE IN VARCHAR, VDESCRIPCION IN VARCHAR,VARCHIVO IN VARCHAR, VAGENTE IN VARCHAR,
                                              VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS

        v_error VARCHAR2(250);
        v_fecha VARCHAR2(30);

        BEGIN

           v_fecha := TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');

           UPDATE CALLCEN.CATALOGO_APLICACIONES
           SET NOMBRE_APLICACION = VNOMBRE,
               DESCRIPCION = VDESCRIPCION,
               ARCHIVO_ASOCIADO = VARCHIVO,
               USUARIO_MODIFICO = VAGENTE,
               ULTIMA_MODIFICACION = TO_DATE(v_fecha ,'DD/MM/YYYY HH24:MI:SS')
           WHERE ID_APLICACION = IDAPLICACION;

           COMMIT;

           RESULTADO:='EXITO';

        EXCEPTION
           WHEN OTHERS THEN
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO := v_error;
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_MODIFICA_APLICACION',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;

        END SP_Call_Modifica_Aplicacion;     
        
        
        --10 -Elimina la aplicacion seleccionada
        PROCEDURE SP_Call_Elimina_Aplicacion(IDAPLICACION IN NUMBER, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
        
        v_error VARCHAR2(250);
        
        BEGIN
           
           DELETE CALLCEN.PERFIL_APLICACION
           WHERE ID_APLICACION = IDAPLICACION;
        
           DELETE CALLCEN.GRUPO_APLICACION
           WHERE ID_APLICACION = IDAPLICACION;
           
           DELETE CALLCEN.CATALOGO_APLICACIONES
           WHERE ID_APLICACION = IDAPLICACION;
           
           COMMIT;
           
           RESULTADO:='EXITO';
        
        EXCEPTION
           WHEN OTHERS THEN
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO := v_error;                
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_ELIMINA_APLICACION',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;     
                
        END SP_Call_Elimina_Aplicacion;     
        
        
        --11 -Obtiene todos los grupos por Pais
        FUNCTION F_Call_Obten_Grupos_Pais(VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType IS
        
        c_grupos_pais Types.cursorType;
        v_error VARCHAR2(250);
            
        BEGIN
           
           OPEN c_grupos_pais FOR
                SELECT ID_GRUPO, NOMBRE_GRUPO, DESCRIPCION
                FROM CALLCEN.CATALOGO_GRUPO
                WHERE ID_PAIS = VPAIS
                ORDER BY NOMBRE_GRUPO ASC;
                
           RETURN c_grupos_pais;        
        
        EXCEPTION
           WHEN OTHERS THEN    
                v_error := SQLERRM(SQLCODE);    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.F_CALL_OBTEN_GRUPOS_PAIS',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;
        
        END F_Call_Obten_Grupos_Pais;        
        
        
        --12 -Obten Aplicaiones que pertenecen al grupo
        FUNCTION F_Call_Obten_Aplicaciones_Gpo(IDGRUPO IN VARCHAR,VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType IS
        
        c_aplicaciones_gpo Types.cursorType;
        v_error VARCHAR2(250);
        
        BEGIN
        
           OPEN c_aplicaciones_gpo FOR
                SELECT C.NOMBRE_APLICACION , C.ID_APLICACION
                FROM CALLCEN.GRUPO_APLICACION G, CALLCEN.CATALOGO_APLICACIONES C
                WHERE G.ID_GRUPO = IDGRUPO
                AND G.ID_APLICACION = C.ID_APLICACION
                ORDER BY C.NOMBRE_APLICACION;
                
           RETURN  c_aplicaciones_gpo;           
        
        EXCEPTION
           WHEN OTHERS THEN    
                v_error := SQLERRM(SQLCODE);    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.F_CALL_OBTEN_APLICACIONES_GPO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;        
        
        END F_Call_Obten_Aplicaciones_Gpo;
                
        
        --13 -Inserta grupo Nuevo
        PROCEDURE SP_Call_Inserta_Gpo(NOMBRE_GPO IN VARCHAR, DESCRIPCION IN VARCHAR,APLICACIONES IN VARCHAR,VAGENTE IN VARCHAR, 
                                      VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
        
        v_error VARCHAR2(250);
        v_contador NUMBER;
        v_indice NUMBER;
        v_aux_aplicacion VARCHAR2(10);
        v_tamaño NUMBER;
        v_fecha VARCHAR2(30);
        v_id_grupo NUMBER;
                                              
        BEGIN
        
           v_indice := 1;
           v_contador :=0;
           v_fecha := TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
           
           SELECT CALLCEN.SEQ_CAT_GRUPO.NEXTVAL INTO v_id_grupo
           FROM DUAL;
           
 
           INSERT INTO CALLCEN.CATALOGO_GRUPO (ID_GRUPO, ID_PAIS, NOMBRE_GRUPO, DESCRIPCION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                  VALUES(v_id_grupo, VPAIS, NOMBRE_GPO, DESCRIPCION, VAGENTE, TO_DATE(v_fecha,'DD/MM/YYYY HH24:MI:SS'));
           
           SELECT LENGTH(APLICACIONES) INTO v_tamaño
           FROM DUAL;
           
           LOOP
             SELECT INSTR(APLICACIONES,',',v_indice) INTO v_contador
             FROM  DUAL;
  
             SELECT SUBSTR(APLICACIONES,v_indice,v_contador - v_indice) INTO v_aux_aplicacion
             from dual;
             
             INSERT INTO CALLCEN.GRUPO_APLICACION (ID_GRUPO, ID_APLICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                    VALUES(v_id_grupo, v_aux_aplicacion, VAGENTE, TRUNC(SYSDATE));
  
             v_indice:= v_contador+1;
             
             IF(v_contador = v_tamaño) THEN
               EXIT;
             END IF;
           END LOOP;
           
           COMMIT;        
           RESULTADO :='EXITO';
        
        EXCEPTION 
           WHEN OTHERS THEN    
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO := v_error;                    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_INSERTA_GPO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;               
        
        END    SP_Call_Inserta_Gpo;        
        
        
        --14 -Modifica las características del grupo 
        PROCEDURE SP_Call_Modifica_Gpo(ID_GPO IN VARCHAR, PDESCRIPCION IN VARCHAR, APLICACIONES IN VARCHAR, VAGENTE IN VARCHAR,
                                       VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
        
        v_error VARCHAR2(250);
        v_contador NUMBER;
        v_indice NUMBER;
        v_aux_aplicacion VARCHAR2(10);
        v_tamaño NUMBER;
        v_fecha VARCHAR2(30);
                               
                                       
        BEGIN

           v_indice := 1;
           v_contador :=0;
           v_fecha := TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
           
           UPDATE CALLCEN.CATALOGO_GRUPO
           SET DESCRIPCION = PDESCRIPCION,
               USUARIO_MODIFICO = VAGENTE,
               ULTIMA_MODIFICACION = TO_DATE(v_fecha,'DD/MM/YYYY HH24:MI:SS')
           WHERE ID_GRUPO = ID_GPO;
           
           DELETE CALLCEN.GRUPO_APLICACION
           WHERE  ID_GRUPO = ID_GPO;
           
           SELECT LENGTH(APLICACIONES) INTO v_tamaño
           FROM DUAL;
           
           LOOP
             SELECT INSTR(APLICACIONES,',',v_indice) INTO v_contador
             FROM  DUAL;
  
             SELECT SUBSTR(APLICACIONES,v_indice,v_contador - v_indice) INTO v_aux_aplicacion
             from dual;
             
             INSERT INTO CALLCEN.GRUPO_APLICACION (ID_GRUPO, ID_APLICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                    VALUES(ID_GPO, v_aux_aplicacion, VAGENTE, TRUNC(SYSDATE));
  
             v_indice:= v_contador+1;
             
             IF(v_contador = v_tamaño) THEN
               EXIT;
             END IF;
           END LOOP;
           
           COMMIT;        
           RESULTADO :='EXITO';
           
        
        EXCEPTION
           WHEN OTHERS THEN    
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO := v_error;                    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_MODIFICA_GPO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;       
                
        END SP_Call_Modifica_Gpo;                                                                                                                     

        --15 -Elimina el grupo seleccionado
        PROCEDURE SP_Call_Elimina_Grupo(IDGRUPO IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
        
        v_error VARCHAR2(250);
        
        BEGIN

           DELETE CALLCEN.CATALOGO_GRUPO
           WHERE ID_GRUPO = IDGRUPO
             AND ID_PAIS  = VPAIS;
           
           COMMIT;
           
           RESULTADO:='EXITO';
        
        EXCEPTION
           WHEN OTHERS THEN
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO := v_error;                
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_ELIMINA_GRUPO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;     
                
                
        END SP_Call_Elimina_Grupo;     


        --16 -Obtiene Aplicaiones que pertenecen al perfil
        FUNCTION F_Call_Obten_App_Perfil(IDPERFIL IN VARCHAR,VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType IS
        
        c_aplicaciones_gpo Types.cursorType;
        v_error VARCHAR2(250);
        
        BEGIN
        
           OPEN c_aplicaciones_gpo FOR
                SELECT C.NOMBRE_APLICACION , C.ID_APLICACION
                FROM CALLCEN.PERFIL_APLICACION P
                JOIN CALLCEN.CATALOGO_APLICACIONES C
                  ON P.ID_APLICACION = C.ID_APLICACION
                WHERE P.ID_PERFIL = IDPERFIL
                  AND C.ID_PAIS   = VPAIS
                ORDER BY C.NOMBRE_APLICACION;
                
           RETURN  c_aplicaciones_gpo;           
        
        EXCEPTION
           WHEN OTHERS THEN    
                v_error := SQLERRM(SQLCODE);    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.F_CALL_OBTEN_APP_PERFIL',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;        
        
        END F_Call_Obten_App_Perfil;        

        
        --17 -Inserta perfil Nuevo
        PROCEDURE SP_Call_Inserta_Perfil(NOMBRE_PERFIL IN VARCHAR, PDESCRIPCION IN VARCHAR,IDGRUPO IN VARCHAR2, APLICACIONES IN VARCHAR,VAGENTE IN VARCHAR, 
                                      VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
        
        v_error VARCHAR2(250);
        v_contador NUMBER;
        v_indice NUMBER;
        v_aux_aplicacion VARCHAR2(10);
        v_tamaño NUMBER;
        v_fecha VARCHAR2(30);
        v_id_perfil NUMBER;
                                              
        BEGIN

           v_indice := 1;
           v_contador :=0;
           v_fecha := TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
           
           SELECT CALLCEN.SEQ_CAT_PERFIL.NEXTVAL INTO v_id_perfil
           FROM DUAL;
           
 
           INSERT INTO CALLCEN.CATALOGO_PERFILES (ID_PERFIL, PERFIL, TIPO, IDPAIS, DESCRIPCION)
                  VALUES(v_id_perfil, NOMBRE_PERFIL, 'Unificado', VPAIS, PDESCRIPCION );
           
           INSERT INTO CALLCEN.PERFIL_GRUPO (ID_PERFIL, ID_GRUPO, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                  VALUES(v_id_perfil, IDGRUPO, VAGENTE, TRUNC(SYSDATE) );

           SELECT LENGTH(APLICACIONES) INTO v_tamaño
           FROM DUAL;
           
           LOOP
             SELECT INSTR(APLICACIONES,',',v_indice) INTO v_contador
             FROM  DUAL;
  
             SELECT SUBSTR(APLICACIONES,v_indice,v_contador - v_indice) INTO v_aux_aplicacion
             from dual;
             
             INSERT INTO CALLCEN.PERFIL_APLICACION (ID_PERFIL, ID_APLICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                    VALUES(v_id_perfil, v_aux_aplicacion, VAGENTE, TRUNC(SYSDATE));
  
             v_indice:= v_contador+1;
             
             IF(v_contador = v_tamaño) THEN
               EXIT;
             END IF;
           END LOOP;
           
           COMMIT;        
           RESULTADO :='EXITO';
        
        EXCEPTION 
           WHEN OTHERS THEN    
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO := v_error;                    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_INSERTA_PERFIL',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;               
        
        
        END    SP_Call_Inserta_Perfil;        

 
        --18 -Modifica las características del grupo 
        PROCEDURE SP_Call_Modifica_Perfil(IDPERFIL IN VARCHAR, PDESCRIPCION IN VARCHAR, IDGRUPO IN VARCHAR2, APLICACIONES IN VARCHAR, 
                                          VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
        
        v_error VARCHAR2(250);
        v_contador NUMBER;
        v_indice NUMBER;
        v_aux_aplicacion VARCHAR2(10);
        v_tamaño NUMBER;
        v_fecha VARCHAR2(30);
                               
                                       
        BEGIN

           v_indice := 1;
           v_contador :=0;
           v_fecha := TO_CHAR(SYSDATE,'DD/MM/YYYY HH24:MI:SS');
           
           UPDATE CALLCEN.CATALOGO_PERFILES
               SET DESCRIPCION = PDESCRIPCION
            WHERE ID_PERFIL = IDPERFIL
              AND IDPAIS   = VPAIS;
           
           UPDATE CALLCEN.PERFIL_GRUPO
              SET ID_GRUPO            = IDGRUPO
                 ,USUARIO_MODIFICO    = VAGENTE
                 ,ULTIMA_MODIFICACION = TRUNC(SYSDATE)
           WHERE  ID_PERFIL = IDPERFIL;
           
           DELETE CALLCEN.PERFIL_APLICACION
           WHERE  ID_PERFIL = IDPERFIL;
           
           SELECT LENGTH(APLICACIONES) INTO v_tamaño
           FROM DUAL;
           
           LOOP
             SELECT INSTR(APLICACIONES,',',v_indice) INTO v_contador
             FROM  DUAL;
  
             SELECT SUBSTR(APLICACIONES,v_indice,v_contador - v_indice) INTO v_aux_aplicacion
             from dual;
             
             INSERT INTO CALLCEN.PERFIL_APLICACION(ID_PERFIL, ID_APLICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                    VALUES(IDPERFIL, v_aux_aplicacion, VAGENTE, TRUNC(SYSDATE));
  
             v_indice:= v_contador+1;
             
             IF(v_contador = v_tamaño) THEN
               EXIT;
             END IF;
           END LOOP;
           
           COMMIT;        
           RESULTADO :='EXITO';
           
        
        EXCEPTION
           WHEN OTHERS THEN    
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO :=v_error;                    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_MODIFICA_PERFIL',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;       
                
        END SP_Call_Modifica_Perfil;                                                                                                                     


        --19 -Elimina el perfil seleccionado
        PROCEDURE SP_Call_Elimina_Perfil(IDPERFIL IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
        
        v_error VARCHAR2(250);
        
        BEGIN

           DELETE CALLCEN.PERFIL_APLICACION
            WHERE ID_PERFIL = IDPERFIL;
            
           DELETE CALLCEN.PERFIL_GRUPO
            WHERE ID_PERFIL = IDPERFIL;
             
           DELETE CALLCEN.CATALOGO_PERFILES
           WHERE ID_PERFIL = IDPERFIL
             AND IDPAIS   = VPAIS;
           
           COMMIT;
           
           RESULTADO:='EXITO';
        
        EXCEPTION
           WHEN OTHERS THEN
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO:=v_error;                
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_ELIMINA_PERFIL',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;     
                
        END SP_Call_Elimina_Perfil;
             

        --20 -Obtiene Usuarios que pertenecen al perfil
        FUNCTION F_Call_Obten_Usrs_Perfil(IDPERFIL IN VARCHAR,VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType IS
        
        c_aplicaciones_gpo Types.cursorType;
        v_error VARCHAR2(250);
        
        BEGIN
        
           OPEN c_aplicaciones_gpo FOR
                SELECT A.AGENTE, A.NOMBRE, A.APATERNO, A.AMATERNO, A.AGENTE, P.ID_PERFIL, P.PERFIL
                FROM CALLCEN.AGENTES A
                JOIN CALLCEN.CATALOGO_PERFILES P
                  ON P.ID_PERFIL  = A.ID_PERFIL
                WHERE A.ID_PERFIL = IDPERFIL
                  AND A.ID_PAIS   = VPAIS
                  AND ID_ESTATUS != 5
                ORDER BY A.AGENTE;
                
           RETURN  c_aplicaciones_gpo;           
        
        EXCEPTION
           WHEN OTHERS THEN    
                v_error := SQLERRM(SQLCODE);    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.F_CALL_OBTEN_USRS_PERFIL',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;        
        
        END F_Call_Obten_Usrs_Perfil;    
            

        --21 -Obtiene Perfiles que pertenecen al grupo
        FUNCTION F_Call_Obten_Perfil_Gpo(IDGRUPO IN VARCHAR,VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType IS
        
        c_aplicaciones_gpo Types.cursorType;
        v_error VARCHAR2(250);
        
        BEGIN
        
           OPEN c_aplicaciones_gpo FOR
                SELECT C.PERFIL , C.ID_PERFIL
                FROM CALLCEN.PERFIL_GRUPO P
                JOIN CALLCEN.CATALOGO_PERFILES C
                  ON P.ID_PERFIL = C.ID_PERFIL
                WHERE P.ID_GRUPO = IDGRUPO
                ORDER BY C.PERFIL;
                
           RETURN  c_aplicaciones_gpo;           
        
        EXCEPTION
           WHEN OTHERS THEN    
                v_error := SQLERRM(SQLCODE);    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.F_CALL_OBTEN_PERFIL_GPO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;        
        
        END F_Call_Obten_Perfil_Gpo;    
            

        --22 -Obtiene Usuarios que pertenecen al pais
        FUNCTION F_Call_Obten_Usuarios_Pais( VAGENTE IN VARCHAR, VPAIS IN INTEGER) RETURN TYPES.cursorType IS
        
           c_aplicaciones_gpo Types.cursorType;
           v_error VARCHAR2(250);
        
        BEGIN
        
           OPEN c_aplicaciones_gpo FOR
                SELECT A.AGENTE, A.NOMBRE, A.APATERNO, A.AMATERNO, A.AGENTE, P.ID_PERFIL, P.PERFIL
                FROM CALLCEN.AGENTES A
                JOIN CALLCEN.CATALOGO_PERFILES P
                  ON P.ID_PERFIL  = A.ID_PERFIL
                WHERE A.ID_PAIS   = VPAIS
                  AND ID_ESTATUS != 5
                ORDER BY A.NOMBRE;
                
           RETURN  c_aplicaciones_gpo;           
        
        EXCEPTION
           WHEN OTHERS THEN    
                v_error := SQLERRM(SQLCODE);    
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.F_CALL_OBTEN_USUARIOS_PAIS',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;        
        
        END F_Call_Obten_Usuarios_Pais;
        

        --23     -Inserta un usuario
        PROCEDURE SP_Call_Inserta_Usuario(IDAGENTE IN VARCHAR2, IDPERFIL IN VARCHAR, PNOMBRE IN VARCHAR, PAPATERNO IN VARCHAR2, 
                                              PAMATERNO IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
                                      
        v_error VARCHAR2(250);
        
        BEGIN
        
           INSERT INTO CALLCEN.AGENTES (
                       AGENTE
                      ,FECHA
                      ,ID_PAIS
                      ,ID_ESTATUS
                      ,ID_PERFIL
                      ,CAMBIO
                      ,NOMBRE
                      ,APATERNO
                      ,AMATERNO
                      ,SESION
                      ,ID_SEG
                      ,INTENTOS_FALLIDOS) 
               VALUES (IDAGENTE
                      ,TRUNC(SYSDATE)
                      ,VPAIS
                      ,0
                      ,IDPERFIL
                      ,0
                      ,PNOMBRE
                      ,PAPATERNO
                      ,PAMATERNO
                      ,0, 0, 0);
                      
           COMMIT;
          
           RESULTADO:='EXITO';         
        
        EXCEPTION
           WHEN OTHERS THEN
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO:=v_error;                
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_INSERTA_USUARIO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;     
        
        END SP_Call_Inserta_Usuario;     
        

        --24     -Modifica un usuario
        PROCEDURE SP_Call_Modifica_Usuario(IDAGENTE IN VARCHAR2, IDPERFIL IN VARCHAR, PNOMBRE IN VARCHAR, PAPATERNO IN VARCHAR2, 
                                              PAMATERNO IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
                                      
        v_error VARCHAR2(250);
        
        BEGIN
                  
            UPDATE CALLCEN.AGENTES
              SET ID_PERFIL = IDPERFIL
                 ,NOMBRE    = PNOMBRE
                 ,APATERNO  = PAPATERNO
                 ,AMATERNO  = PAMATERNO
           WHERE AGENTE = IDAGENTE
             AND ID_PAIS= VPAIS;
           
           COMMIT;
          
           RESULTADO:='EXITO';         
        
        EXCEPTION
           WHEN OTHERS THEN
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO:=v_error;                
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_MODIFICA_USUARIO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;     
        
        END SP_Call_Modifica_Usuario;
             

        --25     -Elimina un usuario
        PROCEDURE SP_Call_Elimina_Usuario(IDAGENTE IN VARCHAR2, VAGENTE IN VARCHAR, VPAIS IN INTEGER, RESULTADO OUT VARCHAR) IS
                                      
        v_error VARCHAR2(250);
        
        BEGIN
                  
            UPDATE CALLCEN.AGENTES
              SET ID_ESTATUS = 5
           WHERE AGENTE = IDAGENTE
             AND ID_PAIS= VPAIS;
           
           COMMIT;
          
           RESULTADO:='EXITO';         
        
        EXCEPTION
           WHEN OTHERS THEN
                ROLLBACK;
                v_error := SQLERRM(SQLCODE);
                RESULTADO:=v_error;                
                INSERT INTO CALLCEN.ERROR_ADMON_USUARIOS(OBJETO_BD, ERROR, PAIS, HORA_MODIFICACION, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
                VALUES ('PK_ADMON_USUARIOS.SP_CALL_ELIMINA_USUARIO',v_error, VPAIS ,TO_CHAR(SYSDATE,'HH24:MI:SS'),VAGENTE,TRUNC(SYSDATE));
                COMMIT;     
        
        END SP_Call_Elimina_Usuario;
        
        
             
END;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY         pck_dsi IS

-- Para obtener usuarios
PROCEDURE dsi_callcen_usuarios( p_cursor OUT sys_refcursor )
AS
BEGIN

      OPEN p_cursor FOR
      SELECT A.agente, A.id_estatus, A.id_perfil, A.nombre, A.apaterno, A.amaterno,A.id_pais,B.dominio, MAX(B.Fecha)
      FROM  CALLCEN.AGENTES A, CALLCEN.LOGS_ENTRADA B
      WHERE A.agente = B.agente (+)
      GROUP BY A.agente, A.id_estatus, A.id_perfil, A.nombre, A.apaterno, A.amaterno,A.id_pais,B.dominio;
EXCEPTION
  WHEN OTHERS THEN
    NULL;
END;

-- Para obtener perfiles asociados a cada usuario
PROCEDURE dsi_callcen_perfiles( p_cursor OUT sys_refcursor )
AS
BEGIN

      OPEN p_cursor FOR
      SELECT agente, id_perfil, id_pais FROM CALLCEN.AGENTES;
EXCEPTION
  WHEN OTHERS THEN
    NULL;
END;

-- Para obtener el catalogo de perfiles
PROCEDURE dsi_callcen_catprf( p_cursor OUT sys_refcursor)
AS
BEGIN

      OPEN p_cursor FOR
      SELECT id_perfil, perfil,idpais FROM CALLCEN.CATALOGO_PERFILES order by idpais;
EXCEPTION
  WHEN OTHERS THEN
    NULL;
END;

END pck_dsi;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY CTEUNICO IS
	   
	   FUNCTION SPSELAHRCLIENTEAHORRO(v_alnova IN VARCHAR) RETURN Types.CURSORTYPE IS
	   	  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR
			   		SELECT h.DEDO as FIDEDO,
						   h.HUELLA as FCHUELLA_DIGITAL,
						   h.MANO as FIMANO,
						   '1' as FCID_BIOMETRICO						   
					  FROM HUELLAS_DESARROLLO H
					 WHERE H.ALNOVA=v_alnova;
				RETURN CUR;
				 
	   
	   END SPSELAHRCLIENTEAHORRO;
	   
END CTEUNICO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY AUDITORIA_BD IS
     
	    FUNCTION F_GET_AGENTES RETURN Types.CURSORTYPE IS
	   	  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR
            SELECT  AG.ID_PAIS, P.NOMBRE_CORTO PAIS_NOMBRE_CORTO, P.NOMBRE_PAIS, 
                    AG.ID_ESTATUS, CE.DESCRIPCION DESCRIPCION_ESTATUS, CE.NOM_CORTO ESTATUS_NOMNRE_CORTO,
                    AG.ID_PERFIL, CP.PERFIL, 
                    AG.AGENTE,  AG.NOMBRE,  AG.APATERNO,  AG.AMATERNO
              FROM  CALLCEN.AGENTES AG, CALLCEN.PAIS P, 
                    CALLCEN.CATALOGO_PERFILES CP,
                    CALLCEN.CATALOGO_ESTATUS CE
             WHERE  AG.ID_PAIS= P.ID_PAIS
               AND  AG.ID_PERFIL= CP.ID_PERFIL
               AND  AG.ID_ESTATUS= CE.ID_ESTATUS;
				RETURN CUR;
				 
	   
	   END F_GET_AGENTES;
     
      FUNCTION F_GET_AGENTE_ID(V_ID_AGENTE VARCHAR2) RETURN Types.CURSORTYPE IS
	   	  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR
            SELECT  AG.ID_PAIS, P.NOMBRE_CORTO PAIS_NOMBRE_CORTO, P.NOMBRE_PAIS, 
                    AG.ID_ESTATUS, CE.DESCRIPCION DESCRIPCION_ESTATUS, CE.NOM_CORTO ESTATUS_NOMNRE_CORTO,
                    AG.ID_PERFIL, CP.PERFIL, 
                    AG.AGENTE,  AG.NOMBRE,  AG.APATERNO,  AG.AMATERNO
              FROM  CALLCEN.AGENTES AG, CALLCEN.PAIS P, 
                    CALLCEN.CATALOGO_PERFILES CP,
                    CALLCEN.CATALOGO_ESTATUS CE
             WHERE  AG.AGENTE LIKE V_ID_AGENTE||'%'
               AND  AG.ID_PAIS= P.ID_PAIS
               AND  AG.ID_PERFIL= CP.ID_PERFIL
               AND  AG.ID_ESTATUS= CE.ID_ESTATUS;
				RETURN CUR;
				 
	   
	   END F_GET_AGENTE_ID;
     
     FUNCTION F_GET_AGENTE(V_NOMBRE VARCHAR2, V_AP VARCHAR2, V_AM VARCHAR2) RETURN Types.CURSORTYPE IS
	   	  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR
            SELECT  AG.ID_PAIS, P.NOMBRE_CORTO PAIS_NOMBRE_CORTO, P.NOMBRE_PAIS, 
                    AG.ID_ESTATUS, CE.DESCRIPCION DESCRIPCION_ESTATUS, CE.NOM_CORTO ESTATUS_NOMNRE_CORTO,
                    AG.ID_PERFIL, CP.PERFIL, 
                    AG.AGENTE,  AG.NOMBRE,  AG.APATERNO,  AG.AMATERNO
              FROM  CALLCEN.AGENTES AG, CALLCEN.PAIS P, 
                    CALLCEN.CATALOGO_PERFILES CP,
                    CALLCEN.CATALOGO_ESTATUS CE
             WHERE  AG.NOMBRE LIKE V_NOMBRE||'%'
               AND  AG.APATERNO LIKE V_AP||'%'
               AND  AG.AMATERNO LIKE V_AM||'%'
               AND  AG.ID_PAIS= P.ID_PAIS
               AND  AG.ID_PERFIL= CP.ID_PERFIL
               AND  AG.ID_ESTATUS= CE.ID_ESTATUS;
				RETURN CUR;
				 
	   
	   END F_GET_AGENTE;
	   
	   
	   
	   FUNCTION F_ACCIONES_AGENTE(V_AGENTE VARCHAR2, V_PAIS VARCHAR2, V_INI VARCHAR2, V_FIN VARCHAR2) RETURN Types.CURSORTYPE IS
	   	  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR
					SELECT ac.id_accion, ac.accion, bi.agente, bi.fecha, bi.hora, bi.cliente, bi.cuenta, bi.tarjeta, bi.producto, bi.MOTIVOS
					  FROM CALLCEN.BITACORA bi, CALLCEN.CATALOGO_ACCIONES ac
					 WHERE bi.agente=V_AGENTE
					   AND bi.id_pais =V_PAIS
					   AND bi.fecha BETWEEN TRUNC(TO_DATE(V_INI, 'DD/MM/YYYY')-1) AND TRUNC(TO_DATE(V_FIN, 'DD/MM/YYYY'))
					   AND bi.accion= ac.id_accion
				  ORDER BY bi.FECHA;
			
			RETURN CUR;
				 
	   
	   END F_ACCIONES_AGENTE;
	   
	   FUNCTION F_ACCIONES_AGENTES(V_PAIS VARCHAR2, V_INI VARCHAR2, V_FIN VARCHAR2) RETURN Types.CURSORTYPE IS
	   	  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR
					SELECT ac.id_accion, ac.accion, bi.agente, bi.fecha, bi.hora, bi.cliente, bi.cuenta, bi.tarjeta, bi.producto, bi.MOTIVOS
					  FROM CALLCEN.BITACORA bi, CALLCEN.CATALOGO_ACCIONES ac
					 WHERE bi.id_pais =V_PAIS
					   AND bi.fecha BETWEEN TRUNC(TO_DATE(V_INI, 'DD/MM/YYYY')-1) AND TRUNC(TO_DATE(V_FIN, 'DD/MM/YYYY'))
					   AND bi.accion= ac.id_accion
				  ORDER BY bi.FECHA;
			
			RETURN CUR;
				 
	   
	   END F_ACCIONES_AGENTES;
	   
	    FUNCTION F_PAISES RETURN Types.CURSORTYPE IS
	   	  CUR Types.CURSORTYPE;
		  BEGIN
		  	   OPEN CUR FOR						   
				   SELECT P.*	   
				   	 FROM CALLCEN.AGENTES A, CALLCEN.PAIS P
			        WHERE A.ID_PAIS=P.ID_PAIS
			     GROUP BY P.ID_PAIS, P.NOMBRE_CORTO,P.NOMBRE_PAIS;
			
			RETURN CUR;
				 
	   
	   END F_PAISES ;
	   
	   

	   
	   
END AUDITORIA_BD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_UPD_CLT_BIOM
(
    VCLIENTE_UNICO        IN       CALLCEN.HIST_CLNT_BIOM.CLIENTE_UNICO%TYPE,
    VTELEFONO             IN       CALLCEN.HIST_CLNT_BIOM.TELEFONO%TYPE,
    PSCod_Error           OUT      NUMBER,
    PSMsg_Error           OUT      VARCHAR2
)
AS
VEXISTE NUMBER;
BEGIN
    SELECT COUNT(1) INTO VEXISTE 
    FROM HIST_CLNT_BIOM
    WHERE CLIENTE_UNICO = VCLIENTE_UNICO;
    
    IF(VEXISTE = 1)
    THEN
        UPDATE CALLCEN.HIST_CLNT_BIOM
        SET    
            TELEFONO = VTELEFONO,
            FECHA_MODIFICACION = SYSDATE;
        PSCod_Error:=0;
        PSMsg_Error:='SE ACTUALIZO CORRECTAMENTE LA INFORMACION HISTORICA';
    ELSE
        PSCod_Error:=-1;
        PSMsg_Error:='NO EXISTE REGISTRO';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        PSCod_Error:=1;
        PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizar información de hist_clnt_biom(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_UPD_CLT_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_UPDT_CTEU
(
VFOLIO                  IN  CALLCEN.FOLIO_CTEU.FOLIO%TYPE,
VCTE_UNICO              IN  CALLCEN.FOLIO_CTEU.CTE_UNICO%TYPE,
VFOTOHISTORICA          IN  CALLCEN.FOLIO_CTEU.FOTOHISTORICA%TYPE,
VNOMBRE                 IN  CALLCEN.FOLIO_CTEU.NOMBRE%TYPE,
VAPATERNO               IN  CALLCEN.FOLIO_CTEU.APATERNO%TYPE,
VAMATERNO               IN  CALLCEN.FOLIO_CTEU.AMATERNO%TYPE,
VFECHA_NACIMIENTO       IN  CALLCEN.FOLIO_CTEU.FECHA_NACIMIENTO%TYPE,
VCALLE                  IN  CALLCEN.FOLIO_CTEU.CALLE%TYPE,
VNUM_EXTERIOR           IN  CALLCEN.FOLIO_CTEU.NUM_EXTERIOR%TYPE,
VNUM_INTERIOR           IN  CALLCEN.FOLIO_CTEU.NUM_INTERIOR%TYPE,
VCOLONIA                IN  CALLCEN.FOLIO_CTEU.COLONIA%TYPE,
VPOBLACION              IN  CALLCEN.FOLIO_CTEU.POBLACION%TYPE,
VESTADO                 IN  CALLCEN.FOLIO_CTEU.ESTADO%TYPE,
VCODIGO_POSTAL          IN  CALLCEN.FOLIO_CTEU.CODIGO_POSTAL%TYPE,
VPRODUCTO               IN  CALLCEN.FOLIO_CTEU.PRODUCTO%TYPE,
VID_FOTO_HD             IN  CALLCEN.FOLIO_CTEU.ID_FOTO_HD%TYPE,
PSCod_Error             OUT NUMBER,
PSMsg_Error             OUT VARCHAR2
)
IS
BEGIN
    UPDATE CALLCEN.FOLIO_CTEU
    SET
        FOTOHISTORICA       = VFOTOHISTORICA,
        FECHA_MODIFICACION  = SYSDATE,
        USUARIO_MODIFICO    = 'CALLCEN',
        NOMBRE              = VNOMBRE,
        APATERNO            = VAPATERNO,
        AMATERNO            = VAMATERNO,
        FECHA_NACIMIENTO    = VFECHA_NACIMIENTO,
        CALLE               = VCALLE,
        NUM_EXTERIOR        = VNUM_EXTERIOR,
        NUM_INTERIOR        = VNUM_INTERIOR,
        COLONIA             = VCOLONIA,
        POBLACION           = VPOBLACION,
        ESTADO              = VESTADO,
        CODIGO_POSTAL       = VCODIGO_POSTAL,
        PRODUCTO            = VPRODUCTO,
        OSOCKET             = 1,
        ID_FOTO_HD          = VID_FOTO_HD
    WHERE
        FOLIO               = VFOLIO
    AND
        CTE_UNICO           = VCTE_UNICO;
    COMMIT;
PSCod_Error:=0;
PSMsg_Error:='Se updateo correctamente el folio de CTEU';
EXCEPTION
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al updatear folio de CTEU (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_UPDT_CTEU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_UPDBITBM_SUP ( 
VFOLIO                IN          callcen.bit_biom_sup.FOLIO%TYPE,
VESTATUS              IN          callcen.bit_biom_sup.ESTATUS%TYPE,  
VAGENTE               IN          callcen.bit_biom_sup.AGENTE%type,   
VOBSERVACIONES        IN          callcen.bit_biom_sup.OBSERVACIONES%type,
VMOTIVO               IN          callcen.bit_biom_sup.MOTIVO%type,
VRESULTADO            OUT         VARCHAR
)                                                                                                                                                                                                                       
AS
VFECHA DATE;
BEGIN
    SELECT SYSDATE INTO VFECHA  FROM DUAL;
    DELETE CALLCEN.LIBERA_BIOM_SUP
    WHERE FOLIO = VFOLIO;
          
    UPDATE CALLCEN.BIT_BIOM_SUP
    SET ESTATUS = VESTATUS,
        FECHA_MODIFICACION = VFECHA,
        FECHA_LIBERACION = VFECHA,
        AGENTE = VAGENTE,
        OBSERVACIONES = VOBSERVACIONES,
        MOTIVO = VMOTIVO
    WHERE FOLIO = VFOLIO;    
    COMMIT;
    VRESULTADO:='OK';
    --dbms_output.put_line('Resultado ' || VRESULTADO);
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            VRESULTADO:=SQLERRM(SQLCODE);
            dbms_output.put_line('Error ' ||SQLERRM(SQLCODE));
END SP_UPDBITBM_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_SET_TUTOR_BM(
VFOLIO                        IN   CALLCEN.BIT_BIOM_TUTOR.FOLIO%TYPE,
VNOMBRE                       IN   CALLCEN.BIT_BIOM_TUTOR.NOMBRE%TYPE,
VCODIGO_POSTAL                IN   CALLCEN.BIT_BIOM_TUTOR.CODIGO_POSTAL%TYPE,
VESTADO_CIUDAD                IN   CALLCEN.BIT_BIOM_TUTOR.ESTADO_CIUDAD%TYPE,
VDIRECCION                    IN   CALLCEN.BIT_BIOM_TUTOR.DIRECCION%TYPE,
VFECHA_NACIMIENTO            IN   CALLCEN.BIT_BIOM_TUTOR.FECHA_NACIMIENTO%TYPE,
PSCod_Error                   OUT  NUMBER,
PSMsg_Error                   OUT  VARCHAR2
)
IS
BEGIN
    INSERT INTO CALLCEN.BIT_BIOM_TUTOR
    (
        FOLIO,
        NOMBRE,
        CODIGO_POSTAL,
        ESTADO_CIUDAD,
        DIRECCION,
        FECHA_NACIMIENTO,
        FECHA_MODIFICACION,
        USUARIO_MODIFICO
    )
    VALUES
    (
        VFOLIO,
        VNOMBRE,
        VCODIGO_POSTAL,
        VESTADO_CIUDAD,
        VDIRECCION,
        VFECHA_NACIMIENTO,
        SYSDATE,
        'CALLCEN'
    );
    
    UPDATE CALLCEN.BITACORA_BIOM
    SET
        TUTORENCONTRADO = 1
    WHERE
        FOLIO = VFOLIO;
COMMIT;
PSMsg_Error:='Se guardo bien la informacion';
PSCod_Error:=0;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar guardar informacion de biom (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_SET_TUTOR_BM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_SET_PROD_SBP(
VID_PRODUCTO           IN   CALLCEN.CAT_CU_PROCTO.ID_PRODUCTO%TYPE,
VNOMBRE_PRODUCTO       IN   CALLCEN.CAT_CU_PROCTO.NOMBRE%TYPE,
VID_SUBPRODUCTO        IN   CALLCEN.CAT_CU_SBPROCTO.ID_SUBPRODUCTO%TYPE,
VNOMBRE_SUBPRODUCTO    IN   CALLCEN.CAT_CU_SBPROCTO.NOMBRE%TYPE,
PSCod_Error            OUT  NUMBER,
PSMsg_Error            OUT  VARCHAR2
)
AS
VEXISTE NUMBER;
VEXISTEPROD NUMBER;
VCERO NUMBER :=0;
VUSER VARCHAR(10):='CALLCEN';
BEGIN
    
    SELECT COUNT(1) INTO VEXISTE
    FROM CALLCEN.CAT_CU_SBPROCTO
    WHERE ID_PRODUCTO = VID_PRODUCTO
    AND ID_SUBPRODUCTO = VID_SUBPRODUCTO;
    
    SELECT COUNT(1) INTO VEXISTEPROD
    FROM CALLCEN.CAT_CU_PROCTO
    WHERE ID_PRODUCTO = VID_PRODUCTO;
    

    IF VEXISTEPROD = VCERO
    THEN
        
        INSERT INTO CALLCEN.CAT_CU_PROCTO
        (ID_PRODUCTO, NOMBRE,USUARIO_MODIFICO,FECHA_MODIFICACION)
        VALUES(VID_PRODUCTO,VNOMBRE_PRODUCTO,VUSER,SYSDATE);
    
        COMMIT;
        PSMsg_Error:='Nuevo producto en catalogo creado con exito';
        PSCod_Error:=0;
    ELSE
        PSMsg_Error:='Ya existe producto en catalogo';
        PSCod_Error:=-1;
    END IF;    
    

    IF VEXISTE = VCERO
    THEN

        INSERT INTO CALLCEN.CAT_CU_SBPROCTO
        (ID_PRODUCTO,ID_SUBPRODUCTO,NOMBRE,USUARIO_MODIFICO,FECHA_MODIFICACION) 
        VALUES(VID_PRODUCTO,VID_SUBPRODUCTO,VNOMBRE_SUBPRODUCTO,VUSER,SYSDATE);
    
        COMMIT;
        PSMsg_Error:='Nuevo subproducto en catalogo creado con exito';
        PSCod_Error:=0;
    ELSE
        PSMsg_Error:='Ya existe relacion producto/subproducto';
        PSCod_Error:=-1;
    END IF;
        
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar guardar informacion de biom (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_SET_PROD_SBP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_SET_PRODUCTO(
VID_PRODUCTO                  IN   CALLCEN.CAT_PRODUCTO.ID_PRODUCTO%TYPE,
VID_SUBPRODUCTO               IN   CALLCEN.CAT_PRODUCTO.ID_SUBPRODUCTO%TYPE,
VTUTOR                        IN   CALLCEN.CAT_PRODUCTO.TUTOR%TYPE,
PSCod_Error                   OUT  NUMBER,
PSMsg_Error                   OUT  VARCHAR2
)
AS
VDUPLICADO NUMBER;
VEXISTE NUMBER;
VUNO NUMBER:=1;
VCERO NUMBER :=0;
VUSER VARCHAR(10):='CALLCEN';
BEGIN
    SELECT COUNT(1) 
    INTO VDUPLICADO
    FROM CALLCEN.CAT_PRODUCTO
    WHERE 
        ID_PRODUCTO = VID_PRODUCTO 
    AND
        ID_SUBPRODUCTO = VID_SUBPRODUCTO; 
        
    IF VDUPLICADO = VCERO
    THEN 
        SELECT COUNT(1)
        INTO VEXISTE
        FROM CALLCEN.CAT_CU_SBPROCTO
        WHERE
            ID_PRODUCTO = VID_PRODUCTO
        AND
            ID_SUBPRODUCTO = VID_SUBPRODUCTO;
        IF VEXISTE = VUNO
        THEN
            INSERT INTO CALLCEN.CAT_PRODUCTO
            (
                ID_PRODUCTO_FULL,
                ID_PRODUCTO,
                ID_SUBPRODUCTO, 
                TUTOR,
                FECHA_MODIFICACION,
                USUARIO_MODIFICO
            )
            VALUES
            (
                CALLCEN.CAT_PROD_SEQ.NEXTVAL,
                VID_PRODUCTO,
                VID_SUBPRODUCTO,
                VTUTOR,
                SYSDATE,
                'CALLCEN'
            );
            COMMIT;
            PSMsg_Error:='Nuevo producto en catalogo creado con exito';
            PSCod_Error:=0;
        ELSE
            PSMsg_Error:='No existe esa relacion producto/subproducto';
            PSCod_Error:=-1;
        END IF;
    ELSE
        PSMsg_Error:='Producto ya existe en catalogo!';
        PSCod_Error:=-2;
    END IF;
        
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar guardar informacion de biom (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_SET_PRODUCTO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_SET_CLT_BIOM
(
    VNOMBRE               IN       CALLCEN.HIST_CLNT_BIOM.NOMBRE%TYPE,
    VAPELLIDO_PATERNO     IN       CALLCEN.HIST_CLNT_BIOM.APELLIDO_PATERNO%TYPE,
    VAPELLIDO_MATERNO     IN       CALLCEN.HIST_CLNT_BIOM.APELLIDO_MATERNO%TYPE,
    VCLIENTE_UNICO        IN       CALLCEN.HIST_CLNT_BIOM.CLIENTE_UNICO%TYPE,
    VID_ALNOVA            IN       CALLCEN.HIST_CLNT_BIOM.ID_ALNOVA%TYPE,
    VDIRECCION            IN       CALLCEN.HIST_CLNT_BIOM.DIRECCION%TYPE,
    VCOLONIA              IN       CALLCEN.HIST_CLNT_BIOM.COLONIA%TYPE,
    VESTADO               IN       CALLCEN.HIST_CLNT_BIOM.ESTADO%TYPE,
    VMUNICIPIO            IN       CALLCEN.HIST_CLNT_BIOM.MUNICIPIO%TYPE,
    VFECHA_NACIMIENTO     IN       CALLCEN.HIST_CLNT_BIOM.FECHA_NACIMIENTO%TYPE,
    VCODIGO_POSTAL        IN       CALLCEN.HIST_CLNT_BIOM.CODIGO_POSTAL%TYPE,
    VTELEFONO             IN       CALLCEN.HIST_CLNT_BIOM.TELEFONO%TYPE,
    PSCod_Error           OUT      NUMBER,
    PSMsg_Error           OUT      VARCHAR2
)
IS
BEGIN
    INSERT INTO CALLCEN.HIST_CLNT_BIOM
    (
        NOMBRE,
        APELLIDO_PATERNO,
        APELLIDO_MATERNO,
        CLIENTE_UNICO,
        ID_ALNOVA,
        DIRECCION,
        COLONIA,
        ESTADO,
        MUNICIPIO,
        FECHA_NACIMIENTO,
        CODIGO_POSTAL,
        TELEFONO,
        USUARIO_MODIFICO,
        FECHA_MODIFICACION
    )
    VALUES
    (
        VNOMBRE,
        VAPELLIDO_PATERNO,
        VAPELLIDO_MATERNO,
        VCLIENTE_UNICO,
        VID_ALNOVA,
        VDIRECCION,
        VCOLONIA,
        VESTADO,
        VMUNICIPIO,
        VFECHA_NACIMIENTO,
        VCODIGO_POSTAL,
        VTELEFONO,
        'CALLCEN',
        SYSDATE
    );
PSCod_Error:=0;
PSMsg_Error:='SE INSERTO CORRECTAMENTE LA INFORMACION HISTORICA';
EXCEPTION
    WHEN OTHERS THEN
        PSCod_Error:=1;
        PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al insertar información de hist_clnt_biom(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_SET_CLT_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_SEMFROATBIOM(
CPendiente                    OUT      NUMBER, 
CAtendiendo                   OUT      NUMBER,
CPendienteSup                 OUT      NUMBER,
CAtendiendoSup                OUT      NUMBER,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
AS
    VPENDIENTE VARCHAR(15);
    VATENDIENDO VARCHAR(15);
    VASIGNADO VARCHAR(15);
BEGIN
    VPENDIENTE := 'PENDIENTE';
    VATENDIENDO := 'ATENDIENDO';
    VASIGNADO := 'ASIGNADO';
SELECT COUNT(1) INTO CPendiente 
FROM CALLCEN.libera_biom
WHERE estatus =VPENDIENTE; 
SELECT COUNT(1) INTO CAtendiendo 
FROM CALLCEN.libera_biom
WHERE estatus =VATENDIENDO
OR estatus = VASIGNADO;
SELECT COUNT(1) INTO CPendienteSup
FROM CALLCEN.libera_biom_sup
WHERE estatus =VPENDIENTE;
SELECT COUNT(1) INTO CAtendiendoSup 
FROM CALLCEN.libera_biom_sup
WHERE estatus =VATENDIENDO
OR estatus = VASIGNADO;          
PSCod_Error:=0;
PSMsg_Error:='Consulta de semaforo realizada correctamente';
EXCEPTION
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar llamar al semaforo (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_SEMFROATBIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_SEMFRATCU_CU(
CPendiente                    OUT      NUMBER, 
CAtendiendo                   OUT      NUMBER,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
AS
    VPENDIENTE VARCHAR(15);
    VATENDIENDO VARCHAR(15);
    VASIGNADO VARCHAR(15);
BEGIN
    VPENDIENTE := 'PENDIENTE';
    VATENDIENDO := 'ATENDIENDO';
    VASIGNADO := 'ASIGNADO';
SELECT COUNT(1) INTO CPendiente 
FROM CALLCEN.libera_cu
WHERE estatus =VPENDIENTE; 
SELECT COUNT(1) INTO CAtendiendo 
FROM CALLCEN.libera_cu
WHERE estatus =VATENDIENDO
OR estatus = VASIGNADO;           
PSCod_Error:=0;
PSMsg_Error:='Consulta de semaforo realizada correctamente';
EXCEPTION
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar llamar al semaforo (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_SEMFRATCU_CU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_SEMAFOROBIOM(
CPendiente                    OUT      NUMBER, 
CAutorizado                   OUT      NUMBER, 
CRechazado                    OUT      NUMBER, 
CCancelado                    OUT      NUMBER,
CAtendiendo                   OUT      NUMBER,
CCaptacion                    OUT      NUMBER,
Ccredito                      OUT      NUMBER,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
AS
    VPENDIENTE VARCHAR(15);
    VATENDIENDO VARCHAR(15);
    VASIGNADO VARCHAR(15);
    VDATEFORMAT VARCHAR(15);
    VUNO VARCHAR(5);
    VDOS VARCHAR(5);
    VTRES VARCHAR(5);
    VINIDAY     VARCHAR(15);
    VFINDAY     VARCHAR(15);
    VLONGDATEFORMAT VARCHAR(25);
BEGIN
    VLONGDATEFORMAT :=  'DD/MM/YYYY HH24:MI:SS';
    VPENDIENTE := 'PENDIENTE';
    VATENDIENDO := 'ATENDIENDO';
    VASIGNADO := 'ASIGNADO';
    VDATEFORMAT := 'dd/mm/yyyy';
    VUNO := '1';
    VDOS := '2';
    VTRES:= '3';
    VINIDAY     :=  ' 00:00:00';
    VFINDAY     :=  ' 23:59:59';
SELECT COUNT(1) INTO CAutorizado 
FROM CALLCEN.bitacora_biom
WHERE estatus = VUNO
AND TO_CHAR(FECHA_modificacion, VDATEFORMAT) = TO_CHAR(SYSDATE,VDATEFORMAT);
SELECT COUNT(1) INTO CRechazado 
FROM CALLCEN.bitacora_biom
WHERE estatus = VDOS
AND TO_CHAR(FECHA_modificacion, VDATEFORMAT) = TO_CHAR(SYSDATE,VDATEFORMAT);
SELECT COUNT(1) INTO CCAncelado 
FROM CALLCEN.bitacora_biom
WHERE estatus = VTRES
AND TO_CHAR(FECHA_modificacion, VDATEFORMAT) = TO_CHAR(SYSDATE,VDATEFORMAT);
SELECT COUNT(1) INTO CPendiente 
FROM CALLCEN.libera_biom
WHERE estatus =VPENDIENTE; 
SELECT COUNT(1) INTO CAtendiendo 
FROM CALLCEN.libera_biom
WHERE estatus =VATENDIENDO
OR estatus = VASIGNADO;           
SELECT COUNT(1) INTO CCaptacion
FROM CALLCEN.BITACORA_BIOM
WHERE FECHA_MODIFICACION
    BETWEEN
        TO_DATE(CONCAT(TO_CHAR(SYSDATE,VDATEFORMAT),VINIDAY),VLONGDATEFORMAT)
    AND
        TO_DATE(CONCAT(TO_CHAR(SYSDATE,VDATEFORMAT), VFINDAY),VLONGDATEFORMAT)
AND ESTATUS IN (VPENDIENTE,VATENDIENDO,VASIGNADO,VUNO,VDOS,VTRES)
AND CUENTA_CLIENTE IS NOT NULL;
SELECT COUNT(1) INTO CCredito
FROM CALLCEN.BITACORA_BIOM
WHERE FECHA_MODIFICACION
    BETWEEN
        TO_DATE(CONCAT(TO_CHAR(SYSDATE,VDATEFORMAT),VINIDAY),VLONGDATEFORMAT)
    AND
        TO_DATE(CONCAT(TO_CHAR(SYSDATE,VDATEFORMAT), VFINDAY),VLONGDATEFORMAT)
AND ESTATUS IN (VPENDIENTE,VATENDIENDO,VASIGNADO,VUNO,VDOS,VTRES)
AND CUENTA_CLIENTE IS NULL;
PSCod_Error:=0;
PSMsg_Error:='Consulta de semaforo realizada correctamente';
EXCEPTION
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar llamar al semaforo (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_SEMAFOROBIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_OBTIENE_FCU
(              
    VFOLIO               IN      CALLCEN.FOLIO_CU.FOLIO%TYPE,
    VSOLICITANTE         OUT     SYS_REFCURSOR,
    VCLIENTESUNICOS      OUT     SYS_REFCURSOR,
    PSCod_Error          OUT     NUMBER,
    PSMsg_Error          OUT     VARCHAR2
)
IS
BEGIN
    OPEN VCLIENTESUNICOS FOR
    SELECT 
        CTE_UNICO
    FROM CALLCEN.FOLIO_CTEU
    WHERE FOLIO_CTEU.FOLIO = VFOLIO;
    OPEN VSOLICITANTE FOR
    SELECT
        FOLIO_CU.PAIS,
        FOLIO_CU.CANAL,
        FOLIO_CU.SUCURSAL,
        FOLIO_CU.NOMBRE,
        FOLIO_CU.APATERNO,
        FOLIO_CU.AMATERNO,
        FOLIO_CU.FECHASOLICITUD,
        FOLIO_CU.FOTO,
        FOLIO_CU.FECHA_NACIMIENTO,
        FOLIO_CTEU.ORDEN_CU,
        FOLIO_CTEU.CTE_UNICO       
    FROM CALLCEN.FOLIO_CU
    INNER JOIN CALLCEN.FOLIO_CTEU ON CALLCEN.FOLIO_CU.FOLIO = CALLCEN.FOLIO_CTEU.FOLIO 
    WHERE FOLIO_CU.FOLIO = VFOLIO
    ORDER BY FOLIO_CTEU.ORDEN_CU ASC;
        
PSCod_Error:=0;
PSMsg_Error:='se obtuvieron los datos del folio correctamente';
EXCEPTION 
   when others then
 PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar obtener la informacion del folio (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_OBTIENE_FCU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_OBTIENE_CTEU
(              
    VFOLIO               IN      CALLCEN.FOLIO_CTEU.FOLIO%TYPE,
    VCLIENTEUNICO        IN      CALLCEN.FOLIO_CTEU.CTE_UNICO%TYPE,
    VEXISTE              OUT     NUMBER,
    VINFORMACION         OUT     SYS_REFCURSOR,
    PSCod_Error          OUT     NUMBER,
    PSMsg_Error          OUT     VARCHAR2
)
IS
BEGIN
    SELECT OSOCKET INTO VEXISTE 
    FROM CALLCEN.FOLIO_CTEU 
    WHERE FOLIO =VFOLIO 
    AND CTE_UNICO = VCLIENTEUNICO;
    IF VEXISTE <> 0
    THEN
    OPEN VINFORMACION FOR
    SELECT
        FOTOHISTORICA,
        NOMBRE,
        APATERNO,
        AMATERNO,
        FECHA_NACIMIENTO,
        CALLE,
        NUM_EXTERIOR,
        NUM_INTERIOR,
        COLONIA,
        POBLACION,
        ESTADO,
        CODIGO_POSTAL,
        PRODUCTO,
        ID_FOTO_HD
    FROM CALLCEN.FOLIO_CTEU
    WHERE FOLIO = VFOLIO
    AND CTE_UNICO = VCLIENTEUNICO;
    END IF;
PSCod_Error:=0;
PSMsg_Error:='se obtuvieron los datos del cliente unico correctamente';
EXCEPTION 
   when others then
 PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar obtener la informacion del cliente unico(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_OBTIENE_CTEU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_LIB_BIOM_SUP(
VAGENTESTIMEDOUT              OUT      SYS_REFCURSOR,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
AS
	
	VPENDIENTE VARCHAR(15):= 'PENDIENTE';
    VATENDIENDO VARCHAR(15):= 'ATENDIENDO';
    VASIGNADO VARCHAR(15):= 'ASIGNADO';
    VNOASIGNADO VARCHAR(15):='NO ASIGNADO';
    VIDPAIS NUMBER:=1;
    VIDESTATUS NUMBER:=1;
    VCERO NUMBER:=0;
    VINTERVALO INTERVAL DAY TO SECOND;
	
    CURSOR vcur_reasigna_folio IS 
    select agente 
    from callcen.LIBERA_BIOM_SUP
    where agente <> VNOASIGNADO
    group by agente
    having count(1)>VCERO;
    v_agenteLogueado number;
    
BEGIN
    VINTERVALO  := INTERVAL '10' MINUTE;
    
    FOR dato IN vcur_reasigna_folio LOOP
        select count(1) into v_agenteLogueado
        from callcen.agentes
        where agente = dato.agente
        AND ID_PAIS = VIDPAIS
        AND ID_ESTATUS = VIDESTATUS;
        if v_agenteLogueado = VCERO then
            update CALLCEN.LIBERA_BIOM_SUP
            set estatus = VPENDIENTE,
                 agente = VNOASIGNADO,
            fecha_modificacion = sysdate
            where agente = dato.agente;
        end if;
    END LOOP;
    COMMIT;
    IF(vcur_reasigna_folio%ISOPEN)
        THEN
            CLOSE vcur_reasigna_folio;
    END IF;
OPEN  VAGENTESTIMEDOUT  FOR
SELECT AGENTE FROM CALLCEN.LIBERA_BIOM_SUP
WHERE AGENTE<>VNOASIGNADO
AND ESTATUS IN (VASIGNADO,VATENDIENDO)
AND FECHA_MODIFICACION
NOT BETWEEN SYSDATE - VINTERVALO
AND SYSDATE;
UPDATE CALLCEN.LIBERA_BIOM_SUP
    SET ESTATUS = VPENDIENTE,
    AGENTE = VNOASIGNADO,
    FECHA_MODIFICACION = SYSDATE
WHERE AGENTE<>VNOASIGNADO
AND FECHA_MODIFICACION
NOT BETWEEN SYSDATE - VINTERVALO
AND SYSDATE;
COMMIT;
PSCod_Error:=0;
PSMsg_Error:='Folios Liberados Correctamente';
EXCEPTION 
   when others then
 PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar liberar los folios(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_LIB_BIOM_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_LIBERA_FCU(
VAGENTESTIMEDOUT              OUT      SYS_REFCURSOR,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
AS
    CURSOR vcur_reasigna_folio IS 
    select agente 
    from callcen.LIBERA_CU
    where agente <> 'NO ASIGNADO'
    group by agente
    having count(1)>0;
    v_agenteLogueado number;
    VPENDIENTE VARCHAR(15);
    VATENDIENDO VARCHAR(15);
    VASIGNADO VARCHAR(15);
    VNOASIGNADO VARCHAR(15);
    VIDPAIS NUMBER;
    VIDESTATUS NUMBER;
    VCERO NUMBER;
    VINTERVALO INTERVAL DAY TO SECOND;
BEGIN
    VINTERVALO  := INTERVAL '10' MINUTE;
    VPENDIENTE  := 'PENDIENTE';
    VATENDIENDO := 'ATENDIENDO';
    VASIGNADO   := 'ASIGNADO';
    VNOASIGNADO := 'NO ASIGNADO';
    VIDPAIS     :=1;
    VIDESTATUS  :=1;
    VCERO       :=0;
    FOR dato IN vcur_reasigna_folio LOOP
        select count(1) into v_agenteLogueado
        from callcen.agentes
        where agente = dato.agente
        AND ID_PAIS = VIDPAIS
        AND ID_ESTATUS = VIDESTATUS;
        if v_agenteLogueado = VCERO then
            update CALLCEN.LIBERA_CU
            set estatus = VPENDIENTE,
                 agente = VNOASIGNADO,
            fecha_modificacion = sysdate
            where agente = dato.agente;
        end if;
    END LOOP;
    COMMIT;
    IF(vcur_reasigna_folio%ISOPEN)
        THEN
            CLOSE vcur_reasigna_folio;
    END IF;
OPEN  VAGENTESTIMEDOUT  FOR
SELECT AGENTE FROM CALLCEN.LIBERA_CU
WHERE AGENTE<>VNOASIGNADO
AND ESTATUS IN (VASIGNADO,VATENDIENDO)
AND FECHA_MODIFICACION
NOT BETWEEN SYSDATE - VINTERVALO
AND SYSDATE;
UPDATE CALLCEN.LIBERA_CU
    SET ESTATUS = VPENDIENTE,
    AGENTE = VNOASIGNADO,
    FECHA_MODIFICACION = SYSDATE
WHERE AGENTE<>VNOASIGNADO
AND ESTATUS IN (VASIGNADO,VATENDIENDO)
AND FECHA_MODIFICACION
NOT BETWEEN SYSDATE - VINTERVALO
AND SYSDATE;
COMMIT;
PSCod_Error:=0;
PSMsg_Error:='Liberacion de folios cu realizada correctamente';
EXCEPTION 
   when others then
 PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar llamar al liberador de folios cu (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_LIBERA_FCU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_LIBERA_BIOM(
VAGENTESTIMEDOUT              OUT      SYS_REFCURSOR,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
AS
    CURSOR vcur_reasigna_folio IS 
    select agente 
    from callcen.LIBERA_BIOM
    where agente <> 'NO ASIGNADO'
    group by agente
    having count(1)>0;
    v_agenteLogueado number;
    VPENDIENTE VARCHAR(15);
    VATENDIENDO VARCHAR(15);
    VASIGNADO VARCHAR(15);
    VNOASIGNADO VARCHAR(15);
    VIDPAIS NUMBER;
    VIDESTATUS NUMBER;
    VCERO NUMBER;
    VINTERVALO INTERVAL DAY TO SECOND;
BEGIN
    VINTERVALO  := INTERVAL '10' MINUTE;
    VPENDIENTE  := 'PENDIENTE';
    VATENDIENDO := 'ATENDIENDO';
    VASIGNADO   := 'ASIGNADO';
    VNOASIGNADO := 'NO ASIGNADO';
    VIDPAIS     :=1;
    VIDESTATUS  :=1;
    VCERO       :=0;
    FOR dato IN vcur_reasigna_folio LOOP
        select count(1) into v_agenteLogueado
        from callcen.agentes
        where agente = dato.agente
        AND ID_PAIS = VIDPAIS
        AND ID_ESTATUS = VIDESTATUS;
        if v_agenteLogueado = VCERO then
            update CALLCEN.LIBERA_BIOM
            set estatus = VPENDIENTE,
                 agente = VNOASIGNADO,
            fecha_modificacion = sysdate
            where agente = dato.agente;
        end if;
    END LOOP;
    COMMIT;
    IF(vcur_reasigna_folio%ISOPEN)
        THEN
            CLOSE vcur_reasigna_folio;
    END IF;
OPEN  VAGENTESTIMEDOUT  FOR
SELECT AGENTE FROM CALLCEN.LIBERA_BIOM
WHERE AGENTE<>VNOASIGNADO
AND ESTATUS IN (VASIGNADO,VATENDIENDO)
AND FECHA_MODIFICACION
NOT BETWEEN SYSDATE - VINTERVALO
AND SYSDATE;
UPDATE CALLCEN.LIBERA_BIOM
    SET ESTATUS = VPENDIENTE,
    AGENTE = VNOASIGNADO,
    FECHA_MODIFICACION = SYSDATE
WHERE AGENTE<>VNOASIGNADO
AND FECHA_MODIFICACION
NOT BETWEEN SYSDATE - VINTERVALO
AND SYSDATE;
COMMIT;
PSCod_Error:=0;
PSMsg_Error:='Folios Liberados Correctamente';
EXCEPTION 
   when others then
 PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar liberar los folios(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_LIBERA_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INS_CON_R15 (
   V_ANIO                CALLCEN.CONTRATOS_R15.ANIO%TYPE,
   V_MES                 CALLCEN.CONTRATOS_R15.MES%TYPE,
   V_CONTRATOS_FISICAS   CALLCEN.CONTRATOS_R15.CONTRATOS_PERSONAS_FISICAS%TYPE,
   V_CONTRATOS_MORALES   CALLCEN.CONTRATOS_R15.CONTRATOS_PERSONAS_MORALES%TYPE,
   V_USUARIO_MODIFICO    CALLCEN.CONTRATOS_R15.USUARIO_MODIFICO%TYPE
)
IS
   NUMEROREGISTROS   INTEGER;
   N_MES VARCHAR(2);
BEGIN
    
    IF LENGTH(V_MES) < 2
    THEN
        N_MES:='0'||V_MES;
    ELSE
        N_MES:=V_MES;
    END IF;

    SELECT COUNT (1)
     INTO NUMEROREGISTROS
     FROM CALLCEN.CONTRATOS_R15 CR
    WHERE CR.ANIO = V_ANIO
      AND CR.MES = N_MES
      AND CR.USUARIO_MODIFICO = V_USUARIO_MODIFICO;

    
   IF NUMEROREGISTROS = 0
   THEN
      INSERT INTO CALLCEN.CONTRATOS_R15 (ANIO, MES, CONTRATOS_PERSONAS_FISICAS,CONTRATOS_PERSONAS_MORALES, USUARIO_MODIFICO,FECHA_MODIFICO)
           VALUES (V_ANIO, N_MES, V_CONTRATOS_FISICAS, V_CONTRATOS_MORALES, V_USUARIO_MODIFICO, SYSDATE );
   ELSE
        DBMS_OUTPUT.PUT_LINE('YA EXISTE EL REGISTO EN BD');
        UPDATE CALLCEN.CONTRATOS_R15 CR SET CR.CONTRATOS_PERSONAS_FISICAS =  V_CONTRATOS_FISICAS,
                                    CR.CONTRATOS_PERSONAS_MORALES =  V_CONTRATOS_MORALES
                                    WHERE CR.ANIO = V_ANIO
                                    AND CR.MES = N_MES
                                    AND CR.USUARIO_MODIFICO = V_USUARIO_MODIFICO;
   END IF;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20100,'Error ocurrido al insertar en la tabla CONTRATOS_R15 ('|| SQLCODE|| '  '|| SQLERRM || ')');
END SP_INS_CON_R15;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INS_BENF_BIO (
VFOLIO               IN  VARCHAR2,
VNOMBRE              IN  VARCHAR2,
VA_PATERNO           IN  VARCHAR2,
VA_MATERNO           IN  VARCHAR2,
VFECHA_NACIMIENTO    IN  DATE,
PSCod_Error          OUT NUMBER,
PSMsg_Error          OUT VARCHAR2)

AS

    VEXISTE NUMBER;

    BEGIN
             
        SELECT COUNT(1) INTO VEXISTE 
        FROM CALLCEN.BENEF_BIOMTRICO
        WHERE FOLIO = VFOLIO;
        

        IF VEXISTE = 0 THEN
            INSERT INTO CALLCEN.BENEF_BIOMTRICO
                (FOLIO,NOMBRE,A_PATERNO,A_MATERNO,FECHA_NACIMIENTO,FECHA_MODIFICACION,USUARIO_MODIFICO)
            VALUES(
                VFOLIO,
                VNOMBRE,
                VA_PATERNO,
                VA_MATERNO,
                VFECHA_NACIMIENTO,
                SYSDATE,
                'CALLCEN');                              
                
            COMMIT;
            PSCod_Error:=0;
            PSMsg_Error:='OK';
        ELSE
        
            PSCod_Error:=-1;
            PSMsg_Error:='REGISTRO REPETIDO';
        
        END IF;

        EXCEPTION
            WHEN OTHERS THEN
                PSCod_Error:=1;
                PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
                ROLLBACK;
                RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al insertar en BENEF_BIOMTRICO (' || SQLCODE || '  ' || SQLERRM || ')');

END SP_INS_BENF_BIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INSR_CTEBIOM
(
VFOLIO                  IN  CALLCEN.CLIENTE_BIOM.FOLIO%TYPE,
VCTE_UNICO              IN  CALLCEN.CLIENTE_BIOM.CTE_UNICO%TYPE,
VFECHA_NACIMIENTO       IN  CALLCEN.CLIENTE_BIOM.FECHA_NACIMIENTO%TYPE,
VENTIDAD_NACIMIENTO     IN  CALLCEN.CLIENTE_BIOM.ENTIDAD_NACIMIENTO%TYPE,
VFECHA_ALTA             IN  CALLCEN.CLIENTE_BIOM.FECHA_ALTA%TYPE,
VFECHA_FOTO_HISTORICA   IN  CALLCEN.CLIENTE_BIOM.FECHA_FOTO_HISTORICA%TYPE,
PSCod_Error             OUT NUMBER,
PSMsg_Error             OUT VARCHAR2
)
IS

VEXISTE NUMBER;

BEGIN

    SELECT COUNT(1) INTO VEXISTE
    FROM CLIENTE_BIOM
    WHERE FOLIO = VFOLIO;
    
    IF VEXISTE = 0 THEN
    
        INSERT INTO CALLCEN.CLIENTE_BIOM
        (FOLIO,CTE_UNICO,FECHA_NACIMIENTO,ENTIDAD_NACIMIENTO,FECHA_ALTA,FECHA_FOTO_HISTORICA,FECHA_MODIFICACION,USUARIO_MODIFICO)
        VALUES(
            VFOLIO,
            VCTE_UNICO,
            VFECHA_NACIMIENTO,
            VENTIDAD_NACIMIENTO,
            VFECHA_ALTA,
            VFECHA_FOTO_HISTORICA,
            SYSDATE,
            'CALLCEN'
        );
    ELSE
    
        UPDATE CALLCEN.CLIENTE_BIOM
        SET 
            CTE_UNICO = VCTE_UNICO,  
            FECHA_NACIMIENTO = VFECHA_NACIMIENTO,
            ENTIDAD_NACIMIENTO = VENTIDAD_NACIMIENTO,
            FECHA_ALTA = VFECHA_ALTA,
            FECHA_FOTO_HISTORICA = VFECHA_FOTO_HISTORICA,
            FECHA_MODIFICACION = SYSDATE,
            USUARIO_MODIFICO = 'CALLCEN'
        WHERE FOLIO = VFOLIO;
    
    END IF;
    
    COMMIT;
    PSCod_Error:=0;
    PSMsg_Error:='OK';
EXCEPTION
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al insertar cliente en CLIENTE_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_INSR_CTEBIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INSERTA_XML(SUCURSAL IN VARCHAR2, CLIENTE IN VARCHAR2, TARJETA IN VARCHAR2, AGENTE IN VARCHAR2, MOTIVO IN VARCHAR2, MSG OUT VARCHAR2) IS

BEGIN

  INSERT INTO CALLCEN.CANCELACIONES_XML
       VALUES ( SUCURSAL, CLIENTE, TARJETA,
                SYSDATE, AGENTE, MOTIVO
              );
  COMMIT;
  MSG:='OK. OPERACION REALIZADA CON EXITO';

EXCEPTION
  WHEN OTHERS THEN
     MSG:='ERROR. '||SQLERRM;

END SP_INSERTA_XML;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INSERTA_LCU
(
VFOLIO              IN  CALLCEN.FOLIO_CU.FOLIO%TYPE,
VPAIS               IN  CALLCEN.FOLIO_CU.PAIS%TYPE,
VFECHASOLICITUD     IN  CALLCEN.FOLIO_CU.FECHASOLICITUD%TYPE,
PSCod_Error         OUT NUMBER,
PSMsg_Error         OUT VARCHAR2
)
IS
BEGIN
    INSERT INTO CALLCEN.LIBERA_CU
    (
        FOLIO,    
        ESTATUS,
        AGENTE,
        FECHA_SOLICITUD, 
        PAIS,
        FECHA_MODIFICACION,
        USUARIO_MODIFICO
    )
    VALUES
    (
        VFOLIO,   
        'PENDIENTE',
        'NO ASIGNADO',  
        VFECHASOLICITUD,
        VPAIS,        
        SYSDATE,
        'CALLCEN'
    );
    COMMIT;
PSCod_Error:=0;
PSMsg_Error:='Se inserto correctamente el folio de CU para liberar';
EXCEPTION
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al insertar folio de CU para liberar(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_INSERTA_LCU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INSERTA_FCU
(
VFOLIO              IN  CALLCEN.FOLIO_CU.FOLIO%TYPE,
VPAIS               IN  CALLCEN.FOLIO_CU.PAIS%TYPE,
VCANAL              IN  CALLCEN.FOLIO_CU.CANAL%TYPE,
VSUCURSAL           IN  CALLCEN.FOLIO_CU.SUCURSAL%TYPE,
VNOMBRE             IN  CALLCEN.FOLIO_CU.NOMBRE%TYPE,
VAPATERNO           IN  CALLCEN.FOLIO_CU.APATERNO%TYPE,
VAMATERNO           IN  CALLCEN.FOLIO_CU.AMATERNO%TYPE,
VFECHA_NACIMIENTO   IN  CALLCEN.FOLIO_CU.FECHA_NACIMIENTO%TYPE,
VFOTO               IN  CALLCEN.FOLIO_CU.FOTO%TYPE,
VFECHASOLICITUD     IN  CALLCEN.FOLIO_CU.FECHASOLICITUD%TYPE,
PSCod_Error         OUT NUMBER,
PSMsg_Error         OUT VARCHAR2
)
AS
    UNIQUE_CONSTRAINT_VIOLATED EXCEPTION;
    PRAGMA EXCEPTION_INIT(UNIQUE_CONSTRAINT_VIOLATED, -00001);
BEGIN
    INSERT INTO CALLCEN.FOLIO_CU
    (
        FOLIO,             
        PAIS,
        CANAL,
        SUCURSAL,
        NOMBRE,
        APATERNO,
        AMATERNO,
        FECHA_NACIMIENTO,
        FOTO,
        FECHASOLICITUD,
        FECHA_MODIFICACION,
        USUARIO_MODIFICO
    )
    VALUES
    (
        VFOLIO,             
        VPAIS,
        VCANAL,
        VSUCURSAL,
        VNOMBRE,
        VAPATERNO,
        VAMATERNO,
        VFECHA_NACIMIENTO,
        VFOTO,
        VFECHASOLICITUD,
        SYSDATE,
        'CALLCEN'
    );
    INSERT INTO CALLCEN.BITACORA_CU
    (
        FOLIO,         
        FECHA_MODIFICACION,
        USUARIO_MODIFICO
    )
    VALUES
    (
        VFOLIO,        
        SYSDATE,
        'CALLCEN'
    );
    COMMIT;
PSCod_Error:=0;
PSMsg_Error:='Se inserto correctamente el folio de CU';
EXCEPTION
        WHEN UNIQUE_CONSTRAINT_VIOLATED THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al insertar folio de CU (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_INSERTA_FCU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INSERTA_CTEU
(
VFOLIO              IN  CALLCEN.FOLIO_CTEU.FOLIO%TYPE,
VCTE_UNICO          IN  CALLCEN.FOLIO_CTEU.CTE_UNICO%TYPE,
VORDEN_CU           IN  CALLCEN.FOLIO_CTEU.ORDEN_CU%TYPE,
PSCod_Error         OUT NUMBER,
PSMsg_Error         OUT VARCHAR2
)
IS
BEGIN
    INSERT INTO CALLCEN.FOLIO_CTEU
    (
        FOLIO,
        CTE_UNICO,
        ORDEN_CU,
        FECHA_MODIFICACION,
        USUARIO_MODIFICO
    )
    VALUES
    (
        VFOLIO,
        VCTE_UNICO,
        VORDEN_CU,
        SYSDATE,
        'CALLCEN'
    );
    COMMIT;
PSCod_Error:=0;
PSMsg_Error:='Se inserto correctamente el folio de CTEU';
EXCEPTION
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al insertar folio de CTEU (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_INSERTA_CTEU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INSBM_MM_SUP ( 
VFOLIO                IN          callcen.bitacora_biom.FOLIO%TYPE,
VESTATUS              IN          callcen.bitacora_biom.ESTATUS%TYPE,  
VAGENTE               IN          callcen.bitacora_biom.AGENTE%type,   
VOBSERVACIONES        IN          callcen.bitacora_biom.OBSERVACIONES%type,
VMOTIVO               IN          callcen.bitacora_biom.MOTIVO%type,
VURL_DIGI             IN          callcen.bitacora_biom.URL_DIGITALIZACION%type,
VURL_DIG_HISTORICA    IN          callcen.bitacora_biom.URL_DIG_HISTORICA%type,
VPAIS                 IN          callcen.bit_biom_sup.PAIS_SOLICITANTE%type,
VCTE_UNICO            IN          callcen.bit_biom_sup.CTE_UNICO%type,
VRESULTADO            OUT         VARCHAR
)                                                                                                                                                                                                                       
AS
VFECHA DATE;
VUSER VARCHAR(10):= 'CALLCEN';
VPENDIENTE VARCHAR(15):= 'PENDIENTE';
VNOASIGNADO VARCHAR(15):= 'NO ASIGNADO';
BEGIN
    SELECT SYSDATE INTO VFECHA  FROM DUAL;
    DELETE CALLCEN.LIBERA_BIOM
    WHERE FOLIO = VFOLIO;
          
    UPDATE CALLCEN.BITACORA_BIOM
    SET ESTATUS = VESTATUS,
        FECHA_MODIFICACION = VFECHA,
        AGENTE = VAGENTE,
        OBSERVACIONES = VOBSERVACIONES,
        MOTIVO = VMOTIVO,
        URL_DIGITALIZACION = VURL_DIGI,
        URL_DIG_HISTORICA = VURL_DIG_HISTORICA
    WHERE FOLIO = VFOLIO;
    
    
    INSERT INTO CALLCEN.LIBERA_BIOM_SUP
    (
        FOLIO,
        ESTATUS,
        PAIS_SOLICITANTE,
        USUARIO_MODIFICO,
        FECHA_MODIFICACION,
        AGENTE,
        FECHA_REGISTRO
    )
    VALUES
    (
        VFOLIO,
        VPENDIENTE,
        VPAIS,
        VUSER,
        SYSDATE,
        VNOASIGNADO,
        SYSDATE
    );      
    INSERT INTO CALLCEN.BIT_BIOM_SUP
    (
        FOLIO,
        ESTATUS,
        AGENTE,
        PAIS_SOLICITANTE,
        USUARIO_MODIFICO,
        FECHA_MODIFICACION,
        FECHA_REGISTRO,
        CTE_UNICO
    )
    VALUES
    (
        VFOLIO,
        VPENDIENTE,
        VNOASIGNADO,
        VPAIS,
        VUSER,
        SYSDATE,
        SYSDATE,
        VCTE_UNICO
    );
    
    COMMIT;
    VRESULTADO:='OK';
    --dbms_output.put_line('Resultado ' || VRESULTADO);
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            VRESULTADO:=SQLERRM(SQLCODE);
            dbms_output.put_line('Error ' ||SQLERRM(SQLCODE));
END SP_INSBM_MM_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_INSBITAUX(V_AGENTE IN VARCHAR, V_IDPAIS IN NUMBER, V_IN IN VARCHAR, V_OUT IN VARCHAR,
                                              V_CUENTA IN VARCHAR, V_TARJETA IN VARCHAR, V_ACCION IN VARCHAR, V_TRANSACCION IN VARCHAR,
                                       V_OBSERVACIONES IN VARCHAR, MSG OUT VARCHAR ) IS


BEGIN

     MSG:='OK. OPERACION REALIZADA CON EXITO';


     INSERT INTO CALLCEN.BIT_AUX
     VALUES(V_CUENTA, V_TARJETA,V_ACCION,V_AGENTE, TRUNC(SYSDATE), TO_CHAR(SYSDATE,'HH24:MI:SS'),
             V_IN,V_OUT, V_IDPAIS,V_TRANSACCION,V_OBSERVACIONES);
     COMMIT;

     EXCEPTION
                WHEN OTHERS THEN
                       MSG:='ERROR. '||SQLERRM;
                    ROLLBACK;

END SP_INSBITAUX;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_TUTOR_BM(
VFOLIO                        IN   CALLCEN.BIT_BIOM_TUTOR.FOLIO%TYPE,
VNOMBRE                       OUT   CALLCEN.BIT_BIOM_TUTOR.NOMBRE%TYPE,
VCODIGO_POSTAL                OUT   CALLCEN.BIT_BIOM_TUTOR.CODIGO_POSTAL%TYPE,
VESTADO_CIUDAD                OUT   CALLCEN.BIT_BIOM_TUTOR.ESTADO_CIUDAD%TYPE,
VDIRECCION                    OUT   CALLCEN.BIT_BIOM_TUTOR.DIRECCION%TYPE,
VFECHA_NACIMIENTO            OUT   CALLCEN.BIT_BIOM_TUTOR.FECHA_NACIMIENTO%TYPE,
PSCod_Error                   OUT   NUMBER,
PSMsg_Error                   OUT   VARCHAR2
)
IS
VEXISTE NUMBER;
VUNO NUMBER := 1;
BEGIN
    SELECT TUTORENCONTRADO INTO VEXISTE
    FROM 
    CALLCEN.BITACORA_BIOM
    WHERE FOLIO = VFOLIO;
    
    IF VEXISTE = VUNO
    THEN
        PSCod_Error := 0;
        SELECT 
            NOMBRE,
            CODIGO_POSTAL,
            ESTADO_CIUDAD,
            DIRECCION,
            FECHA_NACIMIENTO
        INTO
            VNOMBRE,
            VCODIGO_POSTAL,
            VESTADO_CIUDAD,
            VDIRECCION,
            VFECHA_NACIMIENTO
        FROM CALLCEN.BIT_BIOM_TUTOR
        WHERE FOLIO = VFOLIO;
    ELSE
        PSCod_Error := -1;
    END IF;
PSMsg_Error:='Se guardo bien la informacion';
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar guardar informacion de biom (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_TUTOR_BM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_PROD_SUB(
    CPRODUNO            OUT     SYS_REFCURSOR,
    CPRODUNO            OUT     SYS_REFCURSOR,
    CPRODUNO            OUT     SYS_REFCURSOR,
    PSCod_Error         OUT     NUMBER,
    PSMsg_Error         OUT     VARCHAR2
)
AS
    VPRODUNO        NUMBER;
    VPRODDOS        NUMBER;
    VPRODCINCO      NUMBER;
    VPRODSEIS       NUMBER;
    VPRODSIETE      NUMBER;
    VPRODONCE       NUMBER;
    VPRODTRECE      NUMBER;
    VPRODCATORCE    NUMBER;
BEGIN
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_PROCTO
(
VID_PRODUCTO            IN  CALLCEN.CAT_CU_PROCTO.ID_PRODUCTO%TYPE,
VID_SUBPRODUCTO         IN  CALLCEN.CAT_CU_SBPROCTO.ID_SUBPRODUCTO%TYPE,
VNOMBRE_PRODUCTO        OUT CALLCEN.CAT_CU_PROCTO.NOMBRE%TYPE,
VNOMBRE_SUBPRODUCTO     OUT CALLCEN.CAT_CU_SBPROCTO.NOMBRE%TYPE,
PSCod_Error             OUT NUMBER,
PSMsg_Error             OUT VARCHAR2
)
IS
BEGIN
    SELECT 
        CAT_CU_PROCTO.NOMBRE, CAT_CU_SBPROCTO.NOMBRE 
        INTO VNOMBRE_PRODUCTO, VNOMBRE_SUBPRODUCTO
    FROM CALLCEN.CAT_CU_PROCTO
    INNER JOIN CALLCEN.CAT_CU_SBPROCTO
    ON CAT_CU_PROCTO.ID_PRODUCTO = CAT_CU_SBPROCTO.ID_PRODUCTO
    WHERE CAT_CU_PROCTO.ID_PRODUCTO = VID_PRODUCTO
    AND CAT_CU_SBPROCTO.ID_SUBPRODUCTO = VID_SUBPRODUCTO;
PSCod_Error:=0;
PSMsg_Error:='Se obtuve el nombre del producto y subproducto';
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar obtener nombre de producto y sub producto  (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_PROCTO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_INT_FALL
(
    PAGENTE IN VARCHAR,
    PPAIS IN NUMBER,
    PRESPUESTA OUT VARCHAR,
    PINTENTOS OUT NUMBER   
)
AS
    VINTENTOS NUMBER;

BEGIN

       SELECT NVL(INTENTOS_FALLIDOS,0) INTO VINTENTOS
       FROM CALLCEN.AGENTES
       WHERE TRIM(agente) = TRIM(PAGENTE)
       AND id_pais=PPAIS;
       
       PRESPUESTA:='OK';
       PINTENTOS:=VINTENTOS;

       EXCEPTION
       WHEN OTHERS THEN
       PRESPUESTA:=SQLERRM(SQLCODE);
        PINTENTOS:=0;
       Dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_INF_BICU
(
    VFOLIO          IN      CALLCEN.BITACORA_CU.FOLIO%TYPE,
    VINFORMACION    OUT     SYS_REFCURSOR,
    VCLIENTESUNICOS OUT     SYS_REFCURSOR,
    PSCod_Error     OUT     NUMBER,
    PSMsg_Error     OUT     VARCHAR2
)
IS
BEGIN
    OPEN VINFORMACION FOR
    SELECT 
        BITACORA_CU.OBSERVACIONES,
        BITACORA_CU.MOTIVO,
        BITACORA_CU.CADENAENVIADA,
        BITACORA_CU.AGENTE,
        BITACORA_CU.INICIO_ATENCION,
        BITACORA_CU.ESTATUS,
        BITACORA_CU.DIGITALIZACION,
        BITACORA_CU.SALTOS,
        BITACORA_CU.FECHA_REGISTRO,
        BITACORA_CU.FECHA_MODIFICACION,
        BITACORA_CU.USUARIO_MODIFICO,
        FOLIO_CU.PAIS,
        FOLIO_CU.CANAL,
        FOLIO_CU.SUCURSAL,
        FOLIO_CU.NOMBRE,
        FOLIO_CU.APATERNO,
        FOLIO_CU.AMATERNO,
        FOLIO_CU.FECHASOLICITUD,
        FOLIO_CU.FOTO,
        FOLIO_CU.FECHA_NACIMIENTO,
        FOLIO_CU.FECHA_MODIFICACION,
        FOLIO_CU.USUARIO_MODIFICO
    FROM CALLCEN.BITACORA_CU 
    INNER JOIN CALLCEN.FOLIO_CU 
    ON CALLCEN.BITACORA_CU.FOLIO = CALLCEN.FOLIO_CU.FOLIO
    WHERE CALLCEN.BITACORA_CU.FOLIO=VFOLIO;
    OPEN VCLIENTESUNICOS FOR
    SELECT CTE_UNICO
    FROM CALLCEN.FOLIO_CTEU
    WHERE FOLIO = VFOLIO;
PSCod_Error     :=  0;
PSMsg_Error     :=  'Se obtuvo informacion de la bitacora correctamente';
EXCEPTION
   WHEN NO_DATA_FOUND THEN
        PSCod_Error:=1;
        PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
   WHEN OTHERS THEN
        PSCod_Error:=1;
        PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar obtener la informacion de la bitacora(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_INF_BICU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_INFO_CTEU
(
VFOLIO          IN      CALLCEN.FOLIO_CTEU.FOLIO%TYPE,
VCTE_UNICO      IN      CALLCEN.FOLIO_CTEU.FOLIO%TYPE,
VFOLIO_CTEU     OUT     SYS_REFCURSOR,
PSCod_Error     OUT     NUMBER,
PSMsg_Error     OUT     VARCHAR
)
IS
BEGIN
    OPEN VFOLIO_CTEU FOR
    SELECT 
        FOTOHISTORICA,
        FECHA_MODIFICACION,
        USUARIO_MODIFICO,
        NOMBRE,
        APATERNO,
        AMATERNO
        FECHA_NACIMIENTO,
        CALLE,
        NUM_EXTERIOR,
        NUM_INTERIOR,
        COLONIA,
        POBLACION,
        ESTADO,
        CODIGO_POSTAL,
        ID_FOTO_HD,
        OSOCKET,
        PRODUCTO
    FROM CALLCEN.FOLIO_CTEU
    WHERE FOLIO = VFOLIO;
PSCod_Error:=0;
PSMsg_Error:='se obtuvieron los datos del folio correctamente';
EXCEPTION 
   when no_data_found then
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
   when others then
            PSCod_Error:=2;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Ocurrio un error al intentar consultar(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_INFO_CTEU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_FOTO_CU(
VFOLIO                        IN      CALLCEN.FOLIO_CU.FOLIO%TYPE,
VFOTO                         OUT      CALLCEN.FOLIO_CU.FOTO%TYPE,
PSCod_Error                   OUT     NUMBER,
PSMsg_Error                   OUT     VARCHAR2
)
IS
BEGIN
    SELECT FOTO 
    INTO VFOTO
    FROM CALLCEN.FOLIO_CU
    WHERE FOLIO=VFOLIO;
    PSCod_Error:=0;
    PSMsg_Error:='Foto obtenida de la base correctamente';
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        WHEN OTHERS THEN
            PSCod_Error:=-1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar asignar un folio cu (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_FOTO_CU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_DAT_BIOM(
VFOLIO                        IN    CALLCEN.BITACORA_BIOM.FOLIO%TYPE,
VCUENTA_CLIENTE               OUT   CALLCEN.BITACORA_BIOM.CUENTA_CLIENTE%TYPE,
VSUCURSAL                     OUT   CALLCEN.BITACORA_BIOM.SUCURSAL%TYPE,
VPAIS_SOLICITANTE             OUT   CALLCEN.BITACORA_BIOM.PAIS_SOLICITANTE%TYPE,
VSUCURSAL_GESTORA             OUT   CALLCEN.BITACORA_BIOM.SUCURSAL_GESTORA%TYPE, 
VCTE_UNICO                    OUT   CALLCEN.BITACORA_BIOM.CTE_UNICO%TYPE,
VPRODUCTO                     OUT   CALLCEN.CAT_CU_PROCTO.NOMBRE%TYPE,
VSUBPRODUCTO                  OUT   CALLCEN.CAT_CU_SBPROCTO.NOMBRE%TYPE,
VTUTOR                        OUT   NUMBER,
VREC_FACIAL                   OUT   CALLCEN.BITACORA_BIOM.REC_FACIAL%TYPE,
VTIP_IDENTIFICACION           OUT   CALLCEN.BITACORA_BIOM.TIP_IDENTIFICACION%TYPE,
VTIPO_SOLICITUD               OUT   CALLCEN.FOLIOBIOMETRICO.TIPO_SOLICITUD%TYPE,
VCLIENTE_TIENDA               OUT   CALLCEN.FOLIOBIOMETRICO.CLIENTE_TIENDA%TYPE,
VNOMBRE_CLIENTE               OUT   CALLCEN.FOLIOBIOMETRICO.NOMBRE_CLIENTE%TYPE,
VFOTO_CLIENTE_NUEVA           OUT   CALLCEN.FOLIOBIOMETRICO.FOTO_CLIENTE_NUEVA%TYPE,
VFOTO_CLIENTE_HISTORICO       OUT   CALLCEN.FOLIOBIOMETRICO.FOTO_CLIENTE_HISTORICO%TYPE,
VCANAL_GESTORA                OUT   CALLCEN.FOLIOBIOMETRICO.CANAL_GESTORA%TYPE,
VORIGEN_SOLICITUD             OUT   CALLCEN.FOLIOBIOMETRICO.ORIGEN_SOLICITUD%TYPE,
VTIPO_TITULAR                 OUT   CALLCEN.FOLIOBIOMETRICO.TIPO_TITULAR%TYPE,
VTRATAMIENTO_ESPECIAL         OUT   CALLCEN.BITACORA_BIOM.TRATAMIENTO_ESPECIAL%TYPE,
PSCod_Error                   OUT   NUMBER,
PSMsg_Error                   OUT   VARCHAR2
)
IS
VPRODUCTOFULL INTEGER;
BEGIN
    SELECT 
        CUENTA_CLIENTE,
        SUCURSAL,
        PAIS_SOLICITANTE,
        SUCURSAL_GESTORA, 
        CTE_UNICO,
        TIPO_SOLICITUD,
        CLIENTE_TIENDA,
        NOMBRE_CLIENTE,
        FOTO_CLIENTE_NUEVA,
        FOTO_CLIENTE_HISTORICO,
        CANAL_GESTORA,
        ORIGEN_SOLICITUD,
        TIPO_TITULAR
    INTO
        VCUENTA_CLIENTE,
        VSUCURSAL,
        VPAIS_SOLICITANTE,
        VSUCURSAL_GESTORA, 
        VCTE_UNICO,
        VTIPO_SOLICITUD,
        VCLIENTE_TIENDA,
        VNOMBRE_CLIENTE,
        VFOTO_CLIENTE_NUEVA,
        VFOTO_CLIENTE_HISTORICO,
        VCANAL_GESTORA,
        VORIGEN_SOLICITUD,
        VTIPO_TITULAR
    FROM  CALLCEN.FOLIOBIOMETRICO
    WHERE FOLIO = VFOLIO;
    
    SELECT 
        ID_PRODUCTO_FULL,
        REC_FACIAL,
        TIP_IDENTIFICACION,
        TRATAMIENTO_ESPECIAL
    INTO
        VPRODUCTOFULL,
        VREC_FACIAL,
        VTIP_IDENTIFICACION,
        VTRATAMIENTO_ESPECIAL
    FROM CALLCEN.BITACORA_BIOM
    WHERE FOLIO = VFOLIO;
    
    IF VPRODUCTOFULL IS NOT NULL
    THEN
        SELECT 
            CAT_CU_PROCTO.NOMBRE, 
            CAT_CU_SBPROCTO.NOMBRE,
            CAT_PRODUCTO.TUTOR
        INTO
            VPRODUCTO,
            VSUBPRODUCTO,
            VTUTOR
        FROM CALLCEN.CAT_PRODUCTO
        INNER JOIN CALLCEN.CAT_CU_PROCTO ON  CALLCEN.CAT_CU_PROCTO.ID_PRODUCTO     = CALLCEN.CAT_PRODUCTO.ID_PRODUCTO
        INNER JOIN CALLCEN.CAT_CU_SBPROCTO ON CALLCEN.CAT_CU_SBPROCTO.ID_SUBPRODUCTO = CALLCEN.CAT_PRODUCTO.ID_SUBPRODUCTO
            AND CALLCEN.CAT_CU_SBPROCTO.ID_PRODUCTO = CALLCEN.CAT_PRODUCTO.ID_PRODUCTO
        WHERE CALLCEN.CAT_PRODUCTO.ID_PRODUCTO_FULL = VPRODUCTOFULL;
    END IF;
PSMsg_Error:='Se obtuvo bien la informacion';
PSCod_Error:=0;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar obtener informacion de biom (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_DAT_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_CTE_BIOM(
VFOLIO                  IN    CALLCEN.CLIENTE_BIOM.FOLIO%TYPE,
VCTE_UNICO              OUT   CALLCEN.CLIENTE_BIOM.CTE_UNICO%TYPE,
VFECHA_NACIMIENTO       OUT   CALLCEN.CLIENTE_BIOM.FECHA_NACIMIENTO%TYPE,
VENTIDAD_NACIMIENTO     OUT   CALLCEN.CLIENTE_BIOM.ENTIDAD_NACIMIENTO%TYPE,
VFECHA_ALTA             OUT   CALLCEN.CLIENTE_BIOM.FECHA_ALTA%TYPE,
VFECHA_FOTO_HISTORICA   OUT   CALLCEN.CLIENTE_BIOM.FECHA_FOTO_HISTORICA%TYPE,
PSCod_Error             OUT   NUMBER,
PSMsg_Error             OUT   VARCHAR2
)
IS

VEXISTE NUMBER;

BEGIN

    SELECT COUNT(1) INTO VEXISTE
    FROM CLIENTE_BIOM
    WHERE FOLIO=VFOLIO;
    
    IF VEXISTE = 1 THEN
        SELECT
            CTE_UNICO,
            FECHA_NACIMIENTO,
            ENTIDAD_NACIMIENTO,
            FECHA_ALTA,
            FECHA_FOTO_HISTORICA
        INTO
            VCTE_UNICO,
            VFECHA_NACIMIENTO,
            VENTIDAD_NACIMIENTO,
            VFECHA_ALTA,
            VFECHA_FOTO_HISTORICA
        FROM  CALLCEN.CLIENTE_BIOM
        WHERE FOLIO = VFOLIO;
        
        PSMsg_Error:='Se obtuvo bien la informacion';
        PSCod_Error:=0;
    ELSE
        PSMsg_Error:='NO EXISTE FOLIO';
        PSCod_Error:=-1;
    END IF;
    
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar obtener informacion de cte biom (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_CTE_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_CLT_BIOM
(
    VCLIENTE_UNICO        IN       CALLCEN.HIST_CLNT_BIOM.CLIENTE_UNICO%TYPE,
    VNOMBRE               OUT      CALLCEN.HIST_CLNT_BIOM.NOMBRE%TYPE,
    VAPELLIDO_PATERNO     OUT      CALLCEN.HIST_CLNT_BIOM.APELLIDO_PATERNO%TYPE,
    VAPELLIDO_MATERNO     OUT      CALLCEN.HIST_CLNT_BIOM.APELLIDO_MATERNO%TYPE,  
    VID_ALNOVA            OUT      CALLCEN.HIST_CLNT_BIOM.ID_ALNOVA%TYPE,
    VDIRECCION            OUT      CALLCEN.HIST_CLNT_BIOM.DIRECCION%TYPE,
    VCOLONIA              OUT      CALLCEN.HIST_CLNT_BIOM.COLONIA%TYPE,
    VESTADO               OUT      CALLCEN.HIST_CLNT_BIOM.ESTADO%TYPE,
    VMUNICIPIO            OUT      CALLCEN.HIST_CLNT_BIOM.MUNICIPIO%TYPE,
    VFECHA_NACIMIENTO     OUT      CALLCEN.HIST_CLNT_BIOM.FECHA_NACIMIENTO%TYPE,
    VCODIGO_POSTAL        OUT      CALLCEN.HIST_CLNT_BIOM.CODIGO_POSTAL%TYPE,
    VTELEFONO             OUT      CALLCEN.HIST_CLNT_BIOM.TELEFONO%TYPE,
    VUSUARIO_MODIFICO     OUT      CALLCEN.HIST_CLNT_BIOM.USUARIO_MODIFICO%TYPE,
    VFECHA_MODIFICACION   OUT      CALLCEN.HIST_CLNT_BIOM.FECHA_MODIFICACION%TYPE,
    PSCod_Error           OUT      NUMBER,
    PSMsg_Error           OUT      VARCHAR2
)
IS
BEGIN
    SELECT 
        NOMBRE,
        APELLIDO_PATERNO,
        APELLIDO_MATERNO,
        ID_ALNOVA,
        DIRECCION,
        COLONIA,
        ESTADO,
        MUNICIPIO,
        FECHA_NACIMIENTO,
        CODIGO_POSTAL,
        TELEFONO,
        USUARIO_MODIFICO,
        FECHA_MODIFICACION
    INTO
        VNOMBRE,
        VAPELLIDO_PATERNO,
        VAPELLIDO_MATERNO,
        VID_ALNOVA,
        VDIRECCION,
        VCOLONIA,
        VESTADO,
        VMUNICIPIO,
        VFECHA_NACIMIENTO,
        VCODIGO_POSTAL,
        VTELEFONO,
        VUSUARIO_MODIFICO,
        VFECHA_MODIFICACION
    FROM
        CALLCEN.HIST_CLNT_BIOM
    WHERE
        CLIENTE_UNICO = VCLIENTE_UNICO;
PSCod_Error:=0;
PSMsg_Error:='SE RECUPERO CORRECTAMENTE LA INFORMACION HISTORICA';
EXCEPTION
    WHEN OTHERS THEN
        PSCod_Error:=1;
        PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al recuperar información de hist_clnt_biom(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_CLT_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_BIT_CU
(
    VDATEINI                      IN       VARCHAR,
    VDATEFIN                      IN       VARCHAR,
    VCURFOLIOS                    OUT      SYS_REFCURSOR,
    PSCod_Error                   OUT      NUMBER,
    PSMsg_Error                   OUT      VARCHAR2
)
AS
    VDATEFORMAT VARCHAR(25);
    VINIDAY     VARCHAR(15);
    VFINDAY     VARCHAR(15);
BEGIN
    VDATEFORMAT :=  'DD/MM/YYYY HH24:MI:SS';
    VINIDAY     :=  ' 00:00:00';
    VFINDAY     :=  ' 23:59:59';
    OPEN VCURFOLIOS FOR
    SELECT
        FOLIO_CU.FOLIO,
        FOLIO_CU.PAIS,
        BITACORA_CU.OBSERVACIONES,
        BITACORA_CU.MOTIVO,
        BITACORA_CU.CADENAENVIADA,
        BITACORA_CU.AGENTE,
        BITACORA_CU.INICIO_ATENCION,
        BITACORA_CU.ESTATUS,
        BITACORA_CU.DIGITALIZACION,
        BITACORA_CU.SALTOS,
        BITACORA_CU.FECHA_REGISTRO,
        BITACORA_CU.FECHA_MODIFICACION,
        FOLIO_CU.CANAL
    FROM 
        CALLCEN.FOLIO_CU
    INNER JOIN 
        CALLCEN.BITACORA_CU
    ON
        FOLIO_CU.FOLIO = BITACORA_CU.FOLIO
    WHERE
        BITACORA_CU.FECHA_REGISTRO
    BETWEEN
        TO_DATE(CONCAT(VDATEINI,VINIDAY),VDATEFORMAT)
    AND
        TO_DATE(CONCAT(VDATEFIN, VFINDAY),VDATEFORMAT);
    PSCod_Error:=0;
    PSMsg_Error:='Se obtuvo correctamente la informacion de bitacora cu';
EXCEPTION
    WHEN OTHERS THEN
        PSCod_Error:=1;
        PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al recuperar información de bitacora cu(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_BIT_CU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_GET_ATRZ_SUP( 
CAutorizado                   OUT      NUMBER, 
CRechazado                    OUT      NUMBER, 
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
AS
    VDATEFORMAT VARCHAR(15);
    VUNO VARCHAR(5);
    VDOS VARCHAR(5);
    VINIDAY     VARCHAR(15);
    VFINDAY     VARCHAR(15);
    VLONGDATEFORMAT VARCHAR(25);
BEGIN
    VLONGDATEFORMAT :=  'DD/MM/YYYY HH24:MI:SS';
    VDATEFORMAT := 'dd/mm/yyyy';
    VUNO := '1';
    VDOS := '2';
    VINIDAY     :=  ' 00:00:00';
    VFINDAY     :=  ' 23:59:59';
    
SELECT COUNT(1) INTO CAutorizado 
FROM CALLCEN.bit_biom_sup
WHERE estatus = VUNO
AND TO_CHAR(FECHA_REGISTRO, VDATEFORMAT) = TO_CHAR(SYSDATE,VDATEFORMAT);

SELECT COUNT(1) INTO CRechazado 
FROM CALLCEN.bit_biom_sup
WHERE estatus = VDOS
AND TO_CHAR(FECHA_REGISTRO, VDATEFORMAT) = TO_CHAR(SYSDATE,VDATEFORMAT);

PSCod_Error:=0;
PSMsg_Error:='Consulta de semaforo realizada correctamente';
EXCEPTION
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar llamar al semaforo (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_GET_ATRZ_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_FOLMANUL_SUP ( 
VFOLIO                IN          callcen.bit_biom_sup.FOLIO%TYPE,
VESTATUS              IN          callcen.bit_biom_sup.ESTATUS%TYPE,  
VAGENTE               IN          callcen.bit_biom_sup.AGENTE%type,   
VOBSERVACIONES        IN          callcen.bit_biom_sup.OBSERVACIONES%type,
VMOTIVO               IN          callcen.bit_biom_sup.MOTIVO%type,
VRESULTADO            OUT         VARCHAR
)                                                                                                                                                                                                                       
AS
VFECHA DATE;
BEGIN
    SELECT SYSDATE INTO VFECHA  FROM DUAL;
    DELETE CALLCEN.LIBERA_BIOM_SUP
    WHERE FOLIO = VFOLIO;
          
    UPDATE CALLCEN.bit_biom_sup
    SET INICIO_ATENCION = VFECHA,
        FECHA_LIBERACION = VFECHA,
        ESTATUS = VESTATUS,
        FECHA_MODIFICACION = VFECHA,
        AGENTE = VAGENTE,
        OBSERVACIONES = VOBSERVACIONES,
        MOTIVO = VMOTIVO
    WHERE FOLIO = VFOLIO;    
    COMMIT;
    VRESULTADO:='OK';
    --dbms_output.put_line('Resultado ' || VRESULTADO);
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            VRESULTADO:=SQLERRM(SQLCODE);
            dbms_output.put_line('Error ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_FOLIOMANUALB ( 
VFOLIO                IN          callcen.bitacora_biom.FOLIO%TYPE,
VESTATUS              IN          callcen.bitacora_biom.ESTATUS%TYPE,  
VAGENTE               IN          callcen.bitacora_biom.AGENTE%type,   
VOBSERVACIONES        IN          callcen.bitacora_biom.OBSERVACIONES%type,
VMOTIVO               IN          callcen.bitacora_biom.MOTIVO%type,
VURL_DIGI             IN          callcen.bitacora_biom.URL_DIGITALIZACION%type,
VURL_DIG_HISTORICA    IN          callcen.bitacora_biom.URL_DIG_HISTORICA%type,
VRESULTADO            OUT         VARCHAR
)                                                                                                                                                                                                                       
AS
VFECHA DATE;
BEGIN
    SELECT SYSDATE INTO VFECHA  FROM DUAL;
    DELETE CALLCEN.LIBERA_BIOM
    WHERE FOLIO = VFOLIO;
          
    UPDATE CALLCEN.bitacora_biom
    SET INICIO_ATENCION = VFECHA,
        ESTATUS = VESTATUS,
        FECHA_MODIFICACION = VFECHA,
        AGENTE = VAGENTE,
        OBSERVACIONES = VOBSERVACIONES,
        MOTIVO = VMOTIVO,
        URL_DIGITALIZACION = VURL_DIGI,
        URL_DIG_HISTORICA = VURL_DIG_HISTORICA
    WHERE FOLIO = VFOLIO;    
    COMMIT;
    VRESULTADO:='OK';
    --dbms_output.put_line('Resultado ' || VRESULTADO);
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            VRESULTADO:=SQLERRM(SQLCODE);
            dbms_output.put_line('Error ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_FINAL_CU
(              
    VFOLIO               IN      CALLCEN.FOLIO_CTEU.FOLIO%TYPE,
    VESTATUS             IN      CALLCEN.BITACORA_CU.ESTATUS%TYPE,
    VAGENTE              IN      CALLCEN.BITACORA_CU.AGENTE%TYPE,
    VOBSERVACIONES       IN      CALLCEN.BITACORA_CU.OBSERVACIONES%TYPE,
    VMOTIVO              IN      CALLCEN.BITACORA_CU.MOTIVO%TYPE,
    VCADENAENVIADA       IN      CALLCEN.BITACORA_CU.CADENAENVIADA%TYPE,
    VDIGITALIZACION      IN      CALLCEN.BITACORA_CU.DIGITALIZACION%TYPE,  
    PSCod_Error          OUT     NUMBER,
    PSMsg_Error          OUT     VARCHAR2
)
IS
BEGIN
    UPDATE CALLCEN.BITACORA_CU
    SET
        OBSERVACIONES = VOBSERVACIONES,
        MOTIVO        = VMOTIVO,
        CADENAENVIADA = VCADENAENVIADA,
        AGENTE        = VAGENTE,
        ESTATUS       = VESTATUS,
        DIGITALIZACION= VDIGITALIZACION,
        FECHA_MODIFICACION=SYSDATE
    WHERE FOLIO = VFOLIO;
    DELETE FROM CALLCEN.LIBERA_CU
    WHERE FOLIO = VFOLIO;
    COMMIT;
PSCod_Error:=0;
PSMsg_Error:='se LIBERO FOLIO CORRECTAMENTE';
EXCEPTION 
   when others then
			PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
			ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar LIBERAR FOLIO(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_FINAL_CU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_ESTDSTC_BIOM
(
    VDATEINI                      IN       VARCHAR,
    VDATEFIN                      IN       VARCHAR,
    VCURFOLIOS                    OUT      SYS_REFCURSOR,
    PSCod_Error                   OUT      NUMBER,
    PSMsg_Error                   OUT      VARCHAR2
)
AS
    VDATEFORMAT  VARCHAR(25);
    VINIDAY      VARCHAR(15);
    VFINDAY      VARCHAR(15);
    VPENDIENTE   VARCHAR(15);
    VATENDIENDO  VARCHAR(15);
    VASIGNADO    VARCHAR(15);
    VNOASIGNADO  VARCHAR(15);
    VUNO         VARCHAR(15);
    VDOS         VARCHAR(15);
    VTRES        VARCHAR(15);
BEGIN
    VDATEFORMAT :=  'DD/MM/YYYY HH24:MI:SS';
    VINIDAY     :=  ' 00:00:00';
    VFINDAY     :=  ' 23:59:59';
    VPENDIENTE := 'PENDIENTE';
    VATENDIENDO := 'ATENDIENDO';
    VASIGNADO := 'ASIGNADO';
    VNOASIGNADO := 'NO ASIGNADO';
    VUNO := '1';
    VDOS := '2';
    VTRES:= '3';
    OPEN VCURFOLIOS FOR
    SELECT
        AGENTE,
        INICIO_ATENCION,
        ESTATUS,
        SALTOS,
        FECHA_REGISTRO,
        FECHA_MODIFICACION
    FROM 
        CALLCEN.BITACORA_BIOM
    WHERE
        BITACORA_BIOM.FECHA_MODIFICACION
    BETWEEN
        TO_DATE(CONCAT(VDATEINI,VINIDAY),VDATEFORMAT)
    AND
        TO_DATE(CONCAT(VDATEFIN, VFINDAY),VDATEFORMAT)
    AND AGENTE <> VNOASIGNADO
    AND ESTATUS IN (VPENDIENTE,VATENDIENDO,VASIGNADO,VUNO,VDOS,VTRES);
    PSCod_Error:=0;
    PSMsg_Error:='Se obtuvo correctamente la informacion de estadisticas biom';
EXCEPTION
    WHEN OTHERS THEN
        PSCod_Error:=1;
        PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al recuperar información de estadisticas biom(' || SQLCODE || '  ' || SQLERRM || ')');
END SP_ESTDSTC_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIO_SMFR_SUP(
VPENDIENTE      OUT   NUMBER,
VATENDIENDO     OUT   NUMBER,
VAUTORIZADOS    OUT   NUMBER,
VRECHAZADOS     OUT   NUMBER,
PSCod_Error     OUT   NUMBER,
PSMsg_Error     OUT   VARCHAR2
)
IS
EPENDIENTE VARCHAR(15):= 'PENDIENTE';
EATENDIENDO VARCHAR(15):= 'ATENDIENDO';
ERECHAZADO VARCHAR(15):= '2';
EAUTORIZADO VARCHAR(15):= '1';

BEGIN
    
    SELECT COUNT(1) INTO VPENDIENTE
    FROM BIT_BIOM_SUP
    WHERE ESTATUS = EPENDIENTE;
    
    SELECT COUNT(1) INTO VATENDIENDO
    FROM BIT_BIOM_SUP
    WHERE ESTATUS = EATENDIENDO;
    
    SELECT COUNT(1) INTO VRECHAZADOS
    FROM BIT_BIOM_SUP
    WHERE ESTATUS = ERECHAZADO;
    
    SELECT COUNT(1) INTO VAUTORIZADOS
    FROM BIT_BIOM_SUP
    WHERE ESTATUS = EAUTORIZADO;
    
    PSMsg_Error:='Se obtuvo bien la informacion';
    PSCod_Error:=0;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar obtener informacion de biom (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_BIO_SMFR_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIOM_UPD_SUP ( 
    VFOLIO IN callcen.LIBERA_BIOM_SUP.FOLIO%TYPE,
    VAGENTE IN callcen.LIBERA_BIOM_SUP.AGENTE%type,             
    VRESULTADO OUT VARCHAR
)                                                                                                                                                                     
                                                        
AS

VFECHA DATE;
VATENDIENDO_CLIENTE NUMBER;
VATENDIENDO VARCHAR(15):='ATENDIENDO';
VUNO NUMBER:=1;
VCERO NUMBER:=0;
VAGENTEOCUPADO VARCHAR(15):='AGENTE OCUPADO';
VOK VARCHAR(15):='OK';

BEGIN
        
          SELECT SYSDATE INTO VFECHA  FROM DUAL;
          
          SELECT COUNT(1) INTO VATENDIENDO_CLIENTE
          FROM CALLCEN.LIBERA_BIOM_SUP
          WHERE AGENTE = VAGENTE
          AND ESTATUS = VATENDIENDO;
          
          IF VATENDIENDO_CLIENTE = VCERO THEN
          
              UPDATE CALLCEN.LIBERA_BIOM_SUP
              SET ESTATUS = VATENDIENDO,
              FECHA_MODIFICACION = VFECHA
              WHERE FOLIO = VFOLIO;    
              
              COMMIT;
              VRESULTADO:=VOK;
          ELSIF VATENDIENDO_CLIENTE = VUNO THEN
          
                SELECT COUNT(1) INTO VATENDIENDO_CLIENTE
                FROM CALLCEN.LIBERA_BIOM_SUP
                WHERE AGENTE = VAGENTE
                AND FOLIO = VFOLIO
                AND ESTATUS = VATENDIENDO;
                
                IF VATENDIENDO_CLIENTE = VUNO THEN
                    VRESULTADO:=VOK;
                ELSE
                     VRESULTADO:=VAGENTEOCUPADO; 
                END IF; 
                
          
          ELSE  
          
              VRESULTADO:=VAGENTEOCUPADO;  
          
          END IF;    
          --dbms_output.put_line('Resultado ' || VRESULTADO);
          

          EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                VRESULTADO:=SQLERRM(SQLCODE);
                dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIOM_UPD_FOL ( VFOLIO IN callcen.LIBERA_BIOM.FOLIO%TYPE
             , VAGENTE IN callcen.LIBERA_BIOM.AGENTE%type
             , VRESULTADO OUT VARCHAR )
AS
    VFECHA DATE;
    VFOLIO_VALIDANDO NUMBER;
    VPENDIENTE VARCHAR(15);
    VNOASIGNADO VARCHAR(15);
BEGIN
    VPENDIENTE  := 'PENDIENTE';
    VNOASIGNADO := 'NO ASIGNADO';
     
     SELECT COUNT(1) INTO VFOLIO_VALIDANDO 
     FROM callcen.LIBERA_BIOM 
     WHERE FOLIO = VFOLIO
     AND AGENTE = VAGENTE;

     IF VFOLIO_VALIDANDO = 1
    THEN
    UPDATE CALLCEN.LIBERA_BIOM
    SET ESTATUS = VPENDIENTE,
    AGENTE = VNOASIGNADO
    WHERE FOLIO = VFOLIO;
    COMMIT;
    VRESULTADO := 'OK';
    
    ELSIF VFOLIO_VALIDANDO = 0
    THEN
    VRESULTADO := 'NO EXISTE FOLIO';
    END IF;

    --dbms_output.put_line('Resultado ' || VRESULTADO);
    EXCEPTION
        WHEN OTHERS
        THEN
            ROLLBACK;
            VRESULTADO := SQLERRM ( SQLCODE );
            dbms_output.put_line ( 'Error2 ' || SQLERRM ( SQLCODE ) );
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIOM_UPD_CU ( 
        VFOLIO IN callcen.LIBERA_CU.FOLIO%TYPE, 
        VAGENTE IN callcen.LIBERA_CU.AGENTE%type, 
        VRESULTADO OUT VARCHAR )
AS
    VFECHA DATE;
    VFOLIO_VALIDANDO NUMBER;
    VPENDIENTE VARCHAR(15);
    VNOASIGNADO VARCHAR(15);
BEGIN
    VPENDIENTE  := 'PENDIENTE';
    VNOASIGNADO := 'NO ASIGNADO';
     
     SELECT COUNT(1) INTO VFOLIO_VALIDANDO 
     FROM callcen.LIBERA_CU 
     WHERE FOLIO = VFOLIO
     AND AGENTE = VAGENTE;

     IF VFOLIO_VALIDANDO = 1
    THEN
    UPDATE CALLCEN.LIBERA_CU
    SET ESTATUS = VPENDIENTE,
    AGENTE = VNOASIGNADO
    WHERE FOLIO = VFOLIO;
    COMMIT;
    VRESULTADO := 'OK';
    
    ELSIF VFOLIO_VALIDANDO = 0
    THEN
    VRESULTADO := 'NO EXISTE FOLIO';
    END IF;

    --dbms_output.put_line('Resultado ' || VRESULTADO);
    EXCEPTION
        WHEN OTHERS
        THEN
            ROLLBACK;
            VRESULTADO := SQLERRM ( SQLCODE );
            dbms_output.put_line ( 'Error2 ' || SQLERRM ( SQLCODE ) );
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIOM_UPDATE ( VFOLIO IN callcen.LIBERA_BIOM.FOLIO%TYPE,
                                                       VAGENTE IN callcen.LIBERA_BIOM.AGENTE%type,             
                                                       VRESULTADO OUT VARCHAR)                                                                                                                                                                     
                                                        
AS

VFECHA DATE;
VATENDIENDO_CLIENTE NUMBER;


BEGIN
        
          SELECT SYSDATE INTO VFECHA  FROM DUAL;
          
          SELECT COUNT(1) INTO VATENDIENDO_CLIENTE
          FROM CALLCEN.LIBERA_BIOM
          WHERE AGENTE = VAGENTE
          AND ESTATUS = 'ATENDIENDO';
          
          IF VATENDIENDO_CLIENTE = 0 THEN
          
              UPDATE CALLCEN.LIBERA_BIOM
              SET ESTATUS = 'ATENDIENDO',
              FECHA_MODIFICACION = VFECHA
              WHERE FOLIO = VFOLIO;    
              
              COMMIT;
              VRESULTADO:='OK';
          ELSIF VATENDIENDO_CLIENTE = 1 THEN
          
                SELECT COUNT(1) INTO VATENDIENDO_CLIENTE
                FROM CALLCEN.LIBERA_BIOM
                WHERE AGENTE = VAGENTE
                AND FOLIO = VFOLIO
                AND ESTATUS = 'ATENDIENDO';
                
                IF VATENDIENDO_CLIENTE = 1 THEN
                    VRESULTADO:='OK';
                ELSE
                     VRESULTADO:='AGENTE OCUPADO'; 
                END IF; 
                
          
          ELSE  
          
              VRESULTADO:='AGENTE OCUPADO';  
          
          END IF;    
          --dbms_output.put_line('Resultado ' || VRESULTADO);
          

          EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                VRESULTADO:=SQLERRM(SQLCODE);
                dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIOM_SUPER_R
(
    VFECHA_INI      IN  VARCHAR,
    VFECHA_FIN      IN  VARCHAR,
    VREPORTE        OUT SYS_REFCURSOR,
    PSCod_Error     OUT NUMBER,
    PSMsg_Error     OUT VARCHAR2
)   
AS
    VDATEFORMAT   VARCHAR(25);
    VINIDAY       VARCHAR(15);
    VFINDAY       VARCHAR(15);
    VPRODUCTO     VARCHAR(20);
    VSUBPRODUCTO  VARCHAR(20);
    VNOMBREPROD   VARCHAR(20);
    VNOMBRESBPROD VARCHAR(20);

BEGIN
    VDATEFORMAT :=  'DD/MM/YYYY HH24:MI:SS';
    VINIDAY     :=  ' 00:00:00';
    VFINDAY     :=  ' 23:59:59';
    VPRODUCTO   :=  '';
    VSUBPRODUCTO:=  '';
    
    
    OPEN VREPORTE FOR
        SELECT 
                BITACORA_BIOM.AGENTE,
                BITACORA_BIOM.ESTATUS,
                BITACORA_BIOM.FOLIO,
                BITACORA_BIOM.MOTIVO,
                BITACORA_BIOM.OBSERVACIONES,
                BITACORA_BIOM.PAIS_SOLICITANTE,
                BITACORA_BIOM.URL_DIGITALIZACION,
                BITACORA_BIOM.FECHA_REGISTRO,
                BITACORA_BIOM.FECHA_MODIFICACION,
                FOLIOBIOMETRICO.ORIGEN_SOLICITUD as CANAL,
                BITACORA_BIOM.INICIO_ATENCION,
                BITACORA_BIOM.SALTOS,
                BITACORA_BIOM.ID_PRODUCTO_FULL,
                VPRODUCTO as PRODUCTO,
                VSUBPRODUCTO as SUBPRODUCTO,
                BITACORA_BIOM.TUTORENCONTRADO,
                BITACORA_BIOM.CUENTA_CLIENTE,
                FOLIOBIOMETRICO.NOMBRE_CLIENTE
             FROM CALLCEN.BITACORA_BIOM
             INNER JOIN CALLCEN.FOLIOBIOMETRICO
             ON BITACORA_BIOM.FOLIO = FOLIOBIOMETRICO.FOLIO
             AND BITACORA_BIOM.PAIS_SOLICITANTE = FOLIOBIOMETRICO.PAIS_SOLICITANTE
             WHERE BITACORA_BIOM.FECHA_REGISTRO BETWEEN to_date(vfecha_uno,VDATEFORMAT) 
             AND (to_date(vfecha_dos,VDATEFORMAT)+VHOUR+ VMINUTE + VSECOND)
             AND BITACORA_BIOM.ESTATUS IS NOT NULL;
    
    FOR reg IN VREPORTE LOOP
    
        SELECT
            CAT_CU_PROCTO.NOMBRE,
            CAT_CU_SBPROCTO.NOMBRE
        INTO VNOMBREPROD, VNOMBRESBPROD
        FROM
            CAT_PRODUCTO
        LEFT OUTER JOIN CAT_CU_PROCTO
        ON CAT_CU_PROCTO.ID_PRODUCTO = CAT_PRODUCTO.ID_PRODUCTO
        LEFT OUTER JOIN CAT_CU_SBPROCTO
        ON CAT_CU_SBPROCTO.ID_PRODUCTO = CAT_CU_PROCTO.ID_PRODUCTO
        AND CAT_CU_SBPROCTO.ID_SUBPRODUCTO = CAT_PRODUCTO.ID_SUBPRODUCTO
        WHERE CAT_PRODUCTO.ID_PRODUCTO_FULL = reg.ID_PRODUCTO_FULL;
        
        reg.PRODUCTO := VNOMBREPROD;
        reg.SUBPRODUCTO := VNOMBRESBPROD;
        
    END LOOP;
    
    PSCod_Error:=0;
    PSMsg_Error:='Se obtuvo correctamente la informacion de bitacora biometrico';
    
    RETURN VREPORTE;
    
    CLOSE VREPORTE;
    
EXCEPTION
   WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
 
END SP_BIOM_SUPER_R;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIOM_INSERT 
( 
    VFOLIO                  IN         CALLCEN.FOLIOBIOMETRICO.FOLIO%TYPE,
    VNOMBRE_CLIENTE         IN         CALLCEN.FOLIOBIOMETRICO.NOMBRE_CLIENTE%TYPE,
    VCUENTA                 IN         CALLCEN.FOLIOBIOMETRICO.CUENTA_CLIENTE%TYPE,
    VPAIS                   IN         CALLCEN.FOLIOBIOMETRICO.PAIS_SOLICITANTE%TYPE,
    VFOTO_CLIENTE_NUEVA     IN         CALLCEN.FOLIOBIOMETRICO.FOTO_CLIENTE_NUEVA%TYPE,
    VFOTO_EJECUTIVO         IN         CALLCEN.FOLIOBIOMETRICO.FOTO_EJECUTIVO%TYPE,                                                     
    VFOTO_GERENTE           IN         CALLCEN.FOLIOBIOMETRICO.FOTO_GERENTE%TYPE,
    VORIGEN_SOLICITUD       IN         CALLCEN.FOLIOBIOMETRICO.ORIGEN_SOLICITUD%TYPE,
    VSUCURSAL               IN         CALLCEN.FOLIOBIOMETRICO.SUCURSAL%TYPE,
    VFOTO_CLIENTE_HISTORICO IN         CALLCEN.FOLIOBIOMETRICO.FOTO_CLIENTE_HISTORICO%type,
    VCANAL_GESTORA          IN         CALLCEN.FOLIOBIOMETRICO.CANAL_GESTORA%type,
    VSUCURSAL_GESTORA       IN         CALLCEN.FOLIOBIOMETRICO.SUCURSAL_GESTORA%type,
    VCTE_UNICO              IN         CALLCEN.FOLIOBIOMETRICO.CTE_UNICO%TYPE,
    VPRODUCTO               IN         CALLCEN.CAT_PRODUCTO.ID_PRODUCTO%TYPE,
    VSUBPRODUCTO            IN         CALLCEN.CAT_PRODUCTO.ID_SUBPRODUCTO%TYPE,
    VRESULTADO              OUT        VARCHAR
)                                                                                                                                                                                                                          
AS
VPRODUCTOFULL INTEGER:=NULL;
VEXISTE NUMBER:=0;
VUNO NUMBER:=1;
VUSER VARCHAR(10):= 'CALLCEN';
VPENDIENTE VARCHAR(15):= 'PENDIENTE';
VNOASIGNADO VARCHAR(15):= 'NO ASIGNADO';
BEGIN     
        SELECT COUNT(1) INTO VEXISTE
        FROM CALLCEN.CAT_PRODUCTO
        WHERE ID_PRODUCTO = VPRODUCTO 
        AND ID_SUBPRODUCTO = VSUBPRODUCTO;
        
        IF VEXISTE = VUNO
        THEN
            SELECT ID_PRODUCTO_FULL INTO VPRODUCTOFULL
            FROM CALLCEN.CAT_PRODUCTO 
            WHERE ID_PRODUCTO = VPRODUCTO 
            AND ID_SUBPRODUCTO = VSUBPRODUCTO;
        END IF;

        INSERT INTO CALLCEN.FOLIOBIOMETRICO
        (
            FOLIO,
            NOMBRE_CLIENTE,
            CUENTA_CLIENTE,
            PAIS_SOLICITANTE,
            FOTO_CLIENTE_NUEVA,
            FOTO_EJECUTIVO,
            FOTO_GERENTE,
            ORIGEN_SOLICITUD,
            USUARIO_MODIFICO,
            FECHA_MODIFICACION,
            SUCURSAL,
            FOTO_CLIENTE_HISTORICO,
            CANAL_GESTORA,
            SUCURSAL_GESTORA,
            CTE_UNICO
        )
        VALUES 
        (
            VFOLIO,
            VNOMBRE_CLIENTE,
            VCUENTA,
            VPAIS,
            VFOTO_CLIENTE_NUEVA,
            VFOTO_EJECUTIVO,
            VFOTO_GERENTE,
            VORIGEN_SOLICITUD,
            VUSER,
            SYSDATE,
            VSUCURSAL,
            VFOTO_CLIENTE_HISTORICO,
            VCANAL_GESTORA,
            VSUCURSAL_GESTORA,
            VCTE_UNICO
        );               
        INSERT INTO CALLCEN.LIBERA_BIOM
        (
            FOLIO,
            ESTATUS,
            PAIS_SOLICITANTE,
            USUARIO_MODIFICO,
            FECHA_MODIFICACION,
            AGENTE,
            FECHA_REGISTRO
        )
        VALUES
        (
            VFOLIO,
            VPENDIENTE,
            VPAIS,
            VUSER,
            SYSDATE,
            VNOASIGNADO,
            SYSDATE
        );      
        INSERT INTO CALLCEN.BITACORA_BIOM
        (
            FOLIO,
            ESTATUS,
            AGENTE,
            CUENTA_CLIENTE,
            PAIS_SOLICITANTE,
            USUARIO_MODIFICO,
            FECHA_MODIFICACION,
            FECHA_REGISTRO,
            SUCURSAL,
            CANAL_GESTORA,
            SUCURSAL_GESTORA,
            CTE_UNICO,
            ID_PRODUCTO_FULL
        )
        VALUES
        (
            VFOLIO,
            VPENDIENTE,
            VNOASIGNADO,
            VCUENTA,VPAIS,
            VUSER,
            SYSDATE,
            SYSDATE,
            VSUCURSAL,
            VCANAL_GESTORA,
            VSUCURSAL_GESTORA,
            VCTE_UNICO,
            VPRODUCTOFULL
        );
        COMMIT;
        VRESULTADO:='OK';
EXCEPTION
            WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            VRESULTADO :=SQLCODE || '  ' || SQLERRM;
            WHEN OTHERS THEN
                ROLLBACK;
                VRESULTADO:=SQLERRM(SQLCODE);
                dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END SP_BIOM_INSERT;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIOMVALFOLIO ( 
VFOLIO                IN          callcen.bitacora_biom.FOLIO%TYPE,
VESTATUS              IN          callcen.bitacora_biom.ESTATUS%TYPE,  
VAGENTE               IN          callcen.bitacora_biom.AGENTE%type,   
VOBSERVACIONES        IN          callcen.bitacora_biom.OBSERVACIONES%type,
VMOTIVO               IN          callcen.bitacora_biom.MOTIVO%type,
VURL_DIGI             IN          callcen.bitacora_biom.URL_DIGITALIZACION%type,
VURL_DIG_HISTORICA    IN          callcen.bitacora_biom.URL_DIG_HISTORICA%type,
VRESULTADO            OUT         VARCHAR
)                                                                                                                                                                                                                       
AS
VFECHA DATE;
BEGIN
    SELECT SYSDATE INTO VFECHA  FROM DUAL;
    DELETE CALLCEN.LIBERA_BIOM
    WHERE FOLIO = VFOLIO;
          
    UPDATE CALLCEN.bitacora_biom
    SET ESTATUS = VESTATUS,
        FECHA_MODIFICACION = VFECHA,
        AGENTE = VAGENTE,
        OBSERVACIONES = VOBSERVACIONES,
        MOTIVO = VMOTIVO,
        URL_DIGITALIZACION = VURL_DIGI,
        URL_DIG_HISTORICA = VURL_DIG_HISTORICA
    WHERE FOLIO = VFOLIO;    
    COMMIT;
    VRESULTADO:='OK';
    --dbms_output.put_line('Resultado ' || VRESULTADO);
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            VRESULTADO:=SQLERRM(SQLCODE);
            dbms_output.put_line('Error ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_BIOMREASFOLIO ( VAGENTE IN callcen.atiende_folios_biometrico.AGENTE%type)                                                                                                                                                                     
                                                        
AS

    CURSOR vcur_folios_reasigna IS
    SELECT FOLIO, FECHA_MODIFICACION
    FROM CALLCEN.ATIENDE_FOLIOS_BIOMETRICO
    WHERE AGENTE = VAGENTE
    and estatus = 'ASIGNADO';

    vanio_historico number;
    vmes_historico number;
    vdia_historico number;
    vmin_historico number;
    
    vanio_actual number;
    vmes_actual number;
    vdia_actual number;
    vmin_actual number;
    


BEGIN
            
        select to_number(to_char(sysdate,'yyyy')),to_number(to_char(sysdate,'mm')),to_number(to_char(sysdate,'dd')),
        TO_NUMBER(TO_CHAR(sysdate,'HH24'))*60+TO_NUMBER(TO_CHAR(sysdate,'Mi')) as minutos
        into vanio_actual,vmes_actual,vdia_actual, vmin_actual from dual;
        
         FOR reg IN vcur_folios_reasigna LOOP
            select to_number(to_char(fecha_modificacion,'yyyy')),to_number(to_char(fecha_modificacion,'mm')),to_number(to_char(fecha_modificacion,'dd')),
            TO_NUMBER(TO_CHAR(fecha_modificacion,'HH24'))*60+TO_NUMBER(TO_CHAR(fecha_modificacion,'Mi')) as minutos
            into vanio_historico,vmes_historico,vdia_historico,vmin_historico 
            from callcen.atiende_folios_biometrico
            where agente = vagente
            and folio = reg.folio;
            
            if vanio_historico = vanio_actual and vmes_historico = vmes_actual and vdia_historico =vdia_actual then
                
                if (vmin_actual - vmin_historico ) >= 5 then
                    update atiende_folios_biometrico
                    set estatus = 'PENDIENTE',
                        fecha_modificacion = sysdate
                    where folio = reg.folio
                    and agente = VAGENTE;
                    
                    
                else
                  dbms_output.put_line('No es necesario reasignar el folio');
                end if; 
            
            else
                update atiende_folios_biometrico
                    set estatus = 'PENDIENTE',
                        fecha_modificacion = sysdate
                    where folio = reg.folio
                    and agente = VAGENTE;
            
            end if;    
         END LOOP;
         COMMIT;
                    
         CLOSE vcur_folios_reasigna;  
          
         EXCEPTION
                WHEN OTHERS THEN
                    rollback;
                    dbms_output.put_line('Existio un error al reasignar el folio');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_ASIGNA_FCU(
VAGENTE                        IN      CALLCEN.LIBERA_CU.AGENTE%TYPE,
VFOLIO                        OUT      CALLCEN.LIBERA_CU.FOLIO%TYPE,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
IS
CURSOR VCURSORFOLIO IS
SELECT FOLIO
FROM CALLCEN.LIBERA_CU
WHERE ESTATUS = 'PENDIENTE'
ORDER BY FECHA_REGISTRO ASC
FOR UPDATE OF FOLIO;   
VCOUNT_FOLIOS NUMBER;
VMAXFOLIOS NUMBER DEFAULT 1;
VITERATOR NUMBER DEFAULT 0;
VASIGNADO VARCHAR(15);
VATENDIENDO VARCHAR(15);
VUNO    NUMBER;
BEGIN
    VUNO := 1;
    VASIGNADO := 'ASIGNADO';
    VATENDIENDO := 'ATENDIENDO';
    VFOLIO := 'SINFOLIOS';
    SELECT COUNT(1) INTO VCOUNT_FOLIOS 
    FROM CALLCEN.LIBERA_CU
    WHERE AGENTE = VAGENTE
    and ESTATUS in (VASIGNADO,VATENDIENDO);
    IF (VCOUNT_FOLIOS>0)
    THEN
        SELECT FOLIO INTO VFOLIO
        FROM CALLCEN.LIBERA_CU
        WHERE AGENTE = VAGENTE
        AND ESTATUS IN (VASIGNADO,VATENDIENDO)
        AND ROWNUM = VUNO;
        PSMsg_Error:='Agente ya tiene un folio asignado';
    ELSE
        FOR REG IN VCURSORFOLIO LOOP
                VITERATOR := VITERATOR +1;
                VFOLIO := REG.FOLIO;
                PSMsg_Error:='Folio cu asignado correctamente';
                UPDATE CALLCEN.LIBERA_CU
                SET AGENTE = VAGENTE,
                    FECHA_MODIFICACION = SYSDATE,
                    estatus = 'ASIGNADO'
                WHERE FOLIO = REG.FOLIO;
                UPDATE CALLCEN.BITACORA_CU
                SET AGENTE = VAGENTE,
                    FECHA_MODIFICACION = SYSDATE,
                    INICIO_ATENCION = SYSDATE,
                    estatus = 'ASIGNADO',
                    SALTOS = SALTOS+1
                WHERE FOLIO = REG.FOLIO;
            EXIT WHEN VITERATOR=VMAXFOLIOS;   
        END LOOP;
        COMMIT;
        IF(VCURSORFOLIO%ISOPEN)
        THEN
            CLOSE VCURSORFOLIO;
        END IF;
    END IF;
PSCod_Error:=0;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar asignar un folio cu (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_ASIGNA_FCU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_ASIGNA_BIOM(
VAGENTE                        IN      CALLCEN.LIBERA_BIOM.AGENTE%TYPE,
VFOLIO                        OUT      CALLCEN.LIBERA_BIOM.FOLIO%TYPE,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
IS
CURSOR VCURSORFOLIO IS
SELECT FOLIO
FROM CALLCEN.LIBERA_BIOM
WHERE ESTATUS = 'PENDIENTE'
ORDER BY FECHA_REGISTRO ASC
FOR UPDATE OF FOLIO;   
VCOUNT_FOLIOS NUMBER;
VMAXFOLIOS NUMBER DEFAULT 1;
VITERATOR NUMBER DEFAULT 0;
VASIGNADO VARCHAR(15);
VATENDIENDO VARCHAR(15);
VUNO    NUMBER;
BEGIN
    VUNO := 1;
    VASIGNADO := 'ASIGNADO';
    VATENDIENDO := 'ATENDIENDO';
    VFOLIO := 'SINFOLIOS';
    SELECT COUNT(1) INTO VCOUNT_FOLIOS 
    FROM CALLCEN.LIBERA_BIOM
    WHERE AGENTE = VAGENTE
    and ESTATUS in (VASIGNADO,VATENDIENDO);
    IF (VCOUNT_FOLIOS>0)
    THEN
        SELECT FOLIO INTO VFOLIO
        FROM CALLCEN.LIBERA_BIOM
        WHERE AGENTE = VAGENTE
        AND ESTATUS IN (VASIGNADO,VATENDIENDO)
        AND ROWNUM = VUNO;
        PSMsg_Error:='Agente ya tiene un folio asignado';
    ELSE
        FOR REG IN VCURSORFOLIO LOOP
            IF(VITERATOR < VMAXFOLIOS)
            THEN
                VITERATOR := VITERATOR +1;
                VFOLIO := REG.FOLIO;
                PSMsg_Error:='Folio asignado correctamente';
                UPDATE CALLCEN.LIBERA_BIOM
                SET AGENTE = VAGENTE,
                    FECHA_MODIFICACION = SYSDATE,
                    estatus = VASIGNADO
                WHERE FOLIO = REG.FOLIO;
                UPDATE CALLCEN.BITACORA_BIOM
                SET AGENTE = VAGENTE,
                    FECHA_MODIFICACION = SYSDATE,
                    INICIO_ATENCION = SYSDATE,
                    estatus = VASIGNADO,
                    saltos = saltos+1 
                WHERE FOLIO = REG.FOLIO;
            END IF;        
        END LOOP;
        COMMIT;
        IF(VCURSORFOLIO%ISOPEN)
        THEN
            CLOSE VCURSORFOLIO;
        END IF;
    END IF;
PSCod_Error:=0;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar asignar folios (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_ASIGNA_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_ASG_BIOM_SUP(
VAGENTE                        IN      CALLCEN.LIBERA_BIOM_SUP.AGENTE%TYPE,
VFOLIO                        OUT      CALLCEN.LIBERA_BIOM_SUP.FOLIO%TYPE,
PSCod_Error                   OUT      NUMBER,
PSMsg_Error                   OUT      VARCHAR2
)
AS

VCOUNT_FOLIOS NUMBER;
VMAXFOLIOS NUMBER DEFAULT 1;
VITERATOR NUMBER DEFAULT 0;
VASIGNADO VARCHAR(15):='ASIGNADO';
VATENDIENDO VARCHAR(15):='ATENDIENDO';
VPENDIENTE VARCHAR(15):='PENDIENTE';
VUNO NUMBER:=1;


CURSOR VCURSORFOLIO IS
SELECT FOLIO
FROM CALLCEN.LIBERA_BIOM_SUP
WHERE ESTATUS = VPENDIENTE
ORDER BY FECHA_REGISTRO ASC
FOR UPDATE OF FOLIO;   

BEGIN
    
    VFOLIO := 'SINFOLIOS';
    
    SELECT COUNT(1) INTO VCOUNT_FOLIOS 
    FROM CALLCEN.LIBERA_BIOM_SUP
    WHERE AGENTE = VAGENTE
    and ESTATUS in (VASIGNADO,VATENDIENDO);
    IF (VCOUNT_FOLIOS>0)
    THEN
        SELECT FOLIO INTO VFOLIO
        FROM CALLCEN.LIBERA_BIOM_SUP
        WHERE AGENTE = VAGENTE
        AND ESTATUS IN (VASIGNADO,VATENDIENDO)
        AND ROWNUM = VUNO;
        PSMsg_Error:='Agente ya tiene un folio asignado';
    ELSE
        FOR REG IN VCURSORFOLIO LOOP
            IF(VITERATOR < VMAXFOLIOS)
            THEN
                VITERATOR := VITERATOR +VUNO;
                VFOLIO := REG.FOLIO;
                PSMsg_Error:='Folio asignado correctamente';
                UPDATE CALLCEN.LIBERA_BIOM_SUP
                SET AGENTE = VAGENTE,
                    FECHA_MODIFICACION = SYSDATE,
                    estatus = VASIGNADO
                WHERE FOLIO = REG.FOLIO;
                UPDATE CALLCEN.BIT_BIOM_SUP
                SET AGENTE = VAGENTE,
                    FECHA_MODIFICACION = SYSDATE,
                    INICIO_ATENCION = SYSDATE,
                    estatus = VASIGNADO,
                    saltos = saltos+VUNO 
                WHERE FOLIO = REG.FOLIO;
            END IF;        
        END LOOP;
        COMMIT;
        IF(VCURSORFOLIO%ISOPEN)
        THEN
            CLOSE VCURSORFOLIO;
        END IF;
    END IF;
PSCod_Error:=0;
EXCEPTION
        WHEN NO_DATA_FOUND THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
        WHEN OTHERS THEN
            PSCod_Error:=1;
            PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
            ROLLBACK;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al intentar asignar folios (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_ASG_BIOM_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_ADD_ECON_R15 (
   V_DESCRIPCION_ERROR   CALLCEN.ERRORES_CONTRATOS_R15.DESCRIPCION_ERROR%TYPE,
   V_PATH_FILE           CALLCEN.ERRORES_CONTRATOS_R15.PATH_FILE%TYPE,
   V_USUARIO_MODIFICO    CALLCEN.ERRORES_CONTRATOS_R15.USUARIO_MODIFICO%TYPE
)
IS
BEGIN

   INSERT INTO CALLCEN.ERRORES_CONTRATOS_R15(DESCRIPCION_ERROR,PATH_FILE, USUARIO_MODIFICO, FECHA_MODIFICO)
        VALUES (V_DESCRIPCION_ERROR,V_PATH_FILE, V_USUARIO_MODIFICO, SYSDATE);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al insertar en la tabla ERRORES_CONTRATOS_R15 (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_ADD_ECON_R15;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SP_ADD_CAT_ACCIONES(
   V_ID_ACCION          CALLCEN.CATALOGO_ACCIONES.ID_ACCION%TYPE,
   V_ACCION            CALLCEN.CATALOGO_ACCIONES.ACCION%TYPE
   
)
IS
BEGIN

   INSERT INTO CALLCEN.CATALOGO_ACCIONES(ID_ACCION, ACCION)
   VALUES (V_ID_ACCION, V_ACCION);
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al insertar en la tabla CATALOGO_ACCIONES (' || SQLCODE || '  ' || SQLERRM || ')');
END SP_ADD_CAT_ACCIONES;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPP_BIOM_INSERT 
( 
    VFOLIO                  IN         CALLCEN.FOLIOBIOMETRICO.FOLIO%TYPE,
    VPAIS                   IN         CALLCEN.FOLIOBIOMETRICO.PAIS_SOLICITANTE%TYPE,
    VORIGEN_SOLICITUD       IN         CALLCEN.FOLIOBIOMETRICO.ORIGEN_SOLICITUD%TYPE,
    VCANAL_GESTORA          IN         CALLCEN.FOLIOBIOMETRICO.CANAL_GESTORA%TYPE,
    VSUCURSAL               IN         CALLCEN.FOLIOBIOMETRICO.SUCURSAL%TYPE,
    VSUCURSAL_GESTORA       IN         CALLCEN.FOLIOBIOMETRICO.SUCURSAL_GESTORA%TYPE,
    VNOMBRE_SUCURSAL        IN         CALLCEN.BITACORA_BIOM.NOMBRE_SUCURSAL%TYPE,
    VNOMBRE_CLIENTE         IN         CALLCEN.FOLIOBIOMETRICO.NOMBRE_CLIENTE%TYPE,
    VCUENTA                 IN         CALLCEN.FOLIOBIOMETRICO.CUENTA_CLIENTE%TYPE,
    VCTE_UNICO              IN         CALLCEN.FOLIOBIOMETRICO.CTE_UNICO%TYPE,
    VPRODUCTO               IN         CALLCEN.CAT_PRODUCTO.ID_PRODUCTO%TYPE,
    VSUBPRODUCTO            IN         CALLCEN.CAT_PRODUCTO.ID_SUBPRODUCTO%TYPE,
    VRECONOCIMIENTO_FACIAL  IN         CALLCEN.BITACORA_BIOM.REC_FACIAL%TYPE,
    VTIP_IDENTIFICACION     IN         CALLCEN.BITACORA_BIOM.TIP_IDENTIFICACION%TYPE,
    VFOTO_CLIENTE_NUEVA     IN         CALLCEN.FOLIOBIOMETRICO.FOTO_CLIENTE_NUEVA%TYPE,
    VFOTO_CLIENTE_HISTORICO IN         CALLCEN.FOLIOBIOMETRICO.FOTO_CLIENTE_HISTORICO%TYPE,
    VTIPO_SOLICITUD         IN         CALLCEN.FOLIOBIOMETRICO.TIPO_SOLICITUD%TYPE,
    VCLIENTE_TIENDA         IN         CALLCEN.FOLIOBIOMETRICO.CLIENTE_TIENDA%TYPE,
    VTIPO_TITULAR           IN         CALLCEN.FOLIOBIOMETRICO.TIPO_TITULAR%TYPE,
    VTRATAMIENTO_ESPECIAL   IN         CALLCEN.BITACORA_BIOM.TRATAMIENTO_ESPECIAL%TYPE,
    VRESULTADO              OUT        VARCHAR
)                                                                                                                                                                                                                          
AS
VPRODUCTOFULL INTEGER:=NULL;
VEXISTE NUMBER:=0;
VUNO NUMBER:=1;
VUSER VARCHAR(10):= 'CALLCEN';
VPENDIENTE VARCHAR(15):= 'PENDIENTE';
VNOASIGNADO VARCHAR(15):= 'NO ASIGNADO';
BEGIN     
        SELECT COUNT(1) INTO VEXISTE
        FROM CALLCEN.CAT_PRODUCTO
        WHERE ID_PRODUCTO = VPRODUCTO 
        AND ID_SUBPRODUCTO = VSUBPRODUCTO;
        
        IF VEXISTE = VUNO
        THEN
            SELECT ID_PRODUCTO_FULL INTO VPRODUCTOFULL
            FROM CALLCEN.CAT_PRODUCTO 
            WHERE ID_PRODUCTO = VPRODUCTO 
            AND ID_SUBPRODUCTO = VSUBPRODUCTO;
        END IF;

        INSERT INTO CALLCEN.FOLIOBIOMETRICO
        (
            FOLIO,
            NOMBRE_CLIENTE,
            CUENTA_CLIENTE,
            PAIS_SOLICITANTE,
            FOTO_CLIENTE_NUEVA,
            ORIGEN_SOLICITUD,
            USUARIO_MODIFICO,
            FECHA_MODIFICACION,
            SUCURSAL,
            FOTO_CLIENTE_HISTORICO,
            CANAL_GESTORA,
            SUCURSAL_GESTORA,
            CTE_UNICO,
            TIPO_SOLICITUD,
            CLIENTE_TIENDA,
            TIPO_TITULAR
        )
        VALUES 
        (
            VFOLIO,
            VNOMBRE_CLIENTE,
            VCUENTA,
            VPAIS,
            VFOTO_CLIENTE_NUEVA,
            VORIGEN_SOLICITUD,
            VUSER,
            SYSDATE,
            VSUCURSAL,
            VFOTO_CLIENTE_HISTORICO,
            VCANAL_GESTORA,
            VSUCURSAL_GESTORA,
            VCTE_UNICO,
            VTIPO_SOLICITUD,
            VCLIENTE_TIENDA,
            VTIPO_TITULAR
        );               
        INSERT INTO CALLCEN.LIBERA_BIOM
        (
            FOLIO,
            ESTATUS,
            PAIS_SOLICITANTE,
            USUARIO_MODIFICO,
            FECHA_MODIFICACION,
            AGENTE,
            FECHA_REGISTRO
        )
        VALUES
        (
            VFOLIO,
            VPENDIENTE,
            VPAIS,
            VUSER,
            SYSDATE,
            VNOASIGNADO,
            SYSDATE
        );      
        INSERT INTO CALLCEN.BITACORA_BIOM
        (
            FOLIO,
            ESTATUS,
            AGENTE,
            CUENTA_CLIENTE,
            PAIS_SOLICITANTE,
            USUARIO_MODIFICO,
            FECHA_MODIFICACION,
            FECHA_REGISTRO,
            SUCURSAL,
            CANAL_GESTORA,
            SUCURSAL_GESTORA,
            CTE_UNICO,
            ID_PRODUCTO_FULL,
            NOMBRE_SUCURSAL,
            REC_FACIAL,
            TIP_IDENTIFICACION,
            TRATAMIENTO_ESPECIAL
        )
        VALUES
        (
            VFOLIO,
            VPENDIENTE,
            VNOASIGNADO,
            VCUENTA,VPAIS,
            VUSER,
            SYSDATE,
            SYSDATE,
            VSUCURSAL,
            VCANAL_GESTORA,
            VSUCURSAL_GESTORA,
            VCTE_UNICO,
            VPRODUCTOFULL,
            VNOMBRE_SUCURSAL,
            VRECONOCIMIENTO_FACIAL,
            VTIP_IDENTIFICACION,
            VTRATAMIENTO_ESPECIAL
        );
        COMMIT;
        VRESULTADO:='OK';
EXCEPTION
            WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            VRESULTADO :=SQLCODE || '  ' || SQLERRM;
            WHEN OTHERS THEN
                ROLLBACK;
                VRESULTADO:=SQLERRM(SQLCODE);
                dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END SPP_BIOM_INSERT;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_VERIFICA_USO_SIST
AS
/*ES USADO POR UN JOB PARA CONTROLAR EL USO DEL SISTEMA*/
TEMPX 		NUMBER;

CURSOR LLAMADAS_CUR IS
SELECT AGENTE,MAX(FECHA) FROM LOGS_ENTRADA
GROUP BY AGENTE HAVING TRUNC(MAX(FECHA))<=TRUNC(SYSDATE-30);

CURSOR INHA_CUR IS
SELECT AGENTE,MAX(FECHA) FROM LOGS_ENTRADA
GROUP BY AGENTE HAVING TRUNC(MAX(FECHA))<=TRUNC(SYSDATE-45);


BEGIN

	  FOR TEMPX IN LLAMADAS_CUR LOOP
			UPDATE AGENTES
			SET ID_ESTATUS= 4
			WHERE AGENTE = TEMPX.AGENTE
				  AND ID_ESTATUS<>5;
	  END LOOP;
	  COMMIT;

	  FOR TEMPX IN INHA_CUR LOOP
			UPDATE AGENTES
			SET ID_ESTATUS= 5
			WHERE AGENTE = TEMPX.AGENTE
			AND ID_PERFIL<>15;
	  END LOOP;
	  COMMIT;


END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_VERIFICA_CADUCIDAD_PASS
AS
/*ES USADO POR UN JOB PARA CONTROLAR LA CADUCIDAD DE LOS PASS DE LOS AGENTES.*/

TEMPX 		NUMBER;

CURSOR LLAMADAS_CUR IS
SELECT * FROM AGENTES WHERE TRUNC(FECHA)<=TRUNC(SYSDATE-30)
AND ID_ESTATUS<>5;


BEGIN

	  FOR TEMPX IN LLAMADAS_CUR LOOP
			UPDATE AGENTES
			SET CAMBIO= 1
			WHERE AGENTE = TEMPX.AGENTE
			AND ID_PAIS=TEMPX.ID_PAIS;
            
			COMMIT;

	  END LOOP;
          
           /*INSERT INTO BIT_ERROR
			  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
			    VALUES(SEQ_BIT_ERROR.NEXTVAL,'BANDERACAMBIAPASS','SPCC_VERIFICA_CADUCIDAD_PASS',TEMPX.AGENTE,SYSDATE,'SPCC_VERIFICA_CADUCIDAD_PASS');
			COMMIT;
  */
	  
	  EXCEPTION
   		  WHEN OTHERS THEN
		  ROLLBACK;
	  
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_VALIDA_RESP_CANCELACION (PWEBSERVICE 	IN  VARCHAR2,
											     PMENSAJE 	    OUT VARCHAR2)
AS
/*
*
*VALIDA LAS RESPUESTAS DE LA TRANSACCIONES DE SOLICITUD DE CANCELACION
*Y DARA UNA RESPUESTA MAS CLARA AL USUARIO
*
*/

VCADENA     VARCHAR2(100);

BEGIN 
  
      IF PWEBSERVICE IS NULL THEN
           PMENSAJE:='ERROR';
         dbms_output.put_line('VIENE VACIA...');
      ELSE
                
        VCADENA:=SUBSTR(PWEBSERVICE,INSTR(PWEBSERVICE,'('),LENGTH(TRIM(PWEBSERVICE)));
        dbms_output.put_line('CADENA: '||VCADENA);
        
          SELECT NVL(TIPO,'NO ESTA IDENTIFICADO AVISE AL SUPERVISOR') INTO PMENSAJE
          FROM CAT_RESP_CANCEL
          WHERE UPPER(SUBSTR(TRIM(TRANSACCION_CORTA),1,30))=UPPER(SUBSTR(TRIM(VCADENA),1,30));


      END IF;
            
       dbms_output.put_line('PARA EL WEBSERVICE: '||PWEBSERVICE);
      dbms_output.put_line('EL PMENSAJE ES: '||PMENSAJE);
      
   exception
   
   when NO_DATA_FOUND then 

           INSERT INTO CAT_RESP_CANCEL (TRANSACCION_CORTA,F_ALTA)
        SELECT UPPER(SUBSTR(VCADENA,1,30)),SYSDATE 
        FROM DUAL;
        
        commit;
                    
        dbms_output.put_line('NO LA ENCONTRO Y LA AGREGO AL CATALOGO');
               
   when OTHERS then
          
        dbms_output.put_line('ERROR NO RECONOCIDO'); 
        
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_VALIDAR_SESION (VAGENTE  IN VARCHAR2,
                    						    VPAIS    IN NUMBER,
             								   	VCAMBIASESION  IN NUMBER,
             								   VSESION  OUT NUMBER,
											   VESTATUS OUT NUMBER)

AS

VESTAT NUMBER;
VNSESION NUMBER;
VCURSAL VARCHAR2(500);

BEGIN


		   SELECT ID_ESTATUS INTO VESTAT
		   FROM AGENTES WHERE
		   TRIM(AGENTE)= TRIM(VAGENTE)
		   AND ID_PAIS = VPAIS;

		   VESTATUS:= VESTAT;



		   IF VESTATUS =0 OR VCAMBIASESION=1 THEN

			 SELECT SESION INTO VNSESION
		  	 FROM AGENTES
		  	 WHERE TRIM(AGENTE)= TRIM(VAGENTE)
		  	 AND ID_PAIS = VPAIS;


			  VSESION:= VNSESION+1;

			  VESTATUS:=VESTAT;
			  SPCC_AGENTE_UPD(2,0,VAGENTE, VPAIS, VSESION, 0,0,' ', VCURSAL);

		  ELSE

			  VSESION:= -1;
			  VESTATUS:= VESTAT;

	 	  END IF;


END SPCC_VALIDAR_SESION;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_USUARIO_INSERTAR_1(VAGENTE IN VARCHAR2,
									  VID_PAIS		IN NUMBER,
									  VID_ESTATUS	  IN NUMBER,
									  VID_PERFIL	  IN NUMBER,
									  VCAMBIO		  IN NUMBER,
									  VNOMBRE		  IN VARCHAR2,
									  VAPATERNO		  IN VARCHAR2,
									  VAMATERNO		  IN VARCHAR2,
									  VIP			  IN VARCHAR2,
									  VDESCRIPCION	  IN VARCHAR2,
									  VUADMON		  IN VARCHAR2,
									  VRESPUESTA	OUT	VARCHAR2 )


IS
V_AGTEXISTE NUMBER;
V_CURSALIDA VARCHAR2(1000);

/*VS_IP  VARCHAR2(20);
VS_DESCRIPCION VARCHAR2(50);
VS_AGENTE VARCHAR2(50);
VS_UADMON VARCHAR2(50);
VS_IDPAIS NUMBER;

/******************************************************************************
   NAME:       SPCC_USUARIO_INSERTAR
   PURPOSE:	   INSERTAR AGENTE E IP EN SUS RESPECTIVOS CATALOGOS

   1.0        11/10/2006          1.  Noemi Hernandez

******************************************************************************/

BEGIN

V_AGTEXISTE:=0;
 dbms_output.put_line('ENTRO A AGENTE');


 dbms_output.put_line('mis valores de entrada fueron  ('||VAGENTE||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||','||VIP||','||VDESCRIPCION||','||VUADMON);
--VALIDAR  QUE NO EXISTA AGENTE

  SELECT COUNT(AGENTE) INTO V_AGTEXISTE
  FROM AGENTES
  WHERE TRIM(AGENTE)=TRIM(VAGENTE)
  AND TRIM(ID_PAIS)= TRIM(VID_PAIS);

  INSERT INTO BIT_ERROR
  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','V_AGTEXISTE='||V_AGTEXISTE,SYSDATE,'SPCC_USUARIO_INSERTAR_1');
  COMMIT;


  IF V_AGTEXISTE = 1 THEN
  	 --SI EL AGENTE YA EXISTE, SE INSERTA EN LA BITACORA DE ERROR
  	 		INSERT INTO BIT_ERROR
		  		   (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  		   VALUES(SEQ_BIT_ERROR.NEXTVAL,'ALTA DE USUARIO','SPCC_USUARIO_INSERTAR','INSERT INTO AGENTES VALUES ('||VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||', 0, 0)',SYSDATE, 'EL AGENTE YA EXISTE');

				     VRESPUESTA:= ('EL AGENTE YA EXISTE');
					  dbms_output.put_line('inserto BIT_ERROR');

		    COMMIT;
  ELSE
    --SI EL AGENTE NO EXISTE, SE INSERTA EN LA TABLA DE AGENTES Y BITACORA ADM Y MANDA EJECUTAR AL STORED DE LAS IPS
		 INSERT INTO AGENTES
		  (AGENTE, FECHA, ID_PAIS, ID_ESTATUS, ID_PERFIL, CAMBIO, NOMBRE, APATERNO, AMATERNO, SESION, ID_SEG)
		  VALUES (VAGENTE,TRUNC(SYSDATE),VID_PAIS,VID_ESTATUS,VID_PERFIL,VCAMBIO,VNOMBRE,VAPATERNO,VAMATERNO, 0, 0);
		  dbms_output.put_line('INSERTO DATOS '|| VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||','|| ' 0,0 ');

		  dbms_output.put_line('inserto nUEVO');

	     VRESPUESTA:= ('EL AGENTE SE DIO DE ALTA CORRECTAMENTE');


   		  INSERT INTO BITACORA_ADM
   		  (ADMINISTRADOR,FECHA, HORA, ID_PAIS, AGENTE, ACCION)
  		  VALUES(VUADMON,TRUNC(SYSDATE),TO_CHAR(SYSDATE,'HH24:MI:SS') ,VID_PAIS, VAGENTE ,'1');

 	  	COMMIT;

		 dbms_output.put_line('mis valores de SALIDA SON  ' ||VIP||','||VDESCRIPCION||','||VAGENTE||','||VUADMON||','||VID_PAIS||','||V_CURSALIDA);
		 SPCC_IP_INSERT (VIP,VDESCRIPCION,VAGENTE,VUADMON,VID_PAIS,V_CURSALIDA);


  END IF;

     EXCEPTION
     WHEN OTHERS THEN

	   VRESPUESTA:=SQLERRM(SQLCODE);

       INSERT INTO BIT_ERROR
		  		   (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  		   VALUES(SEQ_BIT_ERROR.NEXTVAL,'ALTA DE USUARIO','SPCC_USUARIO_INSERTAR','INSERT INTO AGENTES VALUES ('||VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||', 0, 0)',SYSDATE, 'DATOS INCORRECTOS');
	   COMMIT;

       dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));

END SPCC_USUARIO_INSERTAR_1;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Spcc_Usuario_Insertar(VAGENTE IN VARCHAR2,
           VID_PAIS  IN NUMBER,
           VID_ESTATUS   IN NUMBER,
           VID_PERFIL   IN NUMBER,
           VCAMBIO    IN NUMBER,
           VNOMBRE    IN VARCHAR2,
           VAPATERNO    IN VARCHAR2,
           VAMATERNO    IN VARCHAR2,
           VIP     IN VARCHAR2,
           VDESCRIPCION   IN VARCHAR2,
           VUADMON    IN VARCHAR2,
           VRESPUESTA OUT VARCHAR2 )


IS
/*SUSTITUYE AL SPCC_USUARIO_INSERTAR_1*/
V_AGTEXISTE NUMBER;
V_CURSALIDA VARCHAR2(1000);

/*VS_IP  VARCHAR2(20);
VS_DESCRIPCION VARCHAR2(50);
VS_AGENTE VARCHAR2(50);
VS_UADMON VARCHAR2(50);
VS_IDPAIS NUMBER;

/******************************************************************************
   NAME:       SPCC_USUARIO_INSERTAR
   PURPOSE:    INSERTAR AGENTE E IP EN SUS RESPECTIVOS CATALOGOS

   1.0        11/10/2006          1.  Noemi Hernandez

******************************************************************************/

BEGIN

V_AGTEXISTE:=0;
 dbms_output.put_line('ENTRO A AGENTE');


 dbms_output.put_line('mis valores de entrada fueron  ('||VAGENTE||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||','||VIP||','||VDESCRIPCION||','||VUADMON);
--VALIDAR  QUE NO EXISTA AGENTE

  SELECT COUNT(AGENTE) INTO V_AGTEXISTE
  FROM AGENTES
  WHERE TRIM(AGENTE)=TRIM(VAGENTE)
  AND TRIM(ID_PAIS)= TRIM(VID_PAIS);

  IF V_AGTEXISTE = 1 THEN
    --SI EL AGENTE YA EXISTE, SE INSERTA EN LA BITACORA DE ERROR
      INSERT INTO BIT_ERROR
         (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
         VALUES(SEQ_BIT_ERROR.NEXTVAL,'ALTA DE USUARIO','SPCC_USUARIO_INSERTAR','INSERT INTO AGENTES VALUES ('||VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||', 0, 0)',SYSDATE, 'EL AGENTE YA EXISTE');

         VRESPUESTA:= ('EL AGENTE YA EXISTE');
       dbms_output.put_line('inserto BIT_ERROR');

      COMMIT;
  ELSE
    --SI EL AGENTE NO EXISTE, SE INSERTA EN LA TABLA DE AGENTES Y BITACORA ADM Y MANDA EJECUTAR AL STORED DE LAS IPS
   INSERT INTO AGENTES
    (AGENTE, FECHA, ID_PAIS, ID_ESTATUS, ID_PERFIL, CAMBIO, NOMBRE, APATERNO, AMATERNO, SESION, ID_SEG)
    VALUES (VAGENTE,TRUNC(SYSDATE),VID_PAIS,VID_ESTATUS,VID_PERFIL,VCAMBIO,VNOMBRE,VAPATERNO,VAMATERNO, 0, 0);
    dbms_output.put_line('INSERTO DATOS '|| VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||','|| ' 0,0 ');

    dbms_output.put_line('inserto nUEVO');

      VRESPUESTA:= ('EL AGENTE SE DIO DE ALTA CORRECTAMENTE');


       INSERT INTO BITACORA_ADM
       (ADMINISTRADOR,FECHA, HORA, ID_PAIS, AGENTE, ACCION)
      VALUES(VUADMON,TRUNC(SYSDATE),TO_CHAR(SYSDATE,'HH24:MI:SS') ,VID_PAIS, VAGENTE ,'1');

     COMMIT;

   dbms_output.put_line('mis valores de SALIDA SON  ' ||VIP||','||VDESCRIPCION||','||VAGENTE||','||VUADMON||','||VID_PAIS||','||V_CURSALIDA);
   Spcc_Ip_Insert (VIP,VDESCRIPCION,VAGENTE,VUADMON,VID_PAIS,V_CURSALIDA);


  END IF;

     EXCEPTION
     WHEN OTHERS THEN

    VRESPUESTA:=SQLERRM(SQLCODE);

       INSERT INTO BIT_ERROR
         (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
         VALUES(SEQ_BIT_ERROR.NEXTVAL,'ALTA DE USUARIO','SPCC_USUARIO_INSERTAR','INSERT INTO AGENTES VALUES ('||VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||', 0, 0)',SYSDATE, 'DATOS INCORRECTOS');
    COMMIT;

       dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));

END Spcc_Usuario_Insertar;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_USUARIO_INSERTA(VAGENTE IN VARCHAR2,
           VID_PAIS  IN NUMBER,
           VID_ESTATUS   IN NUMBER,
           VID_PERFIL   IN NUMBER,
           VCAMBIO    IN NUMBER,
           VNOMBRE    IN VARCHAR2,
           VAPATERNO    IN VARCHAR2,
           VAMATERNO    IN VARCHAR2,
           VIP     IN VARCHAR2,
           VDESCRIPCION   IN VARCHAR2,
           VUADMON    IN VARCHAR2,
           VID_SEG    IN NUMBER,
           VRESPUESTA OUT VARCHAR2 )


IS
/*
SUSTITUYE AL SPCC_USUARIO_INSERTAR_1
CREADO EL 12/DIC/2006
*/
V_AGTEXISTE NUMBER;
V_CURSALIDA VARCHAR2(1000);

/******************************************************************************
   NAME:       SPCC_USUARIO_INSERTA
   PURPOSE:    INSERTAR AGENTE E IP EN SUS RESPECTIVOS CATALOGOS

   1.0        11/10/2006          1.  Noemi Hernandez

******************************************************************************/

BEGIN

  V_AGTEXISTE:=0;
  dbms_output.put_line('SPCC_USUARIO_INSERTA('||VAGENTE||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||','||VIP||','||VDESCRIPCION||','||VUADMON||','||VID_SEG||');');
  --VALIDAR  QUE NO EXISTA AGENTE

  SELECT COUNT(AGENTE) INTO V_AGTEXISTE
  FROM AGENTES
  WHERE TRIM(AGENTE)=TRIM(VAGENTE)
  AND TRIM(ID_PAIS)= TRIM(VID_PAIS);

  IF V_AGTEXISTE = 1 THEN
    --SI EL AGENTE YA EXISTE, SE INSERTA EN LA BITACORA DE ERROR
     INSERT INTO BIT_ERROR
     (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
  VALUES(SEQ_BIT_ERROR.NEXTVAL,'ALTA DE USUARIO','SPCC_USUARIO_INSERTAR','INSERT INTO AGENTES VALUES ('||VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||', 0, 0)',SYSDATE, 'EL AGENTE YA EXISTE');

  VRESPUESTA:= ('EL AGENTE YA EXISTE');
  dbms_output.put_line('inserto BIT_ERROR');

  COMMIT;
  ELSE
    --SI EL AGENTE NO EXISTE, SE INSERTA EN LA TABLA DE AGENTES Y BITACORA ADM Y MANDA EJECUTAR AL STORED DE LAS IPS
   INSERT INTO AGENTES
    (AGENTE, FECHA, ID_PAIS, ID_ESTATUS, ID_PERFIL, CAMBIO, NOMBRE, APATERNO, AMATERNO, SESION, ID_SEG)
    VALUES (VAGENTE,TRUNC(SYSDATE),VID_PAIS,VID_ESTATUS,VID_PERFIL,VCAMBIO,VNOMBRE,VAPATERNO,VAMATERNO, 0, VID_SEG);
    dbms_output.put_line('INSERTO DATOS '|| VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||','|| ' 0,'||VID_SEG);

    dbms_output.put_line('inserto nUEVO');

      VRESPUESTA:= ('EL AGENTE SE DIO DE ALTA CORRECTAMENTE');


       INSERT INTO BITACORA_ADM
       (ADMINISTRADOR,FECHA, HORA, ID_PAIS, AGENTE, ACCION)
       VALUES(VUADMON,TRUNC(SYSDATE),TO_CHAR(SYSDATE,'HH24:MI:')||TO_CHAR(TO_NUMBER(TO_CHAR(SYSDATE,'SS'))+2) ,VID_PAIS, VAGENTE ,'1');

--       VALUES(VUADMON,TRUNC(SYSDATE),TO_CHAR(SYSDATE,'HH24:MI:SS') ,VID_PAIS, VAGENTE ,'1');

     COMMIT;

   dbms_output.put_line('mis valores de SALIDA SON  ' ||VIP||','||VDESCRIPCION||','||VAGENTE||','||VUADMON||','||VID_PAIS||','||V_CURSALIDA);
   SPCC_IP_INSERT (VIP,VDESCRIPCION,VAGENTE,VUADMON,VID_PAIS,V_CURSALIDA);


  END IF;

  EXCEPTION
     WHEN OTHERS THEN

    VRESPUESTA:=SQLERRM(SQLCODE);

       INSERT INTO BIT_ERROR
         (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
         VALUES(SEQ_BIT_ERROR.NEXTVAL,'ALTA DE USUARIO','SPCC_USUARIO_INSERTAR','INSERT INTO AGENTES VALUES ('||VAGENTE||','||TRUNC(SYSDATE)||','||VID_PAIS||','||VID_ESTATUS||','||VID_PERFIL||','||VCAMBIO||','||VNOMBRE||','||VAPATERNO||','||VAMATERNO||', 0, 0)',SYSDATE, 'DATOS INCORRECTOS');
    COMMIT;

       dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_TRATAMIENTOS_UPD (VNOMBRE_TRATA IN VARCHAR2,
	   			 					   VSIGNO IN VARCHAR2,
									   VCRITERIO IN VARCHAR2,
									   VMENSAJE IN VARCHAR2,
									   VFECHAI IN DATE,
									   VFECHAF IN DATE,
									   VLINK IN VARCHAR2,
									   VID_PAIS IN NUMBER,
									   VIMAGEN IN VARCHAR2,
									   VBITACORA IN VARCHAR2,
									   VFOLIO IN VARCHAR2,
									   VAGENTE IN VARCHAR2,
								 	   VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  UPDATE TRATAMIENTOS_ESPECIALES
		  SET nombre_tratamiento = VNOMBRE_TRATA, signo_criterio = VSIGNO, criterio = VCRITERIO, mensaje = VMENSAJE,
		  fecha_inicio = VFECHAI, fecha_fin = VFECHAF, LINK = VLINK, id_pais = VID_PAIS, imagen = VIMAGEN, bitacora = VBITACORA
		  WHERE folio = VFOLIO AND agente = VAGENTE;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_TRATAMIENTOS_INSERT (Vfolio IN VARCHAR2,
	   			 						  Vagente IN VARCHAR2,
										  Vnombre IN VARCHAR2,
										  Vsigno IN VARCHAR2,
										  Vcriterio IN VARCHAR2,
										  Vmensaje IN VARCHAR2,
										  Vfecha_inicio IN DATE,
										  Vfecha_fin IN DATE,
										  Vlink IN VARCHAR2,
										  Vid_pais IN NUMBER,
										  Vimagen IN VARCHAR2,
										  Vbitacora IN VARCHAR2,
									  	  VRESPUESTA	OUT	VARCHAR2)
AS

BEGIN

		  INSERT INTO TRATAMIENTOS_ESPECIALES
		  (folio, agente, nombre_tratamiento, signo_criterio, criterio, mensaje, fecha_inicio, fecha_fin, LINK, id_pais, imagen, bitacora)
		  VALUES (Vfolio, Vagente, Vnombre, Vsigno, Vcriterio, Vmensaje, Vfecha_inicio, Vfecha_fin, Vlink, Vid_pais, Vimagen, Vbitacora);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_TAB_CLIENTE (VCTEALNOVA IN VARCHAR2,
                                              VNOM IN VARCHAR2,
                                              VAPAT IN VARCHAR2,
                                              VAMAT IN VARCHAR2,
                                              VDIR IN VARCHAR2,
                                              VDIRNUINT IN VARCHAR2,
                                              VDIRNUEXT IN VARCHAR2,
                                              VCOL IN VARCHAR2,
                                              VCIUDAD IN VARCHAR2,
                                              VCP IN VARCHAR2,
                                              VTEL IN VARCHAR2,
                                              VFECHANAC IN VARCHAR2,
											  VPAIS IN NUMBER,
                                              VRESPUESTA OUT VARCHAR2) IS


VEXISTECTE NUMBER;
/******************************************************************************
   NAME:       SPCC_TAB_CLIENTE
   PURPOSE: INSERCION Y ACTUALIZACION DE LOS DATOS DE LOS CLIENTES

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        31/01/2007          1. 	   Primera Version  Noemi Hernandez

******************************************************************************/
BEGIN


   IF TRIM(VCTEALNOVA) IS NULL AND TRIM(UPPER(VNOM)) IS NULL AND TRIM(UPPER(VAPAT)) IS NULL AND TRIM(UPPER(VAMAT)) IS NULL THEN

   	     VRESPUESTA:='LLAVE PRIMARIA NULA';

		  	Dbms_output.put_line('LLAVE PRIMARIA NULA');

   ELSIF  TRIM(VCTEALNOVA) IS NULL AND TRIM(UPPER(VNOM)) IS NULL OR TRIM(UPPER(VAPAT)) IS NULL OR TRIM(UPPER(VAMAT)) IS NULL THEN

   	      VRESPUESTA:='CLIENTE ALNOVA SIN NOMBRE COMPLETO';

		   	Dbms_output.put_line('CLIENTE ALNOVA SIN NOMBRE COMPLETO ');

   ELSIF TRIM(VCTEALNOVA) IS NOT NULL AND TRIM(UPPER(VNOM)) IS  NOT NULL AND TRIM(UPPER(VAPAT)) IS NOT NULL AND TRIM(UPPER(VAMAT)) IS NOT NULL THEN

   		 BEGIN

             SELECT COUNT(1) INTO VEXISTECTE
             FROM CLIENTES
             WHERE TRIM(CTE_ALNOVA)= TRIM(VCTEALNOVA)
             AND TRIM(UPPER(NOMBRE))= TRIM(UPPER(VNOM))
             AND TRIM(UPPER(A_PATERNO))= TRIM(UPPER(VAPAT))
             AND TRIM(UPPER(A_MATERNO))= TRIM(UPPER(VAMAT));


             	   IF VEXISTECTE =0 THEN

             	   	  INSERT INTO CLIENTES
             		  	 (CTE_ALNOVA,NOMBRE,A_PATERNO,A_MATERNO,DIRECCION,DIR_NUM_INT,DIR_NUM_EXT,COLONIA,CIUDAD,CP,TELEFONO,FECHANAC,FEC_INSERCION,FEC_ACTUALIZACION,PAIS)
             		  VALUES
          		     (VCTEALNOVA ,VNOM,VAPAT,VAMAT,VDIR,VDIRNUINT,VDIRNUEXT,VCOL,VCIUDAD,VCP,VTEL,VFECHANAC,SYSDATE,SYSDATE, VPAIS);

          	     COMMIT;

          		 Dbms_output.put_line('SE INSERTO CTE');

          	    VRESPUESTA:='EL CLIENTE SE INSERTO CORRECTAMENTE';


             	  ELSE

             	  	  UPDATE CLIENTES
             		   SET
                      DIRECCION = TRIM(UPPER(VDIR)),
                      DIR_NUM_INT  = TRIM(UPPER(VDIRNUINT)),
                      DIR_NUM_EXT = TRIM(UPPER(VDIRNUEXT)),
                      COLONIA = TRIM(UPPER(VCOL)),
                      CIUDAD = TRIM(UPPER(VCIUDAD)),
                      CP = TRIM(UPPER(VCP)),
                      TELEFONO = TRIM(UPPER(VTEL)),
                      FEC_ACTUALIZACION = SYSDATE,
					  PAIS=VPAIS
                     WHERE TRIM(CTE_ALNOVA)= TRIM(VCTEALNOVA)
                      AND TRIM(UPPER(NOMBRE))= TRIM(UPPER(VNOM))
                      AND TRIM(UPPER(A_PATERNO))= TRIM(UPPER(VAPAT))
                      AND TRIM(UPPER(A_MATERNO))= TRIM(UPPER(VAMAT));

          	 		COMMIT;
          	 	Dbms_output.put_line('SE ACTUALIZO CTE');

          	    VRESPUESTA:='EL CLIENTE SE ACTUALIZO CORRECTAMENTE';



             	  END IF;


			END;

	END IF;

   EXCEPTION
     WHEN OTHERS THEN

	  VRESPUESTA:=SQLERRM(SQLCODE);

 	 INSERT INTO BIT_ERROR
    (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
    VALUES(SEQ_BIT_ERROR.NEXTVAL,'INS/ACT','SPCC_TAB_CLIENTE', 'CTE_ALNOVA='||VCTEALNOVA||','||'NOMBRE= '||VNOM||','||'A_PATERNO= '||VAPAT||','||'A_MATERNO= '||VAMAT||','||'DIRECCION'||VDIR||','||'DIR_NUM_INT= '||VDIRNUINT||','||'DIR_NUM_EXT= '||VDIRNUEXT||','||'COLONIA= '||VCOL||','||'CIUDAD= '||VCIUDAD||','||'CP'||VCP||','||'TELEFONO'||VTEL||','||'FECHANAC'||VFECHANAC||','||'FEC_INSERCION'||SYSDATE||','||'FEC_ACTUALIZACION'||SYSDATE||','||'PAIS'||VPAIS||' )',SYSDATE ,VRESPUESTA);
    COMMIT;

END SPCC_TAB_CLIENTE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_STATUS_AGENTE
(
PAGENTE IN VARCHAR,
PIP IN VARCHAR,
PPAIS IN NUMBER,
PESTATUS OUT NUMBER,
PDESC OUT VARCHAR
)
AS
/*
  Modificado el 02 de noviembre
  para cambios de bloqueo de ip al decimo intento
  Obtenemos el estatus del agente
    status=2 son intentos fallidos de logueo
    si son mas de 5 ya no permitimos el acceso
  y la ip para dar acceso al sistema Unificado, donde
  0=valida
  1=invalida

  Salida
  0=aceptado
  1=rechazado
*/
     VINTENTOS NUMBER;
     VEXISTEAGENTE NUMBER;
     VAGPAIS NUMBER;
     VIDSTAT NUMBER;

     BEGIN
     VINTENTOS:=0;
     
     SELECT COUNT(agente)
     INTO VEXISTEAGENTE
     FROM AGENTES
     WHERE TRIM(agente)  = trim(PAGENTE)
     AND id_pais=PPAIS;

     dbms_output.put_line('Existe Usuario?: '||VEXISTEAGENTE);

     IF VEXISTEAGENTE =0 THEN
          PESTATUS:=1;
         PDESC:='USUARIO INEXISTENTE.';

     ELSE


       SELECT COUNT(*) INTO VAGPAIS
       FROM AGENTES
       WHERE TRIM(agente) = TRIM(PAGENTE)
       AND id_pais=PPAIS;


       IF VAGPAIS=0 THEN
              PESTATUS:=1;
           PDESC:=' EL AGENTE NO EXISTE EN EL PAIS SELECCIONADO';

       ELSE

       SELECT NVL(INTENTOS_FALLIDOS,0), ID_ESTATUS INTO VINTENTOS, VIDSTAT
       FROM AGENTES
       WHERE TRIM(agente) = TRIM(PAGENTE)
       AND id_pais=PPAIS;
       

       dbms_output.put_line('Intentos fallidos del agente: '||VINTENTOS);

          IF VIDSTAT =5 THEN
                      PESTATUS:=1;
                      PDESC:='EL USUARIO NO TIENE PERMISOS PARA ACCESAR AL SISTEMA';
        
          ELSIF VINTENTOS>5 THEN

              UPDATE AGENTES
              SET ID_ESTATUS=9
              WHERE TRIM(AGENTE)=TRIM(PAGENTE) AND ID_PAIS=PPAIS;

              COMMIT;
              
              PESTATUS:=1;
              PDESC:='EL USUARIO HA SIDO BLOQUEADO.';


           END IF;
       END IF;

       dbms_output.put_line('PESTATUS: '||PESTATUS);
       dbms_output.put_line('PDESC: '||PDESC);

         END IF;

       dbms_output.put_line('PESTATUS: '||PESTATUS);
       dbms_output.put_line('PDESC: '||PDESC);

       EXCEPTION


   WHEN OTHERS THEN
           PESTATUS:=1;
        PDESC:=SQLERRM(SQLCODE);
        INSERT INTO BIT_ERROR
          (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
          VALUES(SEQ_BIT_ERROR.NEXTVAL,'SELECT','SPCC_STATUS_AGENTE','PAGENTE=*'||PAGENTE||'*,PIP='||PIP||',pais='||ppais,SYSDATE ,PDESC);

          COMMIT;
        dbms_output.put_line('ERROR NO RECONOCIDO');


END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_REPUNIFICADO_INSERT (VREPORTE	IN VARCHAR2,
	   			 						  VARCHIVO IN VARCHAR2,
										  VCLASIFICACION IN NUMBER,
									  VRESPUESTA	OUT	VARCHAR2)
AS

BEGIN

		  INSERT INTO REPORTES_UNIFICADO
		  (NOMBRE_REPORTE, ARCHIVO, ID_CLASIFICACION)
		  VALUES (VREPORTE, VARCHIVO, VCLASIFICACION);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_REPORTES_UPD (VID_CLASIF 	IN NUMBER,
								 VNREPORTE	  IN		VARCHAR2,
								 VDREPORTE	  IN 		VARCHAR2,
								 VID_REPORTE  IN		NUMBER,
								 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  UPDATE REPORTES
		  SET id_clasificacion = VID_CLASIF, nombre_reporte = VNREPORTE, descripcion_reporte = VDREPORTE
		  WHERE id_reporte = VID_REPORTE;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_REPORTES_DEL (VID_REPORTE 	IN NUMBER,
								 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  DELETE FROM REPORTES WHERE id_reporte = VID_REPORTE;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_QUE_DATOS_INS (VNOMBRE IN VARCHAR2,
	   	  		  							  	VAPATERNO IN VARCHAR2,
												VAMATERNO IN VARCHAR2,
												VLADA IN VARCHAR2,
												VTELEFONO IN VARCHAR2,
												VTIPOTEL IN VARCHAR2,
												VFECHAPROB IN DATE,
												VHORAPROB  IN VARCHAR2,
												VPAIS IN NUMBER,
												VCANAL IN NUMBER,
												VSUC IN NUMBER,
												VREF IN VARCHAR2,
												VNOMATENDIO IN NUMBER,
												VPUESTO IN NUMBER,
												VDESC  IN VARCHAR2,
												VSTTRANS IN VARCHAR2,
												VFOLIOTRANS IN VARCHAR2,
												VTIPOTRANS IN VARCHAR2,
												VTIEMPOTRANS IN VARCHAR2,
												VCOMENTARIOS IN VARCHAR2,
												VRESPUESTA OUT VARCHAR2 )
AS


BEGIN

		  INSERT INTO QUE_DATOS
		  ( FOLIO, FECHA_REPORTE,HORA_REPORTE,NOMBRE,A_PATERNO,A_MATERNO,LADA,TELEFONO,TIPO_TEL,FECHA_PROBLEMA,HORA_PROBLEMA,PAIS,
 		   CANAL, SUCURSAL ,REF_UBICACION,NOM_ATENDIO,PUESTO,DESCRIPCION, ST_TRANSACCION,FOLIO_TRANSACCION,TIPO_TRANSACCION,TIEMPO_ESPERA,COMENTARIOS)
		  VALUES
		  (SEQ_QUE_DATOS.NEXTVAL, TRUNC(SYSDATE), TO_CHAR(SYSDATE,'HH24:MI:'),VNOMBRE,VAPATERNO,VAMATERNO,VLADA,VTELEFONO,VTIPOTEL,VFECHAPROB,VHORAPROB,
		  	VPAIS,VCANAL,VSUC,VREF,VNOMATENDIO,VPUESTO,VDESC,VSTTRANS,VFOLIOTRANS,VTIPOTRANS,VTIEMPOTRANS,VCOMENTARIOS );
		  COMMIT;

  		  VRESPUESTA:='OK';

		   EXCEPTION
	  	   WHEN OTHERS THEN
	  	  dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
 		  VRESPUESTA:=SQLERRM(SQLCODE);

 		  INSERT INTO BIT_ERROR
 		  		 (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
 		  		 VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_QUE_DATOS','INSERT INTO QUE_DATOS (FOLIO, FECHA_REPORTE,HORA_REPORTE,NOMBRE,A_PATERNO,A_MATERNO,LADA,TELEFONO,TIPO_TEL,FECHA_PROBLEMA,HORA_PROBLEMA,PAIS,'||
 		   'CANAL, SUCURSAL ,REF_UBICACION,NOM_ATENDIO,PUESTO,DESCRIPCION,ST_TRANSACCION,FOLIO_TRANSACCION,TIPO_TRANSACCION,TIEMPO_ESPERA, COMENTARIOS) VALUES ('||VNOMBRE||','||VAPATERNO||','||VAMATERNO||','||VLADA||','||VTELEFONO||','||VTIPOTEL||','||VFECHAPROB||')',SYSDATE ,VRESPUESTA);

 		  COMMIT;


END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_PROMOCIONES_INSERT (VNOMBRE 	IN VARCHAR2,
	   	  		  							  VLINK 		IN VARCHAR2,
											  VUSER			IN VARCHAR2,
											  VPASS			IN VARCHAR2,
											  VACCION		IN VARCHAR2,
											  VBITACORA		IN VARCHAR2,
											  VIMAGEN		IN VARCHAR2,
											  VLEYENDA		IN VARCHAR2,
											  VID_PAIS		IN NUMBER,
											  VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  INSERT INTO PROMOCIONES
		  (NOMBRE, LINK, USERID, PASSWORD, ACCION, BITACORA, IMAGEN, LEYENDA, ID_PAIS)
		  VALUES (VNOMBRE,VLINK,VUSER, VPASS, VACCION, VBITACORA, VIMAGEN,VLEYENDA,VID_PAIS);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_PERFILES_INSERT ( VPERFIL 		IN VARCHAR2,
									  VRESPUESTA	OUT	VARCHAR2)
AS

BEGIN

		  INSERT INTO CATALOGO_PERFILES (ID_PERFIL, PERFIL, TIPO)
		  VALUES (SEQ_CAT_PERFIL.NEXTVAL, VPERFIL, 'UNIFICADO');
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));

		  INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_PERFILES_INSERT','PERFIL='||VPERFIL,SYSDATE ,VRESPUESTA);

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_PERFILES_DELETE (VPERFIL 	IN VARCHAR2,
									 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  DELETE FROM CATALOGO_PERFILES WHERE UPPER(perfil) = UPPER(VPERFIL);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_MANEJO_SESIONES (P_IP    	  IN  VARCHAR2,
	   	  		  								  P_SESION IN  VARCHAR2,
                       							  P_RESPUESTA OUT VARCHAR2)
AS

BEGIN

	  UPDATE CAT_IPS
	  SET SESION = P_SESION
	  WHERE IP = P_IP;

      P_RESPUESTA:='OK';

      EXCEPTION
      WHEN OTHERS THEN
      P_RESPUESTA:=SQLERRM(SQLCODE);
      DBMS_OUTPUT.PUT_LINE('Error Sesion ' ||SQLERRM(SQLCODE));

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_LOGS_INSERT (VAGENTE 	IN VARCHAR2,
  		  							  VHORA 		IN VARCHAR2,
									  VID_PAIS			IN NUMBER,
									  VIP				IN VARCHAR2,
									  VPC				IN VARCHAR2,
									  VDOMINIO			IN VARCHAR2,
									  VSTATUS			IN VARCHAR2,
									  VRESPUESTA	OUT	VARCHAR2)
AS

V_INT_FALLIDOS NUMBER;


BEGIN
          SELECT NVL(MAX(INTENTOS_FALLIDOS) , 0) INTO V_INT_FALLIDOS
		  FROM LOGS_ENTRADA
		  WHERE AGENTE =TRIM(VAGENTE) 
		  AND ID_PAIS=VID_PAIS
		  AND FECHA = TRUNC(SYSDATE);

		  INSERT INTO LOGS_ENTRADA
		  (AGENTE, FECHA, HORA, ID_PAIS, IP, PC, DOMINIO, STATUS , INTENTOS_FALLIDOS , TIPO_AUTENTICACION)
		  VALUES (TRIM(VAGENTE),TRUNC(SYSDATE),VHORA,VID_PAIS,VIP,VPC,VDOMINIO,VSTATUS , 0 , 1);
		  COMMIT;

		  IF VSTATUS=2 THEN

  		  	  UPDATE AGENTES
				 SET INTENTOS_FALLIDOS = INTENTOS_FALLIDOS +1
				 WHERE TRIM(AGENTE)=TRIM(VAGENTE) AND ID_PAIS=VID_PAIS;
			  	 COMMIT;

			  UPDATE CAT_IPS
			  	 SET NUM_INTENTOS = NUM_INTENTOS +1,
				 FECHA= SYSDATE
				 WHERE TRIM(IP)=TRIM(VIP);
				 COMMIT;
				 
				 
			  UPDATE LOGS_ENTRADA
			  SET INTENTOS_FALLIDOS = V_INT_FALLIDOS + 1
			  WHERE AGENTE=TRIM(VAGENTE) 
			  AND ID_PAIS=VID_PAIS
			  AND FECHA = TRUNC(SYSDATE)
			  AND HORA = VHORA; 
			  COMMIT;	  	 
			/*

		INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'UPDATE','SPCC_LOGS_INSERT','AGENTE='||VAGENTE||' AND PAIS='||VID_PAIS||' AND IP='||VIP||' AND STATUS='||VSTATUS,SYSDATE ,'ERROR AL INGRESAR');

				*/
		  END IF;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_LLAMADAS_UPD (VAGENTE 	IN VARCHAR2,
								 VHORA		  IN		VARCHAR2,
								 VCLIENTE	  IN 		VARCHAR2,
								 VID_LLAMADA  IN		NUMBER,
								 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  UPDATE LLAMADAS
		  SET HORA_FINAL=VHORA, CLIENTE=VCLIENTE
		  WHERE ID=VID_LLAMADA AND AGENTE=VAGENTE;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_LLAMADAS_INSERT (VID	IN NUMBER,
	   			 					  VAGENTE IN VARCHAR2,
									  VID_PAIS IN NUMBER,
									  VCLIENTE IN VARCHAR2,
									  VHORAI IN VARCHAR2,
									  VHORAF IN VARCHAR2,
									  VID_LLAMADA IN VARCHAR2,
									  VRESPUESTA	OUT	VARCHAR2)
AS

BEGIN

		  INSERT INTO LLAMADAS
		  (ID, FECHA, AGENTE, ID_PAIS, CLIENTE, HORA_INICIAL, HORA_FINAL, ID_LLAMADA_IVR)
		  VALUES (VID,TRUNC(SYSDATE),VAGENTE,VID_PAIS,VCLIENTE,VHORAI,VHORAF,VID_LLAMADA);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_LIMPIA_INTENTOS_FALLIDOS
AS
/*
ES UTILIZADO POR UN JOB PARA INICIALIZAR EL CONTEO TODAS LAS NOCHES
*/
BEGIN
	  UPDATE AGENTES
	  SET INTENTOS_FALLIDOS =0;
	  COMMIT;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_IP_INSERT (VIP 	IN VARCHAR2,
  		  							  VDESCRIPCION 	IN VARCHAR2,
									  VAGENTE		IN VARCHAR2,
									  VUADMON       IN VARCHAR2,
									  VIDPAIS		IN NUMBER,
									  VRESPUESTA	OUT	VARCHAR2)
AS

V_IPEXISTE   NUMBER;
V_LONG NUMBER;

BEGIN

V_IPEXISTE :=0;
V_LONG	   :=0;


 dbms_output.put_line('ENTRO A IP');
 dbms_output.put_line('mis valores de entrada fueron  ('||VIP||','||VDESCRIPCION||','||VAGENTE||','||VUADMON||','||VIDPAIS||')');

 -- VERIFICAR QUE LA LONGITUD DE LA IP SEA MAYOR DE 7 Y MENOR DE 15

 SELECT LENGTH(TRIM (VIP) ) INTO V_LONG
 FROM DUAL;

/*  INSERT INTO BIT_ERROR
  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
  VALUES(SEQ_BIT_ERROR.NEXTVAL,'LONGITUD IP','SPCC_IP_INSERT','LONGITUD DE LA IP ='||V_LONG,SYSDATE,'SPCC_IP_INSERT');
  COMMIT;
*/
  dbms_output.put_line('PASO A LA LONGITUD');

 IF V_LONG <7 OR V_LONG >15 THEN
 	BEGIN
 --SI LA IP NO ES VALIDA INSERTA EN LA BITACORA DE ERROR EL REGISTRO
     	  INSERT INTO BIT_ERROR
    	  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
    	  VALUES(SEQ_BIT_ERROR.NEXTVAL,'LONGITUD IP','SPCC_IP_INSERT','INSERT INTO CAT_IPS VALUES ('||VIP||','||VDESCRIPCION||','||VAGENTE||'," ",0)',SYSDATE, 'LA IP EXCEDE LA LONGITUD');

    	  COMMIT;

    	  dbms_output.put_line('LA IP NO ES VALIDA');

    	  VRESPUESTA:='LA IP NO ES VALIDA';
	END;

  ELSE
    BEGIN	 --VERIFICO QUE NO EXISTA LA IP
	 SELECT COUNT(IP) INTO V_IPEXISTE
 	 FROM CAT_IPS
	 WHERE TRIM(IP)=TRIM(VIP);

     --SI LA IP YA EXISTE INSERTA EN LA BITACORA DE ERROR EL REGISTRO

	    IF V_IPEXISTE =1 THEN
		 BEGIN

    		  INSERT INTO BIT_ERROR
    		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
    		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'IP EXISTE','SPCC_IP_INSERT','INSERT INTO CAT_IPS VALUES ('||VIP||','||VDESCRIPCION||','||VAGENTE||'," ",0)',SYSDATE,'LA IP YA EXISTE EN EL CATALOGO');

      	      COMMIT;

              dbms_output.put_line('LA IP YA EXISTE EN EL CATALOGO');

              VRESPUESTA:='LA IP YA EXISTE EN EL CATALOGO';
		  END;

       ELSE

		  --SI NO EXISTE LA IP, LA INSERTA EN EL CATALOGO Y BITACORA DE ADMINISTRADOR.
		 BEGIN
    		  INSERT INTO CAT_IPS
    		  (IP,DESCRIPCION,AGENTE,ID_ESTATUS)
    		  VALUES (VIP,VDESCRIPCION,VAGENTE,0);
    		  COMMIT;

  		    dbms_output.put_line('LA IP SE DIO DE ALTA BIEN');

    		  VRESPUESTA:='LA IP FUE DADA DE ALTA CORRECTAMENTE EN EL CATALOGO';

    		  INSERT INTO BITACORA_ADM
     		  (ADMINISTRADOR,FECHA, HORA, ID_PAIS, AGENTE, ACCION)
    		  VALUES(VUADMON,TRUNC(SYSDATE),TO_CHAR(SYSDATE,'HH24:MI:')||TO_CHAR(TO_NUMBER(TO_CHAR(SYSDATE,'SS'))+5) ,VIDPAIS, VAGENTE ,'6');

    		  COMMIT;

		  END;

--  		  dbms_output.put_line('LA IP FUE DADA DE ALTA CORRECTAMENTE EN EL CATALOGO');

 	   END IF;

	  END;
 END IF;


 --/*
 EXCEPTION
	  WHEN OTHERS THEN
	  	  dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
 		  VRESPUESTA:=SQLERRM(SQLCODE);

 		  INSERT INTO BIT_ERROR
 		  		 (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
 		  		 VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_IP_INSERT','INSERT INTO CAT_IPS (IP,DESCRIPCION,AGENTE,ID_ESTATUS) VALUES ('||VIP||','||VDESCRIPCION||','||VAGENTE||','||VUADMON||','||VIDPAIS||')',SYSDATE ,VRESPUESTA);

 		  COMMIT;


          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
	--*/
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_IPS_UPD (VIP IN VARCHAR2,
                                    VDESCRIPCION VARCHAR2,
                                    VAGENTE IN VARCHAR2,
                                      VRESPUESTA    OUT    VARCHAR2)
AS

    vtotal NUMBER;
BEGIN


          SELECT NVL(COUNT(*),0) INTO vtotal
          FROM CALLCEN.CAT_IPS
          WHERE IP = VIP;

          dbms_output.put_line('ENCONTRO:' ||vtotal);

          IF vtotal=0 THEN
                INSERT INTO CALLCEN.CAT_IPS
              (IP,DESCRIPCION,AGENTE,ID_ESTATUS)
              VALUES(VIP,VDESCRIPCION,VAGENTE,0);
              COMMIT;

          ELSE

              UPDATE CALLCEN.CAT_IPS
              SET AGENTE=VAGENTE, DESCRIPCION=VDESCRIPCION
              WHERE IP = VIP;
              COMMIT;

          END IF;

            VRESPUESTA:='OK';

          EXCEPTION
             WHEN OTHERS THEN
          VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_IPS_DESBLOQUEA  (PIP IN VARCHAR2,
                    PTODAS IN NUMBER,
             PADMIN IN VARCHAR2,
             PPAIS IN NUMBER,
                PRESPUESTA OUT VARCHAR2)
AS

/*
CREADO EL 2/OCT/2006
PROCEDURE PARA DESBLOQUEAR LA IP

SI PTODAS=1 ENTONCES DESBLOQUEA TODAS LAS IP'S
SI PTODAS=0 ENTONCES SOLO DESBLOQUEA LA INDICADA
*/

 VAGENTE VARCHAR(20);
BEGIN

 IF PTODAS=0 THEN
   UPDATE CAT_IPS
   SET ID_ESTATUS=0,
   NUM_INTENTOS=0
   WHERE TRIM(IP)=TRIM(PIP);
   COMMIT;

   SELECT TRIM(AGENTE) INTO VAGENTE FROM CAT_IPS
   WHERE TRIM(IP)=(PIP)
   AND ROWNUM<=1;

   INSERT INTO BITACORA_ADM
   (ADMINISTRADOR, FECHA, HORA, ID_PAIS, AGENTE, ACCION)
   VALUES (TRIM(PADMIN),TRUNC(SYSDATE),TO_CHAR(SYSDATE,'HH24:MI:SS'),PPAIS,VAGENTE,5);
   COMMIT;


   dbms_output.put_line('desbloqueo al agente'||VAGENTE);

 ELSE
   dbms_output.put_line('ELIGIO 1');

   UPDATE CAT_IPS
   SET ID_ESTATUS=0,
   NUM_INTENTOS=0;

   COMMIT;


   INSERT INTO BITACORA_ADM
   (ADMINISTRADOR, FECHA, HORA, ID_PAIS, AGENTE, ACCION)
   VALUES (TRIM(PADMIN),TRUNC(SYSDATE),TO_CHAR(SYSDATE,'HH24:MI:SS'),PPAIS,'TODOS',5);
   COMMIT;

   dbms_output.put_line('desbloqueo todas');

 END IF;
   PRESPUESTA:='OK';

   EXCEPTION
      WHEN OTHERS THEN
    PRESPUESTA:=SQLERRM(SQLCODE);

    INSERT INTO BIT_ERROR
    (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
    VALUES(SEQ_BIT_ERROR.NEXTVAL,'SELECT','SPCC_IPS_DESBLOQUEA','PIP='||PIP||',PTODAS='||PTODAS||',PADMIN='||PADMIN||',PPAIS='||PPAIS,SYSDATE ,PRESPUESTA);

    COMMIT;


          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_IPS_DELETE (VAGENTE 	IN VARCHAR2,
									 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  DELETE FROM CAT_IPS WHERE agente = VAGENTE;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_INFORMACION_UPD (VINVESTOR IN VARCHAR2,
								  VBANNER VARCHAR2,
								  VAYUDA IN VARCHAR2,
								  VID_PAIS IN NUMBER,
							  	  VRESPUESTA	OUT	VARCHAR2)
AS

BEGIN

		  UPDATE INFORMACION
		  SET LEYENDA_INVESTOR=VINVESTOR, LEYENDA_BANNER=VBANNER, LEYENDA_AYUDA=VAYUDA
		  WHERE ID_PAIS = VID_PAIS;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_ID_SEG_UPD (VAGENTE VARCHAR2,
								  VID_PAIS IN NUMBER,
								  VID_SEG IN NUMBER,
								  VRESPUESTA	OUT	VARCHAR2)
AS

ESTATUS_ACTUAL NUMBER;

/*
REEMPLAZA AL STORE SPCC_AGENTES_UPD

MODIFICADO EL 15 DE NOVIEMBRE PARA VALIDAR ESTATUS DE AGENTE
*/
BEGIN

	dbms_output.put_line('ENTRO AL PROCEDURE');


		  UPDATE AGENTES
		  SET ID_SEG=VID_SEG
		  WHERE TRIM(AGENTE)=TRIM(VAGENTE)
		  AND ID_PAIS=VID_PAIS;
		  COMMIT;

		  	VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);

		  INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'UPDATE','SPCC_ID_SEG_UPD','VAGENTE='||VAGENTE||',VPAIS='||VID_PAIS||')',SYSDATE ,VRESPUESTA);

		  COMMIT;

          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_GENERA_FOLIO_CANCELACION (VLLAVE IN VARCHAR2, VRESPUESTA OUT VARCHAR2, VFOLIO OUT NUMBER)
AS

BEGIN

      SELECT CALLCEN.SEQ_FOLIO_CANCELACION.NEXTVAL INTO VFOLIO FROM DUAL;

      INSERT INTO CALLCEN.TFOLIOS_CANCELACION (TIME_STAMP,FOLIO)
           VALUES (VLLAVE, VFOLIO);
      COMMIT;

           VRESPUESTA:='OK';


      EXCEPTION
            WHEN OTHERS THEN

               ROLLBACK;

                   VRESPUESTA:='NO SE PUDO RECUPERAR O GUARDAR EL FOLIO '||SQLERRM(SQLCODE);

               INSERT INTO CALLCEN.BIT_ERROR
                                (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
                    VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT',
                            'SPCC_GENERA_FOLIO_CANCELACION','INSERT INTO CALLCEN.TFOLIOS_CANCELACION (TIME_STAMP,VFOLIO) VALUES ('||VLLAVE||', VFOLIO)',
                           SYSDATE ,VRESPUESTA);

                  COMMIT;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_DE_DATOS_INS (VNOMBRE IN VARCHAR2,
	   	  		  							  	VAPATERNO IN VARCHAR2,
												VAMATERNO IN VARCHAR2,
												VLADA IN VARCHAR2,
												VTELEFONO IN VARCHAR2,
												VTIPOTEL IN VARCHAR2,
												VFECHAPROB IN DATE,
												VHORAPROB  IN VARCHAR2,
												VPAIS IN NUMBER,
												VCANAL IN NUMBER,
												VSUC IN NUMBER,
												VREF IN VARCHAR2,
												VNOMATENDIO IN NUMBER,
												VPUESTO IN NUMBER,
												VDESC  IN VARCHAR2,
												VRESPUESTA OUT VARCHAR2 )
AS


BEGIN

		  INSERT INTO DE_DATOS
		  ( FOLIO, FECHA_REPORTE,HORA_REPORTE,NOMBRE,A_PATERNO,A_MATERNO,LADA,TELEFONO,TIPO_TEL,FECHA_PROBLEMA,HORA_PROBLEMA,PAIS,
 		   CANAL, SUCURSAL ,REF_UBICACION,NOM_ATENDIO,PUESTO,DESCRIPCION)
		  VALUES
		  (SEQ_DE_DATOS.NEXTVAL, TRUNC(SYSDATE), TO_CHAR(SYSDATE,'HH24:MI:'),VNOMBRE,VAPATERNO,VAMATERNO,VLADA,VTELEFONO,VTIPOTEL,VFECHAPROB,VHORAPROB,
		  	VPAIS,VCANAL,VSUC,VREF,VNOMATENDIO,VPUESTO,VDESC );
		  COMMIT;

  		  VRESPUESTA:='OK';

		   EXCEPTION
	  	   WHEN OTHERS THEN
	  	  dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
 		  VRESPUESTA:=SQLERRM(SQLCODE);

 		  INSERT INTO BIT_ERROR
 		  		 (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
 		  		 VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_DE_DATOS','INSERT INTO DE_DATOS (FOLIO, FECHA_REPORTE,HORA_REPORTE,NOMBRE,A_PATERNO,A_MATERNO,LADA,TELEFONO,TIPO_TEL,FECHA_PROBLEMA,HORA_PROBLEMA,PAIS,'||
 		   'CANAL, SUCURSAL ,REF_UBICACION,NOM_ATENDIO,PUESTO,DESCRIPCION) VALUES ('||VNOMBRE||','||VAPATERNO||','||VAMATERNO||','||VLADA||','||VTELEFONO||','||VTIPOTEL||','||VFECHAPROB||')',SYSDATE ,VRESPUESTA);

 		  COMMIT;


END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_DESBLOQUEA
AS
BEGIN
	  UPDATE AGENTES
	  SET ID_ESTATUS=0,
	  INTENTOS_FALLIDOS =0
	  WHERE ID_ESTATUS=9;
	  COMMIT;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_DEPURA_TABLAS
AS
/*
ES UTILIZADO POR UN JOB PARA DAR MANTENIMIENTO A LA BASE.
*/

  VRESPUESTA VARCHAR(100);

BEGIN

	  DELETE BITACORA_CUENTAS_AUTO
	  WHERE TRUNC(FECHA)<=TRUNC(SYSDATE-30);

	  DELETE BITACORA_BUSQUEDA_NOMBRES
	  WHERE TRUNC(FECHA)<=TRUNC(SYSDATE-30);

	  DELETE BIT_ERROR
	  WHERE TRUNC(FECHA)<=TRUNC(SYSDATE-30);

	  DELETE PLAN_TABLE
	  WHERE TRUNC(TIMESTAMP)<=TRUNC(SYSDATE-30);

	  COMMIT;

	  DELETE BITACORA_CUENTAS
	  WHERE TRUNC(FECHA)<=TRUNC(SYSDATE-120);
	  COMMIT;

	  DELETE BIT_TARJETA_AZTECA
	  WHERE TRUNC(FECHA)<=TRUNC(SYSDATE-120);
	  COMMIT;


	  DELETE BITACORA
	  WHERE LENGTH(PRODUCTO)=1 AND FECHA<=TRUNC(SYSDATE-730) AND accion=0;
	  COMMIT;

	  DELETE BITACORA
	  WHERE NVL(LENGTH(TRIM(PRODUCTO)),0)=0 AND FECHA<=TRUNC(SYSDATE-700) AND accion=0;
	  COMMIT;

	  EXCEPTION
      		   WHEN OTHERS THEN

	   		   VRESPUESTA:=SQLERRM(SQLCODE);

       	 	   INSERT INTO BIT_ERROR
		  		   (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  		   VALUES(SEQ_BIT_ERROR.NEXTVAL,'DELETE','SPCC_DEPURA_TABLAS','BITACORA_CUENTAS_AUTO,BITACORA_BUSQUEDA_NOMBRES,BIT_ERROR,PLAN_TABLE,BITACORA_CUENTAS',SYSDATE, 'NO SE COMPLETO');
	   		   COMMIT;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Spcc_Crea_Usuario_Uni (VNOMBRE 	IN VARCHAR2,
	   	  		  							  VAPATERNO IN VARCHAR2,
											  VAMATERNO IN VARCHAR2,
											  VPAIS		IN NUMBER,
											  V_NOM_PERFIL IN VARCHAR2,
											  VIP		   IN VARCHAR2,
											  VDESCRIPCION IN VARCHAR2,
											  VUADMON	   IN VARCHAR2,
											  VUSER 	OUT VARCHAR2,
											  VPASS		OUT	VARCHAR2,
											  VRESPUESTA OUT VARCHAR2)

AS

VAGENTES 	VARCHAR2(11);
VAGENTEIP	VARCHAR(20);
VEXAGENTES 	VARCHAR2(11);
VCOMODIN	VARCHAR2(2);
VEXISTEIP   NUMBER ;
VEXISTEPERFIL  NUMBER;
VNUMERO		NUMBER;
VNONUM		NUMBER;
VACUM		NUMBER;
V_SIDPERFIL NUMBER;
VID_ESTATUS	NUMBER;
VCAMBIO		NUMBER;
VNOMBRES	VARCHAR2(50);
VAPATERNOS  VARCHAR2(50);
VAGENTESB   VARCHAR2(11);
V_CURSAL_AGENTES VARCHAR2(1000);

BEGIN

	  VNONUM:=0;
	  VACUM:=0;
	  VNUMERO:=0;

--    NVL2( string1, value_if_NOT_null, value_if_null )
	  dbms_output.put_line('0=not null, 1=null');

	  SELECT NVL2(LENGTH(TRIM(VPAIS)),0,1) INTO VACUM FROM DUAL;
	  dbms_output.put_line('LONGITUD DEL PAIS: '||VACUM);

	  VNOMBRES:=REPLACE(VNOMBRE,' ','');

	  FOR X IN 0..9 LOOP
      	  VNOMBRES:= REPLACE (VNOMBRES , TO_CHAR(X),'');

   	  END LOOP;

      dbms_output.put_line('NOMBRE SIN ESPACIOS:'||VNOMBRES);

	  VAPATERNOS:=REPLACE(VAPATERNO,' ','');

	  FOR X IN 0..9 LOOP
      	  VAPATERNOS:= REPLACE (VAPATERNOS , TO_CHAR(X),'');

   	  END LOOP;


	  dbms_output.put_line('APATERNO SIN ESPACIOS:'||VAPATERNOS);



	--VALOR DE DEFAULT PARA EL ESTATUS=O INACTIVO

		VID_ESTATUS:=0;

	--VALOR DE DEFAULT PARA CAMBIO= 1 PEDIR CAMBIO DE CONTRASE?A

		VCAMBIO :=1;

	--VALIDAR EL PERFIL

		SELECT COUNT(ID_PERFIL) INTO VEXISTEPERFIL
  		FROM CATALOGO_PERFILES
		WHERE TRIM( UPPER(PERFIL) ) = TRIM( UPPER(V_NOM_PERFIL) );

		IF VEXISTEPERFIL > 0 THEN
		   dbms_output.put_line('Encontro perfil?:'||VEXISTEPERFIL);


	        SELECT ID_PERFIL INTO V_SIDPERFIL
	  		FROM CATALOGO_PERFILES
			WHERE TRIM( UPPER(PERFIL) ) = TRIM( UPPER(V_NOM_PERFIL) );

		ELSE

			dbms_output.put_line('EL PERFIL NO EXISTE EN EL CATALOGO ' ||SQLERRM(SQLCODE));


			VUSER:='EL PERFIL NO EXISTE';
			VPASS:='EL PERFIL NO EXISTE';
			VRESPUESTA:='EL PERFIL NO EXISTE';

		END IF;

--		dbms_output.put_line('STATUS:' ||VID_ESTATUS||'      CAMBIO :'||VCAMBIO||'     PERFIL :'||V_SIDPERFIL||'   '||V_NOM_PERFIL);

  		SELECT COUNT(IP) INTO VEXISTEIP
  		FROM CAT_IPS
		WHERE TRIM(IP)=TRIM(VIP);

		IF VEXISTEIP > 0 THEN

	       SELECT NVL(S.AGENTE,'NULO') INTO VAGENTEIP
		   FROM CAT_IPS S
		   WHERE TRIM(S.IP) = TRIM(VIP);

		   dbms_output.put_line('IP EXISTENTE, ES DEL AGENTE:'||VAGENTEIP);

--		   INSERT INTO BIT_ERROR
--			  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
--			  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','IP EXISTENTE, ES DEL AGENTE:'||VAGENTEIP,SYSDATE,'NINGUNO');
--			  COMMIT;

		   VRESPUESTA:=VAGENTEIP ;
		ELSE

--			INSERT INTO BIT_ERROR
--			  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
--			  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','IP INEXISTENTE',SYSDATE,'NINGUNO');
--			  COMMIT;

			dbms_output.put_line('IP INEXISTENTE');
			VRESPUESTA:= NULL;
		END IF;


  	  VUSER:=UPPER(SUBSTR(TRIM(VNOMBRES),1,1)||TRIM(VAPATERNOS));
	  dbms_output.put_line('PRIMER VUSER PROPUESTO: ' ||VUSER);
	  VPASS:='call';

	  VAGENTESB:=VUSER||'%';

	--REVISAR SI EXISTE EL USUARIO
	  SELECT NVL2(MAX(AGENTE),0,1) INTO VEXAGENTES FROM AGENTES
	  WHERE ID_PAIS=VPAIS
	  		AND AGENTE LIKE VAGENTESB
			AND LENGTH(AGENTE)=(SELECT MAX(LENGTH(AGENTE))
								FROM AGENTES WHERE ID_PAIS=VPAIS AND AGENTE LIKE VAGENTESB);

--	  INSERT INTO BIT_ERROR
--	  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
--	  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','USER PROPUESTO + %:'||VAGENTESB||' para '||VNOMBRE||' '||VAPATERNO,SYSDATE,'NINGUNO');
--	  COMMIT;

--	  INSERT INTO BIT_ERROR
--	  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
--	  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','0=ENCONTRO, 1=NO ENCONTRO, ENTONCES:'||VEXAGENTES||' para '||VNOMBRE||' '||VAPATERNO,SYSDATE,'NINGUNO');
--	  COMMIT;

	  --SI NO EXISTIO EL AGENTE, HACER UN SELECT NORMAL
	  IF VEXAGENTES =1 THEN

	  	  SELECT AGENTE INTO VAGENTES FROM AGENTES
	  	  WHERE ID_PAIS=VPAIS
	  	  AND AGENTE LIKE VAGENTESB
		  AND LENGTH(AGENTE)=(SELECT MAX(LENGTH(AGENTE))
								FROM AGENTES WHERE ID_PAIS=VPAIS AND AGENTE LIKE VAGENTESB);
	      dbms_output.put_line('ENTRO EN EL IF, TOMO A :'||VAGENTES);

--		  INSERT INTO BIT_ERROR
--		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
--		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','NO EXISTIO AGENTE, TOMO A :'||VAGENTES||'-'||VNOMBRE||' '||VAPATERNO,SYSDATE,'NINGUNO');
--		  COMMIT;


	   --SI YA EXISTE EL AGENTE, SELECCIONAR EL MAXIMO CONSECUTIVO
	   ELSE
--	   		 dbms_output.put_line('EXISTIO AGENTE');

	    SELECT MAX(AGENTE) INTO VAGENTES FROM AGENTES
	  	  WHERE ID_PAIS=VPAIS
	  	  AND AGENTE LIKE VAGENTESB
		  AND LENGTH(AGENTE)=(SELECT MAX(LENGTH(AGENTE))
								FROM AGENTES WHERE ID_PAIS=VPAIS AND AGENTE LIKE VAGENTESB);

	  dbms_output.put_line('USER EXISTENTE : ' ||VAGENTES);

--	  INSERT INTO BIT_ERROR
--			  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
--			  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','ENTRO EN EL ELSE,MAXIMO USER EXISTENTE= '||VAGENTES||' '||VAPATERNO,SYSDATE,'NINGUNO');
--			  COMMIT;

	 VCOMODIN:=SUBSTR(VAGENTES,LENGTH(VAGENTES),1);
	 dbms_output.put_line('VCOMODIN(ULTIMO CARACTER DEL USER EXISTENTE): ' ||VCOMODIN);

--			 dbms_output.put_line('VNUMERO (FUE UN NUMERO): ' ||TO_CHAR(VNUMERO));

			 VNUMERO:=VCOMODIN+1;
	   	     VUSER:=UPPER(SUBSTR(VAGENTES,1,LENGTH(VAGENTES)-1)||VNUMERO);
			 dbms_output.put_line('VUSER (EL USER FINAL): ' ||VUSER);

		     dbms_output.put_line('PARAMETROS PARA SPCC_USUARIO_INSERTAR_1:'||VUSER||','|| VPAIS||','||VID_ESTATUS||','||V_SIDPERFIL||','||VCAMBIO||','||VNOMBRE||','|| VAPATERNO||','|| VAMATERNO||','||VIP||','|| VDESCRIPCION||','||VUADMON||','||V_CURSAL_AGENTES );

 			 Spcc_Usuario_Insertar_1 (VUSER, VPAIS,VID_ESTATUS,V_SIDPERFIL,VCAMBIO,VNOMBRE, VAPATERNO, VAMATERNO,VIP, VDESCRIPCION,VUADMON,V_CURSAL_AGENTES);

	  END IF;


	  IF SQL%FOUND THEN

		  INSERT INTO BIT_ERROR
			  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
			  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','ENTRO AL SQL%FOUND '||VNOMBRE||' '||VAPATERNO,SYSDATE,'NINGUNO');
			  COMMIT;

		  	 VCOMODIN:=SUBSTR(VAGENTES,LENGTH(VAGENTES),1);
			 dbms_output.put_line('VCOMODIN(ULTIMO CARACTER DEL USER EXISTENTE): ' ||VCOMODIN);

			 VNUMERO:=VCOMODIN;
--			 dbms_output.put_line('VNUMERO (FUE UN NUMERO): ' ||TO_CHAR(VNUMERO));

			 VNUMERO:=VCOMODIN+1;
	   	     VUSER:=UPPER(SUBSTR(VAGENTES,1,LENGTH(VAGENTES)-1)||VNUMERO);
			 dbms_output.put_line('VUSER (EL USER FINAL): ' ||VUSER);

		     dbms_output.put_line('PARAMETROS AQUI 1:'||VUSER||','|| VPAIS||','||VID_ESTATUS||','||V_SIDPERFIL||','||VCAMBIO||','||VNOMBRE||','|| VAPATERNO||','|| VAMATERNO||','||VIP||','|| VDESCRIPCION||','||VUADMON||','||V_CURSAL_AGENTES );

 			 Spcc_Usuario_Insertar_1 (VUSER, VPAIS,VID_ESTATUS,V_SIDPERFIL,VCAMBIO,VNOMBRE, VAPATERNO, VAMATERNO,VIP, VDESCRIPCION,VUADMON,V_CURSAL_AGENTES);

		  END IF;

		 dbms_output.put_line('VUSER (EL USER FINALK): ' ||VUSER);

		 EXCEPTION
		  WHEN VALUE_ERROR THEN

		  INSERT INTO BIT_ERROR
			  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
			  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','ENTRO A VALUE_ERROR '||VNOMBRE||' '||VAPATERNO,SYSDATE,'NINGUNO');
			  COMMIT;

		       dbms_output.put_line('ERROR DE CONVERSION '); --||SQLERRM(SQLCODE));
			   VUSER:=UPPER(VUSER||1);
		 	   dbms_output.put_line('VUSER (USER FINAL): ' ||VUSER);

			    dbms_output.put_line('PARAMETROS AQUI 2:'||VUSER||','|| VPAIS||','||VID_ESTATUS||','||V_SIDPERFIL||','||VCAMBIO||','||VNOMBRE||','|| VAPATERNO||','|| VAMATERNO||','||VIP||','|| VDESCRIPCION||','||VUADMON||','||V_CURSAL_AGENTES );

				Spcc_Usuario_Insertar_1 (VUSER, VPAIS,VID_ESTATUS,V_SIDPERFIL,VCAMBIO,VNOMBRE, VAPATERNO, VAMATERNO,VIP, VDESCRIPCION,VUADMON,V_CURSAL_AGENTES);

	      WHEN NO_DATA_FOUND THEN

	   		   INSERT INTO BIT_ERROR
			  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
			  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','NO_DATA_FOUND para '||VNOMBRE||' '||VAPATERNO,SYSDATE,'NINGUNO');
			  COMMIT;

			   VUSER:=UPPER(VUSER);
			   dbms_output.put_line('VUSER (EL USER FINAL): ' ||VUSER);

			    dbms_output.put_line('PARAMETROS AQUI 3:'||VUSER||','|| VPAIS||','||VID_ESTATUS||','||V_SIDPERFIL||','||VCAMBIO||','||VNOMBRE||','|| VAPATERNO||','|| VAMATERNO||','||VIP||','|| VDESCRIPCION||','||VUADMON||','||V_CURSAL_AGENTES );

				Spcc_Usuario_Insertar_1 (VUSER, VPAIS,VID_ESTATUS,V_SIDPERFIL,VCAMBIO,VNOMBRE, VAPATERNO, VAMATERNO,VIP, VDESCRIPCION,VUADMON,V_CURSAL_AGENTES);

		  WHEN OTHERS THEN
	           dbms_output.put_line('OTRO ERROR ' ||SQLERRM(SQLCODE));

			   INSERT INTO BIT_ERROR
			  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
			  VALUES(SEQ_BIT_ERROR.NEXTVAL,'VALIDA','SPCC_CREA_USUARIO_UNI','ENTRO A OTHERS '||VNOMBRE||' '||VAPATERNO,SYSDATE,'NINGUNO');
			  COMMIT;


END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Spcc_Crea_Usuario (VNOMBRE  IN VARCHAR2,
                    VAPATERNO IN VARCHAR2,
             VAMATERNO IN VARCHAR2,
             VPAIS  IN NUMBER,
             V_NOM_PERFIL IN VARCHAR2,
             VIP     IN VARCHAR2,
             VDESCRIPCION IN VARCHAR2,
             VUADMON    IN VARCHAR2,
             PID_SEG    IN NUMBER,
             VUSER  OUT VARCHAR2,
             VPASS  OUT VARCHAR2,
             VRESPUESTA OUT VARCHAR2)

AS
/*
SUSTITUYE AL SPCC_CREA_USUARIO_UNI
CREADO EL 12/DIC/2006
*/
VAGENTES  VARCHAR2(11);
VAGENTEIP VARCHAR(20);
VEXAGENTES  VARCHAR2(11);
VCOMODIN VARCHAR2(2);
VEXISTEIP   NUMBER ;
VEXISTEPERFIL  NUMBER;
VNUMERO  NUMBER;
VNONUM  NUMBER;
VACUM  NUMBER;
V_SIDPERFIL NUMBER;
VID_ESTATUS NUMBER;
VCAMBIO  NUMBER;
VNOMBRES VARCHAR2(50);
VAPATERNOS  VARCHAR2(50);
VAGENTESB   VARCHAR2(11);
V_CURSAL_AGENTES VARCHAR2(1000);
VID_SEG NUMBER;
VUSERINICIAL VARCHAR2(40);


BEGIN

 VNONUM:=0;
    VACUM:=0;
 VID_SEG:=PID_SEG;

/* INSERT INTO BIT_ERROR
   (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
   VALUES(SEQ_BIT_ERROR.NEXTVAL,'CREA','SPCC_CREA_USUARIO','ENTRO AL STORE'||VNOMBRE||' '||VAPATERNO,SYSDATE,'NINGUNO');
   COMMIT;
*/
 dbms_output.put_line('0=not null, 1=null');

 SELECT NVL2(LENGTH(TRIM(VPAIS)),0,1) INTO VACUM FROM DUAL;
-- dbms_output.put_line('LONGITUD DEL PAIS: '||VACUM);

 VNOMBRES:=REPLACE(VNOMBRE,' ','');

 FOR X IN 0..9 LOOP
      VNOMBRES:= REPLACE (VNOMBRES , TO_CHAR(X),'');

    END LOOP;

 dbms_output.put_line('NOMBRE SIN ESPACIOS:'||VNOMBRES);

 VAPATERNOS:=REPLACE(VAPATERNO,' ','');

 FOR X IN 0..9 LOOP
     VAPATERNOS:= REPLACE (VAPATERNOS , TO_CHAR(X),'');

    END LOOP;


 dbms_output.put_line('APATERNO SIN ESPACIOS:'||VAPATERNOS);

 --VALOR DE DEFAULT PARA EL ESTATUS=O INACTIVO

 VID_ESTATUS:=0;

 --VALOR DE DEFAULT PARA CAMBIO= 1 PEDIR CAMBIO DE CONTRASE?A

 VCAMBIO :=1;

 --VALIDAR EL PERFIL

 SELECT COUNT(ID_PERFIL) INTO VEXISTEPERFIL
 FROM CATALOGO_PERFILES
 WHERE ID_PERFIL = V_NOM_PERFIL;

 IF VEXISTEPERFIL > 0 THEN
    dbms_output.put_line('Encontro perfil?:'||VEXISTEPERFIL);

    SELECT ID_PERFIL INTO V_SIDPERFIL
    FROM CATALOGO_PERFILES
    WHERE ID_PERFIL = V_NOM_PERFIL;


 ELSE

    dbms_output.put_line('EL PERFIL NO EXISTE EN EL CATALOGO ' ||SQLERRM(SQLCODE));

    VUSER:='EL PERFIL NO EXISTE';
    VPASS:='EL PERFIL NO EXISTE';
    VRESPUESTA:='EL PERFIL NO EXISTE';

  END IF;

  SELECT COUNT(IP) INTO VEXISTEIP
    FROM CAT_IPS
  WHERE TRIM(IP)=TRIM(VIP);

  IF VEXISTEIP > 0 THEN

      SELECT NVL(S.AGENTE,'NULO') INTO VAGENTEIP
   FROM CAT_IPS S
   WHERE TRIM(S.IP) = TRIM(VIP);

   dbms_output.put_line('IP EXISTENTE, ES DEL AGENTE:'||VAGENTEIP);

   VRESPUESTA:=VAGENTEIP ;
  ELSE
   dbms_output.put_line('IP INEXISTENTE');
   VRESPUESTA:= NULL;
  END IF;

  VUSER:=UPPER(SUBSTR(TRIM(VNOMBRES),1,1)||TRIM(VAPATERNOS));
  VUSERINICIAL := VUSER;
  dbms_output.put_line('PRIMER VUSER PROPUESTO: ' ||VUSER);
  VPASS:='call';

  VAGENTESB:=VUSER||'%';


  --REVISAR SI EXISTE EL USUARIO
  SELECT NVL2(MAX(AGENTE),0,1) INTO VEXAGENTES FROM AGENTES
  WHERE ID_PAIS=VPAIS
  AND AGENTE LIKE VAGENTESB
  AND LENGTH(AGENTE)=(SELECT MAX(LENGTH(AGENTE))
      FROM AGENTES WHERE ID_PAIS=VPAIS AND AGENTE LIKE VAGENTESB);

  --SI NO EXISTIO EL AGENTE, HACER UN SELECT NORMAL
  IF VEXAGENTES =1 THEN

  SELECT AGENTE INTO VAGENTES FROM AGENTES
    WHERE ID_PAIS=VPAIS
    AND AGENTE LIKE VAGENTESB
  AND LENGTH(AGENTE)=(SELECT MAX(LENGTH(AGENTE))
       FROM AGENTES WHERE ID_PAIS=VPAIS AND AGENTE LIKE VAGENTESB);
     dbms_output.put_line('NO EXISTIO AGENTE, TOMO A :'||VAGENTES);

    --SI YA EXISTE EL AGENTE, SELECCIONAR EL MAXIMO CONSECUTIVO
  ELSE
    --dbms_output.put_line('EXISTIO AGENTE');

     SELECT MAX(AGENTE) INTO VAGENTES FROM AGENTES
      WHERE ID_PAIS=VPAIS
      AND AGENTE LIKE VAGENTESB
    AND LENGTH(AGENTE)=(SELECT MAX(LENGTH(AGENTE))
       FROM AGENTES WHERE ID_PAIS=VPAIS AND AGENTE LIKE VAGENTESB);

     dbms_output.put_line('USER EXISTENTE : ' ||VAGENTES);
  END IF;

  IF SQL%FOUND THEN
     VCOMODIN:=NVL(SUBSTR(VAGENTES,LENGTH(TRIM(VUSERINICIAL))+1),'0');
--   dbms_output.put_line('VCOMODIN(ULTIMO CARACTER DEL USER EXISTENTE): ' ||VCOMODIN);

   VNUMERO:=VCOMODIN;
--   dbms_output.put_line('VNUMERO (FUE UN NUMERO): ' ||TO_CHAR(VNUMERO));

   VNUMERO:=VCOMODIN+1;
         VUSER:=UPPER(VUSERINICIAL||VNUMERO);
   dbms_output.put_line('VUSER (EL USER FINAL): ' ||VUSER);

--      dbms_output.put_line('PARAMETROS AQUI 1:'||VUSER||','|| VPAIS||','||VID_ESTATUS||','||V_SIDPERFIL||','||VCAMBIO||','||VNOMBRE||','|| VAPATERNO||','|| VAMATERNO||','||VIP||','|| VDESCRIPCION||','||VUADMON||','||V_CURSAL_AGENTES );

    Spcc_Usuario_Inserta (VUSER, VPAIS,VID_ESTATUS,V_SIDPERFIL,VCAMBIO,VNOMBRE, VAPATERNO, VAMATERNO,VIP, VDESCRIPCION,VUADMON,VID_SEG,V_CURSAL_AGENTES);

   END IF;

 dbms_output.put_line('VUSER (EL USER FINALK): ' ||VUSER);

 EXCEPTION
  WHEN VALUE_ERROR THEN
  dbms_output.put_line('ERROR DE CONVERSION '); --||SQLERRM(SQLCODE));
  VUSER:=UPPER(VUSER||1);
  dbms_output.put_line('VUSER (USER FINAL): ' ||VUSER);

--  dbms_output.put_line('PARAMETROS AQUI 2:'||VUSER||','|| VPAIS||','||VID_ESTATUS||','||V_SIDPERFIL||','||VCAMBIO||','||VNOMBRE||','|| VAPATERNO||','|| VAMATERNO||','||VIP||','|| VDESCRIPCION||','||VUADMON||','||V_CURSAL_AGENTES );

  Spcc_Usuario_Inserta (VUSER, VPAIS,VID_ESTATUS,V_SIDPERFIL,VCAMBIO,VNOMBRE, VAPATERNO, VAMATERNO,VIP, VDESCRIPCION,VUADMON,VID_SEG,V_CURSAL_AGENTES);

   WHEN NO_DATA_FOUND THEN

     VUSER:=UPPER(VUSER);
  dbms_output.put_line('VUSER (EL USER FINAL): ' ||VUSER);

--  dbms_output.put_line('PARAMETROS AQUI 3:'||VUSER||','|| VPAIS||','||VID_ESTATUS||','||V_SIDPERFIL||','||VCAMBIO||','||VNOMBRE||','|| VAPATERNO||','|| VAMATERNO||','||VIP||','|| VDESCRIPCION||','||VUADMON||','||V_CURSAL_AGENTES );

  Spcc_Usuario_Inserta (VUSER, VPAIS,VID_ESTATUS,V_SIDPERFIL,VCAMBIO,VNOMBRE, VAPATERNO, VAMATERNO,VIP, VDESCRIPCION,VUADMON,VID_SEG,V_CURSAL_AGENTES);

   WHEN OTHERS THEN
     dbms_output.put_line('OTRO ERROR ' ||SQLERRM(SQLCODE));

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_CLAS_REP_UPD (VID_CLASIFICA1 	IN NUMBER,
	   			 				   	VID_CLASIFICA2 	IN NUMBER,
	   			 				   	VNOMBRE_CLAS IN VARCHAR2,
								 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  UPDATE CLASIFICACION_REPORTES
		  SET id_clasificacion = VID_CLASIFICA2, nombre_clasificacion = VNOMBRE_CLAS
		  WHERE id_clasificacion = VID_CLASIFICA1;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_CLAS_REP_DEL (VID_CLASIFICA 	IN NUMBER,
								 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  DELETE FROM CLASIFICACION_REPORTES WHERE id_clasificacion = VID_CLASIFICA;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_CLAS_REPORTES_INSERT (Vid_clasificacion IN NUMBER,
	   			 						   Vnombre_clasificacion IN VARCHAR2,
									  	   VRESPUESTA	OUT	VARCHAR2)
AS

BEGIN

		  INSERT INTO CLASIFICACION_REPORTES
		  (id_clasificacion, nombre_clasificacion)
		  VALUES (Vid_clasificacion, Vnombre_clasificacion);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_CATALOGO_ACCIONES (VID_ACCION IN VARCHAR2,
                                    VACCION VARCHAR2)
AS

    vtotal NUMBER;
BEGIN


          SELECT *
          FROM  CATALOGO_ACCIONES
          WHERE ID_ACCION = VID_ACCION AND ACCION = VACCION;

          dbms_output.put_line('ENCONTRO:' ||vtotal);

          EXCEPTION
             WHEN OTHERS THEN
          VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_CATALOGO_ACCION (VID_ACCION IN VARCHAR2,
                                    VACCION VARCHAR2)
AS

    vtotal NUMBER;
BEGIN


          SELECT *
          FROM  CATALOGO_ACCION
          WHERE ID_ACCION = VID_ACCION AND ACCION = VACCION;

          dbms_output.put_line('ENCONTRO:' ||vtotal);

          EXCEPTION
             WHEN OTHERS THEN
          VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BUSCA_USUARIOS (VBUSCAR 	IN VARCHAR2,
											  VID_PAIS		IN NUMBER,
											  VUSER 	OUT VARCHAR2)
AS
  CURSOR C_USERS IS
    SELECT AGENTE
	FROM AGENTES
	  WHERE ID_PAIS=VID_PAIS
	  		AND AGENTE LIKE VBUSCAR
			AND LENGTH(AGENTE)=(SELECT MAX(LENGTH(AGENTE))
								FROM AGENTES WHERE ID_PAIS=VID_PAIS AND  AGENTE LIKE VBUSCAR);

  VUSERS VARCHAR2(50);
BEGIN

	  FOR TEMPX IN C_USERS LOOP
		  dbms_output.put_line('USER ENCONTRADO '||TEMPX.AGENTE);
		  VUSERS:=VUSERS||TEMPX.AGENTE||',';

	  END LOOP;

	  dbms_output.put_line('USERS ENCONTRADOS '||VUSERS);

--	  SELECT MAX(SUBSTR(TEMPX.AGENTE,LENGTH(TEMPX.AGENTE),LENGTH(TEMPX.AGENTE))) INTO VUSER
--		  FROM AGENTES
--		  WHERE AGENTE IN ();

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BOLETIN_INSERT (VFOLIO 	IN VARCHAR2,
	   	  		  							  VAGENTE 		IN VARCHAR2,
											  VNOMBRE 		IN VARCHAR2,
											  VAPATERNO		IN VARCHAR2,
											  VAMATERNO 	IN VARCHAR2,
											  VCUENTA		IN VARCHAR2,
											  VF_REGISTRO 	IN DATE,
											  VF_INICIO	 	IN DATE,
											  VF_BAJA	 	IN DATE,
											  VID_MOTIVO	IN VARCHAR2,
											  VID_PAIS		IN NUMBER,
											  VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  INSERT INTO BOLETINADOS
		  (FOLIO, AGENTE, NOMBRE, AP_PATERNO, AP_MATERNO, CUENTA, FECHA_REGISTRO, FECHA_INICIO, FECHA_BAJA, ID_MOTIVO_BOLETINADO, ID_PAIS)
		  VALUES(VFOLIO,VAGENTE,VNOMBRE, VAPATERNO, VAMATERNO, VCUENTA, VF_REGISTRO, VF_INICIO, VF_BAJA, VID_MOTIVO, VID_PAIS);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BOLETINADOS_UPD (Vagente IN VARCHAR2,
											  Vfecha_inicio IN DATE,
											  Vfecha_fin IN DATE,
											  VID_MOTIVO IN VARCHAR2,
											  Vid_pais IN NUMBER,
											  VFOLIO IN VARCHAR2,
										  	  VRESPUESTA	OUT	VARCHAR2)
AS

BEGIN

		  UPDATE BOLETINADOS
		  SET agente = VAGENTE, fecha_inicio = Vfecha_inicio, fecha_baja = Vfecha_fin, id_motivo_boletinado = VID_MOTIVO, id_pais = VID_PAIS
		  WHERE folio = VFOLIO;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BIT_TRATA_UPD (VST 	IN VARCHAR2,
	   			 				   	VFECHA 	IN DATE,
	   			 				   	VHORA IN VARCHAR2,
									VFOLIO IN VARCHAR2,
									VID_PAIS IN NUMBER,
									VMOTIVO IN VARCHAR2,
								 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

			UPDATE BITACORA_TRATA
		  		SET st = VST,
					fecha_st = VFECHA,
					hora_st = VHORA,
					motivo = VMOTIVO
				WHERE folio = VFOLIO AND id_pais = VID_PAIS;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BIT_TOKEN (VCTEALNOVA IN VARCHAR2,
	   	  		  							  VTOKEN IN VARCHAR2,
	   	  		  							  VOPCION IN VARCHAR2,
  											  VFECHA IN DATE,
   											  VHORA IN VARCHAR2,
											  VFOLIO IN VARCHAR2,
											  VWIN IN VARCHAR2,
											  VWOUT IN VARCHAR2,
											  VAGENTE IN VARCHAR2,
											  VIDPAIS IN INTEGER,
                                              VRESPUESTA OUT VARCHAR2) IS


/******************************************************************************
   NAME:       SPCC_BIT_TOKEN
   PURPOSE: INSERCION DEL DETALLE DEL TOKEN

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        07/03/2007          1. 	   Primera Version  Noemi Hernandez

******************************************************************************/
BEGIN

   	   	  INSERT INTO BIT_TOKEN
   		  	 (ID_BITACORA,CTE_ALNOVA,TOKEN ,OPCION,FECHA,HORA,FOLIO,WSIN,WSOUT,AGENTE,ID_PAIS)
   		  VALUES
		     (SEQ_BIT_TOKEN.NEXTVAL, VCTEALNOVA,VTOKEN,VOPCION,VFECHA,VHORA,VFOLIO,VWIN,VWOUT,VAGENTE,VIDPAIS);

	     COMMIT;


	    VRESPUESTA:='DATOS DE TOKEN INSERTADOS CORRECTAMENTE';



   EXCEPTION
     WHEN OTHERS THEN

	  VRESPUESTA:=SQLERRM(SQLCODE);

 	 INSERT INTO BIT_ERROR
    (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
    VALUES(SEQ_BIT_ERROR.NEXTVAL,'INS','SPCC_BIT_TOKEN', 'CTE_ALNOVA='||VCTEALNOVA||','||'TOKEN= '||VTOKEN||','||'OPCION= '||VOPCION||'FECHA='||VFECHA||'HORA='||VHORA||'FOLIO ='||VFOLIO||' WSIN ='||VWIN||'WSOUT= '||VWOUT||' AGENTE '||VAGENTE||' PAIS '||VIDPAIS||')',SYSDATE ,VRESPUESTA);

       -- Consider logging the error and then re-raise
       RAISE;
END SPCC_BIT_TOKEN;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BIT_TAZTECA_INS (VPAIS IN NUMBER,
	   	  		  								 VAGENTE IN VARCHAR2,
												 VCUENTA IN VARCHAR2,
												 VTARJETA IN VARCHAR2,
												 VPUNTOS IN VARCHAR2,
											  VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN


/*		INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_BIT_TAZTECA_INS','INSERT INTO BIT_TARJETA_AZTECA (AGENTE, FECHA, PAIS, CUENTA, TARJETA, PUNTOS) VALUES ('||TRIM(VAGENTE)||','||TRUNC(SYSDATE)||','||VPAIS||','||VCUENTA||','||VTARJETA||','||VPUNTOS||');',SYSDATE ,'PANCHO');
*/
		  INSERT INTO BIT_TARJETA_AZTECA
		  (AGENTE, FECHA, PAIS, CUENTA, TARJETA, PUNTOS)
		  VALUES (TRIM(VAGENTE),TRUNC(SYSDATE),VPAIS,VCUENTA, VTARJETA, VPUNTOS);

		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN

		  VRESPUESTA:=SQLERRM(SQLCODE);

		  dbms_output.put_line('RESPUESTA ' ||VRESPUESTA);

    	  INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_BIT_TAZTECA_INS','INSERT INTO BIT_TARJETA_AZTECA (AGENTE, FECHA, PAIS, CUENTA, TARJETA, PUNTOS) VALUES ('||VAGENTE||','||TRUNC(SYSDATE)||','||VPAIS||','||VCUENTA||','||VTARJETA||','||VPUNTOS||');',SYSDATE ,VRESPUESTA);

		  COMMIT;

          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         Spcc_Bit_Reponip (VACCION IN NUMBER,
                                         VAGENTE IN VARCHAR2,
                                    VFOLIO IN VARCHAR2,
                                  VWIN IN VARCHAR2,
                                  VWOUT IN VARCHAR2,
                                  VNUMCTA IN VARCHAR2,
                                   VPAIS IN NUMBER,
                                   VTRANS IN VARCHAR2,
                                  VCTEALNOVA IN VARCHAR2,
                                  VOBSERVACIONES IN VARCHAR2,
                                  VRESPUESTA OUT VARCHAR2) IS


BEGIN
    INSERT INTO CALLCEN.BIT_REPONIP (ACCION, AGENTE,FECHA,FOLIO,WSIN,WSOUT,CUENTA,HORA,ID_PAIS,TRANSACCION,CTEALNOVA,OBSERVACIONES )
    VALUES (VACCION,VAGENTE,TRUNC(SYSDATE),VFOLIO,VWIN,VWOUT,VNUMCTA,TO_CHAR(SYSDATE,'HH24:MI'),VPAIS,VTRANS,VCTEALNOVA,VOBSERVACIONES);
    COMMIT;
    VRESPUESTA:='INSERTADOS CORRECTAMENTE';

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        VRESPUESTA:=SQLERRM(SQLCODE);
    INSERT INTO CALLCEN.BIT_ERROR (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
    VALUES(SEQ_BIT_ERROR.NEXTVAL,'INS','SPCC_BIT_REPONIP', 'ACCION='||VACCION||','||'AGENTE= '||VAGENTE||','||'FECHA= '||SYSDATE||'FOLIO= '||VFOLIO||' WSIN= '||VWIN||' WSOUT= '||VWOUT||' ID_PAIS= '||VPAIS||' CTEALNOVA= '||VCTEALNOVA||' TRANSACCION= '||VTRANS||')',SYSDATE ,VRESPUESTA);

END Spcc_Bit_Reponip;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BIT_ERROR_INSERT (VTIPO IN VARCHAR2
												  ,VORIGEN IN VARCHAR2
												  ,VDESCRIPCION IN VARCHAR2
												  ,VERROR IN VARCHAR2)
AS


BEGIN

    	  INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,VTIPO,VORIGEN,VDESCRIPCION,SYSDATE ,VERROR);

		  COMMIT;

          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BIT_CHEQUE (VACCION IN NUMBER,
	   	  		  							  VAGENTE IN VARCHAR2,
	   	  		  							  VFECHA IN DATE,
  											  VFOLIO IN VARCHAR2,
											  VWIN IN VARCHAR2,
											  VWOUT IN VARCHAR2,
											  VNUMCTA IN VARCHAR2,
											  VHORA IN VARCHAR2,
											  VPAIS IN NUMBER,
											  VTRANS IN VARCHAR2,
                                              VRESPUESTA OUT VARCHAR2) IS


VEXISTECTE NUMBER;
/******************************************************************************
   NAME:       SPCC_BIT_CHEQUE
   PURPOSE: INSERCION Y ACTUALIZACION DE LOS DATOS DE LOS CLIENTES EN LA TABLA CLIENTES

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        20/02/2007          1. 	   Primera Version  Noemi Hernandez

******************************************************************************/
BEGIN

   	   	  INSERT INTO BIT_CHEQUE
   		  	 (ACCION, AGENTE,FECHA,FOLIO,WSIN,WSOUT,CUENTA,HORA,ID_PAIS,TRANSACCION)
   		  VALUES
		     (VACCION,VAGENTE, VFECHA, VFOLIO,VWIN,VWOUT ,VNUMCTA,VHORA,VPAIS, VTRANS);

	     COMMIT;


	    VRESPUESTA:='DATOS DE TRANSACCION INSERTADOS CORRECTAMENTE';



   EXCEPTION
     WHEN OTHERS THEN

	  VRESPUESTA:=SQLERRM(SQLCODE);

 	 INSERT INTO BIT_ERROR
    (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
    VALUES(SEQ_BIT_ERROR.NEXTVAL,'INS','SPCC_BIT_CHEQUE', 'ACCION='||VACCION||','||'AGENTE= '||VAGENTE||','||'FECHA= '||VFECHA||'FOLIO= '||VFOLIO||' WSIN= '||VWIN||' WSOUT= '||VWOUT||' HORA= '||VHORA||' ID_PAIS= '||VPAIS||' TRANSACCION= '||VTRANS||')',SYSDATE ,VRESPUESTA);

       -- Consider logging the error and then re-raise
       RAISE;
END SPCC_BIT_CHEQUE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BITACORA_TRATA_INSERT (VFOLIO 	IN VARCHAR2,
	   	  		  							  VAGENTE 		IN VARCHAR2,
											  VCUENTA		IN VARCHAR2,
											  VFECHA		IN DATE,
											  VHORA			IN VARCHAR2,
											  VNUM_TARJETA	IN VARCHAR2,
											  VID_PAIS		IN NUMBER,
											  VID_TRATA		IN VARCHAR2,
											  VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  INSERT INTO BITACORA_TRATA
		  (FOLIO, AGENTE, CUENTA, FECHA, HORA, NUM_TARJETA, ID_PAIS, FOLIO_TRATA, ST)
		  VALUES (VFOLIO,VAGENTE,VCUENTA, VFECHA, VHORA, VNUM_TARJETA, VID_PAIS,VID_TRATA, 'Pendiente');
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BITACORA_INSERT_BIS (VID 	IN NUMBER,
	   	  		  							  VFECHA 		IN DATE,
											  VHORA			IN VARCHAR2,
											  VAGENTE		IN VARCHAR2,
											  VCLIENTE		IN VARCHAR2,
											  VALNOVA		IN VARCHAR2,
											  VCUENTA		IN VARCHAR2,
											  VPRODUCTO		IN VARCHAR2,
											  VACCION		IN VARCHAR2,
											  VPAIS			IN NUMBER,
											  VCANAL		IN NUMBER,
											  VSUCURSAL		IN NUMBER,
											  VFOLIO		IN NUMBER,
											  VTRATAMIENTO	IN VARCHAR2,
											  VMOTIVO		IN VARCHAR2,
											  VID_PAIS		IN NUMBER,
											  VTARJETA		IN VARCHAR2,
											  VESTATUS		IN VARCHAR2,
											  VRESPUESTA	OUT	VARCHAR2)
AS

/*
Fue creado el 23/11/2006
Objetivo:registrar la tarjeta y el estatus de esta cuando se consultan las cuentas
no sustituye a SPCC_BITACORA_INSERT ya que ese se utiliza en otras paginas.
*/
BEGIN
	 	/*INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_BITACORA_INSERT','INSERT INTO BITACORA (AGENTE, ACCION, CUENTA, FECHA, HORA, ID, ID_PAIS, CLIENTE, ALNOVA, PRODUCTO, FI_PAIS, FI_CANAL, FI_SUCURSAL, FI_FOLIO, TRATAMIENTOS, MOTIVOS) VALUES ('||VAGENTE||','||VACCION||','||VCUENTA||','||VFECHA||','||VHORA||','||VID||','||VID_PAIS||','||VCLIENTE||','||VALNOVA||','||VPRODUCTO||','||VPAIS||','||VCANAL||','||VSUCURSAL||','||VFOLIO||','||VTRATAMIENTO||','||VMOTIVO||');',SYSDATE ,'PANCHO');*/

		  INSERT INTO BITACORA
		  (AGENTE, ACCION, CUENTA, FECHA, HORA, ID, ID_PAIS, CLIENTE, ALNOVA, PRODUCTO, FI_PAIS, FI_CANAL, FI_SUCURSAL, FI_FOLIO, TRATAMIENTOS, MOTIVOS, TARJETA, ESTATUS)
		  VALUES (TRIM(VAGENTE),VACCION,VCUENTA,TRUNC(SYSDATE),VHORA,VID,VID_PAIS,VCLIENTE,VALNOVA,VPRODUCTO,VPAIS,VCANAL,VSUCURSAL,VFOLIO,VTRATAMIENTO,VMOTIVO, VTARJETA,TRIM(VESTATUS));

		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN

		  VRESPUESTA:=SQLERRM(SQLCODE);

		  dbms_output.put_line('RESPUESTA ' ||VRESPUESTA);

    	  INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_BITACORA_INSERT_BIS','INSERT INTO BITACORA (AGENTE, ACCION, CUENTA, FECHA, HORA, ID, ID_PAIS, CLIENTE, ALNOVA, PRODUCTO, FI_PAIS, FI_CANAL, FI_SUCURSAL, FI_FOLIO, TRATAMIENTOS, MOTIVOS) VALUES ('||VAGENTE||','||VACCION||','||VCUENTA||','||VFECHA||','||VHORA||','||VID||','||VID_PAIS||','||VCLIENTE||','||VALNOVA||','||VPRODUCTO||','||VPAIS||','||VCANAL||','||VSUCURSAL||','||VFOLIO||','||VTRATAMIENTO||','||VMOTIVO||','||VTARJETA||','|| VESTATUS||');',SYSDATE ,VRESPUESTA);

		  COMMIT;

          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_BITACORA_INSERT_A (VID     IN NUMBER,
                                                     VFECHA         IN DATE,
                                              VHORA            IN VARCHAR2,
                                              VAGENTE        IN VARCHAR2,
                                              VCLIENTE        IN VARCHAR2,
                                              VALNOVA        IN VARCHAR2,
                                              VCUENTA        IN VARCHAR2,
                                              VPRODUCTO        IN VARCHAR2,
                                              VACCION        IN VARCHAR2,
                                              VPAIS            IN NUMBER,
                                              VCANAL        IN NUMBER,
                                              VSUCURSAL        IN NUMBER,
                                              VFOLIO        IN NUMBER,
                                              VTRATAMIENTO    IN VARCHAR2,
                                              VMOTIVO        IN VARCHAR2,
                                              VID_PAIS        IN NUMBER,
                                              VRESPUESTA    OUT    VARCHAR2)
AS


BEGIN
         /*INSERT INTO BIT_ERROR
          (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
          VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_BITACORA_INSERT','INSERT INTO BITACORA (AGENTE, ACCION, CUENTA, FECHA, HORA, ID, ID_PAIS, CLIENTE, ALNOVA, PRODUCTO, FI_PAIS, FI_CANAL, FI_SUCURSAL, FI_FOLIO, TRATAMIENTOS, MOTIVOS) VALUES ('||VAGENTE||','||VACCION||','||VCUENTA||','||VFECHA||','||VHORA||','||VID||','||VID_PAIS||','||VCLIENTE||','||VALNOVA||','||VPRODUCTO||','||VPAIS||','||VCANAL||','||VSUCURSAL||','||VFOLIO||','||VTRATAMIENTO||','||VMOTIVO||');',SYSDATE ,'PANCHO');*/

          INSERT INTO BIT_ACERTUM
          (AGENTE, ACCION, CUENTA, FECHA, HORA, ID, ID_PAIS, CLIENTE, ALNOVA, PRODUCTO, FI_PAIS, FI_CANAL, FI_SUCURSAL, FI_FOLIO, TRATAMIENTOS, MOTIVOS)
          VALUES (TRIM(VAGENTE),VACCION,VCUENTA,TRUNC(SYSDATE),VHORA,VID,VID_PAIS,VCLIENTE,VALNOVA,VPRODUCTO,VPAIS,VCANAL,VSUCURSAL,VFOLIO,VTRATAMIENTO,VMOTIVO);

          COMMIT;

            VRESPUESTA:='OK';

        
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_BITACORA_INSERT (VID 	IN NUMBER,
	   	  		  							  VFECHA 		IN DATE,
											  VHORA			IN VARCHAR2,
											  VAGENTE		IN VARCHAR2,
											  VCLIENTE		IN VARCHAR2,
											  VALNOVA		IN VARCHAR2,
											  VCUENTA		IN VARCHAR2,
											  VPRODUCTO		IN VARCHAR2,
											  VACCION		IN VARCHAR2,
											  VPAIS			IN NUMBER,
											  VCANAL		IN NUMBER,
											  VSUCURSAL		IN NUMBER,
											  VFOLIO		IN NUMBER,
											  VTRATAMIENTO	IN VARCHAR2,
											  VMOTIVO		IN VARCHAR2,
											  VID_PAIS		IN NUMBER,
											  VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN
	 	/*INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_BITACORA_INSERT','INSERT INTO BITACORA (AGENTE, ACCION, CUENTA, FECHA, HORA, ID, ID_PAIS, CLIENTE, ALNOVA, PRODUCTO, FI_PAIS, FI_CANAL, FI_SUCURSAL, FI_FOLIO, TRATAMIENTOS, MOTIVOS) VALUES ('||VAGENTE||','||VACCION||','||VCUENTA||','||VFECHA||','||VHORA||','||VID||','||VID_PAIS||','||VCLIENTE||','||VALNOVA||','||VPRODUCTO||','||VPAIS||','||VCANAL||','||VSUCURSAL||','||VFOLIO||','||VTRATAMIENTO||','||VMOTIVO||');',SYSDATE ,'PANCHO');*/

		  INSERT INTO BITACORA
		  (AGENTE, ACCION, CUENTA, FECHA, HORA, ID, ID_PAIS, CLIENTE, ALNOVA, PRODUCTO, FI_PAIS, FI_CANAL, FI_SUCURSAL, FI_FOLIO, TRATAMIENTOS, MOTIVOS)
		  VALUES (TRIM(VAGENTE),VACCION,VCUENTA,TRUNC(SYSDATE),VHORA,VID,VID_PAIS,VCLIENTE,VALNOVA,VPRODUCTO,VPAIS,VCANAL,VSUCURSAL,VFOLIO,VTRATAMIENTO,VMOTIVO);

		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN

		  VRESPUESTA:=SQLERRM(SQLCODE);

		  dbms_output.put_line('RESPUESTA ' ||VRESPUESTA);

    	  INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_BITACORA_INSERT','INSERT INTO BITACORA (AGENTE, ACCION, CUENTA, FECHA, HORA, ID, ID_PAIS, CLIENTE, ALNOVA, PRODUCTO, FI_PAIS, FI_CANAL, FI_SUCURSAL, FI_FOLIO, TRATAMIENTOS, MOTIVOS) VALUES ('||VAGENTE||','||VACCION||','||VCUENTA||','||VFECHA||','||VHORA||','||VID||','||VID_PAIS||','||VCLIENTE||','||VALNOVA||','||VPRODUCTO||','||VPAIS||','||VCANAL||','||VSUCURSAL||','||VFOLIO||','||VTRATAMIENTO||','||VMOTIVO||');',SYSDATE ,VRESPUESTA);

		  COMMIT;

          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_BITACORA_CANC_INSERT (VFOLIO IN VARCHAR2,
	   	  		  							 VAGENTE IN VARCHAR2,
											 VACCION VARCHAR2,
											 VCUENTA IN VARCHAR2,
											  VNUMTARJETA	IN VARCHAR2,
											  VID_PAIS		IN NUMBER,
											  VIDMOTIVO     IN CHAR,
											  VREPOSICION   IN CHAR,
											  VWEBSERVICE	IN VARCHAR2,
                                              VMP00            IN VARCHAR2,
                                              VRESPUESTA    OUT    VARCHAR2)
AS

VRHORA   VARCHAR2(50);
VRFECHA     DATE;
VAUXMP00 VARCHAR2(3000);

/*
MODIFICADO EL 23/11/2006
AGREGUE CAMPO DE FOLIO_PAG
*/

BEGIN


        SELECT MAX(FECHA) INTO VRFECHA  
        FROM CALLCEN.BITACORA
        WHERE TRIM(AGENTE)=TRIM(VAGENTE)
        AND ACCION=VACCION
        AND CUENTA=VCUENTA
        AND ID_PAIS=VID_PAIS;

        SELECT MAX(HORA) INTO VRHORA 
        FROM CALLCEN.BITACORA
        WHERE TRIM(AGENTE)=TRIM(VAGENTE)
        AND ACCION=VACCION
        AND CUENTA=VCUENTA
        AND ID_PAIS=VID_PAIS
        AND FECHA = VRFECHA;        
        



        IF TRIM(LENGTH(VRFECHA))> 1 THEN
        
          VAUXMP00 :=REPLACE(VMP00,' ','');

          INSERT INTO CALLCEN.BITACORA_CANC
          (FOLIO, AGENTE, ACCION, CUENTA, FECHA, HORA, NUM_TARJETA, ID_PAIS, ID_MOTIVO, REPOSICION, WEBSERVICE, MP00,FOLIO_PAG)
          VALUES (VFOLIO, TRIM(VAGENTE), VACCION, VCUENTA,VRFECHA    , VRHORA, VNUMTARJETA, VID_PAIS, VIDMOTIVO, VREPOSICION, VWEBSERVICE,VAUXMP00,TRIM(VAGENTE)||VFOLIO);

          COMMIT;

            VRESPUESTA:='OK';

        ELSE

          VRESPUESTA:='NO EXISTE REGISTRO EN BITACORA';

        END IF;

          EXCEPTION
             WHEN OTHERS THEN
          VRESPUESTA:=SQLERRM(SQLCODE);

           INSERT INTO CALLCEN.BIT_ERROR
          (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
          VALUES(SEQ_BIT_ERROR.NEXTVAL,'INSERT','SPCC_BITACORA_CANC_INSERT','INSERT INTO BITACORA_CANC (FOLIO, AGENTE, ACCION, CUENTA, FECHA, HORA, NUM_TARJETA, ID_PAIS, ID_MOTIVO, REPOSICION, WEBSERVICE, MP00) VALUES ('||VFOLIO||','|| TRIM(VAGENTE)||','|| VACCION||','|| VCUENTA||','||VRFECHA||','|| VRHORA||','|| VNUMTARJETA||','|| VID_PAIS||','|| VIDMOTIVO||','|| VREPOSICION||','|| VWEBSERVICE||','|| VAUXMP00||');',SYSDATE ,VRESPUESTA);

          COMMIT;


          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_BITACORA_ADM_INSERT (VADMIN IN VARCHAR2,
	   	  		  							  VFECHA 		IN DATE,
											  VHORA			IN VARCHAR2,
											  VID_PAIS		IN NUMBER,
											  VAGENTE		IN VARCHAR2,
											  VACCION		IN VARCHAR2,
											  VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

/*		  INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'UPDATE','SPCC_BITACORA_ADM_INSERT','SI ENTRO',SYSDATE ,'NINGUNA');
*/
		  INSERT INTO BITACORA_ADM
		  (ADMINISTRADOR, FECHA, HORA, ID_PAIS, AGENTE, ACCION)
		  VALUES (VADMIN,VFECHA,VHORA,VID_PAIS,VAGENTE,VACCION);

		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_BIOM_UPDATE ( VFOLIO IN callcen.atiende_folios_biometrico.FOLIO%TYPE,
                                                       VAGENTE IN callcen.atiende_folios_biometrico.AGENTE%type,             
                                                       VRESULTADO OUT VARCHAR)                                                                                                                                                                     
                                                        
AS

VFECHA DATE;
VATENDIENDO_CLIENTE NUMBER;


BEGIN
        
          SELECT SYSDATE INTO VFECHA  FROM DUAL;
          
          SELECT COUNT(1) INTO VATENDIENDO_CLIENTE
          FROM CALLCEN.atiende_folios_biometrico
          WHERE AGENTE = VAGENTE
          AND ESTATUS = 'ATENDIENDO';
          
          IF VATENDIENDO_CLIENTE = 0 THEN
          
              UPDATE CALLCEN.atiende_folios_biometrico
              SET ESTATUS = 'ATENDIENDO',
              FECHA_MODIFICACION = VFECHA
              WHERE FOLIO = VFOLIO;    
              
              COMMIT;
              VRESULTADO:='OK';
          ELSIF VATENDIENDO_CLIENTE = 1 THEN
          
                SELECT COUNT(1) INTO VATENDIENDO_CLIENTE
                FROM CALLCEN.atiende_folios_biometrico
                WHERE AGENTE = VAGENTE
                AND FOLIO = VFOLIO
                AND ESTATUS = 'ATENDIENDO';
                
                IF VATENDIENDO_CLIENTE = 1 THEN
                    VRESULTADO:='OK';
                ELSE
                     VRESULTADO:='AGENTE OCUPADO'; 
                END IF; 
                
          
          ELSE  
          
              VRESULTADO:='AGENTE OCUPADO';  
          
          END IF;    
          --dbms_output.put_line('Resultado ' || VRESULTADO);
          

          EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                VRESULTADO:=SQLERRM(SQLCODE);
                dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         SPCC_BIOM_INSERT ( VFOLIO IN callcen.FOLIOS_VALIDA_BIOMETRICOS.FOLIO%TYPE,
                                                       VNOMBRE_CLIENTE IN CALLCEN.FOLIOS_VALIDA_BIOMETRICOS.NOMBRE_CLIENTE%TYPE,
                                                       VCUENTA IN CALLCEN.FOLIOS_VALIDA_BIOMETRICOS.CUENTA_CLIENTE%TYPE,
                                                       VPAIS IN CALLCEN.FOLIOS_VALIDA_BIOMETRICOS.PAIS_SOLICITANTE%TYPE,
                                                       VFOTO_CLIENTE_NUEVA  IN callcen.FOLIOS_VALIDA_BIOMETRICOS.FOTO_CLIENTE_NUEVA%TYPE,
                                                       VFOTO_EJECUTIVO  IN callcen.FOLIOS_VALIDA_BIOMETRICOS.FOTO_EJECUTIVO%TYPE,                                                     
                                                       VFOTO_GERENTE IN callcen.FOLIOS_VALIDA_BIOMETRICOS.FOTO_GERENTE%TYPE,
                                                       VORIGEN_SOLICITUD IN callcen.FOLIOS_VALIDA_BIOMETRICOS.ORIGEN_SOLICITUD%TYPE,
                                                       VSUCURSAL IN callcen.FOLIOS_VALIDA_BIOMETRICOS.SUCURSAL%TYPE,
                                                       VFOTO_CLIENTE_HISTORICO IN callcen.FOLIOS_VALIDA_BIOMETRICOS.FOTO_CLIENTE_HISTORICO%type,
                                                       VCANAL_GESTORA IN callcen.FOLIOS_VALIDA_BIOMETRICOS.CANAL_GESTORA%type,
                                                       VSUCURSAL_GESTORA IN callcen.FOLIOS_VALIDA_BIOMETRICOS.SUCURSAL_GESTORA%type,
                                                       VRESULTADO OUT VARCHAR
                                                       )                                                                                                                                                                     
                                                        
AS


VFECHA DATE;

BEGIN
        
            SELECT SYSDATE INTO VFECHA  FROM DUAL;
            dbms_output.put_line('Entrando');
          INSERT INTO callcen.FOLIOS_VALIDA_BIOMETRICOS
          (FOLIO,NOMBRE_CLIENTE,CUENTA_CLIENTE,PAIS_SOLICITANTE,FOTO_CLIENTE_NUEVA,FOTO_EJECUTIVO,FOTO_GERENTE,ORIGEN_SOLICITUD,USUARIO_MODIFICO,FECHA_MODIFICACION,SUCURSAL,FOTO_CLIENTE_HISTORICO,CANAL_GESTORA,SUCURSAL_GESTORA)
          VALUES (VFOLIO,VNOMBRE_CLIENTE,VCUENTA,VPAIS,VFOTO_CLIENTE_NUEVA,VFOTO_EJECUTIVO,VFOTO_GERENTE,VORIGEN_SOLICITUD,'CALLCEN',VFECHA,VSUCURSAL,VFOTO_CLIENTE_HISTORICO,VCANAL_GESTORA,VSUCURSAL_GESTORA);
          
          
          INSERT INTO CALLCEN.atiende_folios_biometrico
          (FOLIO,ESTATUS,PAIS_SOLICITANTE,USUARIO_MODIFICO, FECHA_MODIFICACION,AGENTE,FECHA_REGISTRO)
          VALUES(VFOLIO,'PENDIENTE',VPAIS,'CALLCEN',VFECHA,'NO ASIGNADO',VFECHA);
          
          INSERT INTO CALLCEN.BITACORA_FOLIOS_BIOMETRICO
          (FOLIO,ESTATUS,AGENTE,CUENTA_CLIENTE,PAIS_SOLICITANTE,USUARIO_MODIFICO,FECHA_MODIFICACION,FECHA_REGISTRO,SUCURSAL,CANAL_GESTORA,SUCURSAL_GESTORA)
          VALUES(VFOLIO,'PENDIENTE','NO ASIGNADO',VCUENTA,VPAIS,'CALLCEN',VFECHA,VFECHA,VSUCURSAL,VCANAL_GESTORA,VSUCURSAL_GESTORA);
          
          COMMIT;

          VRESULTADO:='OK';
          --dbms_output.put_line('Resultado ' || VRESULTADO);

          EXCEPTION
                WHEN OTHERS THEN
                ROLLBACK;
                VRESULTADO:=SQLERRM(SQLCODE);
                dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_AGENTE_UPD (VCUAL IN NUMBER,
		   			 			  VCAMBIO IN NUMBER,
								  VAGENTE VARCHAR2,
								  VID_PAIS IN NUMBER,
								  VSESION IN NUMBER,
								  VID_PERFIL IN NUMBER,
								  VSTATUSCAMBIA IN NUMBER,
								  VIP IN VARCHAR2,
							  	  VRESPUESTA	OUT	VARCHAR2)
AS

ESTATUS_ACTUAL NUMBER;

/*
REEMPLAZA AL STORE SPCC_AGENTES_UPD

MODIFICADO EL 15 DE NOVIEMBRE PARA VALIDAR ESTATUS DE AGENTE
*/
BEGIN

	dbms_output.put_line('ENTRO AL PROCEDURE');
	VRESPUESTA:='OK';

	/*
	   INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'pruebas','SPCC_AGENTE_UPD','VCUAL='||VCUAL||',VCAMBIO='||VCAMBIO||',VAGENTE='||VAGENTE||',VID_PAIS='||VID_PAIS||',Vid_perfil='||Vid_perfil||',VID_STATUS='||VSTATUSCAMBIA||',VIP='||VIP,SYSDATE ,VRESPUESTA);
	  */

	IF VCUAL=1 THEN

		  UPDATE AGENTES
		  SET CAMBIO=VCAMBIO
		  WHERE TRIM(AGENTE)=TRIM(VAGENTE) AND ID_PAIS=VID_PAIS;
		  COMMIT;


	ELSIF VCUAL=2 THEN
	  	  UPDATE AGENTES
		  SET SESION=VSESION
		  WHERE TRIM(AGENTE)=TRIM(VAGENTE) AND ID_PAIS=VID_PAIS;
		  COMMIT;

	ELSIF VCUAL=3 THEN
	  	  UPDATE AGENTES
		  SET id_perfil=Vid_perfil,
		  fecha = TRUNC(SYSDATE),
		  CAMBIO = 0
		  WHERE TRIM(AGENTE)=TRIM(VAGENTE)
		  AND ID_PAIS=VID_PAIS;
		  COMMIT;

	ELSIF VCUAL=4 THEN
		  dbms_output.put_line('ENTRO A vcual=4');
		    /* ENTRA  A VCUAL 4
			   		  STATUSAGENTE=1  Agente activo
					  STATUSAGENTE=0  Agente inactivo
					  STATUSAGENTE=9  Agente bloqueado

			*/

		  SELECT ID_ESTATUS INTO ESTATUS_ACTUAL
		  FROM AGENTES
		  WHERE TRIM(AGENTE)=TRIM(VAGENTE)
		  AND ID_PAIS=VID_PAIS;

		  dbms_output.put_line('estatus_actual='||ESTATUS_ACTUAL);

		  IF VSTATUSCAMBIA = 0 THEN
		  dbms_output.put_line('ENTRO A VSTATUSCAMBIA=0');

  	 	      IF ESTATUS_ACTUAL =9 THEN

				  dbms_output.put_line('ENTRO A ESTATUS_ACTUAL=9 y actualizo intentos fallidos=0 y ID_ESTATUS='||VSTATUSCAMBIA);
				  --AGENTE BLOQUEADO

				  UPDATE AGENTES
				  SET INTENTOS_FALLIDOS = 0,
				  ID_ESTATUS=VSTATUSCAMBIA
				  WHERE TRIM(AGENTE)=TRIM(VAGENTE) AND ID_PAIS=VID_PAIS;
				  COMMIT;

			  ELSIF ESTATUS_ACTUAL <>9 THEN
					dbms_output.put_line('ENTRO A ESTATUS_ACTUAL<>9 y actualizo agentes en id_estatus='||VSTATUSCAMBIA);
					--AGENTE CON SESION ACTIVA
					UPDATE AGENTES
				 	SET ID_ESTATUS = VSTATUSCAMBIA
				 	WHERE TRIM(AGENTE)=TRIM(VAGENTE) AND ID_PAIS=VID_PAIS;
			  	 	COMMIT;


			  END IF;

		   ELSIF VSTATUSCAMBIA= 9 THEN
			   dbms_output.put_line('ENTRO A ESTATUS_ACTUAL=9');
			   --FALLA AL ENTRAR
			   	   UPDATE AGENTES
				   SET INTENTOS_FALLIDOS = INTENTOS_FALLIDOS + 1
				   WHERE TRIM(AGENTE)=TRIM(VAGENTE) AND ID_PAIS=VID_PAIS;
			  	   COMMIT;

				   UPDATE CAT_IPS
				   SET ID_ESTATUS=1
				   WHERE TRIM(IP)=TRIM(VIP);
				   COMMIT;

			  ELSE
			  		dbms_output.put_line('SE FUE A ELSE: ACTUALIZA ID_ESTATUS DE AGENTES');
--ACTUALIZA EL STATUS A SESION ACTIVA
				   UPDATE AGENTES
			       SET ID_ESTATUS = VSTATUSCAMBIA
			       WHERE TRIM(AGENTE)=TRIM(VAGENTE) AND ID_PAIS=VID_PAIS;
			       COMMIT;


		  	  END IF;

			 END IF;

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);

		  INSERT INTO BIT_ERROR
		  (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
		  VALUES(SEQ_BIT_ERROR.NEXTVAL,'UPDATE','SPCC_AGENTE_UPD','VCUAL='||VCUAL||',VCAMBIO='||VCAMBIO||',VAGENTE='||VAGENTE||',VID_PAIS='||VID_PAIS||',Vid_perfil='||Vid_perfil||',VID_STATUS='||VSTATUSCAMBIA||',VIP='||VIP,SYSDATE ,VRESPUESTA);

		  COMMIT;

          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_AGENTES_INSERT (VAGENTE 	IN VARCHAR2,
									  VID_PAIS		IN NUMBER,
									  VID_ESTATUS	  IN NUMBER,
									  VID_PERFIL	  IN NUMBER,
									  VCAMBIO		  IN NUMBER,
									  VNOMBRE		  IN VARCHAR2,
									  VAPATERNO		  IN VARCHAR2,
									  VAMATERNO		  IN VARCHAR2,
									  VRESPUESTA	OUT	VARCHAR2)
AS
BEGIN

		  INSERT INTO AGENTES
		  (AGENTE, FECHA, ID_PAIS, ID_ESTATUS, ID_PERFIL, CAMBIO, NOMBRE, APATERNO, AMATERNO, SESION, ID_SEG)
		  VALUES (VAGENTE,TRUNC(SYSDATE),VID_PAIS,VID_ESTATUS,VID_PERFIL,VCAMBIO,VNOMBRE,VAPATERNO,VAMATERNO, 0, 0);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_AGENTES_DELETE (VAGENTE 	IN VARCHAR2,
	   			 				 VPAIS IN	NUMBER,
								 VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  DELETE FROM AGENTES WHERE AGENTE = VAGENTE AND ID_PAIS = VPAIS;
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SPCC_ACCIONES_INSERT (VID_ACCION 	IN NUMBER,
	   	  		  							  VSUB_ACCION 		IN NUMBER,
											  VNOMBRE			IN VARCHAR2,
											  VRESPUESTA	OUT	VARCHAR2)
AS


BEGIN

		  INSERT INTO CATALOGO_ACCIONES_PROMOCIONES
		  (ID_ACCION, ID_SUBACCION, NOMBRE)
		  VALUES (VID_ACCION,VSUB_ACCION,VNOMBRE);
		  COMMIT;

  		  VRESPUESTA:='OK';

		  EXCEPTION
   		  WHEN OTHERS THEN
		  VRESPUESTA:=SQLERRM(SQLCODE);
          dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         REPORTE_MENSUAL AS
    
    fecha_inicial DATE;
    fecha_final DATE;
    fecha_actual DATE;
    resultado integer;
    total integer;
    
BEGIN
    resultado:=0;
    total :=0;
    SELECT MAX(FECHA) INTO fecha_actual FROM CALLCEN.BITACORA;
    SELECT MIN(FECHA) INTO fecha_inicial FROM CALLCEN.BITACORA;
    dbms_output.put_line('SE IMPRIME LA FECHA MAS ANTIGUA:  ' || fecha_inicial);
    fecha_final := LAST_DAY(fecha_inicial);
    dbms_output.put_line('SE IMPRIME EL FIN DE MES DE LA FECHA MAS ANTIGUA:  ' || fecha_final);
    
    LOOP
        SELECT COUNT(1) AS TOTAL_MOVIMIENTOS INTO resultado
        FROM (SELECT ALNOVA 
              FROM CALLCEN.BITACORA 
              WHERE ACCION = 1 AND FECHA BETWEEN fecha_inicial AND fecha_final  
              GROUP BY ALNOVA);
        dbms_output.put_line('RESULTADO DEL MES:  ' || resultado);
        fecha_inicial := fecha_final + 1;
        dbms_output.put_line('SE IMPRIME LA NUEVA FECHA DEL SIGUIENTE MES A BUSCAR ' || fecha_inicial);
        fecha_final := LAST_DAY(fecha_inicial);
        dbms_output.put_line('SE IMPRIME LA NUEVA FECHA FINAL ' || fecha_final); 
        total := total + resultado;
        EXIT WHEN fecha_inicial > fecha_actual;
    END LOOP;

    dbms_output.put_line('Total de movimientos: ' || total); 
    EXCEPTION
    WHEN OTHERS THEN
        --VRESPUESTA:=SQLERRM(SQLCODE);
        dbms_output.put_line('Error2 ' ||SQLERRM(SQLCODE));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         PRUEBA (VACCION IN NUMBER,
                                         VAGENTE IN VARCHAR2,
                                    VFOLIO IN VARCHAR2,
                                  VWIN IN VARCHAR2,
                                  VWOUT IN VARCHAR2,
                                  VNUMCTA IN VARCHAR2,
                                   VPAIS IN NUMBER,
                                   VTRANS IN VARCHAR2,
                                  VCTEALNOVA IN VARCHAR2,
                                  VOBSERVACIONES IN VARCHAR2,
                                  VRESPUESTA OUT VARCHAR2) IS


BEGIN
    INSERT INTO CALLCEN.BIT_REPONIP (ACCION, AGENTE,FECHA,FOLIO,WSIN,WSOUT,CUENTA,HORA,ID_PAIS,TRANSACCION,OBSERVACIONES )
    VALUES (VACCION,VAGENTE,TRUNC(SYSDATE),VFOLIO,VWIN,VWOUT,VNUMCTA,TO_CHAR(SYSDATE,'HH24:MI'),VPAIS,VTRANS,VOBSERVACIONES);
    COMMIT;
    VRESPUESTA:='INSERTADOS CORRECTAMENTE';

EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        VRESPUESTA:=SQLERRM(SQLCODE);
    INSERT INTO CALLCEN.BIT_ERROR (ID_ERROR,TIPO,ORIGEN,DESCRIPCION,FECHA,ERROR)
    VALUES(SEQ_BIT_ERROR.NEXTVAL,'INS','SPCC_BIT_REPONIP', 'ACCION='||VACCION||','||'AGENTE= '||VAGENTE||','||'FECHA= '||SYSDATE||'FOLIO= '||VFOLIO||' WSIN= '||VWIN||' WSOUT= '||VWOUT||' ID_PAIS= '||VPAIS||' TRANSACCION= '||VTRANS||')',SYSDATE ,VRESPUESTA);

END PRUEBA;
/

SHOW ERRORS;


CREATE OR REPLACE procedure         jc_get_folios
(
    folios out sys_refcursor
)
is 
begin
    open folios for
    select folio from callcen.folio_cu;
end jc_get_folios;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         GURDAR_ALNOVA(V_AGENTE IN VARCHAR,V_PAIS IN NUMBER, V_CUENTA IN VARCHAR, V_ALNOVA IN VARCHAR ,MSG OUT VARCHAR) IS

		  OCURRENCIAS NUMBER:=0;

		  BEGIN

		  -- se verifica si el agente ya existe en la tabla.

		  	 SELECT COUNT(1) INTO OCURRENCIAS
			   FROM CALLCEN.AGENTE_ALNOVA
			  WHERE AGENTE = V_AGENTE
			    AND ID_PAIS=V_PAIS;

			 IF OCURRENCIAS=0 THEN
			 	-- SE INSERTA LA NUEVA ENTRADA EN LA TABLA
					INSERT INTO CALLCEN.AGENTE_ALNOVA
					VALUES (V_AGENTE,V_PAIS,V_CUENTA, V_ALNOVA);

			 ELSE
			 	 -- SE ACTUALIZA EL REGISTRO ACTUAL
			 	   UPDATE CALLCEN.AGENTE_ALNOVA
				      SET  CUENTA=V_CUENTA,
					  	   ALNOVA=V_ALNOVA
					WHERE AGENTE = V_AGENTE
			          AND ID_PAIS=V_PAIS;

			 END IF;

			 COMMIT;
			 MSG:='OK. OPERACION EFECTUADA CON EXITO';

		  EXCEPTION
		  		   WHEN OTHERS THEN
				   		MSG:='ERROR. '||SQLERRM;

END GURDAR_ALNOVA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE GET_INFO_BITCU
(
    VFOLIO          IN      CALLCEN.BITACORA_CU.FOLIO%TYPE;
)
    SELECT 
        BITACORA_CU.FOLIO,
        BITACORA_CU.OBSERVACIONES,
        BITACORA_CU.MOTIVO,
        BITACORA_CU.CADENAENVIADA,
        BITACORA_CU.AGENTE,
        BITACORA_CU.INICIO_ATENCION,
        BITACORA_CU.ESTATUS,
        BITACORA_CU.DIGITALIZACION,
        BITACORA_CU.SALTOS,
        BITACORA_CU.FECHA_REGISTRO,
        BITACORA_CU.FECHA_MODIFICACION,
        BITACORA_CU.USUARIO_MODIFICO,
        FOLIO_CU.PAIS,
        FOLIO_CU.CANAL,
        FOLIO_CU.SUCURSAL,
        FOLIO_CU.NOMBRE,
        FOLIO_CU.APATERNO,
        FOLIO_CU.AMATERNO,
        FOLIO_CU.FECHASOLICITUD,
        FOLIO_CU.FOTO,
        FOLIO_CU.FECHA_NACIMIENTO,
        FOLIO_CU.FECHA_MODIFICACION,
        FOLIO_CU.USUARIO_MODIFICO
    FROM CALLCEN.BITACORA_CU 
    INNER JOIN CALLCEN.FOLIO_CU 
    ON BITACORA_CU.FOLIO = FOLIO_CU.FOLIO
    WHERE BITACORA_CU.FOLIO='06730000001930225'
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         GET_INFO_AGENTE 
(
    VIDAGENTE    IN  VARCHAR2,
    VIDPAIS      IN  INTEGER,
    VNOMBRE      OUT VARCHAR2,
    VAPATERNO    OUT VARCHAR2,
    VAMATERNO    OUT VARCHAR2,
    VRESPUESTA   OUT VARCHAR2
)
AS
BEGIN

    SELECT NOMBRE,
           APATERNO,
           AMATERNO
    INTO   VNOMBRE,
           VAPATERNO,
           VAMATERNO
    FROM CALLCEN.AGENTES
    WHERE AGENTE = VIDAGENTE
    AND ID_PAIS = VIDPAIS;
    
    VRESPUESTA:='OK';


    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            VRESPUESTA:=SQLCODE || '  ' || SQLERRM;
        WHEN OTHERS THEN
            VRESPUESTA:=SQLCODE || '  ' || SQLERRM;
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al obtener nombre agente (' || SQLCODE || '  ' || SQLERRM || ')');

END GET_INFO_AGENTE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE FOLIOS(nestatus IN VARCHAR, Nfolio IN VARCHAR)
AS
BEGIN
	  UPDATE BITACORA_TRATA
	  SET st = nestatus
	  WHERE FOLIO=Nfolio;
	  COMMIT;
END FOLIOS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE EDITAR_ACCIONES (ID_ACTION IN INT, ACTION IN VARCHAR2, RESPUESTA OUT INT)
as

BEGIN

   SELECT COUNT(id_accion)into respuesta from callcen.CATALOGO_ACCIONES where id_accion = id_action  and  accion =action;
   EXCEPTION
     
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
       return respuesta;
END EDITAR_ACCIONES;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         SP_OPER_BANCARIA_VERSION2 (v_anio IN VARCHAR2 DEFAULT NULL,v_mes IN VARCHAR2 DEFAULT NULL) 
RETURN Types.CURSORTYPE IS
  fecha_inicial DATE;
  fecha_final DATE;
  fecha_auxiliar VARCHAR2(10);
  cursorSalida Types.CURSORTYPE;
  numeroContratos integer;
  
  indice NUMBER;
  TYPE conceptos IS VARRAY(5) OF VARCHAR2(10);
  TYPE descripciones IS VARRAY(5) OF VARCHAR2(20);
  TYPE fecha_de_vencimientos IS VARRAY(12) OF DATE;
  fechas fecha_de_vencimientos;
  valor_vencimiento conceptos;
  con conceptos;
  des descripciones;
  
BEGIN



indice := 1;
con:=conceptos ('2000', '2100', '2200', '2300', '2400');
des:=descripciones ('MOVIMIENTOS', 'PAGOS', 'TRANSFERENCIAS', 'INVERSIONES', 'OTROS MOVIMIENTOS');

while (indice <= 5) loop
--FETCH CONCEPTO INTO conceptos(indice);
indice := valor_vencimiento.next(indice);
end loop;




  fecha_auxiliar :='01/'||v_mes||'/'||v_anio;
  fecha_inicial := TO_DATE(fecha_auxiliar,'DD/MM/YYYY');
  fecha_final :=LAST_DAY(fecha_inicial);
  SELECT NVL(SUM(CR.CONTRATOS_PERSONAS_FISICAS),0) INTO numeroContratos FROM CALLCEN.CONTRATOS_R15 CR WHERE CR.MES=V_MES AND CR.ANIO=V_ANIO;
  OPEN cursorSalida FOR
        SELECT v_anio AS ANIO, v_mes AS MES ,B.CONCEPTO,DECODE(B.CONCEPTO,'1100','Consulta de Saldos','1200','Otras Consultas','CONSULTAS') AS DESCRIPCION,B.NUM_OPER, 0 AS MONTO_OPER, C.NUM_CLIENTES,DECODE(B.CONCEPTO, '1000',numeroContratos, 0) AS NUM_CONTRATOS,   0  AS NUM_USUARIOS
        FROM(
            SELECT NVL(Z.CONCEPTO,'1000') AS CONCEPTO, SUM(CANTIDAD) AS NUM_OPER
            FROM(
            SELECT  DECODE(ACCION,'0','1200','1','1100','13','1100','15','1200') 
            AS CONCEPTO, COUNT(*) AS CANTIDAD
            FROM CALLCEN.BITACORA
            WHERE FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS = 1 
            AND ACCION IN ('0','1','13','15')
            GROUP BY ACCION
            UNION ALL
            SELECT  '1200' AS CONCEPTO, COUNT(*) AS CANTIDAD
            FROM CALLCEN.BIT_REPONIP
            WHERE TRUNC(FECHA) BETWEEN fecha_inicial AND fecha_final
            UNION ALL
            SELECT  '1100' AS CONCEPTO, COUNT(*) AS CANTIDAD
            FROM CALLCEN.CONSULTAMOV_LOG
            WHERE TRUNC(FECHA_CONSULTA) BETWEEN fecha_inicial AND fecha_final
            UNION ALL
            SELECT  '1100' AS CONCEPTO, COUNT(*) AS CANTIDAD
            FROM CALLCEN.SALDOS_LOG
            WHERE TRUNC(F_CONSULTA) BETWEEN fecha_inicial AND fecha_final
            )Z GROUP BY ROLLUP (Z.CONCEPTO)
        )B,(
            SELECT '1000' AS CONCEPTO, COUNT(1) AS NUM_CLIENTES
            FROM(
                SELECT /*+ INDEX(CALLCEN.BITACORA ID_1000_R15_IDX) */ ALNOVA AS CTEALNOVA
                FROM CALLCEN.BITACORA
                WHERE FECHA BETWEEN fecha_inicial AND fecha_final 
                AND ID_PAIS = 1 
                UNION
                SELECT /*+ INDEX(CALLCEN.BIT_REPONIP ID_1200_R15_IDX) */ CTEALNOVA
                FROM CALLCEN.BIT_REPONIP
                WHERE FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS = 1
                UNION 
                SELECT /*+ INDEX(CALLCEN.CONSULTAMOV_LOG ID_1100_CON_R15_IDX) */ CLIENTE_ALNOVA AS CTEALNOVA
                FROM CALLCEN.CONSULTAMOV_LOG 
                WHERE TRUNC(FECHA_CONSULTA) BETWEEN fecha_inicial AND fecha_final
                UNION
                SELECT /*+ INDEX(CALLCEN.SALDOS_LOG ID_1100_SAL_R15_IDX)*/ CLIENTE_ALNOVA AS CTEALNOVA
                FROM CALLCEN.SALDOS_LOG
                WHERE TRUNC(F_CONSULTA) BETWEEN fecha_inicial AND fecha_final
                UNION
                SELECT /*+ INDEX(CALLCEN.BIT_TOKEN ID_3000_R15_IDX) */  CTE_ALNOVA AS CTEALNOVA
                FROM CALLCEN.BIT_TOKEN
                WHERE FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS= 1
                UNION
                SELECT /*+ INDEX(CALLCEN.ACTIVACION_TASA_LOG ID_OTROS_R15_IDX) */ CTE_ALNOVA AS CTEALNOVA
                FROM CALLCEN.ACTIVACION_TASA_LOG
                WHERE TRUNC(ULTIMA_MODIFICACION) BETWEEN fecha_inicial AND fecha_final
            )X
            UNION
            SELECT '1100' AS CONCEPTO, 0 AS NUM_CLIENTES
            FROM DUAL
            UNION
            SELECT '1200' AS CONCEPTO, 0 AS NUM_CLIENTES
            FROM DUAL
            UNION
            SELECT '3000' AS CONCEPTO, 0 AS NUM_CLIENTES
            FROM DUAL
        )C
        WHERE B.CONCEPTO = C.CONCEPTO 
        UNION
        SELECT X.ANIO,X.MES,X.CONCEPTO,X.DESCRIPCION,X.NUM_OPER,0 AS MONTO_OPER, 0,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM(    
            SELECT v_anio AS ANIO,v_mes AS MES,'3000' AS CONCEPTO,'OTROS' AS DESCRIPCION, Z.NUMERO_OPERACION AS NUM_OPER
              FROM (SELECT COUNT(1) AS NUMERO_OPERACION
                    FROM(SELECT 'OTROS' AS DESCRIPCION
                         FROM CALLCEN.BIT_TOKEN
                         WHERE  FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS = 1
                         UNION ALL
                         SELECT  'OTROS' AS DESCRIPCION
                         FROM CALLCEN.BITACORA
                         WHERE FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS = 1 
                         AND ACCION NOT IN ('0','1','13','15')
                         UNION ALL                
                         SELECT 'OTROS' AS DESCRIPCION
                         FROM CALLCEN.ACTIVACION_TASA_LOG
                         WHERE TRUNC(ULTIMA_MODIFICACION) BETWEEN fecha_inicial AND fecha_final) 
                    )Z 
            )X
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2000' AS CONCEPTO,'MOVIMIENTOS' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2100' AS CONCEPTO,'Pagos' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2200' AS CONCEPTO,'Transferencias' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2300' AS CONCEPTO,'Inversiones' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES, 0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2400' AS CONCEPTO,'Otros Movimientos' AS DESCRIPCION,0 AS NUM_OPER, 0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL;
  RETURN cursorSalida;
EXCEPTION
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR'|| SQLERRM);
END SP_OPER_BANCARIA_VERSION2;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         SP_OPER_BANCARIA_CALL (v_anio IN VARCHAR2 DEFAULT NULL,v_mes IN VARCHAR2 DEFAULT NULL) 
RETURN Types.CURSORTYPE IS
  fecha_inicial DATE;
  fecha_final DATE;
  fecha_auxiliar VARCHAR2(10);
  cursorSalida Types.CURSORTYPE;
  numeroContratos integer;
BEGIN
  fecha_auxiliar :='01/'||v_mes||'/'||v_anio;
  fecha_inicial := TO_DATE(fecha_auxiliar,'DD/MM/YYYY');
  fecha_final :=LAST_DAY(fecha_inicial);
  SELECT NVL(SUM(CR.CONTRATOS_PERSONAS_FISICAS),0) INTO numeroContratos FROM CALLCEN.CONTRATOS_R15 CR WHERE CR.MES=V_MES AND CR.ANIO=V_ANIO;
  OPEN cursorSalida FOR
        SELECT v_anio AS ANIO, v_mes AS MES ,B.CONCEPTO,DECODE(B.CONCEPTO,'1100','Consulta de Saldos','1200','Otras Consultas','CONSULTAS') AS DESCRIPCION,B.NUM_OPER, 0 AS MONTO_OPER, C.NUM_CLIENTES,DECODE(B.CONCEPTO, '1000',numeroContratos, 0) AS NUM_CONTRATOS,   0  AS NUM_USUARIOS
        FROM(
            SELECT NVL(Z.CONCEPTO,'1000') AS CONCEPTO, SUM(CANTIDAD) AS NUM_OPER
            FROM(
                SELECT  /*+ INDEX(CALLCEN.BITACORA ID_1000_R15_IDX) */ DECODE(ACCION,'0','1200','1','1100','13','1100','15','1200') AS CONCEPTO,COUNT(1) AS CANTIDAD
                FROM CALLCEN.BITACORA
                WHERE FECHA BETWEEN fecha_inicial  AND fecha_final 
                AND ID_PAIS = 1 
                AND ACCION IN ('0','1','13','15')
                GROUP BY ACCION
                UNION ALL
                SELECT /*+ INDEX(CALLCEN.BIT_REPONIP ID_1200_R15_IDX) */ '1200' AS CONCEPTO, COUNT(1) AS CANTIDAD
                FROM CALLCEN.BIT_REPONIP
                WHERE FECHA BETWEEN fecha_inicial  AND fecha_final 
                AND ID_PAIS = 1
                UNION ALL
                SELECT /*+ INDEX(CALLCEN.CONSULTAMOV_LOG ID_1100_CON_R15_IDX) */ '1100' AS CONCEPTO, COUNT(1) AS CANTIDAD
                FROM CALLCEN.CONSULTAMOV_LOG
                WHERE TRUNC(FECHA_CONSULTA) BETWEEN fecha_inicial AND fecha_final
                UNION ALL
                SELECT /*+ INDEX(CALLCEN.SALDOS_LOG ID_1100_SAL_R15_IDX)*/ '1100' AS CONCEPTO, COUNT(1) AS CANTIDAD
                FROM CALLCEN.SALDOS_LOG
                WHERE TRUNC(F_CONSULTA) BETWEEN fecha_inicial AND fecha_final
            )Z GROUP BY ROLLUP (Z.CONCEPTO)
        )B,(
            SELECT '1000' AS CONCEPTO, COUNT(1) AS NUM_CLIENTES
            FROM(
                SELECT /*+ INDEX(CALLCEN.BITACORA ID_1000_R15_IDX) */ ALNOVA AS CTEALNOVA
                FROM CALLCEN.BITACORA
                WHERE FECHA BETWEEN fecha_inicial AND fecha_final 
                AND ID_PAIS = 1 
                UNION
                SELECT /*+ INDEX(CALLCEN.BIT_REPONIP ID_1200_R15_IDX) */ CTEALNOVA
                FROM CALLCEN.BIT_REPONIP
                WHERE FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS = 1
                UNION 
                SELECT /*+ INDEX(CALLCEN.CONSULTAMOV_LOG ID_1100_CON_R15_IDX) */ CLIENTE_ALNOVA AS CTEALNOVA
                FROM CALLCEN.CONSULTAMOV_LOG 
                WHERE TRUNC(FECHA_CONSULTA) BETWEEN fecha_inicial AND fecha_final
                UNION
                SELECT /*+ INDEX(CALLCEN.SALDOS_LOG ID_1100_SAL_R15_IDX)*/ CLIENTE_ALNOVA AS CTEALNOVA
                FROM CALLCEN.SALDOS_LOG
                WHERE TRUNC(F_CONSULTA) BETWEEN fecha_inicial AND fecha_final
                UNION
                SELECT /*+ INDEX(CALLCEN.BIT_TOKEN ID_3000_R15_IDX) */  CTE_ALNOVA AS CTEALNOVA
                FROM CALLCEN.BIT_TOKEN
                WHERE FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS= 1
                UNION
                SELECT /*+ INDEX(CALLCEN.ACTIVACION_TASA_LOG ID_OTROS_R15_IDX) */ CTE_ALNOVA AS CTEALNOVA
                FROM CALLCEN.ACTIVACION_TASA_LOG
                WHERE TRUNC(ULTIMA_MODIFICACION) BETWEEN fecha_inicial AND fecha_final
            )X
            UNION
            SELECT '1100' AS CONCEPTO, 0 AS NUM_CLIENTES
            FROM DUAL
            UNION
            SELECT '1200' AS CONCEPTO, 0 AS NUM_CLIENTES
            FROM DUAL
            UNION
            SELECT '3000' AS CONCEPTO, 0 AS NUM_CLIENTES
            FROM DUAL
        )C
        WHERE B.CONCEPTO = C.CONCEPTO 
        UNION
        SELECT X.ANIO,X.MES,X.CONCEPTO,X.DESCRIPCION,X.NUM_OPER,0 AS MONTO_OPER, 0,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM(    
            SELECT v_anio AS ANIO,v_mes AS MES,'3000' AS CONCEPTO,'OTROS' AS DESCRIPCION, Z.NUMERO_OPERACION AS NUM_OPER
              FROM (SELECT COUNT(1) AS NUMERO_OPERACION
                    FROM(SELECT 'OTROS' AS DESCRIPCION
                         FROM CALLCEN.BIT_TOKEN
                         WHERE  FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS = 1
                         UNION ALL
                         SELECT  'OTROS' AS DESCRIPCION
                         FROM CALLCEN.BITACORA
                         WHERE FECHA BETWEEN fecha_inicial  AND fecha_final AND ID_PAIS = 1 
                         AND ACCION NOT IN ('0','1','13','15')
                         UNION ALL                
                         SELECT 'OTROS' AS DESCRIPCION
                         FROM CALLCEN.ACTIVACION_TASA_LOG
                         WHERE TRUNC(ULTIMA_MODIFICACION) BETWEEN fecha_inicial AND fecha_final) 
                    )Z 
            )X
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2000' AS CONCEPTO,'MOVIMIENTOS' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2100' AS CONCEPTO,'Pagos' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2200' AS CONCEPTO,'Transferencias' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2300' AS CONCEPTO,'Inversiones' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES, 0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2400' AS CONCEPTO,'Otros Movimientos' AS DESCRIPCION,0 AS NUM_OPER, 0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL;
  RETURN cursorSalida;
EXCEPTION
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR'|| SQLERRM);
END SP_OPER_BANCARIA_CALL;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION simple() RETURN VARCHAR2 IS

BEGIN
  RETURN 'Simple Function';
END simple;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         SALDOS_MOVIMIENTOS (v_anio IN VARCHAR2 DEFAULT NULL,v_mes IN VARCHAR2 DEFAULT NULL) 
RETURN Types.CURSORTYPE IS
  cursorSalida Types.CURSORTYPE;
  fecha_inicial DATE;
  fecha_final DATE;
  fecha_auxiliar VARCHAR2(10);
  contador_user NUMBER;
  contador_contratos NUMBER;
  
   
 BEGIN
  fecha_auxiliar :='01/'||v_mes||'/'||v_anio;
  fecha_inicial := TO_DATE(fecha_auxiliar,'DD/MM/YYYY');
  fecha_final :=LAST_DAY(fecha_inicial);
  
  select nvl(sum(CONTRATOS_PERSONAS_FISICAS),0)INTO contador_contratos from contratos_r15 where anio = v_anio and mes = v_mes; 
  select count (DISTINCT Alnova) INTO contador_user from consultamov_log c, saldos_log s, bitacora b WHERE b.FECHA 
  BETWEEN fecha_inicial  AND fecha_final AND ACCION = 1 AND ID_PAIS = 1 OR c.fecha_consulta BETWEEN fecha_inicial  AND fecha_final OR
  s.f_consulta BETWEEN fecha_inicial  AND fecha_final;
  
  OPEN cursorSalida FOR
  SELECT  102 as Clave, concat(v_anio,v_mes) as Fecha, 'PF' as Pf, contador_contratos AS Num_Contratos,
  0 as Fijo, contador_contratos AS Num_Contratos, 0 as Fijo, contador_user AS Tot_usuarios from dual;
 
 RETURN cursorSalida;
  EXCEPTION
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR'|| SQLERRM);
    END SALDOS_MOVIMIENTOS;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         getContratos(anioV varchar,mesV varchar)
RETURN Types.CURSORTYPE 
IS  cursor_salida Types.CURSORTYPE;
BEGIN
   OPEN cursor_salida FOR
        select anio,mes,contratos_personas_fisicas,contratos_personas_morales,usuario_modifico
        from CALLCEN.contratos_r15
        where anio=anioV 
        and mes=mesV;


    RETURN cursor_salida;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
             RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar ( * ' || SQLCODE || '  ' || SQLERRM ||  '  *)');
        WHEN OTHERS THEN
            RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar  ( * ' || SQLCODE || '  ' || SQLERRM ||  '  *)');

END getContratos;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION F_VALIDA_USUARIO_VIP(CLIENTE_ALNOVA IN VARCHAR) RETURN VARCHAR2 IS
salida VARCHAR2(200);

BEGIN
   SELECT ACCIONES_VIP INTO salida
     FROM CALLCEN.CLIENTES_VIP
    WHERE CLIENTE = CLIENTE_ALNOVA;

   RETURN salida;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
          salida := '0';
          RETURN salida;
     WHEN OTHERS THEN
          salida:= 'ERROR.'||SQLERRM;
          RETURN salida;

END F_VALIDA_USUARIO_VIP;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_SUP_OPER_BIOM(VFOLIO in VARCHAR )  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
   OPEN V_CUR FOR
     SELECT BITACORA_BIOM.AGENTE,
            BITACORA_BIOM.ESTATUS,
            BITACORA_BIOM.FECHA_MODIFICACION,
            BITACORA_BIOM.FECHA_REGISTRO,
            BITACORA_BIOM.FOLIO,
            BITACORA_BIOM.MOTIVO,
            BITACORA_BIOM.OBSERVACIONES,
            BITACORA_BIOM.PAIS_SOLICITANTE,
            BITACORA_BIOM.URL_DIGITALIZACION,
            BITACORA_BIOM.CUENTA_CLIENTE,
            BITACORA_BIOM.SUCURSAL, 
            BITACORA_BIOM.CTE_UNICO,
            BITACORA_BIOM.TUTORENCONTRADO,
            CAT_CU_PROCTO.NOMBRE AS PRODUCTO,
            CAT_CU_SBPROCTO.NOMBRE AS SUBPRODUCTO,
            BITACORA_BIOM.URL_DIG_HISTORICA AS URL_DIG_HISTORICA,
            BITACORA_BIOM.TRATAMIENTO_ESPECIAL
     FROM  callcen.BITACORA_BIOM
     LEFT OUTER JOIN CALLCEN.CAT_PRODUCTO 
        ON BITACORA_BIOM.ID_PRODUCTO_FULL = CAT_PRODUCTO.ID_PRODUCTO_FULL 
     LEFT OUTER JOIN CALLCEN.CAT_CU_PROCTO
        ON CAT_PRODUCTO.ID_PRODUCTO = CAT_CU_PROCTO.ID_PRODUCTO
     LEFT OUTER JOIN CALLCEN.CAT_CU_SBPROCTO
        ON CAT_PRODUCTO.ID_SUBPRODUCTO = CAT_CU_SBPROCTO.ID_SUBPRODUCTO
        AND CAT_CU_PROCTO.ID_PRODUCTO = CAT_CU_SBPROCTO.ID_PRODUCTO
     WHERE BITACORA_BIOM.FOLIO = VFOLIO;    
    RETURN V_CUR;    
    CLOSE V_CUR;    
EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
END F_SUP_OPER_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_REPORTE_XML(FECHA DATE) RETURN TYPES.cursorType IS
    CUR Types.CURSORTYPE;
  BEGIN

    OPEN CUR FOR
      SELECT *
        FROM  CALLCEN.CANCELACIONES_XML XML
       WHERE  XML.ULTIMA_MODIFICACION = TRUNC(FECHA);

    RETURN CUR;

END F_REPORTE_XML;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_OPERBAN_CALLM (v_anio IN VARCHAR2 DEFAULT NULL,v_mes IN VARCHAR2 DEFAULT NULL) 
RETURN Types.CURSORTYPE IS
  fecha_inicial DATE;
  fecha_final DATE;
  fecha_auxiliar VARCHAR2(10);
  cursorSalida Types.CURSORTYPE;
  numeroContratos integer;
BEGIN
  fecha_auxiliar :='01/'||v_mes||'/'||v_anio;
  fecha_inicial := TO_DATE(fecha_auxiliar,'DD/MM/YYYY');
  fecha_final :=LAST_DAY(fecha_inicial);
  SELECT NVL(SUM(CR.CONTRATOS_PERSONAS_MORALES),0) INTO numeroContratos FROM CALLCEN.CONTRATOS_R15 CR WHERE CR.MES=V_MES AND CR.ANIO=V_ANIO;
  
  OPEN cursorSalida FOR
        SELECT  v_anio AS ANIO,v_mes AS MES,'1000' AS CONCEPTO,'CONSULTAS' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,numeroContratos AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'1100' AS CONCEPTO,'Consulta de Saldos' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'1200' AS CONCEPTO,'Otras Consultas' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2000' AS CONCEPTO,'MOVIMIENTOS' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2100' AS CONCEPTO,'Pagos' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2200' AS CONCEPTO,'Transferencias' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2300' AS CONCEPTO,'Inversiones' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES, 0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'2400' AS CONCEPTO,'Otros Movimientos' AS DESCRIPCION,0 AS NUM_OPER, 0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL
        UNION
        SELECT  v_anio AS ANIO,v_mes AS MES,'3000' AS CONCEPTO,'OTROS' AS DESCRIPCION,0 AS NUM_OPER,0 AS MONTO_OPER,0 AS NUM_CLIENTES,0 AS NUM_CONTRATOS,0 AS NUM_USUARIOS
        FROM  DUAL;
  RETURN cursorSalida;
EXCEPTION
    WHEN OTHERS THEN
         DBMS_OUTPUT.PUT_LINE('ERROR'|| SQLERRM);
         
         
END F_OPERBAN_CALLM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_OBTEN_INFBIOM(VFOLIO in VARCHAR )  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;

BEGIN

    OPEN V_CUR FOR     
    SELECT Folio,foto_cliente_nueva,foto_ejecutivo,foto_gerente,origen_solicitud,foto_cliente_historico,
           sucursal_gestora,canal_gestora, pais_solicitante, sucursal
    FROM  callcen.FOLIOBIOMETRICO
    WHERE folio = VFOLIO;
    
    RETURN V_CUR;
    
    CLOSE V_CUR;
    
EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla FOLIOBIOMETRICO (' || SQLCODE || '  ' || SQLERRM || ')');
 
END F_OBTEN_INFBIOM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_OBTEN_DAT_DIG(VFOLIO in VARCHAR )  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
    OPEN V_CUR FOR     
    SELECT CUENTA_CLIENTE,SUCURSAL,PAIS_SOLICITANTE,SUCURSAL_GESTORA, CTE_UNICO
    FROM  callcen.FOLIOBIOMETRICO
    WHERE folio = VFOLIO;
    RETURN V_CUR;
    CLOSE V_CUR;
EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla FOLIOBIOMETRICO (' || SQLCODE || '  ' || SQLERRM || ')');
END F_OBTEN_DAT_DIG;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_MOV_HISTORICO 
IS                                                    
    vcur_folios TYPES.CURSORTYPE;                                                   
    
    CURSOR vcur_folios IS
    SELECT FOLIO,AGENTE,OBSERVACIONES
    FROM CALLCEN.BITACORA_BIOM
        
    BEGIN  
            
             BEGIN 
               
                    FOR dato IN vcur_folios LOOP
                        INSERT INTO BITACORA_BIOM(FOLIO,AGENTE,PAIS_SOLICITANTE,FECHA_MODIFICACION)
                        VALUES('6565156',dato.AGENTE,dato.PAIS_SOLICITANTE,dato.FECHA_MODIFICACION);
                    END LOOP;
                    COMMIT;
                    CLOSE vcur_folios;   
                        dbms_output.put_line('Termino de iterar el cursor');
            EXCEPTION 
                when others then
                rollback;
                dbms_output.put_line('No existen folios');
            END;   
          
    EXCEPTION 
         WHEN OTHERS THEN
            dbms_output.put_line('Existio un error en la consulta');
            
END F_MOV_HISTORICO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_GET_FOLBM_SUP(VFOLIO in VARCHAR )  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
   OPEN V_CUR FOR
     SELECT BIT_BIOM_SUP.AGENTE,
            BIT_BIOM_SUP.ESTATUS,
            BIT_BIOM_SUP.FECHA_MODIFICACION,
            BIT_BIOM_SUP.FOLIO,
            BIT_BIOM_SUP.MOTIVO,
            BIT_BIOM_SUP.OBSERVACIONES
     FROM  callcen.BIT_BIOM_SUP
     WHERE BIT_BIOM_SUP.FOLIO = VFOLIO;    
    RETURN V_CUR;    
    CLOSE V_CUR;    
EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
END F_GET_FOLBM_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_GET_BITBM_SUP(VCTEUNICO in VARCHAR)  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
   OPEN V_CUR FOR
     SELECT b.FOLIO,b.CTE_UNICO,b.PAIS_SOLICITANTE,b.ESTATUS,b.AGENTE,b.MOTIVO,b.OBSERVACIONES,b.FECHA_REGISTRO,
     b.FECHA_MODIFICACION
     FROM callcen.BIT_BIOM_SUP b
     WHERE b.CTE_UNICO = VCTEUNICO
     ORDER BY b.FECHA_MODIFICACION DESC;  
    RETURN V_CUR;    
    CLOSE V_CUR;    
EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BIT_BIOM_SUP (' || SQLCODE || '  ' || SQLERRM || ')');
END F_GET_BITBM_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_GET_BENF_BIOM(VFOLIO in VARCHAR)  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;

BEGIN


   OPEN V_CUR FOR
     SELECT BENEF_BIOMTRICO.FOLIO,
            BENEF_BIOMTRICO.NOMBRE,
            BENEF_BIOMTRICO.A_PATERNO,
            BENEF_BIOMTRICO.A_MATERNO,
            BENEF_BIOMTRICO.FECHA_NACIMIENTO

     FROM CALLCEN.BENEF_BIOMTRICO
     WHERE CALLCEN.BENEF_BIOMTRICO.FOLIO LIKE VFOLIO||'%';
     
    RETURN V_CUR;    
    CLOSE V_CUR;    
    
EXCEPTION   
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BENEF_BIOMTRICO (' || SQLCODE || '  ' || SQLERRM || ')');
END F_GET_BENF_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_CONS_FOL_BIOM(VCTEUNICO in VARCHAR)  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
   OPEN V_CUR FOR
      SELECT BITACORA_BIOM.ESTATUS AS ESTATUS_OPER,
            BIT_BIOM_SUP.ESTATUS AS ESTATUS_SUP,
            BITACORA_BIOM.CTE_UNICO,
            BITACORA_BIOM.FECHA_MODIFICACION AS FECHA_MODIFICACION_OPER,
            BIT_BIOM_SUP.FECHA_MODIFICACION AS FECHA_MODIFICACION_SUP,
            BITACORA_BIOM.FOLIO,            
            BIT_BIOM_SUP.AGENTE AS AGENTE_SUP,                          
            AGENTE_ALNOVA.AGENTE AS AGENTE_OPER,       
            AGENTES.NOMBRE AS NOMBRE_OPER,
            AGENTES.APATERNO AS APATERNO_OPER,
            AGENTES.AMATERNO AS  AMATERNO_OPER,       
            AGENTE_ALNOVA.ALNOVA AS ALNOVA_OPER,
            AGENTE_ALNOVA.CUENTA AS CUENTA_OPER,
   
            (SELECT AGENTES.NOMBRE FROM CALLCEN.AGENTES WHERE BIT_BIOM_SUP.AGENTE = AGENTES.AGENTE) AS NOMBRE_SUP,      
            (SELECT AGENTES.APATERNO FROM CALLCEN.AGENTES WHERE  BIT_BIOM_SUP.AGENTE = AGENTES.AGENTE) AS APATERNO_SUP,       
            (SELECT AGENTES.AMATERNO FROM CALLCEN.AGENTES WHERE BIT_BIOM_SUP.AGENTE = AGENTES.AGENTE) AS AMATERNO_SUP,
            (SELECT AGENTE_ALNOVA.ALNOVA FROM CALLCEN.AGENTE_ALNOVA WHERE BIT_BIOM_SUP.AGENTE = AGENTE_ALNOVA.AGENTE) AS ALNOVA_SUP,
            (SELECT AGENTE_ALNOVA.CUENTA FROM CALLCEN.AGENTE_ALNOVA WHERE BIT_BIOM_SUP.AGENTE = AGENTE_ALNOVA.AGENTE) AS CUENTA_SUP

     FROM CALLCEN.BITACORA_BIOM         
     LEFT OUTER JOIN CALLCEN.BIT_BIOM_SUP  
     ON BITACORA_BIOM.FOLIO = CALLCEN.BIT_BIOM_SUP.FOLIO   
     LEFT OUTER JOIN CALLCEN.AGENTES
     ON BITACORA_BIOM.AGENTE = AGENTES.AGENTE    
     LEFT OUTER JOIN CALLCEN.AGENTE_ALNOVA
     ON AGENTES.AGENTE = AGENTE_ALNOVA.AGENTE
     WHERE BITACORA_BIOM.CTE_UNICO = VCTEUNICO
     ORDER BY BITACORA_BIOM.FECHA_MODIFICACION ASC;
     
     
    RETURN V_CUR;    
    CLOSE V_CUR;    
EXCEPTION   
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
END F_CONS_FOL_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_CONS_CTE_BIOM_HIS(VCTEUNICO in VARCHAR, vfecha_uno in varchar, vfecha_dos in varchar )  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
   OPEN V_CUR FOR
     SELECT b.AGENTE,b.ESTATUS,b.FECHA_MODIFICACION,b.FECHA_REGISTRO,b.FOLIO,b.MOTIVO,b.OBSERVACIONES,
            b.PAIS_SOLICITANTE,b.URL_DIGITALIZACION,b.CUENTA_CLIENTE,b.SUCURSAL, b.CTE_UNICO, b.NOMBRE_SUCURSAL
     FROM callcen.BIT_BIOM_HIS b
     WHERE b.FECHA_REGISTRO BETWEEN to_date(vfecha_uno,'dd/mm/yyyy') 
     AND (to_date(vfecha_dos,'dd/mm/yyyy')+INTERVAL '23' HOUR+ INTERVAL '59' MINUTE + interval '59' second)
     AND b.CTE_UNICO = VCTEUNICO
     ORDER BY FECHA_MODIFICACION DESC;  
    RETURN V_CUR;    
    CLOSE V_CUR;    
EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
END F_CONS_CTE_BIOM_HIS;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_CONS_CTE_BIOM_AGNT(VCTEUNICO in VARCHAR)  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
   OPEN V_CUR FOR
     SELECT BITACORA_BIOM.ESTATUS AS ESTATUS_OPER,
            BIT_BIOM_SUP.ESTATUS AS ESTATUS_SUP,
            BITACORA_BIOM.CTE_UNICO,
            BITACORA_BIOM.FECHA_MODIFICACION AS FECHA_MODIFICACION_OPER,
            BIT_BIOM_SUP.FECHA_MODIFICACION AS FECHA_MODIFICACION_SUP,
            BITACORA_BIOM.FOLIO,            
            BIT_BIOM_SUP.AGENTE AS AGENTE_SUP,                          
            AGENTE_ALNOVA.AGENTE AS AGENTE_OPER,       
            AGENTES.NOMBRE AS NOMBRE_OPER,
            AGENTES.APATERNO AS APATERNO_OPER,
            AGENTES.AMATERNO AS  AMATERNO_OPER,       
            AGENTE_ALNOVA.ALNOVA AS ALNOVA_OPER,
            AGENTE_ALNOVA.CUENTA AS CUENTA_OPER,
   
            (SELECT AGENTES.NOMBRE FROM CALLCEN.AGENTES WHERE BIT_BIOM_SUP.AGENTE = AGENTES.AGENTE) AS NOMBRE_SUP,      
            (SELECT AGENTES.APATERNO FROM CALLCEN.AGENTES WHERE  BIT_BIOM_SUP.AGENTE = AGENTES.AGENTE) AS APATERNO_SUP,       
            (SELECT AGENTES.AMATERNO FROM CALLCEN.AGENTES WHERE BIT_BIOM_SUP.AGENTE = AGENTES.AGENTE) AS AMATERNO_SUP,
            (SELECT AGENTE_ALNOVA.ALNOVA FROM CALLCEN.AGENTE_ALNOVA WHERE BIT_BIOM_SUP.AGENTE = AGENTE_ALNOVA.AGENTE) AS ALNOVA_SUP,
            (SELECT AGENTE_ALNOVA.CUENTA FROM CALLCEN.AGENTE_ALNOVA WHERE BIT_BIOM_SUP.AGENTE = AGENTE_ALNOVA.AGENTE) AS CUENTA_SUP

     FROM CALLCEN.BITACORA_BIOM         
     LEFT OUTER JOIN CALLCEN.BIT_BIOM_SUP  
     ON BITACORA_BIOM.FOLIO = CALLCEN.BIT_BIOM_SUP.FOLIO   
     LEFT OUTER JOIN CALLCEN.AGENTES
     ON BITACORA_BIOM.AGENTE = AGENTES.AGENTE    
     LEFT OUTER JOIN CALLCEN.AGENTE_ALNOVA
     ON AGENTES.AGENTE = AGENTE_ALNOVA.AGENTE
     WHERE BITACORA_BIOM.CTE_UNICO = VCTEUNICO
     ORDER BY BITACORA_BIOM.FECHA_MODIFICACION ASC;
     
     
    RETURN V_CUR;    
    CLOSE V_CUR;    
EXCEPTION   
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
END F_CONS_CTE_BIOM_AGNT;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_CONS_CTE_BIOM(VCTEUNICO in VARCHAR)  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
   OPEN V_CUR FOR
     SELECT BITACORA_BIOM.AGENTE,
            BITACORA_BIOM.ESTATUS,
            BITACORA_BIOM.FECHA_MODIFICACION,
            BITACORA_BIOM.FECHA_REGISTRO,
            BITACORA_BIOM.FOLIO,
            BITACORA_BIOM.MOTIVO,
            BITACORA_BIOM.OBSERVACIONES,
            BITACORA_BIOM.PAIS_SOLICITANTE,
            BITACORA_BIOM.URL_DIGITALIZACION,
            BITACORA_BIOM.CUENTA_CLIENTE,
            BITACORA_BIOM.SUCURSAL, 
            BITACORA_BIOM.CTE_UNICO, 
            BITACORA_BIOM.NOMBRE_SUCURSAL,
            BIT_BIOM_SUP.FECHA_MODIFICACION AS FECHA_MODIFICACIONSUP,
            BIT_BIOM_SUP.ESTATUS AS ESTATUSSUP,
            BIT_BIOM_SUP.AGENTE AS AGENTESUP,
            BIT_BIOM_SUP.MOTIVO AS MOTIVOSUP,
            BIT_BIOM_SUP.OBSERVACIONES AS OBSERVACIONESSUP
     FROM callcen.BITACORA_BIOM
     LEFT OUTER JOIN CALLCEN.BIT_BIOM_SUP  
     ON BITACORA_BIOM.FOLIO = CALLCEN.BIT_BIOM_SUP.FOLIO
     WHERE BITACORA_BIOM.CTE_UNICO = VCTEUNICO
     ORDER BY BITACORA_BIOM.FECHA_MODIFICACION DESC;  
    RETURN V_CUR;    
    CLOSE V_CUR;    
EXCEPTION   
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
END F_CONS_CTE_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_CONS_CTA_BIOM(VCUENTA in VARCHAR, vfecha_uno in varchar, vfecha_dos in varchar )  RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;
BEGIN
   OPEN V_CUR FOR
     SELECT b.AGENTE,b.ESTATUS,b.FECHA_MODIFICACION,b.FECHA_REGISTRO,b.FOLIO,b.MOTIVO,b.OBSERVACIONES,
            b.PAIS_SOLICITANTE,b.URL_DIGITALIZACION,b.CUENTA_CLIENTE,b.SUCURSAL, b.CTE_UNICO
     FROM callcen.BITACORA_BIOM b
     WHERE b.FECHA_REGISTRO BETWEEN to_date(vfecha_uno,'dd/mm/yyyy') 
     AND (to_date(vfecha_dos,'dd/mm/yyyy')+INTERVAL '23' HOUR+ INTERVAL '59' MINUTE + interval '59' second)
     AND b.CUENTA_CLIENTE = VCUENTA;    
    RETURN V_CUR;    
    CLOSE V_CUR;    
EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
END F_CONS_CTA_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_CONSULTA_BITCAN (VTARJETA IN VARCHAR2, VCUENTA IN VARCHAR2, VPAIS IN INTEGER)  RETURN TYPES.CURSORTYPE 
IS
    CUR TYPES.CURSORTYPE;
    BEGIN  IF VTARJETA IS NULL THEN
        OPEN CUR FOR
        SELECT /*+ INDEX(CATALOGO_ACCIONES  SYS_C003045)*/ C.CUENTA,CALLCEN.CATALOGO_ACCIONES.ACCION,TO_CHAR(C.FECHA,'DD/MM/YYYY') AS FECHA,C.HORA,C.AGENTE
        FROM(SELECT A.CUENTA, A.FECHA,A.HORA,A.AGENTE, A.ACCION
            FROM CALLCEN.BITACORA_CANC A 
            WHERE A.CUENTA=VCUENTA AND A.ID_PAIS=VPAIS
            ORDER BY FECHA DESC,HORA DESC
            ) C, CALLCEN.CATALOGO_ACCIONES
        WHERE ROWNUM<11 AND C.ACCION=CALLCEN.CATALOGO_ACCIONES.ID_ACCION;
        RETURN CUR;
        CLOSE CUR;
    ELSE
        OPEN CUR FOR
        SELECT /*+ INDEX(CATALOGO_ACCIONES  SYS_C003045)*/  C.CUENTA,CALLCEN.CATALOGO_ACCIONES.ACCION,TO_CHAR(C.FECHA,'DD/MM/YYYY') AS FECHA,C.HORA,C.AGENTE
        FROM(SELECT A.CUENTA,A.FECHA,A.HORA,A.AGENTE,A.ACCION
            FROM CALLCEN.BITACORA_CANC A
            WHERE A.NUM_TARJETA=VTARJETA AND A.ID_PAIS=VPAIS
            ORDER BY FECHA DESC,HORA DESC
            ) C, CALLCEN.CATALOGO_ACCIONES
        WHERE ROWNUM<11 AND C.ACCION=CALLCEN.CATALOGO_ACCIONES.ID_ACCION;
        RETURN CUR;
        CLOSE CUR;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL;
         WHEN OTHERS THEN
            RAISE;
END F_CONSULTA_BITCAN;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION F_Cempresario(V_TARJETA IN VARCHAR, V_TRANSACCION IN VARCHAR) RETURN Types.CURSORTYPE IS
          CUR Types.CURSORTYPE;
          MSG VARCHAR(256);
          BEGIN
                 OPEN CUR FOR
                       SELECT TARJETA,ACCION,(FECHA+15) AS FECHA_LIMITE
                      FROM CALLCEN.BIT_AUX AUX
                     WHERE AUX.TRANSACCION=V_TRANSACCION
                       AND TARJETA=V_TARJETA;
                RETURN CUR;
          EXCEPTION
                    WHEN OTHERS THEN
                        MSG:='ERROR. '||SQLERRM;
                        OPEN CUR FOR
                            SELECT MSG
                              FROM DUAL;
                        RETURN CUR;
END F_Cempresario;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_CATALOGO_ACCIONES(indice1 in NUMBER, indice2 in NUMBER ) 
RETURN TYPES.CURSORTYPE IS
V_CUR TYPES.CURSORTYPE;

  BEGIN

OPEN V_CUR FOR     
  
      SELECT ID_ACCION, ACCION FROM CALLCEN.CATALOGO_ACCIONES WHERE ID_ACCION BETWEEN INDICE1 AND INDICE2
      order by ID_ACCION ASC;
    RETURN V_CUR;
    CLOSE V_CUR;
    
EXCEPTION
    WHEN OTHERS THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla CATALOGO_ACCIONES (' || SQLCODE || '  ' || SQLERRM || ')');
 
END F_CATALOGO_ACCIONES;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION F_CATALOGO_ACCI(ACCIONRECIBIDA VARCHAR2) 
RETURN VARCHAR2 
IS

ACCIONESENCONTRADAS VARCHAR2;

  BEGIN
     
      SELECT ID_ACCION INTO ACCIONESENCONTRADAS FROM CATALOGO_ACCIONES WHERE ACCION = 'SOLICITA CHEQUERA';
   
    RETURN ACCIONESENCONTRADAS;

END F_CATALOGO_ACCI;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_BIOM_SUP_REP 
(
    vfecha_uno in varchar, 
    vfecha_dos in varchar
)RETURN TYPES.CURSORTYPE 
IS    
    V_CUR TYPES.CURSORTYPE;
    VDATEFORMAT VARCHAR(10);
    VHOUR  INTERVAL DAY TO SECOND;
    VMINUTE INTERVAL DAY TO SECOND;
    VSECOND INTERVAL DAY TO SECOND;

BEGIN
    VDATEFORMAT :=  'DD/MM/YYYY';
    VHOUR   := INTERVAL '23' HOUR;
    VMINUTE := INTERVAL '59' MINUTE;
    VSECOND := INTERVAL '59' SECOND;
   OPEN V_CUR FOR
        SELECT 
                BITACORA_BIOM.AGENTE,
                BITACORA_BIOM.ESTATUS,
                BITACORA_BIOM.FOLIO,
                BITACORA_BIOM.MOTIVO,
                BITACORA_BIOM.OBSERVACIONES,
                BITACORA_BIOM.PAIS_SOLICITANTE,
                BITACORA_BIOM.CUENTA_CLIENTE,
                BITACORA_BIOM.FECHA_REGISTRO,
                BITACORA_BIOM.FECHA_MODIFICACION,
                FOLIOBIOMETRICO.ORIGEN_SOLICITUD as CANAL, 
                BITACORA_BIOM.saltos, 
                BITACORA_BIOM.inicio_atencion,
                BITACORA_BIOM.TUTORENCONTRADO,
                CAT_CU_PROCTO.NOMBRE AS PRODUCTO,
                CAT_CU_SBPROCTO.NOMBRE AS SUBPRODUCTO
         FROM CALLCEN.BITACORA_BIOM 
         LEFT OUTER JOIN CALLCEN.CAT_PRODUCTO 
         ON BITACORA_BIOM.ID_PRODUCTO_FULL = CAT_PRODUCTO.ID_PRODUCTO_FULL 
         LEFT OUTER JOIN CALLCEN.CAT_CU_PROCTO
         ON CAT_PRODUCTO.ID_PRODUCTO = CAT_CU_PROCTO.ID_PRODUCTO
         LEFT OUTER JOIN CALLCEN.CAT_CU_SBPROCTO
         ON CAT_PRODUCTO.ID_SUBPRODUCTO = CAT_CU_SBPROCTO.ID_SUBPRODUCTO
         AND CAT_CU_PROCTO.ID_PRODUCTO = CAT_CU_SBPROCTO.ID_PRODUCTO
         INNER JOIN CALLCEN.FOLIOBIOMETRICO
         ON BITACORA_BIOM.FOLIO = FOLIOBIOMETRICO.FOLIO
         AND BITACORA_BIOM.PAIS_SOLICITANTE = FOLIOBIOMETRICO.PAIS_SOLICITANTE
         WHERE BITACORA_BIOM.FECHA_REGISTRO BETWEEN to_date(vfecha_uno,VDATEFORMAT) 
         AND (to_date(vfecha_dos,VDATEFORMAT)+VHOUR+ VMINUTE + VSECOND)
         AND BITACORA_BIOM.ESTATUS IS NOT NULL;
     
   RETURN V_CUR;
    
   CLOSE V_CUR;
    
EXCEPTION
   WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
 
END F_BIOM_SUP_REP;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_BIOM_SUPER_RE (vfecha_uno in varchar, vfecha_dos in varchar,vagente in varchar,
                                         vpais in varchar, vestatus in varchar)  RETURN TYPES.CURSORTYPE IS
       V_CUR TYPES.CURSORTYPE;
       V_CADENA_DINAMICA VARCHAR2(200);
BEGIN
       if vpais is null then
          V_CADENA_DINAMICA :='';
       else   
          V_CADENA_DINAMICA :=' and b.PAIS_SOLICITANTE = '||vpais;
       end if;        
       if vestatus is null then
          V_CADENA_DINAMICA := V_CADENA_DINAMICA||'';
       else   
          V_CADENA_DINAMICA := V_CADENA_DINAMICA||' and b.ESTATUS = '''||vestatus||'''';
       end if;     
       
       if vagente is null then
          V_CADENA_DINAMICA := V_CADENA_DINAMICA||'';
       else   
          V_CADENA_DINAMICA := V_CADENA_DINAMICA||' and b.AGENTE = '''|| vagente||'''';
       end if;          
       OPEN V_CUR FOR     
            'SELECT b.AGENTE,b.ESTATUS,b.FOLIO,b.MOTIVO,b.OBSERVACIONES,b.PAIS_SOLICITANTE,b.FECHA_REGISTRO,
                   b.FECHA_MODIFICACION,f.ORIGEN_SOLICITUD, b.saltos, b.inicio_atencion
            FROM CALLCEN.BITACORA_BIOM b, CALLCEN.FOLIOBIOMETRICO f
            WHERE b.FECHA_REGISTRO BETWEEN to_date('''||vfecha_uno||''',''dd/mm/yyyy'') 
            AND (to_date('''||vfecha_dos||''',''dd/mm/yyyy'')+INTERVAL ''23'' HOUR+ INTERVAL ''59'' MINUTE + interval ''59'' second) '|| 
            V_CADENA_DINAMICA||' AND b.FOLIO  = f.FOLIO AND b.PAIS_SOLICITANTE = f.PAIS_SOLICITANTE AND b.CUENTA_CLIENTE IS NOT NULL';        
        RETURN V_CUR;  
        CLOSE V_CUR;    
EXCEPTION
     WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al ejecutar el objeto CALLCEN.F_BIOM_SUPER_RE (' || SQLCODE || '  ' || SQLERRM || ')');
END F_BIOM_SUPER_RE;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_BIOM_REP_SUP 
(
    vfecha_uno in varchar, 
    vfecha_dos in varchar
)RETURN TYPES.CURSORTYPE 
IS    
    V_CUR TYPES.CURSORTYPE;
    VDATEFORMAT VARCHAR(10);
    VHOUR  INTERVAL DAY TO SECOND;
    VMINUTE INTERVAL DAY TO SECOND;
    VSECOND INTERVAL DAY TO SECOND;

BEGIN
    VDATEFORMAT :=  'DD/MM/YYYY';
    VHOUR   := INTERVAL '23' HOUR;
    VMINUTE := INTERVAL '59' MINUTE;
    VSECOND := INTERVAL '59' SECOND;
   OPEN V_CUR FOR
        SELECT 
                BIT_BIOM_SUP.AGENTE,
                BIT_BIOM_SUP.ESTATUS,
                BIT_BIOM_SUP.FOLIO,
                BIT_BIOM_SUP.MOTIVO,
                BIT_BIOM_SUP.OBSERVACIONES,
                BIT_BIOM_SUP.PAIS_SOLICITANTE,
                BIT_BIOM_SUP.FECHA_REGISTRO,
                BIT_BIOM_SUP.FECHA_MODIFICACION,
                BIT_BIOM_SUP.INICIO_ATENCION,
                BIT_BIOM_SUP.SALTOS        
         FROM CALLCEN.BIT_BIOM_SUP
         INNER JOIN CALLCEN.FOLIOBIOMETRICO
         ON BIT_BIOM_SUP.FOLIO = FOLIOBIOMETRICO.FOLIO
         AND BIT_BIOM_SUP.PAIS_SOLICITANTE = FOLIOBIOMETRICO.PAIS_SOLICITANTE
         WHERE BIT_BIOM_SUP.FECHA_REGISTRO BETWEEN to_date(vfecha_uno,VDATEFORMAT) 
         AND (to_date(vfecha_dos,VDATEFORMAT)+VHOUR+ VMINUTE + VSECOND)
         AND BIT_BIOM_SUP.ESTATUS IS NOT NULL;
     
   RETURN V_CUR;
    
   CLOSE V_CUR;
    
EXCEPTION
   WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BIT_BIOM_SUP (' || SQLCODE || '  ' || SQLERRM || ')');
 
END F_BIOM_REP_SUP;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_BIOM_REPORTE 
(
    vfecha_uno in varchar, 
    vfecha_dos in varchar
)RETURN TYPES.CURSORTYPE 
IS    
    V_CUR TYPES.CURSORTYPE;
    VDATEFORMAT VARCHAR(10);
    VHOUR  INTERVAL DAY TO SECOND;
    VMINUTE INTERVAL DAY TO SECOND;
    VSECOND INTERVAL DAY TO SECOND;

BEGIN
    VDATEFORMAT :=  'DD/MM/YYYY';
    VHOUR   := INTERVAL '23' HOUR;
    VMINUTE := INTERVAL '59' MINUTE;
    VSECOND := INTERVAL '59' SECOND;
   OPEN V_CUR FOR
        SELECT 
                BITACORA_BIOM.AGENTE,
                BITACORA_BIOM.ESTATUS,
                BITACORA_BIOM.FOLIO,
                BITACORA_BIOM.MOTIVO,
                BITACORA_BIOM.OBSERVACIONES,
                BITACORA_BIOM.PAIS_SOLICITANTE,
                BITACORA_BIOM.URL_DIGITALIZACION,
                BITACORA_BIOM.FECHA_REGISTRO,
                BITACORA_BIOM.FECHA_MODIFICACION,
                FOLIOBIOMETRICO.ORIGEN_SOLICITUD AS CANAL,
                BITACORA_BIOM.INICIO_ATENCION,
                BITACORA_BIOM.SALTOS,
                BITACORA_BIOM.ID_PRODUCTO_FULL,
                BITACORA_BIOM.TUTORENCONTRADO,
                BITACORA_BIOM.TRATAMIENTO_ESPECIAL,
                BITACORA_BIOM.CUENTA_CLIENTE,
                FOLIOBIOMETRICO.NOMBRE_CLIENTE,
                FOLIOBIOMETRICO.TIPO_SOLICITUD,
                BIT_BIOM_SUP.FECHA_MODIFICACION AS FECHA_MODIFICACIONSUP,
                BIT_BIOM_SUP.ESTATUS AS ESTATUSSUP,
                BIT_BIOM_SUP.AGENTE AS AGENTESUP,
                BIT_BIOM_SUP.MOTIVO AS MOTIVOSUP,
                BIT_BIOM_SUP.OBSERVACIONES AS OBSERVACIONESSUP              
         FROM CALLCEN.BITACORA_BIOM  
         LEFT OUTER JOIN CALLCEN.BIT_BIOM_SUP  
         ON BITACORA_BIOM.FOLIO = CALLCEN.BIT_BIOM_SUP.FOLIO
         INNER JOIN CALLCEN.FOLIOBIOMETRICO
         ON BITACORA_BIOM.FOLIO = FOLIOBIOMETRICO.FOLIO
         AND BITACORA_BIOM.PAIS_SOLICITANTE = FOLIOBIOMETRICO.PAIS_SOLICITANTE                                
         WHERE BITACORA_BIOM.FECHA_REGISTRO BETWEEN to_date(vfecha_uno,VDATEFORMAT) 
         AND (to_date(vfecha_dos,VDATEFORMAT)+VHOUR+ VMINUTE + VSECOND)
         AND BITACORA_BIOM.ESTATUS IS NOT NULL;
     
   RETURN V_CUR;
    
   CLOSE V_CUR;
    
EXCEPTION
   WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al consultar la tabla BITACORA_BIOM (' || SQLCODE || '  ' || SQLERRM || ')');
 
END F_BIOM_REPORTE;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         F_ADMINFOL_BIOM 
(
    vperfil in callcen.agentes.ID_PERFIL%type,
    vagente in callcen.agentes.AGENTE%type 
) RETURN TYPES.CURSORTYPE 
IS                                                    
    vcur_folios_agente TYPES.CURSORTYPE;                                                   
    
    CURSOR vcur_folios IS
    SELECT FOLIO
    FROM CALLCEN.LIBERA_BIOM
    WHERE ESTATUS = 'PENDIENTE'
    ORDER BY FECHA_REGISTRO ASC
    FOR UPDATE OF FOLIO;
    
    CURSOR vcur_reasigna_folio IS
    select agente 
    from callcen.LIBERA_BIOM
    where agente <> 'NO ASIGNADO'
    group by agente
    having count(1) > 0;     
    
    vfolio callcen.LIBERA_BIOM.FOLIO%type;
    v_count_agentes number;
    v_count_folios_asignados number;
    v_cuota_maxima_folios number;
    v_total_folios_asignar number;
    v_count_itera number;
    asignarFolios boolean default true;
    v_agenteLogueado number;
    v_incrementa_folios number;
    VASIGNADO VARCHAR(15);
    VATENDIENDO VARCHAR(15);
    VPENDIENTE VARCHAR(15);
    VID_PAIS NUMBER;
    VID_ESTATUS NUMBER;
    err_code varchar2(50);
    err_msg varchar2(200);
        
    BEGIN  
            v_count_itera := 1;
            v_cuota_maxima_folios:=1;
            v_incrementa_folios :=1;
            VASIGNADO := 'ASIGNADO';
            VATENDIENDO := 'ATENDIENDO';
            VPENDIENTE := 'PENDIENTE';
            VID_PAIS := 1;
            VID_ESTATUS := 1;
            dbms_output.put_line('Reasigna folios  ');
             BEGIN 
               
                    FOR dato IN vcur_reasigna_folio LOOP
                         select count(1) into v_agenteLogueado
                         from callcen.agentes
                         where agente = dato.agente
                         AND ID_PAIS = 1
                         AND ID_ESTATUS = 1;
                         
                         if v_agenteLogueado = 0 then
                            update CALLCEN.LIBERA_BIOM
                            set estatus = VPENDIENTE,
                                fecha_modificacion = sysdate
                            where agente = dato.agente;
                         end if;
                    END LOOP;
                    COMMIT;
                    CLOSE vcur_reasigna_folio;     
                        dbms_output.put_line('Termino de iterar el cursor');
            EXCEPTION 
                when others then
                rollback;
                dbms_output.put_line('No existen folios');
            END;   
            
            
            
            CALLCEN.SP_BIOREASFOLIO(vagente);
            
            
            select count(1) into v_count_folios_asignados
            FROM CALLCEN.LIBERA_BIOM
            WHERE ESTATUS IN (VASIGNADO,VATENDIENDO)
            AND AGENTE = vagente;
            
            if(v_count_folios_asignados >= v_cuota_maxima_folios) then
                dbms_output.put_line('El pool de folios esta lleno');
                asignarFolios := false;
            else

                v_total_folios_asignar := v_incrementa_folios;  
            
            end if;
            
            
            dbms_output.put_line('total de folios a asignar  '||v_total_folios_asignar);
            
            BEGIN 
                IF(asignarFolios) THEN
                        FOR reg IN vcur_folios LOOP
                            
                                IF(v_count_itera <= v_total_folios_asignar) THEN
                                        v_count_itera := v_count_itera + 1;
                                        dbms_output.put_line('folio  encontrado  '||vfolio);
                                        update CALLCEN.LIBERA_BIOM
                                        set estatus = VASIGNADO,
                                            agente = vagente,
                                            fecha_modificacion = sysdate
                                        where folio = reg.folio;    
                                        UPDATE CALLCEN.BITACORA_BIOM
                                        SET AGENTE = VAGENTE,
                                        INICIO_ATENCION = SYSDATE,
                                        SALTOS = SALTOS +1,
                                        FECHA_MODIFICACION = SYSDATE,
                                        estatus = VASIGNADO
                                        WHERE FOLIO = REG.FOLIO;
                                 END IF;
                        END LOOP;
                        COMMIT;
                        CLOSE vcur_folios;     
                        dbms_output.put_line('Termino de iterar el cursor');
                END IF; 
               
             EXCEPTION 
               when others then
               rollback;
                dbms_output.put_line('No existen folios');
             END;   
             
            OPEN vcur_folios_agente FOR
                SELECT FOLIO        
                FROM CALLCEN.LIBERA_BIOM
                WHERE ESTATUS IN (VASIGNADO,VATENDIENDO)
                AND AGENTE = vagente
                ORDER BY FECHA_REGISTRO DESC;
            RETURN vcur_folios_agente;
            
            CLOSE vcur_folios_agente;     
                
   
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('No se encontraron datos');
        WHEN ZERO_DIVIDE THEN
            dbms_output.put_line('No hay operadores logueados');
            OPEN vcur_folios_agente FOR
            SELECT 'No hay operadores logueados' AS FOLIO        
            FROM DUAL;
            RETURN vcur_folios_agente;
            CLOSE vcur_folios_agente;  
         WHEN OTHERS THEN
            dbms_output.put_line('Existio un error en la consulta');
            
END F_ADMINFOL_BIOM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         FRECUPERA_ALNOVA(V_AGENTE IN VARCHAR) RETURN Types.CURSORTYPE IS
salida VARCHAR2(200);
CUR Types.CURSORTYPE;
BEGIN

   OPEN CUR FOR
   SELECT *
     FROM CALLCEN.AGENTE_ALNOVA
	WHERE AGENTE = V_AGENTE;

   RETURN CUR;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN

		  OPEN CUR FOR
		  	   SELECT 'AGENTE INVALIDO' AS MSG
			   FROM DUAL;

		  RETURN CUR;
END FRECUPERA_ALNOVA;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION catalogo_accion (id_action IN number, action IN varchar2)
  RETURN INTEGER IS
    v_count INTEGER;
BEGIN
    SELECT *
        FROM CATALOGO_ACCION
        WHERE id_accion=id_action and accion= action;
    RETURN v_count;
EXCEPTION

    WHEN OTHERS
    THEN
        RETURN -1;

END catalogo_accion;
/

SHOW ERRORS;


CREATE OR REPLACE VIEW VCALL_ADMINISTRADOR
AS 
SELECT A.ADMINISTRADOR, A.FECHA, A.HORA, A.AGENTE, B.ACCION, A.ID_PAIS
FROM bitacora_adm A, catalogo_acciones_adm B
WHERE A.ACCION = B.ID_ACCION_ADM
ORDER BY A.ADMINISTRADOR, A.FECHA, A.HORA;


CREATE OR REPLACE VIEW VCALL_AGENTES
AS 
SELECT D.perfil, A.agente, MAX(A.fecha) FECHA, C.nom_corto, B.nombre||' '||B.apaterno||' '||B.amaterno NOMBRE, SYSDATE FECHA_ACT, A.ID_PAIS
FROM logs_entrada A, agentes B, catalogo_estatus C, catalogo_perfiles D
WHERE (A.AGENTE = B.AGENTE)
	AND (B.ID_ESTATUS = C.ID_ESTATUS)
	AND (B.ID_PERFIL = D.ID_PERFIL)
AND B.ID_ESTATUS NOT IN 5
GROUP BY D.perfil, A.agente, C.nom_corto, B.nombre||' '||B.apaterno||' '||B.amaterno, A.ID_PAIS;


CREATE OR REPLACE VIEW VCALL_BITACORA
AS 
SELECT  AGENTE, TO_NUMBER(SUBSTR(A.ACCION,1,1)) AS ACCIONES, A.CUENTA, A.FECHA, SUBSTR(A.HORA,1,5) AS HORA, A.ID_PAIS, A.CLIENTE, A.PRODUCTO
, B.ACCION
FROM BITACORA A LEFT JOIN CATALOGO_ACCIONES B ON (TO_NUMBER(SUBSTR(A.ACCION,1,1))=B.ID_ACCION)
ORDER BY A.agente, A.FECHA;


CREATE OR REPLACE VIEW VCALL_BOLETINADOS
AS 
SELECT B."AGENTE",B."ACCION",B."CUENTA",B."FECHA",B."HORA",B."ID",B."ID_PAIS",B."CLIENTE",B."ALNOVA",B."PRODUCTO",B."FI_PAIS",B."FI_CANAL",B."FI_SUCURSAL",B."FI_FOLIO",B."TRATAMIENTOS",B."MOTIVOS",B."TARJETA",B."ESTATUS", E.NOMBRE_ESTADO, P.NOMBRE_CORTO AS PAIS, S.NOMBRE_SUCURSAL
FROM BITACORA B left join PAIS P ON (B.ID_PAIS = P.ID_PAIS)
left join SUCURSALES S ON (B.ID_PAIS = S.ID_PAIS AND B.FI_CANAL = S.ID_CANAL AND B.FI_SUCURSAL = S.ID_SUCURSAL)
left join ESTADO E ON (B.FI_PAIS = E.ID_PAIS AND S.ID_ESTADO = E.ID_ESTADO)
WHERE B.TRATAMIENTOS <> ' '  OR B.MOTIVOS <> ' '
ORDER BY B.AGENTE, B.FECHA, B.HORA;


CREATE OR REPLACE VIEW VCALL_CANCELACIONES
AS 
SELECT  A.FOLIO, B.CLIENTE, A.NUM_TARJETA, C.DESCRIPCION,
B.AGENTE, D.NOMBRE_CORTO,
TRUNC(B.FECHA) FECHA, B.HORA, A.MP00, A.ID_PAIS
FROM bitacora B, bitacora_canc A,  catalogo_motivos_canc C, pais D
WHERE  (b.AGENTE = a.AGENTE AND B.ACCION=B.ACCION AND b.CUENTA = a.CUENTA AND b.FECHA=a.FECHA AND B.HORA=A.HORA AND b.id_PAIS=a.ID_PAIS)
AND  TRUNC(B.FECHA)>=TRUNC(SYSDATE-190) AND TRUNC(A.FECHA)>=TRUNC(SYSDATE-190) AND B.ACCION = '3'
AND ( A.ID_MOTIVO = C.ID_MOTIVO)
AND  (A.ID_PAIS = D.ID_PAIS)
ORDER BY A.AGENTE, A.FECHA, A.HORA;


CREATE OR REPLACE VIEW VCALL_CLIENTESNO
AS 
SELECT A.AGENTE, A.NOMBRE||' '||A.AP_PATERNO||' '||A.AP_MATERNO NOMBRE, A.CUENTA, A.SUBPRODUCTO, A.FECHA, A.HORA, A.ID_PAIS
FROM bitacora_clientes A
ORDER BY A.Agente, A.Fecha, A.Hora;


CREATE OR REPLACE VIEW VCALL_CUENTASBOL
AS 
SELECT A."FOLIO",A."AGENTE",A."NOMBRE",A."AP_PATERNO",A."AP_MATERNO",A."CUENTA",A."FECHA_REGISTRO",A."FECHA_INICIO",A."FECHA_BAJA",A."ID_MOTIVO_BOLETINADO",A."ID_PAIS", B.DESCRIPCION_BOLETINADO FROM boletinados A, catalogo_motivos_boletinados B
WHERE A.ID_MOTIVO_BOLETINADO = B.ID_MOTIVO_BOLETINADO
ORDER BY A.AGENTE, A.FECHA_REGISTRO;


CREATE OR REPLACE VIEW VCALL_CUENTASNO
AS 
SELECT A.AGENTE, A.NOMBRE||' '||A.AP_PATERNO||' '||A.AP_MATERNO NOMBRE,
A.NUMERO, A.SUBPRODUCTO,
A.FECHA, A.HORA, A.TIPO, A.ID_PAIS  FROM
bitacora_cuentas A
WHERE A.ID_PAIS = 1 AND A.TIPO = 'C'
ORDER BY A.Agente, A.Fecha, A.Hora;


CREATE OR REPLACE VIEW VCALL_DENUNCIAS
AS 
SELECT a.pais||'-'||a.canal||'-'||a.sucursal AS sucursal, b.nomsucursal,
a.folio, a.fecha_reporte,
a.nombre||' '||a.a_paterno||' '||a.a_materno AS nombrec,
a.lada||'-'||a.telefono AS tel,
a.fecha_problema, a.hora_problema,
a.nom_atendio, a.puesto, a.descripcion
FROM de_datos a, cat_sucursales b
WHERE a.sucursal = b.sucursal
ORDER BY Sucursal;


CREATE OR REPLACE VIEW VCALL_INTENTOSFALLIDOSHOY
AS 
SELECT agente, COUNT(STATUS) AS TOTAL--INTO VINTENTOS
	   FROM LOGS_ENTRADA
	   WHERE status = '2'
--	   And agente = PAGEN
	   AND fecha = TO_CHAR(SYSDATE)
	      AND id_pais=1
		  GROUP BY agente;


CREATE OR REPLACE VIEW VCALL_PROMOCIONES
AS 
SELECT A."AGENTE",A."ACCION",A."CUENTA",A."FECHA",A."HORA",A."ID",A."ID_PAIS",A."CLIENTE",A."ALNOVA",A."PRODUCTO",A."FI_PAIS",A."FI_CANAL",A."FI_SUCURSAL",A."FI_FOLIO",A."TRATAMIENTOS",A."MOTIVOS",A."TARJETA",A."ESTATUS", B.USERID, B.PASSWORD, B.NOMBRE, B.LINK, B.LEYENDA, B.IMAGEN, B.BITACORA
FROM bitacora A, promociones B
WHERE (A.ACCION = B.ACCION)
AND A.ACCION LIKE '5%'
ORDER BY A.AGENTE, B.NOMBRE, A.FECHA, A.HORA;


CREATE OR REPLACE VIEW VCALL_PUNTOS_LEALTAD
AS 
SELECT DISTINCT A."AGENTE",A."FECHA",A."PAIS",A."CUENTA",A."TARJETA",A."PUNTOS", B.CLIENTE
FROM bit_TARJETA_AZTECA A LEFT JOIN BITACORA B ON (SUBSTR(A.CUENTA,11,LENGTH(A.CUENTA))=SUBSTR(B.CUENTA,5,LENGTH(B.CUENTA)) AND A.TARJETA=B.TARJETA);


CREATE OR REPLACE VIEW VCALL_QUEJAS
AS 
SELECT a.pais||'-'||a.canal||'-'||a.sucursal AS sucursal, b.nomsucursal,
folio, fecha_reporte,
RTRIM(nombre)||' '||RTRIM(a_paterno)||' '||RTRIM(a_materno) AS nombrec,
a.lada||'-'||a.telefono AS tel,
fecha_problema, hora_problema,
nom_atendio, puesto, descripcion, comentarios, st_transaccion, folio_transaccion, tipo_transaccion, tiempo_espera
FROM que_datos a, cat_sucursales b
WHERE a.sucursal = b.sucursal
ORDER BY fecha_reporte;


CREATE OR REPLACE VIEW VCALL_TIPOSLLAMADA
AS 
SELECT B."AGENTE",B."ACCION",B."CUENTA",B."FECHA",B."HORA",B."ID",B."ID_PAIS",B."CLIENTE",B."ALNOVA",B."PRODUCTO",B."FI_PAIS",B."FI_CANAL",B."FI_SUCURSAL",B."FI_FOLIO",B."TRATAMIENTOS",B."MOTIVOS",B."TARJETA",B."ESTATUS", E.NOMBRE_ESTADO, P.NOMBRE_CORTO AS PAIS, S.NOMBRE_SUCURSAL
FROM BITACORA B left join PAIS P ON (B.ID_PAIS = P.ID_PAIS)
left join SUCURSALES S ON (B.ID_PAIS = S.ID_PAIS AND B.FI_CANAL = S.ID_CANAL AND B.FI_SUCURSAL = S.ID_SUCURSAL)
left join ESTADO E ON (B.FI_PAIS = E.ID_PAIS AND S.ID_ESTADO = E.ID_ESTADO)
WHERE B.ACCION NOT LIKE '5%'
ORDER BY B.PRODUCTO, B.FECHA, B.HORA;


CREATE OR REPLACE VIEW VCALL_TRATAMIENTOS
AS 
SELECT A.DESCRIPCION_TRATAMIENTO, A.ID_TRATAMIENTO, C."FOLIO",C."AGENTE",C."SIGNO_CRITERIO",C."CRITERIO",C."MENSAJE",C."FECHA_INICIO",C."FECHA_FIN",C."LINK",C."NOMBRE_TRATAMIENTO",C."ID_PAIS",C."IMAGEN",C."BITACORA" FROM catalogo_tratamientos A, tratamientos_especiales C
WHERE A.NOMBRE_TRATAMIENTO = C.NOMBRE_TRATAMIENTO
ORDER BY A.DESCRIPCION_TRATAMIENTO, C.FECHA_INICIO;


CREATE OR REPLACE TRIGGER "TR_DEL_BITACORA_ADM" 
BEFORE DELETE ON BITACORA_ADM
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA BITACORA_ADM');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_BITACORA_CANC" 
BEFORE DELETE ON BITACORA_CANC
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA BITACORA_CANC');
END;
/
SHOW ERRORS;

ALTER TRIGGER TR_DEL_BITACORA_CANC DISABLE;


CREATE OR REPLACE TRIGGER "TR_DEL_BITACORA_CLIENTES" 
BEFORE DELETE ON BITACORA_CLIENTES
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA BITACORA_CLIENTES');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_BITACORA_CUENTAS" 
BEFORE DELETE ON BITACORA_CUENTAS
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA BITACORA_CUENTAS');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_BITACORA_TRATA" 
BEFORE DELETE ON BITACORA_TRATA
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA BITACORA_TRATA');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CANALES" 
BEFORE DELETE
ON CANALES
REFERENCING NEW AS NEW OLD AS OLD
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CANALES');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_ACCIONES" 
BEFORE DELETE ON CATALOGO_ACCIONES
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_ACCIONES');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_ACCIONES_ADM" 
BEFORE DELETE ON CATALOGO_ACCIONES_ADM
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_ACCIONES_ADM');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_ACCIONES_PROM" 
BEFORE DELETE ON CATALOGO_ACCIONES_PROMOCIONES
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_ACCIONES_PROMOCIONES');
END;
/
SHOW ERRORS;

ALTER TRIGGER TR_DEL_CATALOGO_ACCIONES_PROM DISABLE;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_ESTATUS" 
BEFORE DELETE ON CATALOGO_ESTATUS 
BEGIN
     RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_ESTATUS');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_MOTIVOS_BOL" 
BEFORE DELETE ON CATALOGO_MOTIVOS_BOLETINADOS
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_MOTIVOS_BOLETINADOS');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_MOTIVOS_CANC" 
BEFORE DELETE ON CATALOGO_MOTIVOS_CANC
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_MOTIVOS_CANC');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_PERFILES" 
BEFORE DELETE ON CATALOGO_PERFILES 
BEGIN 
	 raise_application_error( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_PERFILES'); 
END;
/
SHOW ERRORS;

ALTER TRIGGER TR_DEL_CATALOGO_PERFILES DISABLE;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_PRODUCTOS_TE" 
BEFORE DELETE ON CATALOGO_PRODUCTOS_TE
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA PRODUCTOS_TE');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_SUBPRODUCTOS" 
BEFORE DELETE ON CATALOGO_SUBPRODUCTOS
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_SUBPRODUCTOS');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_TARJETAS" 
BEFORE DELETE ON CATALOGO_TARJETAS
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_TARJETAS');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CATALOGO_TRATAMIENTOS" 
BEFORE DELETE ON CATALOGO_TRATAMIENTOS
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CATALOGO_TRATAMIENTOS');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CAT_IPS" 
BEFORE DELETE ON CAT_IPS
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CAT_IPS');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CAT_RESP_CANCEL" 
BEFORE DELETE ON CAT_RESP_CANCEL
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CAT_RESP_CANCEL');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_ESTADO" 
BEFORE DELETE ON ESTADO
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA ESTADO');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_INFORMACION" 
BEFORE DELETE ON INFORMACION
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA INFORMACION');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_LLAMADAS" 
BEFORE DELETE ON LLAMADAS
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA LLAMADAS');
END;
/
SHOW ERRORS;

ALTER TRIGGER TR_DEL_LLAMADAS DISABLE;


CREATE OR REPLACE TRIGGER "TR_DEL_LOGS_ENTRADA" 
BEFORE DELETE ON LOGS_ENTRADA
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA LOGS_ENTRADA');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_PAIS" 
BEFORE DELETE ON PAIS
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA PAIS');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_SCRIPT" 
BEFORE DELETE ON SCRIPT
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA SCRIPT');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_SUCURSALESBORRAR" 
BEFORE DELETE ON SUCURSALES
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA SUCURSALES_BORRAR');
END;
/
SHOW ERRORS;

ALTER TRIGGER TR_DEL_SUCURSALESBORRAR DISABLE;


CREATE OR REPLACE TRIGGER "TR_DEL_TRATAMIENTOS_ESP" 
BEFORE DELETE ON TRATAMIENTOS_ESPECIALES
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA TRATAMIENTOS_ESPECIALES');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_CAT_TARJETAS_MP00" 
BEFORE DELETE
ON CAT_TARJETAS_MP00 
REFERENCING NEW AS NEW OLD AS OLD
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA CAT_TARJETAS_MP00');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TR_DEL_BITACORA" 
BEFORE DELETE ON BITACORA
BEGIN
	 RAISE_APPLICATION_ERROR( -20502, 'NO SE PERMITE EL BORRADO DE REGISTROS DE LA TABLA BITACORA');
END;
/
SHOW ERRORS;

ALTER TRIGGER TR_DEL_BITACORA DISABLE;


CREATE OR REPLACE TRIGGER TR_INS_CONTRATOS_R15
BEFORE INSERT OR UPDATE
OF CONTRATOS_PERSONAS_FISICAS
  ,CONTRATOS_PERSONAS_MORALES
ON CONTRATOS_R15 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
    IF(LENGTH(:NEW.MES)<2) THEN        
            :NEW.MES:= CONCAT('0',:NEW.MES);
    END IF;
END TR_INS_CONTRATOS_R15;
/
SHOW ERRORS;

ALTER TRIGGER TR_INS_CONTRATOS_R15 DISABLE;


ALTER TABLE COMPRAMAX_ESTATUS ADD (
  PRIMARY KEY
 (IDESTATUS));

ALTER TABLE C_POBLACION ADD (
  CONSTRAINT CPK_POBLACION
 PRIMARY KEY
 (FIPOBID, FIEDOID, FIPAISID));

ALTER TABLE ENCUESTAEMAIL ADD (
  PRIMARY KEY
 (FOLIO));

ALTER TABLE ENCUESTATVAZTECATMK ADD (
  PRIMARY KEY
 (FOLIO));

ALTER TABLE ESTADO ADD (
  PRIMARY KEY
 (ID_PAIS, ID_ESTADO));

ALTER TABLE GRUPO_APLICACION ADD (
  PRIMARY KEY
 (ID_GRUPO, ID_APLICACION));

ALTER TABLE INFORMACION ADD (
  PRIMARY KEY
 (ID_PAIS));

ALTER TABLE LAZ_CANCELACIONTMK ADD (
  PRIMARY KEY
 (IDCANCELACION));

ALTER TABLE LAZ_CONSULTACLARACIONTMK ADD (
  PRIMARY KEY
 (IDCONSACLARACION));

ALTER TABLE LAZ_CONSULTAMOVIMIENTOTMK ADD (
  PRIMARY KEY
 (IDCONSULTAMOV));

ALTER TABLE LAZ_CONSULTASALDOTMK ADD (
  PRIMARY KEY
 (IDCONSULTASALDO));

ALTER TABLE LAZ_INFORMACIONTMK ADD (
  PRIMARY KEY
 (IDINFORMACION));

ALTER TABLE LAZ_OTROTMK ADD (
  PRIMARY KEY
 (IDOTRO));

ALTER TABLE LAZ_PERSONA ADD (
  CONSTRAINT PK_PERSONA
 PRIMARY KEY
 (IDPERSONA));

ALTER TABLE LAZ_QUEJATMK ADD (
  PRIMARY KEY
 (IDQUEJA));

ALTER TABLE LAZ_REGISTRAOPCIONTMK ADD (
  PRIMARY KEY
 (IDREGISTRAOPCION));

ALTER TABLE LAZ_TIPOLLAMADATMK ADD (
  PRIMARY KEY
 (IDTIPOLLAMADA));

ALTER TABLE LAZ_TIPOTMK ADD (
  PRIMARY KEY
 (IDTIPOUSUARIO, IDTIPOLLAMADA));

ALTER TABLE LAZ_TIPOUSUARIOTMK ADD (
  PRIMARY KEY
 (IDTIPOUSUARIO));

ALTER TABLE LLAMADAS ADD (
  PRIMARY KEY
 (ID, FECHA, AGENTE, ID_PAIS));

ALTER TABLE LOGS_ENTRADA ADD (
  PRIMARY KEY
 (AGENTE, FECHA, HORA, ID_PAIS));

ALTER TABLE PAIS ADD (
  PRIMARY KEY
 (ID_PAIS));

ALTER TABLE PERFIL_APLICACION ADD (
  PRIMARY KEY
 (ID_PERFIL, ID_APLICACION));

ALTER TABLE PERFIL_GRUPO ADD (
  PRIMARY KEY
 (ID_PERFIL, ID_GRUPO));

ALTER TABLE PROMOCIONES ADD (
  PRIMARY KEY
 (NOMBRE));

ALTER TABLE REPORTES ADD (
  PRIMARY KEY
 (ID_REPORTE));

ALTER TABLE SCRIPT ADD (
  PRIMARY KEY
 (ID_SCRIPT, ID_PAIS));

ALTER TABLE SUCURSALES ADD (
  PRIMARY KEY
 (ID_PAIS, ID_CANAL, ID_SUCURSAL));

ALTER TABLE TFOLIOS_CANCELACION ADD (
  CONSTRAINT CPK_TFOLIOS_CANCELACION
 PRIMARY KEY
 (FOLIO));

ALTER TABLE TRATAMIENTOS_ESPECIALES ADD (
  PRIMARY KEY
 (FOLIO, AGENTE));

ALTER TABLE AGENTE_ALNOVA ADD (
  PRIMARY KEY
 (AGENTE, ID_PAIS));

ALTER TABLE AGENTE_MOCTEZUMA ADD (
  PRIMARY KEY
 (IDAGENTE));

ALTER TABLE AGENTES ADD (
  PRIMARY KEY
 (AGENTE, ID_PAIS));

ALTER TABLE BITACORA ADD (
  PRIMARY KEY
 (AGENTE, ACCION, CUENTA, FECHA, HORA, ID_PAIS));

ALTER TABLE BITACORA_ADM ADD (
  PRIMARY KEY
 (ADMINISTRADOR, FECHA, HORA, ID_PAIS));

ALTER TABLE BITACORA_CANC ADD (
  PRIMARY KEY
 (FOLIO, AGENTE, ACCION, CUENTA, FECHA, HORA, ID_PAIS));

ALTER TABLE BITACORA_CLIENTES ADD (
  PRIMARY KEY
 (FOLIO, AGENTE));

ALTER TABLE BITACORA_CUENTAS ADD (
  PRIMARY KEY
 (FOLIO, AGENTE));

ALTER TABLE BOLETINADOS ADD (
  PRIMARY KEY
 (FOLIO, AGENTE));

ALTER TABLE CALLCENTER_MUNICIPIOS ADD (
  CONSTRAINT PK_CALLCENTER_MUNICIPIOS
 PRIMARY KEY
 (CITY_CODE));

ALTER TABLE CALLCENTER_SUCURSALES ADD (
  CONSTRAINT PK_CALLCENTER_SUCURSALES
 PRIMARY KEY
 (SUCURSAL));

ALTER TABLE CANALES ADD (
  PRIMARY KEY
 (ID_CANAL));

ALTER TABLE CANCELACIONES_XML ADD (
  CONSTRAINT CPK_CANCELACIONES_XML
 PRIMARY KEY
 (TARJETA, ULTIMA_MODIFICACION));

ALTER TABLE CAT_ACCIONES_VIP ADD (
  PRIMARY KEY
 (ID_ACCION));

ALTER TABLE CATALOGO_ACCIONES ADD (
  PRIMARY KEY
 (ID_ACCION));

ALTER TABLE CATALOGO_ACCIONES_ADM ADD (
  PRIMARY KEY
 (ID_ACCION_ADM));

ALTER TABLE CATALOGO_ACCIONES_PROMOCIONES ADD (
  PRIMARY KEY
 (ID_ACCION, ID_SUBACCION));

ALTER TABLE CATALOGO_APLICACIONES ADD (
  PRIMARY KEY
 (ID_APLICACION));

ALTER TABLE CATALOGO_ESTATUS ADD (
  PRIMARY KEY
 (ID_ESTATUS));

ALTER TABLE CATALOGO_GRUPO ADD (
  PRIMARY KEY
 (ID_GRUPO));

ALTER TABLE CATALOGO_MOTIVOS_BOLETINADOS ADD (
  PRIMARY KEY
 (ID_MOTIVO_BOLETINADO));

ALTER TABLE CATALOGO_MOTIVOS_CANC ADD (
  PRIMARY KEY
 (ID_MOTIVO));

ALTER TABLE CATALOGO_PERFILES ADD (
  CONSTRAINT PK_CATALOGO_PERFILES
 PRIMARY KEY
 (ID_PERFIL));

ALTER TABLE CATALOGO_PRODUCTOS_TE ADD (
  PRIMARY KEY
 (NOMBRE_PRODUCTO));

ALTER TABLE CATALOGO_SUBPRODUCTOS ADD (
  PRIMARY KEY
 (ID_PRODUCTO, ID_SUBPRODUCTO));

ALTER TABLE CATALOGO_TARJETAS ADD (
  PRIMARY KEY
 (ID_TARJETA));

ALTER TABLE CATALOGO_TRATAMIENTOS ADD (
  PRIMARY KEY
 (NOMBRE_TRATAMIENTO));

ALTER TABLE CAT_IPS ADD (
  PRIMARY KEY
 (IP));

ALTER TABLE CAT_TARJETAS_MP00 ADD (
  CONSTRAINT PK_CAT_TARJETAS_MP00
 PRIMARY KEY
 (NOMBRE));

ALTER TABLE CAT_TIPO_AUTENTICACION ADD (
  PRIMARY KEY
 (ID));

ALTER TABLE C_CODIGO_POSTAL ADD (
  CONSTRAINT CPK_CODIGO_POSTAL
 PRIMARY KEY
 (FCCTECP, FCCOLONIA, FIPOBID, FIEDOID, FIPAISID));

ALTER TABLE C_ESTADO ADD (
  CONSTRAINT CPK_ESTADO
 PRIMARY KEY
 (FIEDOID, FIPAISID));

ALTER TABLE C_ESTADO_CIVIL ADD (
  CONSTRAINT CPK_ESTADO_CIVIL
 PRIMARY KEY
 (FIESTCIVIL_NUM));

ALTER TABLE CLASIFICACION_REPORTES ADD (
  PRIMARY KEY
 (ID_CLASIFICACION));

ALTER TABLE CLIENTES ADD (
  PRIMARY KEY
 (CTE_ALNOVA, NOMBRE, A_PATERNO, A_MATERNO));

ALTER TABLE CLIENTES_VIP ADD (
  PRIMARY KEY
 (CLIENTE));

ALTER TABLE COMPRAMAX_BITACORA ADD (
  PRIMARY KEY
 (IDBITACORA));

ALTER TABLE STATUS_TARJETA ADD (
  PRIMARY KEY
 (ID_TARJETA, ID_ALNOVA));

ALTER TABLE SALDOS_LOG ADD (
  CONSTRAINT CPK_SALDOSLOG_PK
 PRIMARY KEY
 (ID));

ALTER TABLE ACTIVACION_TASA_LOG ADD (
  CONSTRAINT CPK_TASALOG_PK
 PRIMARY KEY
 (ID));

ALTER TABLE CONSULTAMOV_LOG ADD (
  CONSTRAINT CPK_CONSULTAMOVLOG_PK
 PRIMARY KEY
 (ID));

ALTER TABLE CONTRATOS_R15 ADD (
  CONSTRAINT CPK_CR15
 PRIMARY KEY
 (ANIO, MES, USUARIO_MODIFICO));

ALTER TABLE BIT_BIOM_TUTOR ADD (
  CONSTRAINT IDX_TUTOR_PK
 PRIMARY KEY
 (FOLIO));

ALTER TABLE CAT_CU_PROCTO ADD (
  CONSTRAINT CAT_CU_PROCTOPK
 PRIMARY KEY
 (ID_PRODUCTO));

ALTER TABLE CAT_CU_SBPROCTO ADD (
  CONSTRAINT CAT_CU_SBPRO_PK
 PRIMARY KEY
 (ID_PRODUCTO, ID_SUBPRODUCTO));

ALTER TABLE HIST_CLNT_BIOM ADD (
  CONSTRAINT HIST_CLTN_BIOM_PK
 PRIMARY KEY
 (CLIENTE_UNICO, ID_ALNOVA));

ALTER TABLE CLIENTE_BIOM ADD (
  CONSTRAINT IDX_CTEBIOM_PK
 PRIMARY KEY
 (FOLIO));

ALTER TABLE LIBERA_BIOM_SUP ADD (
  CONSTRAINT IDX_SUPBIOM_PK
 PRIMARY KEY
 (FOLIO));

ALTER TABLE BIT_BIOM_SUP ADD (
  CONSTRAINT IDX_FOL_BIT_PK
 PRIMARY KEY
 (FOLIO, PAIS_SOLICITANTE));

ALTER TABLE BENEF_BIOMTRICO ADD (
  CONSTRAINT IDX_BEFBIOM_PK
 PRIMARY KEY
 (FOLIO));

ALTER TABLE TOKENS_RSA ADD (
  CONSTRAINT TOKENS_RSA_PK
 PRIMARY KEY
 (SERIAL_NUMBER));

ALTER TABLE FOLIOBIOMETRICO ADD (
  CONSTRAINT IDX_FOLIO_BIOM
 PRIMARY KEY
 (FOLIO, PAIS_SOLICITANTE));

ALTER TABLE TOKENS_RSA_NUEVO ADD (
  CONSTRAINT TOKENSS_RSA_PK_1
 PRIMARY KEY
 (SERIAL_NUMBER));

ALTER TABLE BITACORA_BIOM ADD (
  CHECK ("ESTATUS" IS NOT NULL),
  CHECK ("FECHA_REGISTRO" IS NOT NULL),
  CHECK ("USUARIO_MODIFICO" IS NOT NULL),
  CONSTRAINT XPKM_BITACORA_B
 PRIMARY KEY
 (FOLIO, PAIS_SOLICITANTE, AGENTE, FECHA_MODIFICACION));

ALTER TABLE ESTADO ADD (
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE INFORMACION ADD (
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE LLAMADAS ADD (
  FOREIGN KEY (AGENTE, ID_PAIS) 
 REFERENCES AGENTES (AGENTE,ID_PAIS),
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE LOGS_ENTRADA ADD (
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE PROMOCIONES ADD (
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE REPORTES ADD (
  FOREIGN KEY (ID_CLASIFICACION) 
 REFERENCES CLASIFICACION_REPORTES (ID_CLASIFICACION));

ALTER TABLE SCRIPT ADD (
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE TRATAMIENTOS_ESPECIALES ADD (
  FOREIGN KEY (NOMBRE_TRATAMIENTO) 
 REFERENCES CATALOGO_TRATAMIENTOS (NOMBRE_TRATAMIENTO),
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE AGENTES ADD (
  FOREIGN KEY (ID_ESTATUS) 
 REFERENCES CATALOGO_ESTATUS (ID_ESTATUS),
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE BITACORA ADD (
  FOREIGN KEY (AGENTE, ID_PAIS) 
 REFERENCES AGENTES (AGENTE,ID_PAIS));

ALTER TABLE BITACORA_ADM ADD (
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE BITACORA_CANC ADD (
  FOREIGN KEY (AGENTE, ACCION, CUENTA, FECHA, HORA, ID_PAIS) 
 REFERENCES BITACORA (AGENTE,ACCION,CUENTA,FECHA,HORA,ID_PAIS),
  FOREIGN KEY (ID_MOTIVO) 
 REFERENCES CATALOGO_MOTIVOS_CANC (ID_MOTIVO) DISABLE);

ALTER TABLE BITACORA_CLIENTES ADD (
  FOREIGN KEY (ID_ACCION) 
 REFERENCES CATALOGO_ACCIONES (ID_ACCION),
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE BITACORA_CUENTAS ADD (
  FOREIGN KEY (ID_ACCION) 
 REFERENCES CATALOGO_ACCIONES (ID_ACCION),
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE BOLETINADOS ADD (
  FOREIGN KEY (ID_MOTIVO_BOLETINADO) 
 REFERENCES CATALOGO_MOTIVOS_BOLETINADOS (ID_MOTIVO_BOLETINADO),
  FOREIGN KEY (ID_PAIS) 
 REFERENCES PAIS (ID_PAIS));

ALTER TABLE CALLCENTER_SUCURSALES ADD (
  CONSTRAINT FK_MUNICIPIOS 
 FOREIGN KEY (CITY_CODE) 
 REFERENCES CALLCENTER_MUNICIPIOS (CITY_CODE));

ALTER TABLE CATALOGO_ACCIONES_PROMOCIONES ADD (
  FOREIGN KEY (ID_ACCION) 
 REFERENCES CATALOGO_ACCIONES (ID_ACCION));

ALTER TABLE CLIENTE_MOCTEZUMA ADD (
  FOREIGN KEY (IDAGENTE) 
 REFERENCES AGENTE_MOCTEZUMA (IDAGENTE)
    ON DELETE SET NULL);

ALTER TABLE COMPRAMAX_BITACORA ADD (
  FOREIGN KEY (IDESTATUS) 
 REFERENCES COMPRAMAX_ESTATUS (IDESTATUS));

ALTER TABLE CAT_CU_SBPROCTO ADD (
  FOREIGN KEY (ID_PRODUCTO) 
 REFERENCES CAT_CU_PROCTO (ID_PRODUCTO));

GRANT DELETE, INSERT, SELECT, UPDATE ON CONTRATOS_R15 TO INFOUSR;

GRANT DELETE, INSERT, SELECT, UPDATE ON TOAD_PLAN_TABLE TO PUBLIC;

