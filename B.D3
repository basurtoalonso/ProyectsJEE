--
-- Create Schema Script 
--   Database Version   : 9.2.0.1.0 
--   TOAD Version       : 9.1.0.62 
--   DB Connect String  : 10.50.70.125:1521/EBANKLAM 
--   Schema             : CARTCARD 
--   Script Created by  : CARTCARD 
--   Script Created at  : 08/01/2015 07:31:50 p.m. 
--   Physical Location  :  
--   Notes              :  
--

-- Object Counts: 
--   Functions: 42      Lines of Code: 1106 
--   Indexes: 193       Columns: 230        
--   Object Privileges: 187 
--   Packages: 10       Lines of Code: 969 
--   Package Bodies: 10 Lines of Code: 5059 
--   Procedures: 353    Lines of Code: 17245 
--   Sequences: 36 
--   Tables: 125        Columns: 1040       Constraints: 210    
--   Triggers: 1 
--   Types: 2 
--   Views: 8           


CREATE OR REPLACE type split_tbl as table of varchar2(32767);
/

SHOW ERRORS;


CREATE OR REPLACE TYPE t_varchar2_tab AS TABLE OF VARCHAR2(4000);
/

SHOW ERRORS;


CREATE SEQUENCE CANCELACIONES_SEQ
  START WITH 50
  MAXVALUE 99999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE CARTCARDID_SEQ
  START WITH 414
  MAXVALUE 9999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE HSTUSUARIOID_SEQ
  START WITH 1
  MAXVALUE 9999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_BXIS
  START WITH 5
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_FONDEOSWS
  START WITH 494
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_MEMBRECIAS
  START WITH 151
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_PREGUNTAS
  START WITH 451
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_SEQFACTURAS
  START WITH 402
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_SEQMEMBRECIAAPAGAR
  START WITH 590
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_SEQMERCANCIAUNLOAD
  START WITH 74
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_SEQTRACKINGMERC
  START WITH 44
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_SEQ_CAT_PERMISO
  START WITH 21
  MAXVALUE 9999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_DOCUMENTO
  START WITH 3379
  MAXVALUE 9999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_ENVIO_ESTAFETA
  START WITH 1125
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_FACTURA
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_GRUPO_ROL
  START WITH 21
  MAXVALUE 99999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_IMPORTES_ESTAFETA
  START WITH 1607
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_IMPORTES_IUPICARD
  START WITH 1995
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_MEMBRECIA
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_SEQ_MERCANCIA
  START WITH 1339
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_ROLES
  START WITH 21
  MAXVALUE 99999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_TA_USUARIO_ROL
  START WITH 122
  MAXVALUE 999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_TEST
  START WITH 3
  MAXVALUE 9999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_SEQ_TRACKING_MERCANCIA
  START WITH 3381
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SEQ_TX_CARDMARTE_UNLOAD
  START WITH 270
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE IC_SPEI_SEQ
  START WITH 7
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_TXCARDMARTE
  START WITH 415
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_TXCMLOAD
  START WITH 468
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE IC_VENTANILLA_SEQ
  START WITH 184
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE NUMEROACLARACION_SEQ
  START WITH 18
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE NUMLOTE_SEQ
  START WITH 2
  MAXVALUE 999999999999999999999999999
  MINVALUE 0
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE OPERACIONTIENDASEQ
  START WITH 2760
  MAXVALUE 99999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE OPERACIONVENTANILLASEQ
  START WITH 10627
  MAXVALUE 99999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE REFERENCIA_SEQ
  START WITH 1012003116
  MAXVALUE 9999999999999
  MINVALUE 1012000312
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE REPOSICION_SEQ
  START WITH 4
  MAXVALUE 99999999999999999
  MINVALUE 0
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE SEQUENCE USUARIOID_SEQ
  START WITH 7965
  MAXVALUE 99999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER;


CREATE TABLE ABONA_TARJETA_VIRTUAL
(
  TARJETAVIRTUALID  NUMBER(7)                   NOT NULL,
  NUMEROTARJETA     VARCHAR2(70 BYTE),
  TIPOTARJCREDID    NUMBER(3)                   NOT NULL,
  DIAEXPIRACION     NUMBER(2),
  MESEXPIRACION     NUMBER(2),
  CODIGOSEGURIDAD   NUMBER(3),
  NOMBRETITULAR     VARCHAR2(50 BYTE),
  APELLIDOTITULAR   VARCHAR2(50 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE BORRAME
(
  TOKEN  VARCHAR2(70 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE BORRAME2
(
  TOKEN  VARCHAR2(70 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE BORRAR
(
  ID_USUARIO      NUMBER,
  CONTRASENIANEW  VARCHAR2(50 BYTE),
  CONTRASENIAOLD  VARCHAR2(50 BYTE),
  FECHA           DATE,
  CODIGO          NUMBER,
  MSG             VARCHAR2(1000 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CARD
(
  CARTCARDID        NUMBER                      NOT NULL,
  USUARIOID         NUMBER                      NOT NULL,
  FECHAALTA         DATE,
  FECHAVENCIMIENTO  DATE,
  REFERENCIA        VARCHAR2(20 BYTE),
  BLOQUEO           NUMBER,
  FECHASYS          DATE,
  MEMBRECIAID       NUMBER                      NOT NULL,
  ESTADOCONSULTAIT  NUMBER(1)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CAT_ESTATUS_VENTA
(
  IDESTATUS            NUMBER                   NOT NULL,
  DESCRIPCION          VARCHAR2(100 BYTE)       NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        DEFAULT 'CORE'                NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE               NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CAT_OPERACIONFONDEOS
(
  MENSAJEOPERACIONID   NUMBER                   NOT NULL,
  DESCRIPOPERACION     VARCHAR2(100 BYTE)       NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        DEFAULT 'CORE'                NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE               NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CAT_STATUS_TARJETA
(
  ID_STATUS_TARJETA  INTEGER                    NOT NULL,
  ABREVIACION        VARCHAR2(20 BYTE),
  MENSAJE            VARCHAR2(30 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_CANCELACIONES
(
  IDREGISTRO          NUMBER(6)                 NOT NULL,
  CARTCARDID          NUMBER,
  USUARIOID           NUMBER,
  FECHASOLICITUDUSR   DATE,
  ESTADODECUENTAID    NUMBER,
  FECHAAUTORIZAADMIN  DATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_COSTOFLETEPORKG
(
  IDREGISTRO  NUMBER(2)                         NOT NULL,
  PESOKG      FLOAT(126),
  COSTOFLETE  FLOAT(126)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_DOCUMENTOSUSR
(
  IDDOCUMENTO      NUMBER(2)                    NOT NULL,
  USUARIOID        NUMBER                       NOT NULL,
  DOCUMENTO        BLOB,
  IDTIPODOCUMENTO  NUMBER(2),
  DOCACEPTADO      NUMBER(1),
  NOMBREDOCUMENTO  VARCHAR2(40 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_ESTATUSACLARACION
(
  ESTATUSACLARACION  NUMBER(2)                  NOT NULL,
  DESCESTATUS        VARCHAR2(40 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_ESTATUSDOCUMENTO
(
  DOCACEPTADO  NUMBER(1)                        NOT NULL,
  DESCRIPCION  VARCHAR2(40 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_ESTATUSIDENTIDAD
(
  IDENTIDADVALIDADA  NUMBER(1)                  NOT NULL,
  DESCRIPCION        VARCHAR2(40 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_RENOVACIONES
(
  NUMERORENOVACION       NUMBER(7)              NOT NULL,
  CARTCARDID             NUMBER,
  USUARIOID              NUMBER,
  FECHAVIGENCIAANTERIOR  DATE,
  FECHAVIGENCIARENUEVA   DATE,
  FECHADESBLOQUEO        DATE,
  MEMBRECIAID            NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_REPOSICIONES
(
  IDREGISTRO         NUMBER(6)                  NOT NULL,
  CARTCARDIDCANCELA  NUMBER,
  CARTCARDIDREPONE   NUMBER,
  USUARIOID          NUMBER,
  FECHAREGISTRO      DATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_RSPACLARACION
(
  NUMERORESPUESTA   NUMBER(3)                   NOT NULL,
  NUMEROACLARACION  NUMBER(4)                   NOT NULL,
  USUARIOID         NUMBER                      NOT NULL,
  FECHARESPUESTA    DATE,
  ASUNTO            VARCHAR2(60 BYTE),
  RESPUESTA         CLOB,
  NUMEROREGISTRO    NUMBER(2)                   NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_SITIOSFAVORITOS
(
  NUMSITIOUSUARIO   NUMBER(2)                   NOT NULL,
  USUARIOID         NUMBER                      NOT NULL,
  DESCRIPCIONCORTA  VARCHAR2(60 BYTE),
  URLFAVORITO       VARCHAR2(150 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_SLCACLARACION
(
  NUMEROACLARACION   NUMBER(4)                  NOT NULL,
  USUARIOID          NUMBER                     NOT NULL,
  FECHASOLICITUD     DATE,
  ASUNTO             VARCHAR2(60 BYTE),
  COMENTARIO         CLOB,
  ESTATUSACLARACION  NUMBER(2),
  NUMEROREGISTRO     NUMBER(2)                  NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_SOLICITUDPLASTICO
(
  NUMEROSOLICITUD         NUMBER(7)             NOT NULL,
  CARTCARDID              NUMBER,
  USUARIOID               NUMBER,
  FECHASOLICITUD          DATE,
  ESTADODECUENTAID        NUMBER,
  FECHAAUTORIZAIMPRESION  DATE,
  DIRECCIONENVIO          VARCHAR2(220 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_TARJETASEXPIRADAS
(
  IDREGISTROTE   NUMBER(7)                      NOT NULL,
  CARTCARDID     NUMBER,
  USUARIOID      NUMBER,
  FECHAVIGENCIA  DATE,
  FECHABLOQUEO   DATE,
  MEMBRECIAID    NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_TIPODOCUMENTO
(
  IDTIPODOCUMENTO  NUMBER(2)                    NOT NULL,
  DESCRIPCION      VARCHAR2(60 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CC_TIPOPRODUCTO
(
  IDTIPOPRODUCTO      NUMBER(2)                 NOT NULL,
  DESCCORTA           VARCHAR2(32 BYTE),
  DESCLARGA           VARCHAR2(60 BYTE),
  PORCENTAJEIMPUESTO  NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CLIENTE_TELEFONOS
(
  CTE_CLI_ID       INTEGER                      NOT NULL,
  CTE_DESCRIPCION  VARCHAR2(25 BYTE)            NOT NULL,
  CTE_LADA         CHAR(5 BYTE),
  CTE_TELEFONO     VARCHAR2(15 BYTE),
  CTE_EXTENSION    CHAR(5 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CONNECTION
(
  ID                 NUMBER(20)                 NOT NULL,
  ACCOUNTID          VARCHAR2(255 BYTE)         DEFAULT ('')                  NOT NULL,
  PROVIDERID         VARCHAR2(255 BYTE)         DEFAULT ''                    NOT NULL,
  ACCESSTOKEN        VARCHAR2(255 BYTE)         DEFAULT ''                    NOT NULL,
  SECRET             VARCHAR2(255 BYTE)         DEFAULT NULL,
  REFRESHTOKEN       VARCHAR2(255 BYTE)         DEFAULT NULL,
  PROVIDERACCOUNTID  VARCHAR2(255 BYTE)         DEFAULT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE CONSTANTES
(
  ID_CONSTANTES   VARCHAR2(32 BYTE)             NOT NULL,
  DESCRIPCION     VARCHAR2(60 BYTE),
  TIPO_VALOR      CHAR(1 BYTE),
  VALOR_ENTERO    NUMBER(22),
  VALOR_DECIMAL   NUMBER(10,4),
  VALOR_FECHA     DATE,
  VALOR_CARACTER  VARCHAR2(1000 BYTE),
  VALOR_IMAGEN    BLOB,
  USUARIO         VARCHAR2(15 BYTE),
  FECHA_REGISTRO  DATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ESTADO
(
  PAISID             NUMBER(3)                  NOT NULL,
  ESTADOID           NUMBER(3)                  NOT NULL,
  NOMBREESTADO       VARCHAR2(50 BYTE),
  ESTADOIDCARDMARTE  NUMBER(3)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ESTADODECUENTA
(
  ESTADODECUENTAID  NUMBER                      NOT NULL,
  DESCRIPCION       VARCHAR2(50 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE HSTUSUARIO
(
  HSTUSUARIOID          NUMBER                  NOT NULL,
  CONSECUTIVO           NUMBER                  NOT NULL,
  NOMBRE                VARCHAR2(30 BYTE),
  APATERNO              VARCHAR2(30 BYTE),
  AMATERNO              VARCHAR2(30 BYTE),
  CALLE                 CHAR(80 BYTE),
  COLONIA               VARCHAR2(50 BYTE),
  CIUDAD                VARCHAR2(50 BYTE),
  CODIGOPOSTAL          VARCHAR2(5 BYTE),
  TELEFONO              VARCHAR2(30 BYTE),
  FAX                   VARCHAR2(30 BYTE),
  MAIL                  VARCHAR2(50 BYTE),
  IDENTIFICACIONID      NUMBER,
  ESTADOID              NUMBER,
  MUNICIPIOID           NUMBER,
  PAISID                NUMBER(3),
  NUMEROIDENTIFICACION  VARCHAR2(30 BYTE),
  FECHASYS              DATE,
  CELULAR               VARCHAR2(30 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE H_T_P_ACTIVADAS
(
  ID_H_T_P_ACTIVADAS   NUMBER                   NOT NULL,
  CARDNUMBER           VARCHAR2(64 BYTE),
  ACTUALCARDNUMBER     VARCHAR2(44 BYTE),
  FECHAVENCIMIENTO     VARCHAR2(10 BYTE),
  REFERENCIA           VARCHAR2(20 BYTE),
  IDSUITE              VARCHAR2(10 BYTE),
  NUMLOTE_MATERIALES   VARCHAR2(10 BYTE),
  NUMLOTE_CARDMARTE    VARCHAR2(10 BYTE),
  CVV2                 VARCHAR2(10 BYTE),
  ID_ESTATUS_VENTA     NUMBER,
  USUARIOID            NUMBER,
  CARTCARDID           NUMBER,
  NOMBREUSUARIO        VARCHAR2(30 BYTE),
  IDTIENDA             VARCHAR2(5 BYTE),
  FOLIO                VARCHAR2(40 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        DEFAULT 'CORE'                NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE               NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_APLIC
(
  IDAPLICACION         NUMBER(5)                NOT NULL,
  DESCRIPCION          VARCHAR2(50 BYTE),
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_CAT_BANCO
(
  CODIGO               VARCHAR2(5 BYTE)         NOT NULL,
  NOMBRE               VARCHAR2(50 BYTE),
  CLAVE_BANXICO        VARCHAR2(10 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_CAT_OPERACION
(
  CODIGOOPERACION      VARCHAR2(20 BYTE)        NOT NULL,
  DESCRIPCION          VARCHAR2(80 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_CAT_TIPO_BLOQUEO
(
  ESTATUS_BLOQUEO      VARCHAR2(2 BYTE)         NOT NULL,
  DESCRIPCION          VARCHAR2(50 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_CC_TARJETASEXPIRADAS
(
  ID_REGISTROTE      NUMBER(7),
  REFERENCIA         VARCHAR2(11 BYTE),
  ID_USUARIO         NUMBER,
  FECHA_VIGENCIA     DATE,
  FECHA_BLOQUEO      DATE,
  ID_TIPO_MEMBRESIA  NUMBER(1)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_CLIENTES
(
  ID_USUARIO              NUMBER                NOT NULL,
  NOMBRE                  VARCHAR2(30 BYTE),
  APATERNO                VARCHAR2(30 BYTE),
  AMATERNO                VARCHAR2(30 BYTE),
  NOMBRE_USUARIO          VARCHAR2(51 BYTE),
  CONTRASENIA             VARCHAR2(50 BYTE),
  CORREO_ELECTRONICO      VARCHAR2(50 BYTE),
  CP                      VARCHAR2(5 BYTE),
  CIUDAD                  VARCHAR2(40 BYTE),
  COLONIA                 VARCHAR2(50 BYTE),
  ID_MUNICIPIO            NUMBER,
  ID_ESTADO               NUMBER,
  ID_PAIS                 NUMBER,
  CALLE                   VARCHAR2(80 BYTE),
  NUM_EXT                 VARCHAR2(30 BYTE),
  NUM_INT                 VARCHAR2(30 BYTE),
  TELEFONO                VARCHAR2(30 BYTE),
  CELULAR                 VARCHAR2(30 BYTE),
  FECHA_NACIMIENTO        DATE,
  ID_TIPO_IDENTIFICACION  NUMBER,
  NUMERO_IDENTIFICACION   VARCHAR2(30 BYTE),
  TIPO_CLIENTE            VARCHAR2(1 BYTE),
  B_LDAP                  VARCHAR2(1 BYTE),
  ESTATUS                 VARCHAR2(2 BYTE),
  FECHA_CREACION          DATE,
  USUARIO_MODIFICO        VARCHAR2(30 BYTE)     NOT NULL,
  ULTIMA_MODIFICACION     DATE                  NOT NULL,
  CANAL                   VARCHAR2(15 BYTE),
  TELEFONO_OFICINA        VARCHAR2(30 BYTE),
  EXTENSION               VARCHAR2(6 BYTE),
  BANDERA_LOGIN           VARCHAR2(10 BYTE)     DEFAULT '0',
  FONDEO_DIA              NUMBER                DEFAULT 0,
  FONDEO_SEMANA           NUMBER                DEFAULT 0,
  FONDEO_MES              NUMBER                DEFAULT 0,
  ULTIMO_FONDEO           DATE                  DEFAULT SYSDATE,
  MES_ACTUAL              DATE                  DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_CONTRATO
(
  REFERENCIA           VARCHAR2(11 BYTE)        NOT NULL,
  ID_USUARIO           NUMBER,
  ENTIDAD              VARCHAR2(4 BYTE),
  SUCURSAL             VARCHAR2(20 BYTE),
  SUITE                VARCHAR2(10 BYTE),
  ESTATUS              VARCHAR2(1 BYTE),
  FECHA_ALTA           DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  SALDO                NUMBER(16,2)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_CP
(
  CODIGOPOSTAL         VARCHAR2(5 BYTE)         NOT NULL,
  ASENTAMIENTO         VARCHAR2(100 BYTE)       NOT NULL,
  TIPO_ASENTAMIENTO    VARCHAR2(30 BYTE)        NOT NULL,
  ID_MUNICIPIO         NUMBER                   NOT NULL,
  ID_ESTADO            NUMBER                   NOT NULL,
  ID_PAIS              NUMBER                   NOT NULL,
  CIUDAD               VARCHAR2(50 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_FUNCION
(
  IDFUNCION            NUMBER(10)               NOT NULL,
  DESCRIPCION          VARCHAR2(50 BYTE),
  IDGPOPFIL            NUMBER(5),
  IDPADRE              NUMBER(10),
  POSICION             NUMBER(10),
  ICONO                VARCHAR2(200 BYTE),
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  URL                  VARCHAR2(200 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_GPOPERFIL
(
  IDGPOPFIL            NUMBER(5)                NOT NULL,
  IDAPLICACION         NUMBER(5),
  IDGRUPO              NUMBER(5),
  IDPERFIL             NUMBER(5),
  PRIVILEGIOS          VARCHAR2(20 BYTE),
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_GRUPO
(
  IDGRUPO              NUMBER(5)                NOT NULL,
  DESCRIPCION          VARCHAR2(50 BYTE),
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_MOVIMIENTOS
(
  ID_MOVIMIENTO        NUMBER(10)               NOT NULL,
  REFERENCIA           VARCHAR2(11 BYTE)        NOT NULL,
  ENTIDAD              VARCHAR2(4 BYTE),
  ID_CANAL             NUMBER,
  ID_TIPO_PAGO         NUMBER,
  ID_TIPO_SERVICIO     INTEGER,
  OPERACIONID          NUMBER,
  TIPO_CAMBIO          FLOAT(126),
  IMPORTE_MX           FLOAT(126),
  IMPORTE_DLS          FLOAT(126),
  COMISION_DLS         FLOAT(126),
  FECHA_APLICACION     DATE,
  TRANSACCION          VARCHAR2(20 BYTE),
  USUARIO              VARCHAR2(100 BYTE),
  SUCURSAL             VARCHAR2(20 BYTE),
  OPERADOR             VARCHAR2(20 BYTE),
  DESCRIPCION          VARCHAR2(255 BYTE),
  NUM_CTA_CARGO        VARCHAR2(20 BYTE),
  TITULA_CTA_CARGO     VARCHAR2(40 BYTE),
  NUM_CTA_ABONO        VARCHAR2(20 BYTE),
  TITULA_CTA_ABONO     VARCHAR2(40 BYTE),
  INSTITUCION_EMISORA  VARCHAR2(20 BYTE),
  ESTATUS_ANN          VARCHAR2(20 BYTE),
  IP_ADDRESS           VARCHAR2(20 BYTE),
  TERMINAL             VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_OPERACIONES
(
  FECHA                TIMESTAMP(6)             NOT NULL,
  TERMINAL             VARCHAR2(20 BYTE),
  ENTIDAD              VARCHAR2(4 BYTE),
  ID_CANAL             NUMBER,
  USUARIO              VARCHAR2(100 BYTE),
  SUCURSAL             VARCHAR2(20 BYTE),
  OPERACIONID          NUMBER,
  CODIGOOPERACION      VARCHAR2(20 BYTE),
  MSGOPERACION         VARCHAR2(80 BYTE),
  CODIGOERROR          VARCHAR2(20 BYTE),
  MSGERROR             VARCHAR2(80 BYTE),
  DESCRIPCION          VARCHAR2(255 BYTE),
  ENTRADA              VARCHAR2(2000 BYTE),
  SALIDA               VARCHAR2(2000 BYTE),
  TIEMPO_RESP          VARCHAR2(8 BYTE),
  REFERENCIA           VARCHAR2(11 BYTE),
  IMPORTE              FLOAT(126),
  FECHAOPERACION       DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_OPERACIONES_HISTORICO
(
  FECHA                TIMESTAMP(6)             NOT NULL,
  TERMINAL             VARCHAR2(20 BYTE),
  ENTIDAD              VARCHAR2(4 BYTE),
  ID_CANAL             NUMBER,
  USUARIO              VARCHAR2(100 BYTE),
  SUCURSAL             VARCHAR2(20 BYTE),
  OPERACIONID          NUMBER,
  CODIGOOPERACION      VARCHAR2(20 BYTE),
  MSGOPERACION         VARCHAR2(80 BYTE),
  CODIGOERROR          VARCHAR2(20 BYTE),
  MSGERROR             VARCHAR2(80 BYTE),
  DESCRIPCION          VARCHAR2(255 BYTE),
  ENTRADA              VARCHAR2(2000 BYTE),
  SALIDA               VARCHAR2(2000 BYTE),
  TIEMPO_RESP          VARCHAR2(8 BYTE),
  REFERENCIA           VARCHAR2(11 BYTE),
  IMPORTE              FLOAT(126),
  FECHAOPERACION       DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_PERFIL
(
  IDPERFIL             NUMBER(5)                NOT NULL,
  DESCRIPCION          VARCHAR2(50 BYTE),
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_PERMISO
(
  IDPERMISO            NUMBER(5)                NOT NULL,
  DESCRIPCION          VARCHAR2(50 BYTE),
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_TARJETA
(
  REFERENCIA           VARCHAR2(11 BYTE)        NOT NULL,
  CARDNUMBER           VARCHAR2(70 BYTE),
  PTERMINALCODE        VARCHAR2(30 BYTE),
  PRODUCTCODE          NUMBER(15),
  PID                  VARCHAR2(30 BYTE),
  PIDTYPE              NUMBER(2),
  PRBSERVICE           VARCHAR2(20 BYTE),
  PDATEOFBIRTH         VARCHAR2(8 BYTE),
  PEMBOSSEDNAME        VARCHAR2(100 BYTE),
  PTELEPHONEAREACODE   NUMBER(4),
  PTELEPHONE           VARCHAR2(12 BYTE),
  PFAXAREACODE         NUMBER(4),
  PFAXPHONE            VARCHAR2(20 BYTE),
  PCELLPHONE           VARCHAR2(20 BYTE),
  PCELLPHONEAREACODE   NUMBER(4),
  PIDEXPIRATION        NUMBER(10),
  PIDCOUNTRY           NUMBER(4),
  PIDSTATE             NUMBER(3),
  PLASTNAME            VARCHAR2(40 BYTE),
  PPERSONALTITLE       VARCHAR2(50 BYTE),
  PMAINDENNAME         VARCHAR2(40 BYTE),
  PMIDDLENAME          VARCHAR2(40 BYTE),
  PFIRSTNAME           VARCHAR2(40 BYTE),
  PCOUNTRY             NUMBER(4),
  PSTATE               NUMBER(3),
  PCITY                VARCHAR2(40 BYTE),
  PADDRESS             VARCHAR2(85 BYTE),
  PZIPCODE             NUMBER(7),
  PEMAIL               VARCHAR2(70 BYTE),
  REQUESTID            NUMBER(8),
  OPERATIONID          NUMBER(8),
  TOKEN                VARCHAR2(70 BYTE),
  EXPIRATIONDATE       DATE,
  VERIFICATIONCODE     VARCHAR2(35 BYTE),
  ID_TIPO_MEMBRESIA    NUMBER(1),
  ID_EMISOR            NUMBER(1),
  ID_STATUS_TARJETA    NUMBER(1),
  CVV                  VARCHAR2(35 BYTE),
  TIPO_TARJETA         VARCHAR2(2 BYTE),
  ESTATUS_BLOQUEO      VARCHAR2(2 BYTE),
  FECHA_MEMBRECIA      DATE,
  FECHA_CREACION       DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_TARJETA_COMPLEMENTO
(
  REFERENCIA           VARCHAR2(11 BYTE)        NOT NULL,
  CARDNUMBER           VARCHAR2(70 BYTE)        NOT NULL,
  CARDNAME             VARCHAR2(100 BYTE),
  NOMBRE_REMESA        VARCHAR2(80 BYTE),
  ID_ESTATUS           NUMBER(1)                NOT NULL,
  COMENTARIO           VARCHAR2(100 BYTE),
  FECHA_CREACION       DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL,
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  FECHA_VIGENCIA       DATE,
  FECHA_BLOQUEO        DATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_USR_ROL
(
  IDUSUARIO            NUMBER(10)               NOT NULL,
  IDFUNCION            NUMBER(10)               NOT NULL,
  IDPERMISO            NUMBER(5)                NOT NULL,
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE ICN_USUARIO_ROL
(
  IDUSUARIO            NUMBER(10)               NOT NULL,
  IDFUNCION            NUMBER(10)               NOT NULL,
  IDPERMISO            NUMBER(5)                NOT NULL,
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_BXI
(
  ID_BXI               INTEGER                  NOT NULL,
  ID_FONDEO            INTEGER,
  USUARIO_WEB          INTEGER,
  SUCURSAL_WEB         INTEGER,
  IP_ADDRESS           VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_CANAL
(
  ID_CANAL             INTEGER                  NOT NULL,
  DESCRIPCION          VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_DOCUMENTO
(
  ID_TIPO_DOCUMENTO   INTEGER                   NOT NULL,
  DESCRIPCION         VARCHAR2(60 BYTE),
  USUARIO_MODIFICO    VARCHAR2(60 BYTE),
  FECHA_MODIFICACION  DATE                      DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_EMISOR_TARJETA
(
  ID_EMISOR            INTEGER                  NOT NULL,
  DESCRIPCION          VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_GRUPO_ROLES
(
  ID                   INTEGER                  NOT NULL,
  NOMBRE_GRUP_ROL      VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_PERMISO
(
  ID_PERMISO           INTEGER                  NOT NULL,
  DESCRIPCION          VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_PREGUNTA_SECRETA
(
  ID_PREGUNTA_SECRETA  INTEGER                  NOT NULL,
  PREGUNTA             VARCHAR2(100 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  FECHA_MODIFICACION   DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_PROV_ALMACENAMIENTO
(
  ID_PROVEEDOR         INTEGER                  NOT NULL,
  NOMBRE               VARCHAR2(30 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_ROLES
(
  ID_ROLES             INTEGER                  NOT NULL,
  ID_GRUP_ROL          INTEGER,
  ID_PERMISO           INTEGER,
  NOMBRE_ROL           VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_STATUS
(
  ID_STATUS            INTEGER                  NOT NULL,
  DESCRIPCION          CHAR(30 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_STATUS_CUENTA
(
  ID_STATUS_CUENTA     INTEGER                  NOT NULL,
  CODIGO               VARCHAR2(20 BYTE),
  DESCRIPCION          VARCHAR2(50 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_STATUS_FACTURA
(
  ID_STATUS    INTEGER                          NOT NULL,
  DESCRIPCION  VARCHAR2(20 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_STATUS_TARJETA
(
  ID_STATUS_TARJETA    INTEGER                  NOT NULL,
  CODIGO               VARCHAR2(20 BYTE),
  MENSAJE              VARCHAR2(30 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_TIPO_IDENTIFICACION
(
  ID_TIPO_IDENTIFICACION  INTEGER               NOT NULL,
  DESCRIPCION             VARCHAR2(60 BYTE),
  USUARIO_MODIFICO        VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION     DATE                  DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_TIPO_MEMBRESIA
(
  ID_TIPO_MEMBRESIA    INTEGER                  NOT NULL,
  DESCRIPCION          VARCHAR2(20 BYTE),
  COSTO                FLOAT(126),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE,
  DURACION             NUMBER(10)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_TIPO_PAGO
(
  ID_TIPO_PAGO         INTEGER                  NOT NULL,
  DESCRIPCION          VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_CAT_TIPO_SERVICIO
(
  ID_TIPO_SERVICIO     INTEGER                  NOT NULL,
  DESCRIPCION          VARCHAR2(30 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_DOCUMENTO
(
  ID_DOCUMENTO        INTEGER                   NOT NULL,
  USUARIOID           INTEGER,
  ID_TIPO_DOCUMENTO   INTEGER,
  NOMBRE_ARCHIVO      VARCHAR2(100 BYTE),
  DOCUMENTO           BLOB,
  ESTATUS             VARCHAR2(1 BYTE),
  COMENTARIO          VARCHAR2(255 BYTE),
  USUARIO_MODIFICO    VARCHAR2(60 BYTE),
  FECHA_REGISTRO      DATE,
  FECHA_MODIFICACION  DATE                      DEFAULT SYSDATE,
  TIPO_ARCHIVO        VARCHAR2(50 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_ENVIO_ESTAFETA
(
  ID_ESTAFETA             INTEGER               NOT NULL,
  ID_MERCANCIA            INTEGER,
  ID_PAIS                 INTEGER,
  ID_ESTADO               INTEGER,
  ID_MUNICIPIO            INTEGER,
  NOMBRE_DESTINATARIO     VARCHAR2(100 BYTE),
  APELLIDOS_DESTINATARIO  VARCHAR2(100 BYTE),
  CALLE                   VARCHAR2(50 BYTE),
  NUMERO_EXTERIOR         VARCHAR2(20 BYTE),
  NUMERO_INTERIOR         VARCHAR2(20 BYTE),
  COLONIA                 VARCHAR2(50 BYTE),
  CP                      VARCHAR2(20 BYTE),
  TELEFONO                VARCHAR2(20 BYTE),
  ACCION                  VARCHAR2(20 BYTE),
  RESULTADO               VARCHAR2(100 BYTE),
  MENSAJE                 VARCHAR2(100 BYTE),
  GUIAESTAFETA            VARCHAR2(100 BYTE),
  FECHA_ENVIO             DATE,
  USUARIO_MODIFICO        VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION     DATE                  DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_ESTADO
(
  ID_ESTADO            INTEGER                  NOT NULL,
  ID_PAIS              INTEGER                  NOT NULL,
  NOMBRE_ESTADO        VARCHAR2(50 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_FACTURA
(
  ID_FACTURA           INTEGER                  NOT NULL,
  ID_MERCANCIA         INTEGER,
  DOCUMENTO            BLOB,
  FECHA_REGISTRO       DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE,
  SRCIMAGEN            VARCHAR2(128 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_FONDEOS_WS
(
  ID_FONDEO             INTEGER                 NOT NULL,
  ID_TIPO_PAGO          INTEGER,
  ID_TARJETA            INTEGER,
  STATUS_FONDEO         VARCHAR2(20 BYTE),
  ID_CANAL              INTEGER,
  REFERENCIA            VARCHAR2(20 BYTE),
  MONTO_RECIBIDO_DLS    FLOAT(126),
  TIPO_CAMBIO_MX        FLOAT(126),
  COMISION_OPE_DLS      FLOAT(126),
  MONTO_RECIBIDO_MX     FLOAT(126),
  PAGO_CARDMARTE_DLS    FLOAT(126),
  FECHA_SOLICITUD_OPE   DATE,
  FECHA_APLICACION_OPE  DATE,
  USUARIO_DEPOSITANTE   VARCHAR2(100 BYTE),
  MONTO_FONDEADO_DLS    FLOAT(126),
  USUARIO_MODIFICO      VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION   DATE                    DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_IMPORTES_ESTAFETA
(
  ID_IMPORTE_EST                 INTEGER        NOT NULL,
  ID_TIPO_SERVICIO               INTEGER,
  ID_MERCANCIA                   INTEGER,
  IMPORTE_MANEJO                 NUMBER,
  IMPORTE_SOBREPESO              NUMBER,
  IMPORTE_GDEVOLUCION            NUMBER,
  IMPORTE_SEGURO                 NUMBER,
  IMPORTE_IMPUESTOS_IMPORTACION  NUMBER,
  TOTAL_APAGAR                   NUMBER,
  FECHA_NOTIFICACION             DATE,
  USUARIO_MODIFICO               VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION            DATE           DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_IMPORTES_IUPICARD
(
  ID_IMPORTE_IC              CHAR(18 BYTE)      NOT NULL,
  ID_MERCANCIA               INTEGER,
  ID_TIPO_SERVICIO           INTEGER,
  IMPORTE_MANEJO_IUPI        NUMBER(8,2),
  IMPORTE_KG_ADICIONAL       NUMBER(8,2),
  IMPORTE_ENVIO              NUMBER(8,2),
  IMPORTE_ALMACENAMIENTO_EX  NUMBER(8,2),
  IMPORTE_SEGURO             NUMBER(8,2),
  TOTAL_PAGAR                NUMBER(8,2),
  FECHA_PAGO                 DATE,
  USUARIO_MODIFICO           VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION        DATE               DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_MEMBRECIAS_PORPAGAR
(
  ID_MEMBRECIA         INTEGER                  NOT NULL,
  ID_USUARIO           INTEGER,
  ID_TIPO_MEMBRECIA    INTEGER,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_MEMBRECIA_UNLOAD
(
  ID_MEMBRECIA_UNLOAD  INTEGER                  NOT NULL,
  ID_MEMBRESIA         INTEGER,
  ID_UNLOAD            INTEGER,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_MEMBRESIAS
(
  ID_MEMBRESIA         INTEGER                  NOT NULL,
  ID_TARJETA           INTEGER,
  ID_TIPO_MEMBRESIA    INTEGER,
  FECHA_EMISION        DATE,
  FECHA_EXPIRACION     DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_MERCANCIA
(
  ID_MERCANCIA           INTEGER                NOT NULL,
  FOLIO                  VARCHAR2(14 BYTE),
  NOMBRE                 VARCHAR2(60 BYTE),
  DESCRIPCION            VARCHAR2(64 BYTE),
  COSTO                  NUMBER,
  PESO                   NUMBER,
  PROVEEDOR              VARCHAR2(32 BYTE),
  TIEMPO_ALMACENAMIENTO  NUMBER,
  FECHA_REGISTRO         DATE,
  ID_STATUS_FACTURA      INTEGER,
  SOBREPESO              NUMBER,
  USUARIO_MODIFICO       VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION    DATE                   DEFAULT SYSDATE,
  SRCIMAGEN              VARCHAR2(128 BYTE),
  IMAGEN                 BLOB,
  ID_SUITE               VARCHAR2(10 BYTE),
  ID_STATUS_MERCANCIA    INTEGER
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_MERCANCIAS_UNLOAD
(
  ID_MERCANCIA_UNLOAD  INTEGER                  NOT NULL,
  ID_UNLOAD            INTEGER,
  ID_MERCANCIA         INTEGER,
  STATUS_PAGO          INTEGER,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_MUNICIPIO
(
  ID_MUNICIPIO         INTEGER                  NOT NULL,
  ID_ESTADO            INTEGER                  NOT NULL,
  ID_PAIS              INTEGER                  NOT NULL,
  NOMBRE_MUNICIPIO     VARCHAR2(100 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_PAIS
(
  ID_PAIS              INTEGER                  NOT NULL,
  NOMBRE_PAIS          VARCHAR2(30 BYTE),
  CLAVE_TEL            NUMBER,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_PREGUNTAS_USUARIO
(
  ID_PREGUNTA_USUARIO  INTEGER                  NOT NULL,
  ID_USUARIO           INTEGER,
  ID_PREGUNTA_SECRETA  INTEGER,
  RESPUESTA            VARCHAR2(100 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_SPEI
(
  ID_SPEI              INTEGER                  NOT NULL,
  ID_OPERACION         NUMBER,
  ID_FONDEO            INTEGER,
  REFERENCIA           VARCHAR2(20 BYTE),
  FECHA_OPERACION      DATE,
  NUM_CTA_CARGO        VARCHAR2(20 BYTE),
  TITULA_CTA_CARGO     VARCHAR2(40 BYTE),
  NUM_CTA_ABONO        VARCHAR2(20 BYTE),
  TITULA_CTA_ABONO     VARCHAR2(40 BYTE),
  MONTO_MX             FLOAT(126),
  HORA                 VARCHAR2(5 BYTE),
  FECHA_APLICACION     DATE,
  INSTITUCION_EMISORA  VARCHAR2(20 BYTE),
  TIPO_CAMBIO_MX       FLOAT(126),
  REFERENCIA_BAZ       VARCHAR2(30 BYTE),
  NUM_INGRESO_SPEI     INTEGER,
  CODE                 VARCHAR2(20 BYTE),
  MENSAJE              VARCHAR2(60 BYTE),
  STATUS_PROCESO       INTEGER,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_SUITE
(
  ID_SUITE             VARCHAR2(10 BYTE),
  ID_USUARIO           INTEGER,
  ID_PROVEEDOR         INTEGER,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_TARJETAS
(
  ID_TARJETA           INTEGER                  NOT NULL,
  ID_EMISOR            INTEGER,
  ID_USUARIO           INTEGER,
  ID_STATUS_TARJETA    INTEGER,
  ID_PCC               INTEGER,
  TOKEN_TARJETA        VARCHAR2(70 BYTE),
  NUMERO_TARJETA       VARCHAR2(70 BYTE),
  FECHA_EXPIRACION     DATE,
  CVV                  VARCHAR2(35 BYTE),
  FECHA_EMISION        DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE,
  ESTATUS              INTEGER,
  TIPO_TARJETA         VARCHAR2(2 BYTE),
  PASSCODE             VARCHAR2(15 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_TA_USUARIO_ROL
(
  ID_USUARIO_ROL       INTEGER                  NOT NULL,
  ID_ROL               INTEGER,
  ID_USUARIO           INTEGER,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_TEST_IMAGEN
(
  ID_DOCUMENTO       INTEGER                    NOT NULL,
  ID_TIPO_DOCUMENTO  INTEGER,
  DOCUMENTO          BLOB,
  FECHA_REGISTRO     DATE,
  NOMBRE             VARCHAR2(255 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_TRACKING_MERCANCIA
(
  ID_MERCANCIA         INTEGER,
  ID_STATUS            INTEGER,
  ID_TRACKING          INTEGER                  NOT NULL,
  FECHA_ACTUALIZACION  DATE,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE,
  OBSERVACION          VARCHAR2(200 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_TX_CARDMARTE_LOAD
(
  ID_LOAD              INTEGER                  NOT NULL,
  ID_FONDEO            INTEGER,
  PTERMINALCODE        VARCHAR2(20 BYTE),
  PTRANSAMOUNT         VARCHAR2(20 BYTE),
  REQUESTID            VARCHAR2(20 BYTE),
  FECHA_EJECUCION      VARCHAR2(20 BYTE),
  RESULTCODE           VARCHAR2(20 BYTE),
  RESULTMESSAGE        VARCHAR2(80 BYTE),
  TRANSACTIONNUMBER    VARCHAR2(20 BYTE),
  AMOUNT               VARCHAR2(20 BYTE),
  PCARDNUMBER          VARCHAR2(70 BYTE),
  OPERATIONID          VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_TX_CARDMARTE_PCARDCREATION
(
  ID_PCC               INTEGER                  NOT NULL,
  ID_USUARIO           INTEGER,
  PTERMINALCODE        VARCHAR2(30 BYTE),
  PRODUCTCODE          NUMBER(6),
  PID                  VARCHAR2(30 BYTE),
  PIDTYPE              NUMBER(2),
  PRBSERVICE           VARCHAR2(20 BYTE),
  PDATEOFBIRTH         VARCHAR2(8 BYTE),
  PEMBOSSEDNAME        VARCHAR2(100 BYTE),
  PTELEPHONEAREACODE   NUMBER(4),
  PTELEPHONE           VARCHAR2(12 BYTE),
  PFAXAREACODE         NUMBER(4),
  PFAXPHONE            VARCHAR2(20 BYTE),
  PCELLPHONE           VARCHAR2(20 BYTE),
  PCELLPHONEAREACODE   NUMBER(4),
  PIDEXPIRATION        NUMBER(10),
  PIDCOUNTRY           NUMBER(4),
  PIDSTATE             NUMBER(3),
  PLASTNAME            VARCHAR2(40 BYTE),
  PMAINDENNAME         VARCHAR2(40 BYTE),
  PMIDDLENAME          VARCHAR2(40 BYTE),
  PFIRSTNAME           VARCHAR2(40 BYTE),
  PCOUNTRY             NUMBER(4),
  PSTATE               NUMBER(3),
  PCITY                VARCHAR2(40 BYTE),
  PADDRESS             VARCHAR2(85 BYTE),
  PZIPCODE             NUMBER(7),
  PEMAIL               VARCHAR2(70 BYTE),
  REQUESTID            NUMBER(8),
  FECHA_EJECUCION      DATE,
  OPERATIONID          NUMBER(8),
  RESULTCODE           NUMBER(8),
  RESULTMESSAGE        VARCHAR2(30 BYTE),
  TOKEN                VARCHAR2(70 BYTE),
  CARDNUMBER           VARCHAR2(70 BYTE),
  EMBOSEEDNAME         VARCHAR2(100 BYTE),
  EXPIRATIONDATE       DATE,
  VERIFICATIONCODE     VARCHAR2(35 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_TX_CARDMARTE_UNLOAD
(
  ID_TARJETA           INTEGER,
  ID_UNLOAD            INTEGER                  NOT NULL,
  PTERMINALCODE        VARCHAR2(20 BYTE),
  PCARDNUMBER          VARCHAR2(70 BYTE),
  PTRANSAMOUNT         VARCHAR2(20 BYTE),
  PDETAIL              VARCHAR2(80 BYTE),
  FECHA_EJECUCION      DATE,
  REQUESTID            VARCHAR2(20 BYTE),
  OPERATIONID          VARCHAR2(20 BYTE),
  RESULTCODE           VARCHAR2(20 BYTE),
  RESULTMESSAGE        VARCHAR2(80 BYTE),
  TRANSACTIONNUMBER    VARCHAR2(20 BYTE),
  AMOUNT               VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_USUARIO
(
  ID_USUARIO              INTEGER               NOT NULL,
  ID_TIPO_IDENTIFICACION  INTEGER,
  ID_STATUS_CUENTA        INTEGER,
  ID_ESTADO               INTEGER,
  ID_PAIS                 INTEGER,
  ID_MUNICIPIO            INTEGER,
  NOMBRE                  VARCHAR2(30 BYTE),
  APATERNO                VARCHAR2(30 BYTE),
  AMATERNO                VARCHAR2(30 BYTE),
  CALLE                   VARCHAR2(80 BYTE),
  COLONIA                 VARCHAR2(50 BYTE),
  CP                      VARCHAR2(5 BYTE),
  TELEFONO                VARCHAR2(30 BYTE),
  CORREO_ELECTRONICO      VARCHAR2(50 BYTE),
  NOMBRE_USUARIO          VARCHAR2(51 BYTE),
  CONTRASENIA             VARCHAR2(50 BYTE),
  NUMERO_IDENTIFICACION   VARCHAR2(30 BYTE),
  FECHA_CREACION          DATE,
  CELULAR                 VARCHAR2(30 BYTE),
  NEWSLETTER              INTEGER,
  REFERENCIA              VARCHAR2(20 BYTE),
  CIUDAD                  VARCHAR2(40 BYTE),
  FECHA_NACIMIENTO        DATE,
  USUARIO_MODIFICO        VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION     DATE                  DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE IC_VENTANILLA
(
  ID_VENTANILLA        INTEGER                  NOT NULL,
  ID_FONDEO            INTEGER,
  NUMERO_SUCURSAL      INTEGER,
  NUMERO_OPERADOR      INTEGER,
  IP_ADDRESS           VARCHAR2(20 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE),
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE JMS_ROLES
(
  ROLEID  VARCHAR2(32 BYTE)                     NOT NULL,
  USERID  VARCHAR2(32 BYTE)                     NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE JMS_SUBSCRIPTIONS
(
  CLIENTID  VARCHAR2(128 BYTE)                  NOT NULL,
  SUBNAME   VARCHAR2(128 BYTE)                  NOT NULL,
  TOPIC     VARCHAR2(255 BYTE)                  NOT NULL,
  SELECTOR  VARCHAR2(255 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE JMS_TRANSACTIONS
(
  TXID  INTEGER
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE JMS_USERS
(
  USERID    VARCHAR2(32 BYTE)                   NOT NULL,
  PASSWD    VARCHAR2(32 BYTE)                   NOT NULL,
  CLIENTID  VARCHAR2(128 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE LOGINHST
(
  ID           NUMBER                           NOT NULL,
  USUARIOID    NUMBER                           NOT NULL,
  FECHA_LOGIN  DATE,
  ALIAS        VARCHAR2(51 BYTE),
  INTENTO      NUMBER(3),
  IP           VARCHAR2(15 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE LOGIN_USERS
(
  USUARIOID    NUMBER                           NOT NULL,
  INTENTOS     NUMBER(3),
  FECHA_LOGIN  DATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE MEMBRECIA
(
  MEMBRECIAID  NUMBER                           NOT NULL,
  TIPOMONEDA   NUMBER                           NOT NULL,
  DURACION     NUMBER                           NOT NULL,
  DESCRIPCION  VARCHAR2(20 BYTE),
  COSTO        FLOAT(126)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE MESSAGES
(
  RESULTS  VARCHAR2(80 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE MONEDA
(
  TIPOMONEDA   NUMBER                           NOT NULL,
  DESCRIPCION  VARCHAR2(20 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE MUNICIPIO
(
  PAISID           NUMBER(3)                    NOT NULL,
  ESTADOID         NUMBER(3)                    NOT NULL,
  MUNICIPIOID      NUMBER(3)                    NOT NULL,
  NOMBREMUNICIPIO  VARCHAR2(100 BYTE),
  CLAVELADA        NUMBER(3)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE OPERACIONTIENDA
(
  OPERACIONID          NUMBER                   NOT NULL,
  NCONSECUTIVO         NUMBER                   NOT NULL,
  REFERENCIA           VARCHAR2(20 BYTE),
  CANTIDADDEPOSITADA   FLOAT(126),
  TIENDAID             VARCHAR2(5 BYTE),
  CODIGORESULTADO      VARCHAR2(3 BYTE),
  MENSAJERESULTADO     VARCHAR2(70 BYTE),
  FECHASYS             DATE,
  CARTCARDID           NUMBER,
  TIPOCAMBIOUSD        FLOAT(126),
  MENSAJEOPERACIONID   NUMBER                   NOT NULL,
  COMISIONUSD          NUMBER,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        DEFAULT 'CORE'                NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE               NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE OPERACIONVENTANILLA
(
  OPERACIONID          NUMBER                   NOT NULL,
  NCONSECUTIVO         NUMBER,
  CARTCARDID           NUMBER,
  REFERENCIA           VARCHAR2(20 BYTE),
  USUARIODEPOSITANTE   VARCHAR2(100 BYTE),
  CANTIDADDEPOSITADA   FLOAT(126),
  SUCURSALID           NUMBER,
  OPERADORID           NUMBER,
  FECHAOPERACION       DATE,
  CODIGORESULTADO      VARCHAR2(3 BYTE),
  MENSAJERESULTADO     VARCHAR2(70 BYTE),
  IP                   VARCHAR2(20 BYTE),
  FECHASYS             DATE,
  MENSAJEOPERACION     VARCHAR2(100 BYTE),
  TIPOCAMBIOUSD        FLOAT(126),
  TIPOCAMBIOTESORERIA  FLOAT(126)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE PAIS
(
  PAISID           INTEGER                      NOT NULL,
  NOMBREPAIS       VARCHAR2(30 BYTE)            NOT NULL,
  CLAVETELEFONICA  NUMBER,
  PAISIDCARDMARTE  NUMBER
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE PLAN_TABLE
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  PLAN_ID            NUMBER,
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(4000 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(30 BYTE),
  OBJECT_NAME        VARCHAR2(30 BYTE),
  OBJECT_ALIAS       VARCHAR2(65 BYTE),
  OBJECT_INSTANCE    INTEGER,
  OBJECT_TYPE        VARCHAR2(30 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 INTEGER,
  PARENT_ID          INTEGER,
  DEPTH              INTEGER,
  POSITION           INTEGER,
  COST               INTEGER,
  CARDINALITY        INTEGER,
  BYTES              INTEGER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       INTEGER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           INTEGER,
  IO_COST            INTEGER,
  TEMP_SPACE         INTEGER,
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE),
  PROJECTION         VARCHAR2(4000 BYTE),
  TIME               INTEGER,
  QBLOCK_NAME        VARCHAR2(30 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE PREGUNTASESTANDAR
(
  IDPREGUNTAESTANDAR  NUMBER                    NOT NULL,
  PREGUNTA            VARCHAR2(100 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE PREGUNTASUSUARIO
(
  USUARIOID            NUMBER                   NOT NULL,
  PREGUNTAESTANDAR1ID  NUMBER                   NOT NULL,
  RESPUESTA1           VARCHAR2(100 BYTE)       NOT NULL,
  PREGUNTAESTANDAR2ID  NUMBER                   NOT NULL,
  RESPUESTA2           VARCHAR2(100 BYTE)       NOT NULL,
  PREGUNTA3            VARCHAR2(50 BYTE),
  RESPUESTA3           VARCHAR2(100 BYTE),
  PREGUNTA4            VARCHAR2(50 BYTE),
  RESPUESTA4           VARCHAR2(100 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE PREGUNTASUSUARIO_X
(
  USUARIOID            NUMBER                   NOT NULL,
  PREGUNTAESTANDAR1ID  NUMBER                   NOT NULL,
  RESPUESTA1           VARCHAR2(100 BYTE)       NOT NULL,
  PREGUNTAESTANDAR2ID  NUMBER                   NOT NULL,
  RESPUESTA2           VARCHAR2(100 BYTE)       NOT NULL,
  PREGUNTA3            VARCHAR2(50 BYTE),
  RESPUESTA3           VARCHAR2(100 BYTE),
  PREGUNTA4            VARCHAR2(50 BYTE),
  RESPUESTA4           VARCHAR2(100 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE PROVINCIAS
(
  USUARIOID  NUMBER                             NOT NULL,
  PAISID     INTEGER                            NOT NULL,
  PROVINCIA  VARCHAR2(200 BYTE)                 NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE GLOBAL TEMPORARY TABLE QUEST_SL_TEMP_EXPLAIN1
(
  STATEMENT_ID       VARCHAR2(30 BYTE),
  TIMESTAMP          DATE,
  REMARKS            VARCHAR2(80 BYTE),
  OPERATION          VARCHAR2(30 BYTE),
  OPTIONS            VARCHAR2(255 BYTE),
  OBJECT_NODE        VARCHAR2(128 BYTE),
  OBJECT_OWNER       VARCHAR2(30 BYTE),
  OBJECT_NAME        VARCHAR2(30 BYTE),
  OBJECT_INSTANCE    NUMBER,
  OBJECT_TYPE        VARCHAR2(30 BYTE),
  OPTIMIZER          VARCHAR2(255 BYTE),
  SEARCH_COLUMNS     NUMBER,
  ID                 NUMBER,
  PARENT_ID          NUMBER,
  POSITION           NUMBER,
  COST               NUMBER,
  CARDINALITY        NUMBER,
  BYTES              NUMBER,
  OTHER_TAG          VARCHAR2(255 BYTE),
  PARTITION_START    VARCHAR2(255 BYTE),
  PARTITION_STOP     VARCHAR2(255 BYTE),
  PARTITION_ID       NUMBER,
  OTHER              LONG,
  DISTRIBUTION       VARCHAR2(30 BYTE),
  CPU_COST           NUMBER(38),
  IO_COST            NUMBER(38),
  TEMP_SPACE         NUMBER(38),
  ACCESS_PREDICATES  VARCHAR2(4000 BYTE),
  FILTER_PREDICATES  VARCHAR2(4000 BYTE)
)
ON COMMIT PRESERVE ROWS
NOCACHE;


CREATE TABLE RMA_EJBS
(
  IDEJB                NUMBER(20)               NOT NULL,
  DESCRIPCION          VARCHAR2(80 BYTE)        NOT NULL,
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE RMA_MACS
(
  MAC                  VARCHAR2(20 BYTE)        NOT NULL,
  IDROL                NUMBER(20)               NOT NULL,
  NOMBRE_APLICACION    VARCHAR2(50 BYTE)        NOT NULL,
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE RMA_METODOS
(
  IDMETODO             NUMBER(20)               NOT NULL,
  IDEJB                NUMBER(20)               NOT NULL,
  DESCRIPCION          VARCHAR2(80 BYTE)        NOT NULL,
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE RMA_ROL
(
  IDROL                NUMBER(20)               NOT NULL,
  DESCRIPCION          VARCHAR2(50 BYTE)        NOT NULL,
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE RMA_ROL_METODOS
(
  IDROL_METODO         NUMBER(30)               NOT NULL,
  IDMETODO             NUMBER(20)               NOT NULL,
  IDROL                NUMBER(20)               NOT NULL,
  STATUS               VARCHAR2(2 BYTE),
  ULTIMA_MODIFICACION  DATE                     NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE TARJETA_VIRTUAL
(
  TARJETAVIRTUALID  NUMBER(7)                   NOT NULL,
  NUMEROTARJETA     VARCHAR2(70 BYTE),
  TIPOTARJCREDID    NUMBER(3)                   NOT NULL,
  DIAEXPIRACION     NUMBER(2),
  MESEXPIRACION     NUMBER(2),
  CODIGOSEGURIDAD   NUMBER(3),
  NOMBRETITULAR     VARCHAR2(50 BYTE),
  APELLIDOTITULAR   VARCHAR2(50 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE GLOBAL TEMPORARY TABLE TEMP_FONDEOS
(
  CARTCARDID         NUMBER,
  TARJETAFONDEO      VARCHAR2(70 BYTE),
  MONTO              NUMBER,
  HORAFONDEO         DATE,
  TIPOCAMBIO         NUMBER,
  TIPOFONDEO         VARCHAR2(30 BYTE),
  TIPOENTRADA        VARCHAR2(2 BYTE),
  COMISIONIUPI       NUMBER,
  COMISIONCARDMARTE  NUMBER
)
ON COMMIT PRESERVE ROWS
NOCACHE;


CREATE TABLE TIPO_TARJETAS_CREDITO
(
  TIPOTARJCREDID  NUMBER(3)                     NOT NULL,
  USUARIOID       VARCHAR2(30 BYTE)
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE T_P_ACTIVADAS
(
  ID_T_P_ACTIVADAS     NUMBER                   NOT NULL,
  CARDNUMBER           VARCHAR2(64 BYTE),
  ACTUALCARDNUMBER     VARCHAR2(44 BYTE),
  FECHAVENCIMIENTO     VARCHAR2(10 BYTE),
  REFERENCIA           VARCHAR2(20 BYTE),
  IDSUITE              VARCHAR2(10 BYTE),
  NUMLOTE_MATERIALES   VARCHAR2(10 BYTE),
  NUMLOTE_CARDMARTE    VARCHAR2(10 BYTE),
  CVV2                 VARCHAR2(30 BYTE),
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        DEFAULT 'CORE'                NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE               NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE USERLOGIN
(
  IDSESSION            VARCHAR2(100 BYTE)       NOT NULL,
  USUARIO              VARCHAR2(100 BYTE)       NOT NULL,
  IP                   VARCHAR2(15 BYTE),
  INTENTOS             VARCHAR2(10 BYTE),
  STATUS               VARCHAR2(10 BYTE)        NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(15 BYTE),
  ULTIMA_MODIFICACION  DATE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE USUARIO
(
  USUARIOID              NUMBER,
  NOMBRE                 VARCHAR2(30 BYTE),
  APATERNO               VARCHAR2(30 BYTE),
  AMATERNO               VARCHAR2(30 BYTE),
  CALLE                  VARCHAR2(80 BYTE),
  COLONIA                VARCHAR2(50 BYTE),
  MUNICIPIOID            INTEGER                NOT NULL,
  CIUDAD                 VARCHAR2(50 BYTE),
  CODIGOPOSTAL           VARCHAR2(5 BYTE),
  TELEFONO               VARCHAR2(30 BYTE),
  FAX                    VARCHAR2(30 BYTE),
  MAIL                   VARCHAR2(50 BYTE),
  PAISID                 INTEGER                NOT NULL,
  ESTADOID               INTEGER                NOT NULL,
  NOMBREUSUARIO          VARCHAR2(51 BYTE)      DEFAULT NULL,
  ESTADODECUENTAID       NUMBER                 DEFAULT NULL                  NOT NULL,
  IDENTIFICACIONID       NUMBER                 NOT NULL,
  NUMEROIDENTIFICACION   VARCHAR2(30 BYTE),
  CONTRASENIA            VARCHAR2(50 BYTE),
  FECHASYS               DATE,
  DESCRIPCIONMOVIMIENTO  VARCHAR2(50 BYTE),
  CELULAR                VARCHAR2(30 BYTE),
  FECHANACIMIENTO        DATE,
  IDENTIDADVALIDADA      NUMBER(1),
  NEWS_LETTER            INTEGER                DEFAULT 0
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE USUARIO_CORE
(
  ID_USUARIO           NUMBER                   NOT NULL,
  USUARIO              VARCHAR2(30 BYTE)        NOT NULL,
  CONTRASENIA          VARCHAR2(50 BYTE)        NOT NULL,
  USUARIO_MODIFICO     VARCHAR2(30 BYTE)        DEFAULT 'CORE'                NOT NULL,
  ULTIMA_MODIFICACION  DATE                     DEFAULT SYSDATE               NOT NULL
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE TABLE X
(
  FEC  TIMESTAMP(6) WITH TIME ZONE
)
LOGGING 
NOCACHE
NOPARALLEL
NOMONITORING;


CREATE UNIQUE INDEX ESTADODECUENTA_PK ON ESTADODECUENTA
(ESTADODECUENTAID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX ESTADO_PK ON ESTADO
(PAISID, ESTADOID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IC_MEMBRECIAS_PORPAGAR_PK ON IC_MEMBRECIAS_PORPAGAR
(ID_MEMBRECIA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IC_MERCANCIA_PK ON IC_MERCANCIA
(ID_MERCANCIA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX IC_SUITE_PK ON IC_SUITE
(ID_SUITE)
LOGGING
NOPARALLEL;


CREATE INDEX IND01_TA_USUARIO ON IC_TA_USUARIO_ROL
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE INDEX INDEX01 ON RMA_MACS
(MAC, IDROL)
LOGGING
NOPARALLEL;


CREATE INDEX INDEX01_IC_MEMBRECIAS_PORPAGAR ON IC_MEMBRECIAS_PORPAGAR
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX LOGINHST_PK ON LOGINHST
(ID, USUARIOID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX LOGIN_PK ON LOGIN_USERS
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX MUNICIPIO_PK ON MUNICIPIO
(PAISID, ESTADOID, MUNICIPIOID)
LOGGING
NOPARALLEL;


CREATE INDEX PAISINDEX ON IC_ESTADO
(ID_PAIS)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PAIS_PK ON PAIS
(PAISID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CARD ON CARD
(CARTCARDID, USUARIOID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CAT_ESTATUS_VENTA ON CAT_ESTATUS_VENTA
(IDESTATUS)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_CLIENTE_TELEFONOS ON CLIENTE_TELEFONOS
(CTE_CLI_ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_H_T_P_ACTIVADAS ON H_T_P_ACTIVADAS
(ID_H_T_P_ACTIVADAS)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_IC_CAT_DOCUMENTO ON IC_CAT_DOCUMENTO
(ID_TIPO_DOCUMENTO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_IC_DOCUMENTO ON IC_DOCUMENTO
(ID_DOCUMENTO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_IC_TEST_IMAGEN ON IC_TEST_IMAGEN
(ID_DOCUMENTO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_MEMBRECIA ON MEMBRECIA
(MEMBRECIAID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_MONEDA ON MONEDA
(TIPOMONEDA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_PREGUNTASESTANDAR ON PREGUNTASESTANDAR
(IDPREGUNTAESTANDAR)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_PROVINCIAS ON PROVINCIAS
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_T_P_ACTIVADAS ON T_P_ACTIVADAS
(ID_T_P_ACTIVADAS)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX PK_USUARIO_CORE ON USUARIO_CORE
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX REGISTRO ON ICN_CC_TARJETASEXPIRADAS
(ID_REGISTROTE)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX TARJETAVIRTUALID_PK ON ABONA_TARJETA_VIRTUAL
(TARJETAVIRTUALID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX TIPOTARJCREDID_PK ON TIPO_TARJETAS_CREDITO
(TIPOTARJCREDID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX USUARIO_PK ON USUARIO
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XAK1CC_COSTOFLETEPORKG ON CC_COSTOFLETEPORKG
(PESOKG)
LOGGING
NOPARALLEL;


CREATE INDEX XIF01_ICN_CLIENTES ON ICN_CLIENTES
(NOMBRE_USUARIO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF01_ICN_CP ON ICN_CP
(CODIGOPOSTAL)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF01_ICN_MOVIMIENTOS ON ICN_MOVIMIENTOS
(REFERENCIA)
LOGGING
NOPARALLEL;


CREATE INDEX XIF01_ICN_OPERACIONES ON ICN_OPERACIONES
(FECHAOPERACION)
LOGGING
NOPARALLEL;


CREATE INDEX XIF02_ICN_CLIENTES ON ICN_CLIENTES
(CORREO_ELECTRONICO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF02_ICN_CP ON ICN_CP
(ID_MUNICIPIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF02_ICN_MOVIMIENTOS ON ICN_MOVIMIENTOS
(ID_TIPO_PAGO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF03_ICN_MOVIMIENTOS ON ICN_MOVIMIENTOS
(FECHA_APLICACION)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICNFUNCION ON ICN_FUNCION
(IDFUNCION)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICNPERMISO ON ICN_PERMISO
(IDPERMISO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_APLIC ON ICN_APLIC
(IDAPLICACION)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_CAT_BANCO ON ICN_CAT_BANCO
(CODIGO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_CAT_OPERACION ON ICN_CAT_OPERACION
(CODIGOOPERACION)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_CLIENTES ON ICN_CLIENTES
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_CONTRATO ON ICN_CONTRATO
(REFERENCIA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_CP ON ICN_CP
(CODIGOPOSTAL, ASENTAMIENTO, TIPO_ASENTAMIENTO, ID_MUNICIPIO, ID_ESTADO, 
ID_PAIS)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_GPOPFL ON ICN_GPOPERFIL
(IDGPOPFIL)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_GRUPO ON ICN_GRUPO
(IDGRUPO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_MOVIMIENTOS ON ICN_MOVIMIENTOS
(ID_MOVIMIENTO, REFERENCIA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_OPERACIONES_HIST ON ICN_OPERACIONES_HISTORICO
(FECHA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_PERFIL ON ICN_PERFIL
(IDPERFIL)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_TARJETA ON ICN_TARJETA
(REFERENCIA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_USRROL ON ICN_USR_ROL
(IDUSUARIO, IDFUNCION, IDPERMISO)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XIF0_ICN_USUARIO_ROL ON ICN_USUARIO_ROL
(IDUSUARIO, IDFUNCION, IDPERMISO)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1CARD ON CARD
(USUARIOID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_CANCELACIONES ON CC_CANCELACIONES
(CARTCARDID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_DOCUMENTOSUSR ON CC_DOCUMENTOSUSR
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_RENOVACIONES ON CC_RENOVACIONES
(CARTCARDID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_REPOSICIONES ON CC_REPOSICIONES
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_RSPACLARACION ON CC_RSPACLARACION
(NUMEROACLARACION, USUARIOID, NUMEROREGISTRO)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_SITIOSFAVORITOS ON CC_SITIOSFAVORITOS
(USUARIOID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_SLCACLARACION ON CC_SLCACLARACION
(USUARIOID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_SOLICITUDPLASTICO ON CC_SOLICITUDPLASTICO
(CARTCARDID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1CC_TARJETASEXPIRADAS ON CC_TARJETASEXPIRADAS
(CARTCARDID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1ICN_TARJETA_COMPLE ON ICN_TARJETA_COMPLEMENTO
(REFERENCIA)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1IC_MEMBRESIAS ON IC_MEMBRESIAS
(ID_TARJETA)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1IC_MERCANCIA ON IC_MERCANCIA
(FOLIO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1IC_SPEI ON IC_SPEI
(ID_FONDEO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1IC_SUITE ON IC_SUITE
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1IC_TARJETAS ON IC_TARJETAS
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1IC_TRACKING_MERCANCIA ON IC_TRACKING_MERCANCIA
(ID_MERCANCIA, ID_STATUS)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1IC_TX_CARDMARTE_PCARDCREA ON IC_TX_CARDMARTE_PCARDCREATION
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1IC_USUARIO ON IC_USUARIO
(NOMBRE_USUARIO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1LOGINHST ON LOGINHST
(USUARIOID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1MEMBRECIA ON MEMBRECIA
(TIPOMONEDA)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1MENSAJEOPERACION ON OPERACIONTIENDA
(MENSAJEOPERACIONID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1MUNICIPIO ON MUNICIPIO
(ESTADOID, PAISID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1OPERACIONTIENDA ON OPERACIONTIENDA
(CARTCARDID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1OPERACIONVENTANILLA ON OPERACIONVENTANILLA
(CARTCARDID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1PCC_SUITES ON PASARELBAZ.PCC_SUITES
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1PCC_TARJETASCARDMARTE ON PASARELBAZ.PCC_TARJETASCARDMARTE
(TOKENTARJETA)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1PREGUNTASUSUARIO ON PREGUNTASUSUARIO
(PREGUNTAESTANDAR1ID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1USUARIO ON USUARIO
(NOMBREUSUARIO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1_ICN_CONTRATO ON ICN_CONTRATO
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1_ICN_TARJETA ON ICN_TARJETA
(CARDNUMBER)
LOGGING
NOPARALLEL;


CREATE INDEX XIF1_ICN_USRROL ON ICN_USR_ROL
(IDUSUARIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1_IC_DOCUMENTO ON IC_DOCUMENTO
(USUARIOID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1_IC_MUNICIPIO ON IC_MUNICIPIO
(ID_ESTADO)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF1_IC_PREGUNTAS_USUARIO ON IC_PREGUNTAS_USUARIO
(ID_USUARIO)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF2CARD ON CARD
(MEMBRECIAID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF2CC_CANCELACIONES ON CC_CANCELACIONES
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2CC_DOCUMENTOSUSR ON CC_DOCUMENTOSUSR
(IDTIPODOCUMENTO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2CC_RENOVACIONES ON CC_RENOVACIONES
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2CC_SLCACLARACION ON CC_SLCACLARACION
(ESTATUSACLARACION)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF2CC_SOLICITUDPLASTICO ON CC_SOLICITUDPLASTICO
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2CC_TARJETASEXPIRADAS ON CC_TARJETASEXPIRADAS
(USUARIOID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2ESTADO ON ESTADO
(PAISID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF2IC_USUARIO ON IC_USUARIO
(CORREO_ELECTRONICO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2LOGINHST ON LOGINHST
(ALIAS)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2MEMBRECIA ON MEMBRECIA
(DURACION)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2OPERACIONVENTANILLA ON OPERACIONVENTANILLA
(REFERENCIA)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2PREGUNTASUSUARIO ON PREGUNTASUSUARIO
(PREGUNTAESTANDAR2ID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2PROVINCIAS ON PROVINCIAS
(PAISID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF2USUARIO ON USUARIO
(MAIL)
LOGGING
NOPARALLEL;


CREATE INDEX XIF2_ICN_TARJETA ON ICN_TARJETA
(TOKEN)
LOGGING
NOPARALLEL;


CREATE INDEX XIF3CARD ON CARD
(REFERENCIA)
LOGGING
NOPARALLEL;


CREATE INDEX XIF3CC_CANCELACIONES ON CC_CANCELACIONES
(ESTADODECUENTAID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF3CC_DOCUMENTOSUSR ON CC_DOCUMENTOSUSR
(DOCACEPTADO)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF3CC_RENOVACIONES ON CC_RENOVACIONES
(MEMBRECIAID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF3CC_SOLICITUDPLASTICO ON CC_SOLICITUDPLASTICO
(ESTADODECUENTAID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF3CC_TARJETASEXPIRADAS ON CC_TARJETASEXPIRADAS
(MEMBRECIAID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF3OPERACIONVENTANILLA ON OPERACIONVENTANILLA
(UPPER("MENSAJEOPERACION"))
LOGGING
NOPARALLEL;


CREATE INDEX XIF3USUARIO ON USUARIO
(IDENTIDADVALIDADA)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF3_ICN_TARJETA ON ICN_TARJETA
(ID_STATUS_TARJETA)
LOGGING
NOPARALLEL;


CREATE INDEX XIF4CARD ON CARD
(BLOQUEO)
LOGGING
NOPARALLEL;


CREATE INDEX XIF4HSTUSUARIO ON HSTUSUARIO
(PAISID)
LOGGING
NOPARALLEL;


CREATE INDEX XIF4OPERACIONVENTANILLA ON OPERACIONVENTANILLA
(FECHAOPERACION)
LOGGING
NOPARALLEL;


CREATE INDEX XIF4USUARIO ON USUARIO
(ESTADODECUENTAID)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF4_ICN_MOVIMIENTOS ON ICN_MOVIMIENTOS
(ID_CANAL, TRANSACCION)
NOLOGGING
NOPARALLEL;


CREATE INDEX XIF4_ICN_TARJETA ON ICN_TARJETA
(FECHA_MEMBRECIA)
LOGGING
NOPARALLEL;


CREATE INDEX XIF5USUARIO ON USUARIO
(NUMEROIDENTIFICACION)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKCAT_STATUS_TARJETA ON CAT_STATUS_TARJETA
(ID_STATUS_TARJETA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKICN_CAT_TIPO_BLOQUEO ON ICN_CAT_TIPO_BLOQUEO
(ESTATUS_BLOQUEO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_BXI ON IC_BXI
(ID_BXI)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_CANAL ON IC_CAT_CANAL
(ID_CANAL)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_EMISOR_TARJETA ON IC_CAT_EMISOR_TARJETA
(ID_EMISOR)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_GRUPO_ROLES ON IC_CAT_GRUPO_ROLES
(ID)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_PERMISO ON IC_CAT_PERMISO
(ID_PERMISO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_PREGUNTA_SECRETA ON IC_CAT_PREGUNTA_SECRETA
(ID_PREGUNTA_SECRETA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_PROV_ALMACENAMIENTO ON IC_CAT_PROV_ALMACENAMIENTO
(ID_PROVEEDOR)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_ROLES ON IC_CAT_ROLES
(ID_ROLES)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_STATUS ON IC_CAT_STATUS
(ID_STATUS)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_STATUS_CUENTA ON IC_CAT_STATUS_CUENTA
(ID_STATUS_CUENTA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_STATUS_TARJETA ON IC_CAT_STATUS_TARJETA
(ID_STATUS_TARJETA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_TIPO_IDENTIFICACION ON IC_CAT_TIPO_IDENTIFICACION
(ID_TIPO_IDENTIFICACION)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_TIPO_MEMBRESIA ON IC_CAT_TIPO_MEMBRESIA
(ID_TIPO_MEMBRESIA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_TIPO_PAGO ON IC_CAT_TIPO_PAGO
(ID_TIPO_PAGO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_CAT_TIPO_SERVICIO ON IC_CAT_TIPO_SERVICIO
(ID_TIPO_SERVICIO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_ENVIO_ESTAFETA ON IC_ENVIO_ESTAFETA
(ID_ESTAFETA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_ESTADO ON IC_ESTADO
(ID_ESTADO, ID_PAIS)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_FACTURA ON IC_FACTURA
(ID_FACTURA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_FONDEOS_WS ON IC_FONDEOS_WS
(ID_FONDEO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_IMPORTES_ESTAFETA ON IC_IMPORTES_ESTAFETA
(ID_IMPORTE_EST)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_IMPORTES_IUPICARD ON IC_IMPORTES_IUPICARD
(ID_IMPORTE_IC)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_MEMBRECIA_UNLOAD ON IC_MEMBRECIA_UNLOAD
(ID_MEMBRECIA_UNLOAD)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_MEMBRESIAS ON IC_MEMBRESIAS
(ID_MEMBRESIA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_MERCANCIAS_UNLOAD ON IC_MERCANCIAS_UNLOAD
(ID_MERCANCIA_UNLOAD)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_MUNICIPIO ON IC_MUNICIPIO
(ID_MUNICIPIO, ID_ESTADO, ID_PAIS)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_PAIS ON IC_PAIS
(ID_PAIS)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_PREGUNTAS_USUARIO ON IC_PREGUNTAS_USUARIO
(ID_PREGUNTA_USUARIO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_SPEI ON IC_SPEI
(ID_SPEI)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_TARJETAS ON IC_TARJETAS
(ID_TARJETA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_TA_USUARIO_ROL ON IC_TA_USUARIO_ROL
(ID_USUARIO_ROL)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_TRACKING_MERCANCIA ON IC_TRACKING_MERCANCIA
(ID_TRACKING)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_TX_CARDMARTE_LOAD ON IC_TX_CARDMARTE_LOAD
(ID_LOAD)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_TX_CARDMARTE_PCARDCREATI ON IC_TX_CARDMARTE_PCARDCREATION
(ID_PCC)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_TX_CARDMARTE_UNLOAD ON IC_TX_CARDMARTE_UNLOAD
(ID_UNLOAD)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_USUARIO ON IC_USUARIO
(ID_USUARIO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKIC_VENTANILLA ON IC_VENTANILLA
(ID_VENTANILLA)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKPREGUNTASUSUARIO ON PREGUNTASUSUARIO
(USUARIOID)
NOLOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKRMA_EJBS ON RMA_EJBS
(IDEJB)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKRMA_MACS ON RMA_MACS
(MAC)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKRMA_METODOS ON RMA_METODOS
(IDMETODO)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKRMA_ROL ON RMA_ROL
(IDROL)
LOGGING
NOPARALLEL;


CREATE UNIQUE INDEX XPKRMA_ROL_METODOS ON RMA_ROL_METODOS
(IDROL_METODO)
LOGGING
NOPARALLEL;


CREATE OR REPLACE package PKG_CATALOGOS is

  PROCEDURE CAT_CANAL(pIdCanal           IN cartcard.ic_cat_canal.ID_CANAL%TYPE,
                      p_descripcion      IN cartcard.ic_cat_canal.DESCRIPCION%TYPE,
                      p_usuario_modifico IN cartcard.ic_cat_canal.USUARIO_MODIFICO%TYPE,
                      p_accion           IN NUMBER,
                      resultado          OUT number,
                      resultadotex       OUT varchar2);

  PROCEDURE CAT_DOCUMENTO(pIdDocumento       IN cartcard.ic_cat_documento.id_tipo_documento%TYPE,
                          p_descripcion      IN cartcard.ic_cat_documento.DESCRIPCION%TYPE,
                          p_usuario_modifico IN cartcard.ic_cat_documento.USUARIO_MODIFICO%TYPE,
                          p_accion           IN NUMBER,
                          resultado          OUT number,
                          resultadotex       out varchar2);

  PROCEDURE CAT_ESTADO(pIdEstado          IN cartcard.ic_estado.id_estado%TYPE,
                       pIdPais            IN cartcard.ic_estado.id_pais%TYPE,  
                       pIdPaisNew         IN cartcard.ic_estado.id_pais%TYPE,
                       p_nombre           IN cartcard.ic_estado.nombre_estado%TYPE,
                       p_usuario_modifico IN cartcard.ic_estado.usuario_modifico%TYPE,
                       p_accion           IN NUMBER,
                       resultado          OUT number,
                       resultadotex       out varchar2);

  PROCEDURE CAT_MUNICIPIO(pIdMunicipio       IN cartcard.ic_municipio.id_municipio%TYPE,
  						            pIdMunicipioNew    IN cartcard.ic_municipio.id_municipio%TYPE,
                          pIdEstado          IN cartcard.ic_municipio.id_estado%TYPE,
                          pIdEstadoNew       IN cartcard.ic_municipio.id_estado%TYPE,
                          pIdPais            IN cartcard.ic_municipio.id_pais%TYPE,
                          pIdPaisNew         IN cartcard.ic_municipio.id_pais%TYPE,
                          p_nombre           IN cartcard.ic_municipio.nombre_municipio%TYPE,
                          p_usuario_modifico IN cartcard.ic_municipio.usuario_modifico%TYPE,
                          p_accion           IN NUMBER,
                          resultado          OUT NUMBER,
                          resultadotex       OUT VARCHAR2);

  PROCEDURE CAT_PAIS(pIdPais            IN cartcard.ic_pais.id_pais%TYPE,
                     pIdPaisNew         IN cartcard.ic_pais.id_pais%TYPE,
                     p_nombre           IN cartcard.ic_pais.nombre_pais%TYPE,
                     p_clavetel         IN cartcard.ic_pais.clave_tel%TYPE,
                     p_usuario_modifico IN cartcard.ic_pais.usuario_modifico%TYPE,
                     p_accion           IN NUMBER,
                     resultado          OUT number,
                     resultadotex       out varchar2);

  PROCEDURE CAT_PREGUNTA(pIdPregunta  IN cartcard.PREGUNTASESTANDAR.idpreguntaestandar%TYPE,
                         p_pregunta   IN cartcard.PREGUNTASESTANDAR.pregunta%TYPE,
                         p_accion     IN NUMBER,
                         resultado    OUT number,
                         resultadotex out varchar2);

  PROCEDURE CAT_STATUS_CUENTA(pIdStatusCta       IN cartcard.ic_cat_status_cuenta.id_status_cuenta%TYPE,
                              p_codigo           IN cartcard.ic_cat_status_cuenta.codigo%TYPE,
                              p_descripcion      IN cartcard.ic_cat_status_cuenta.descripcion%TYPE,
                              p_usuario_modifico IN cartcard.ic_cat_status_cuenta.usuario_modifico%TYPE,
                              p_accion           IN NUMBER,
                              resultado          OUT number,
                              resultadotex       out varchar2);

  PROCEDURE CAT_TIPOIDENTIFICACION(p_IdIdentificacion IN cartcard.ic_cat_tipo_identificacion.id_tipo_identificacion%TYPE,
                                   p_descripcion      IN cartcard.ic_cat_tipo_identificacion.descripcion%TYPE,
                                   p_usuario_modifico IN cartcard.ic_cat_tipo_identificacion.usuario_modifico%TYPE,
                                   p_accion           IN NUMBER,
                                   resultado          OUT number,
                                   resultadotex       out varchar2);

  PROCEDURE CAT_TIPOPAGO(pIdTipoPago        IN cartcard.ic_cat_tipo_pago.id_tipo_pago%TYPE,
                         p_descripcion      IN cartcard.ic_cat_tipo_pago.descripcion%TYPE,
                         p_usuario_modifico IN cartcard.ic_cat_tipo_pago.usuario_modifico%TYPE,
                         p_accion           IN NUMBER,
                         resultado          OUT number,
                         resultadotex       out varchar2);

  PROCEDURE CAT_TIPOSERVICIO(pIdTipoServicio    IN cartcard.ic_cat_tipo_servicio.id_tipo_servicio%TYPE,
                             p_descripcion      IN cartcard.ic_cat_tipo_pago.descripcion%TYPE,
                             p_usuario_modifico IN cartcard.ic_cat_tipo_pago.usuario_modifico%TYPE,
                             p_accion           IN NUMBER,
                             resultado          OUT number,
                             resultadotex       out varchar2);

  PROCEDURE CAT_TIPO_MEMBRESIA(p_id_tipo_membresia IN cartcard.ic_cat_tipo_membresia.id_tipo_membresia%TYPE,
                               p_costo             IN cartcard.ic_cat_tipo_membresia.costo%TYPE,
                               p_descripcion       IN cartcard.ic_cat_tipo_membresia.descripcion%TYPE,
                               p_usuario_modifico  IN cartcard.ic_cat_tipo_membresia.usuario_modifico%TYPE,
                               p_duracion          IN cartcard.ic_cat_tipo_membresia.duracion%TYPE,
                               p_accion            IN NUMBER,
                               resultado           OUT NUMBER,
                               resultadotex        OUT VARCHAR2);

 procedure CAT_TIPO_BLOQUEO(pEstatusBloqueo     IN cartcard.icn_cat_tipo_bloqueo.estatus_bloqueo%TYPE,
                            pEstatusBloqueNew   IN cartcard.icn_cat_tipo_bloqueo.estatus_bloqueo%TYPE,
                            p_descripcion       IN cartcard.icn_cat_tipo_bloqueo.descripcion%TYPE,
                            p_usuarioModifico   IN cartcard.icn_cat_tipo_bloqueo.usuario_modifico%TYPE,
                            p_accion            IN NUMBER, 
                            resultado           OUT number,
                            resultadotex        out varchar2);

  PROCEDURE CAT_GRUPOROLES(pIdgporol          IN cartcard.ic_cat_grupo_roles.id%TYPE,
                           p_nombre           IN cartcard.ic_cat_grupo_roles.nombre_grup_rol%TYPE,
                           p_usuario_modifico IN cartcard.ic_cat_grupo_roles.usuario_modifico%TYPE,
                           p_accion           IN NUMBER,
                           resultado          OUT number,
                           resultadotex       out varchar2);

  PROCEDURE CAT_PERMISO(pIdpermiso         IN cartcard.ic_cat_permiso.id_permiso%TYPE,
                        p_descripcion      IN cartcard.ic_cat_permiso.descripcion%TYPE,
                        p_usuario_modifico IN cartcard.ic_cat_permiso.usuario_modifico%TYPE,
                        p_accion           IN NUMBER,
                        resultado          OUT number,
                        resultadotex       out varchar2);

  PROCEDURE CAT_ROLES(pIdroles           IN cartcard.ic_cat_roles.id_roles%TYPE,
                      p_Idgruprol        IN cartcard.ic_cat_roles.id_grup_rol%TYPE,
                      p_Idpermiso        IN cartcard.ic_cat_roles.id_permiso%TYPE,
                      p_Nombrerol        IN cartcard.ic_cat_roles.nombre_rol%TYPE,
                      p_usuario_modifico IN cartcard.ic_cat_roles.usuario_modifico%TYPE,
                      p_accion           IN NUMBER,
                      resultado          OUT number,
                      resultadotex       out varchar2);

  PROCEDURE CAT_USUARIOROL(pIdUsuarioRol      IN cartcard.IC_TA_USUARIO_ROL.id_usuario_rol%TYPE,
                           p_IdRol            IN cartcard.IC_TA_USUARIO_ROL.id_rol%TYPE,
                           p_IdUsuario        IN cartcard.IC_TA_USUARIO_ROL.id_usuario%TYPE,
                           p_usuario_modifico IN cartcard.IC_TA_USUARIO_ROL.usuario_modifico%TYPE,
                           p_accion           IN NUMBER,
                           resultado          OUT number,
                           resultadotex       out varchar2);

 PROCEDURE CAT_BANCO(pCodigo          IN cartcard.icn_cat_banco.codigo%TYPE,
                    pCodigoNew        IN cartcard.icn_cat_banco.codigo%TYPE,
                    p_nombre          IN cartcard.icn_cat_banco.nombre%TYPE,
                    p_claveBanxico    IN cartcard.icn_cat_banco.clave_banxico%TYPE,
                    p_usuarioModifico IN cartcard.icn_cat_banco.USUARIO_MODIFICO%TYPE,
                    p_accion          IN NUMBER, 
                    resultado         OUT number,
                    resultadotex      out varchar2);

 procedure CAT_OPERACION(pCodigo           IN cartcard.icn_cat_operacion.codigooperacion%TYPE,
                         pCodigoNew        IN cartcard.icn_cat_operacion.codigooperacion%TYPE,
                         p_descripcion     IN cartcard.icn_cat_operacion.descripcion%TYPE,
                         p_usuarioModifico IN cartcard.icn_cat_operacion.USUARIO_MODIFICO%TYPE,
                         p_accion          IN NUMBER, 
                         resultado         OUT number,
                         resultadotex      out varchar2);

 PROCEDURE CAT_ICN_APLICACION (pIdAplicacion      IN  cartcard.icn_aplic.idaplicacion%TYPE,
                           p_descripcion      IN  cartcard.icn_aplic.DESCRIPCION%TYPE,
                           p_status           IN  cartcard.icn_aplic.status%TYPE,
                           p_usuario_modifico IN  cartcard.icn_aplic.USUARIO_MODIFICO%TYPE,
                           p_accion IN NUMBER, 
                           resultado OUT number,
                           resultadotex out varchar2);
 PROCEDURE CAT_ICN_GRUPO (pIdGrupo           IN cartcard.icn_grupo.idgrupo%TYPE,
                     p_descripcion      IN cartcard.icn_grupo.descripcion%TYPE,
                     p_status           IN cartcard.icn_grupo.status%TYPE,
                     p_usuario_modifico IN cartcard.icn_grupo.USUARIO_MODIFICO%TYPE,
                     p_accion           IN NUMBER, 
                     resultado          OUT NUMBER,
                     resultadotex       out VARCHAR2);
                     
 PROCEDURE CAT_ICN_PERFIL(pIdperfil          IN cartcard.icn_perfil.idperfil%TYPE,
                         p_descripcion      IN cartcard.icn_perfil.descripcion%TYPE,
                         p_status           IN cartcard.icn_perfil.status%TYPE,
                         p_usuario_modifico IN cartcard.icn_perfil.USUARIO_MODIFICO%TYPE,
                         p_accion           IN NUMBER, 
                         resultado          OUT NUMBER,
                         resultadotex       out VARCHAR2);
 PROCEDURE CAT_ICN_PERMISO(pIdPermiso         IN cartcard.icn_permiso.idpermiso%TYPE,
                          p_descripcion      IN cartcard.icn_permiso.descripcion%TYPE,
                          p_status           IN cartcard.icn_permiso.status%TYPE,
                          p_usuario_modifico IN cartcard.icn_permiso.USUARIO_MODIFICO%TYPE,
                          p_accion           IN NUMBER, 
                          resultado          OUT NUMBER,
                          resultadotex out VARCHAR2);
 PROCEDURE CAT_ICN_GPO_PERFIL (pIdGpoPfil         IN cartcard.icn_gpoperfil.idgpopfil%TYPE,
                               pIdAplicacion      IN cartcard.icn_gpoperfil.idaplicacion%TYPE,
                               pIdGrupo           IN cartcard.icn_gpoperfil.idgrupo%TYPE,
                               pIdperfil          IN cartcard.icn_gpoperfil.idperfil%TYPE,
                               pPrivilegios       IN cartcard.icn_gpoperfil.privilegios%TYPE,
                               p_status           IN cartcard.icn_gpoperfil.status%TYPE,
                               p_usuario_modifico IN cartcard.icn_gpoperfil.USUARIO_MODIFICO%TYPE,
                               p_accion           IN NUMBER,
                               resultado          OUT NUMBER,
                               resultadotex       out VARCHAR2);
 PROCEDURE CAT_ICN_FUNCION (pIdfuncion        IN cartcard.icn_funcion.idfuncion%TYPE,
                            pIdGpoPfil        IN cartcard.icn_funcion.idgpopfil%TYPE,
                            pIdPadre          IN cartcard.icn_funcion.idpadre%TYPE,
                            pPosicion         IN cartcard.icn_funcion.posicion%TYPE,
                            pIcono            IN cartcard.icn_funcion.icono%TYPE,
                            pUrl              IN cartcard.icn_funcion.url%TYPE,
                            pStatus           IN cartcard.icn_funcion.status%TYPE,
                            pDescripcion      IN cartcard.icn_funcion.descripcion%TYPE,
                            pUsuario_modifico IN cartcard.icn_funcion.usuario_modifico%TYPE,
                            p_accion          IN NUMBER,
                            resultado         OUT NUMBER,
                            resultadotex      out VARCHAR2);
  PROCEDURE ICN_USR_ROL(pIdusuario        IN cartcard.icn_usr_rol.idusuario%TYPE,
                        pIdfuncion        IN cartcard.icn_usr_rol.idfuncion%TYPE,
                        pIdfuncionNew     IN cartcard.icn_usr_rol.idfuncion%TYPE,
                        pIdpermiso        IN cartcard.icn_usr_rol.idpermiso%TYPE,
                        pIdpermisoNew     IN cartcard.icn_usr_rol.idpermiso%TYPE,
                        pStatus           IN cartcard.icn_usr_rol.status%TYPE,
                        pUsuario_modifico IN cartcard.icn_usr_rol.usuario_modifico%TYPE,
                        p_accion          IN NUMBER,
                        resultado         OUT NUMBER,
                        resultadotex      out VARCHAR2);                            
 PROCEDURE IC_USUARIO(pereg         IN CARTCARD.IC_USUARIO%ROWTYPE,
                      p_accion      IN NUMBER, 
                      RESULTADO     OUT NUMBER,
                      RESULTADOTEX  OUT VARCHAR2,
                      psIdUsuario   OUT cartcard.IC_USUARIO.id_usuario%TYPE);

  PROCEDURE CAT_CP(pcp                 IN cartcard.icn_cp.codigopostal%TYPE,
  				   pcpnew              IN cartcard.icn_cp.codigopostal%TYPE,
                   pASENTAMIENTO       IN cartcard.icn_cp.asentamiento%TYPE,
                   pASENTAMIENTONEW    IN cartcard.icn_cp.asentamiento%TYPE,
                   pTipoAsen           IN cartcard.icn_cp.tipo_asentamiento%TYPE,
				   pTipoAsennew        IN cartcard.icn_cp.tipo_asentamiento%TYPE,
                   pidMun              IN cartcard.icn_cp.id_municipio%TYPE,
				   pidMunnew           IN cartcard.icn_cp.id_municipio%TYPE,
                   pidEdo              IN cartcard.icn_cp.id_estado%TYPE,
				   pidEdonew           IN cartcard.icn_cp.id_estado%TYPE,
                   pidPais             IN cartcard.icn_cp.id_pais%TYPE,
				   pidPaisnew          IN cartcard.icn_cp.id_pais%TYPE,
                   pciudad             IN cartcard.icn_cp.ciudad%TYPE,
                   p_usuario_modifico IN cartcard.ic_cat_documento.USUARIO_MODIFICO%TYPE,
                   p_accion           IN NUMBER,
                   resultado          OUT number,
                   resultadotex       out varchar2);
end PKG_CATALOGOS;
/

SHOW ERRORS;


CREATE OR REPLACE package PKG_ICN_DATOS is

 PROCEDURE AgregaTarjetaC3(PENumTarjeta    in cartcard.icn_tarjeta.cardnumber%type,
                           PEToken         in cartcard.icn_tarjeta.token%type,
                           PENombre        in cartcard.icn_clientes.nombre%type,
                           PEFechaExpira   in varchar2,
                           PECvv           in cartcard.icn_tarjeta.cvv%type,
                           PEIdMembrecia   in cartcard.icn_tarjeta.id_tipo_membresia%type,
                           PEPasscode      in varchar2,
                           PSReferencia    out cartcard.icn_contrato.referencia%type,
                           PSSuite         out cartcard.icn_contrato.suite%type,
                           PSCod_Error     out  number,
                           PSMsg_Error     out  varchar2);

 procedure ActualizaTarjetaC3(PENumTarjeta    in cartcard.icn_tarjeta.cardnumber%type,
                              PEContraena     in cartcard.icn_clientes.contrasenia%type,
                              PENombreUsuario in cartcard.icn_clientes.nombre_usuario%type,
                              PENombre        in cartcard.icn_clientes.nombre%type,
                              PEApaterno      in cartcard.icn_clientes.apaterno%type,
                              PEAmaterno      in cartcard.icn_clientes.amaterno%type,
                              PEFnacimiento   in varchar2,
                              PECalle         in cartcard.icn_clientes.calle%type,
                              PEColonia       in cartcard.icn_clientes.colonia%type,
                              PECiudad        in cartcard.icn_clientes.ciudad%type,
                              PECP            in cartcard.icn_clientes.cp%type,
                              PEMunId         in cartcard.icn_clientes.id_municipio%type,
                              PEEdoId         in cartcard.icn_clientes.id_estado%type,
                              PEPaisId        in cartcard.icn_clientes.id_pais%type,
                              PETelefono      in cartcard.icn_clientes.telefono%type,
                              PECell          in cartcard.icn_clientes.celular%type,
                              PENIdentifica   in cartcard.icn_clientes.numero_identificacion%type,
                              PePregunta1     in cartcard.preguntasusuario.preguntaestandar1id%type,
                              PeRespuesta1    in cartcard.preguntasusuario.respuesta1%type,
                              PePregunta2     in cartcard.preguntasusuario.preguntaestandar2id%type,
                              PeRespuesta2    in cartcard.preguntasusuario.respuesta2%type,
                              PEDuracionMem   in cartcard.membrecia.duracion%type,
                              PEUsrModifica   in cartcard.icn_clientes.usuario_modifico%type,
                              PETelefonoOficina IN CARTCARD.ICN_CLIENTES.TELEFONO_OFICINA%TYPE,
                              PEExtension       IN CARTCARD.ICN_CLIENTES.EXTENSION%TYPE,
                              PSIdUsuario     out cartcard.icn_clientes.id_usuario%type,
                              PSToken         out cartcard.icn_tarjeta.token%type,
                              PSFechaVenc     out varchar2,
                              PSReferencia    out cartcard.icn_contrato.referencia%type,
                              PSSuite         out cartcard.icn_contrato.suite%type,
                              PSCod_Error     out  number,
                              PSMsg_Error     out  varchar2);

 PROCEDURE CAMBIOESTATUSUSUARIO (
   peid_usuario         IN   CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
   pereferencia         IN   CARTCARD.ICN_TARJETA.REFERENCIA%TYPE,
   peestatus_tarjeta    IN   CARTCARD.ICN_TARJETA.ID_STATUS_TARJETA%TYPE,
   peestatus_bloqueo    IN   CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%TYPE,
   peestatus_usuario    IN   CARTCARD.ICN_CLIENTES.ESTATUS%TYPE,
   peUsuarioModifica    IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE);

 PROCEDURE RESTABLECECARD(
   pereferencia         IN   CARTCARD.ICN_TARJETA.REFERENCIA%type,
   p_tipoMembresia      IN cartcard.icn_tarjeta.id_tipo_membresia%type,
   peUsuarioModifica    IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE);

 PROCEDURE agregamembresia(p_usuarioid        IN cartcard.icn_clientes.id_usuario%type,
                            p_tipomembresia    IN cartcard.icn_tarjeta.id_tipo_membresia%type,
                            p_fechaalta        IN VARCHAR2,
                            p_fechavencimiento IN VARCHAR2,
                            p_referencia       OUT  cartcard.icn_tarjeta.referencia%type,
                            p_suite            OUT  cartcard.icn_contrato.suite%type);

 PROCEDURE actualizamembresia(PEIdMembresia  IN CARTCARD.icn_tarjeta.id_tipo_membresia%type,
                              PEfechaalta    IN   VARCHAR2,
                              PEreferencia   IN CARTCARD.icn_tarjeta.referencia%type);

 PROCEDURE renovacionmembresia(p_referencia   IN   cartcard.icn_tarjeta.referencia%TYPE);

 PROCEDURE actualizadatosusr (
   pusuarioid          IN   cartcard.icn_clientes.id_usuario%TYPE,
   pcalle              IN   cartcard.icn_clientes.calle%TYPE,
   pcolonia            IN   cartcard.icn_clientes.colonia%TYPE,
   pmunicipioid        IN   cartcard.icn_clientes.id_municipio%TYPE,
   pciudad             IN   cartcard.icn_clientes.ciudad%TYPE,
   pcodigopostal       IN   cartcard.icn_clientes.cp%TYPE,
   ptelefono           IN   cartcard.icn_clientes.telefono%TYPE,
   ppaisid             IN   cartcard.icn_clientes.id_pais%TYPE,
   pestadoid           IN   cartcard.icn_clientes.id_estado%TYPE,
   pcelular            IN   cartcard.icn_clientes.celular%TYPE,
   pusuario_modifico   IN   cartcard.icn_clientes.usuario_modifico%TYPE,
   pnumext             IN   cartcard.icn_clientes.num_ext%TYPE,
   pnumint             IN   cartcard.icn_clientes.num_int%TYPE,
   ptelefono_oficina   IN cartcard.icn_clientes.telefono_oficina%TYPE,
   pextension          IN cartcard.icn_clientes.extension%TYPE);

 PROCEDURE ACTUALIZAMAILUSUARIO (pusuarioid       IN       CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                                pcorreonuevo      IN       CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
                                pcorreoanterior   IN       CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
                                pusuario_modifico   IN   cartcard.icn_clientes.usuario_modifico%TYPE,
                                pmensaje          OUT      INTEGER);

 PROCEDURE ACTUALIZACONTRASE (PAUsuarioId       IN   CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                              PAContrasena      IN   CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                              PAUsuarioModifico IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE);

 PROCEDURE ACTUALIZAPASSW (PEIdUsuario           IN   CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                          PEContrasenaOLD       IN   CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                          PEContrasena          IN   CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                          PEUsuarioModifico     IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE,
                          PSCOD_RESUL           OUT NUMBER,
                          PSMSG_RESUL           OUT VARCHAR2);

 PROCEDURE ACTUALIZAIDENTIFICACION(p_idusuario in cartcard.icn_clientes.ID_USUARIO%TYPE,
                                  p_identificacionid   IN  CARTCARD.ICN_CLIENTES.ID_TIPO_IDENTIFICACION%TYPE,
                                  p_nroidentificacion  IN  CARTCARD.ICN_CLIENTES.NUMERO_IDENTIFICACION%TYPE,
                                  pusuario_modifico  IN  CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%type);
 PROCEDURE agregausuario (
   p_nombre                IN       cartcard.icn_clientes.nombre%TYPE,
   p_apaterno              IN       cartcard.icn_clientes.apaterno%TYPE,
   p_amaterno              IN       cartcard.icn_clientes.amaterno%TYPE,
   p_calle                 IN       cartcard.icn_clientes.calle%TYPE,
   p_colonia               IN       cartcard.icn_clientes.colonia%TYPE,
   p_municipioid           IN       cartcard.icn_clientes.id_municipio%TYPE,
   p_ciudad                IN       cartcard.icn_clientes.ciudad%TYPE,
   p_codigopostal          IN       cartcard.icn_clientes.cp%TYPE,
   p_telefono              IN       cartcard.icn_clientes.telefono%TYPE,
   p_celular               IN       cartcard.icn_clientes.celular%TYPE,
   p_mail                  IN       cartcard.icn_clientes.correo_electronico%TYPE,
   p_paisid                IN       cartcard.icn_clientes.id_pais%TYPE,
   p_estadoid              IN       cartcard.icn_clientes.id_estado%TYPE,
   p_nombreusuario         IN       cartcard.icn_clientes.nombre_usuario%TYPE,
   ppreguntaestandar1      IN       CARTCARD.preguntasusuario.PREGUNTAESTANDAR1ID%TYPE,
   ppreguntaestandar2      IN       CARTCARD.preguntasusuario.PREGUNTAESTANDAR2ID%TYPE,
   ppregunta1              IN       CARTCARD.preguntasusuario.PREGUNTA3%TYPE,
   ppregunta2              IN       CARTCARD.preguntasusuario.PREGUNTA4%TYPE,
   prespuestaestandar1     IN       CARTCARD.preguntasusuario.RESPUESTA1%TYPE,
   prespuestaestandar2     IN       CARTCARD.preguntasusuario.RESPUESTA2%TYPE,
   prespuesta1             IN       CARTCARD.preguntasusuario.RESPUESTA3%TYPE,
   prespuesta2             IN       CARTCARD.preguntasusuario.RESPUESTA4%TYPE,
   pidentificacion         IN       cartcard.icn_clientes.id_tipo_identificacion%TYPE,
   pnumeroidentificacion   IN       cartcard.icn_clientes.numero_identificacion%TYPE,
   ptipocliente            IN       CARTCARD.icn_clientes.TIPO_CLIENTE%TYPE,
   pcontrasenia            IN       cartcard.icn_clientes.contrasenia%TYPE,
   p_fechanacimiento       IN       VARCHAR2,
   p_usuario_modifico      IN       cartcard.icn_clientes.USUARIO_MODIFICO%TYPE,
   p_numint                IN       cartcard.icn_clientes.num_int%TYPE,
   p_numext                IN       cartcard.icn_clientes.num_ext%TYPE,
   p_canal                 IN       cartcard.icn_clientes.canal%TYPE,
   p_telefonoOficina       IN       cartcard.icn_clientes.telefono_oficina%TYPE,
   p_extension             IN       cartcard.icn_clientes.extension%TYPE,
   p_usuarioid             OUT      INTEGER,
   p_error                 OUT      INTEGER);

 PROCEDURE Actualizastatususr (pusuarioid         IN CARTCARD.ICN_CLIENTES.ID_USUARIO%type,
                               pestatus           IN CARTCARD.ICN_CLIENTES.estatus%type,
                               pusuario_modifico  IN CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%type);

 PROCEDURE Actstatustarjeta(PEidUsuario IN CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                                             PENUMEROTARJETA IN CARTCARD.ICN_TARJETA.CARDNUMBER%TYPE,
                                             PEESTATUSTARJETA IN CARTCARD.ICN_TARJETA.ID_STATUS_TARJETA%TYPE,
                                             PEESTATUSUSUARIO IN CARTCARD.ICN_CLIENTES.ESTATUS%TYPE,
                                             PSCOD_ERROR   OUT NUMBER,
                                             PSMsg_Error   OUT VARCHAR2,
                                             PSREFERENCIA  OUT CARTCARD.ICN_TARJETA.REFERENCIA%TYPE);

PROCEDURE cambiastatustarjeta(p_referencia IN cartcard.icn_tarjeta.referencia%type,
                              p_status     IN cartcard.icn_tarjeta.id_status_tarjeta%type,
                              PusuarioModifica in cartcard.icn_tarjeta.usuario_modifico%type);

PROCEDURE ELIMINAUSUARIO (p_usuarioid IN cartcard.icn_clientes.id_usuario%type,
                          PSCod_Error  out  number,
                          PSMsg_Error     out  varchar2);

 PROCEDURE Cat_tipo_membresia (p_id_tipo_membresia   IN   cartcard.ic_cat_tipo_membresia.id_tipo_membresia%TYPE,
                               p_costo               IN   cartcard.ic_cat_tipo_membresia.costo%TYPE,
                               p_descripcion         IN   cartcard.ic_cat_tipo_membresia.descripcion%TYPE,
                               p_usuario_modifico    IN   cartcard.ic_cat_tipo_membresia.usuario_modifico%TYPE,
                               p_duracion            IN   cartcard.ic_cat_tipo_membresia.duracion%TYPE);

 PROCEDURE OBTIENEPREGUNTAS (
   p_nombreusuario   IN     CARTCARD.ICN_CLIENTES.NOMBRE_USUARIO%TYPE,
   p_mail            IN     CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
   p_cursor          OUT    sys_refcursor);

 PROCEDURE ModificaTarjeta(PEReferencia IN CARTCARD.ICN_TARJETA.REFERENCIA%type,
                       PEcardnumber          IN CARTCARD.ICN_TARJETA.CARDNUMBER%type,
                       PEpterminalcode       IN CARTCARD.ICN_TARJETA.PTERMINALCODE%type,
                       PEproductcode         IN CARTCARD.ICN_TARJETA.PRODUCTCODE%type,
                       PEpid                 IN CARTCARD.ICN_TARJETA.PID%type,
                       PEpidtype             IN CARTCARD.ICN_TARJETA.PIDTYPE%type,
                       PEprbservice          IN CARTCARD.ICN_TARJETA.PRBSERVICE%type,
                       PEpdateofbirth        IN CARTCARD.ICN_TARJETA.PDATEOFBIRTH%type,
                       PEpembossedname       IN CARTCARD.ICN_TARJETA.PEMBOSSEDNAME%type,
                       PEptelephoneareacode  IN CARTCARD.ICN_TARJETA.PTELEPHONEAREACODE%type,
                       PEptelephone          IN CARTCARD.ICN_TARJETA.PTELEPHONE%type,
                       PEpfaxareacode        IN CARTCARD.ICN_TARJETA.PFAXAREACODE%type,
                       PEpfaxphone           IN CARTCARD.ICN_TARJETA.PFAXPHONE%type,
                       PEpcellphone          IN CARTCARD.ICN_TARJETA.PCELLPHONE%type,
                       PEpcellphoneareacode  IN CARTCARD.ICN_TARJETA.PCELLPHONEAREACODE%type,
                       PEpidexpiration       IN CARTCARD.ICN_TARJETA.PIDEXPIRATION%type,
                       PEpidcountry          IN CARTCARD.ICN_TARJETA.PIDCOUNTRY%type,
                       PEpidstate            IN CARTCARD.ICN_TARJETA.PIDSTATE%type,
                       PEplastname           IN CARTCARD.ICN_TARJETA.PLASTNAME%type,
                       PEppersonaltitle      IN CARTCARD.ICN_TARJETA.PPERSONALTITLE%type,
                       PEpmaindenname        IN CARTCARD.ICN_TARJETA.PMAINDENNAME%type,
                       PEpmiddlename         IN CARTCARD.ICN_TARJETA.PMIDDLENAME%type,
                       PEpfirstname          IN CARTCARD.ICN_TARJETA.PFIRSTNAME%type,
                       PEpcountry            IN CARTCARD.ICN_TARJETA.PCOUNTRY%type,
                       PEpstate              IN CARTCARD.ICN_TARJETA.PSTATE%type,
                       PEpcity               IN CARTCARD.ICN_TARJETA.PCITY%type,
                       PEpaddress            IN CARTCARD.ICN_TARJETA.PADDRESS%type,
                       PEpzipcode            IN CARTCARD.ICN_TARJETA.PZIPCODE%type,
                       PEpemail              IN CARTCARD.ICN_TARJETA.PEMAIL%type,
                       PErequestid           IN CARTCARD.ICN_TARJETA.REQUESTID%type,
                       PEoperationid         IN CARTCARD.ICN_TARJETA.OPERATIONID%type,
                       PEtoken               IN CARTCARD.ICN_TARJETA.TOKEN%type,
                       PEexpirationdate      IN CARTCARD.ICN_TARJETA.EXPIRATIONDATE%type,
                       PEverificationcode    IN CARTCARD.ICN_TARJETA.VERIFICATIONCODE%type,
                       PEid_emisor           IN CARTCARD.ICN_TARJETA.ID_EMISOR%type,
                       PEcvv                 IN CARTCARD.ICN_TARJETA.CVV%type,
                       PEtipo_tarjeta        IN CARTCARD.ICN_TARJETA.TIPO_TARJETA%type,
                       PEestatus_bloqueo     IN CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%type,
                       PEusuario_modifico    IN CARTCARD.ICN_TARJETA.USUARIO_MODIFICO%type,
                       PSCod_error out number,
                       PSMsg_Error out varchar2);
 PROCEDURE ELIMINAR_MEMBRESIA (p_id  IN CARTCARD.IC_CAT_TIPO_MEMBRESIA.ID_TIPO_MEMBRESIA%TYPE);

 PROCEDURE membresiaexpirada(p_referencia IN cartcard.icn_tarjeta_complemento.referencia%type,
                            p_estatus    IN cartcard.icn_tarjeta_complemento.id_estatus%type,
                            p_comentario IN cartcard.icn_tarjeta_complemento.comentario%type,
                            p_accion IN NUMBER,
                            p_resultado  OUT NUMBER,
                            resultadotex OUT VARCHAR2);

 PROCEDURE CambioStatusBloqueo(pCardNumber    IN cartcard.icn_tarjeta.cardnumber%type,
                               pStatusBloqueo in cartcard.icn_tarjeta.estatus_bloqueo%type,
                               pResultado     out NUMBER,
                               pResultadoMsg  out VARCHAR2);

 PROCEDURE ACTUALIZAPREGUNTA(pusuarioID     IN cartcard.preguntasusuario.usuarioid%type,
                             pidPregunta1   IN cartcard.preguntasusuario.preguntaestandar1id%type,
                             pRespuesta1    IN cartcard.preguntasusuario.respuesta1%type,
                             pidPregunta2   IN cartcard.preguntasusuario.preguntaestandar2id%type,
                             pidRespuesta2  IN cartcard.preguntasusuario.respuesta2%type,
                             pResultado     OUT NUMBER,
                             pResultadoMsg  OUT VARCHAR2);

PROCEDURE MODIFICA_TARJETA_COM(PEReferencia          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.REFERENCIA%type,
                               PECardnumber          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNUMBER%type,
                               PECardname            IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNAME%type,
                               PENombre_remesa       IN CARTCARD.ICN_TARJETA_COMPLEMENTO.NOMBRE_REMESA%type,
                               PEId_estatus          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.ID_ESTATUS%type,
                               PEComentario          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.COMENTARIO%type,
                               PEFecha_creacion      IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_CREACION%type,
                               PEUsuario_modifico    IN CARTCARD.ICN_TARJETA_COMPLEMENTO.USUARIO_MODIFICO%type,
                               PEFecha_vigencia      IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_VIGENCIA%type,
                               PEFecha_bloqueo       IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_BLOQUEO%type,
                               PSCod_error           out number,
                               PSMsg_Error           out varchar2);
end PKG_ICN_DATOS;
/

SHOW ERRORS;


CREATE OR REPLACE package PKG_ICN_REPORTES is

 Function getTotalFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) return number;
 Function getFechaFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.fecha_aplicacion%type;
  Function getAnualidad(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.importe_dls%type;
  Function getImporteMxpFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.importe_mx%type;
  Function getTipoCambioFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.tipo_cambio%type;
  Function getImporteDlsFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.importe_dls%type;
  Function getFechaUltimaFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.fecha_aplicacion%type;            
  Function getTipoFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ic_cat_canal.descripcion%type;    
  Function getSucursalFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.icn_cat_banco.nombre%type;
end ;
/

SHOW ERRORS;


CREATE OR REPLACE package PKG_ICN_SERVICIO is

 PROCEDURE ADD_Cliente (pereg       IN CARTCARD.ICN_CLIENTES%ROWTYPE,
                       psIdUsuario OUT cartcard.ICN_CLIENTES.id_usuario%TYPE);

 PROCEDURE ADD_Cliente (PEnombre    IN CARTCARD.ICN_CLIENTES.NOMBRE%TYPE,
                        PEapaterno  IN CARTCARD.ICN_CLIENTES.APATERNO%TYPE,
                        PEamaterno  IN CARTCARD.ICN_CLIENTES.AMATERNO%TYPE,
                        PEnombre_usuario IN CARTCARD.ICN_CLIENTES.NOMBRE_USUARIO%TYPE,
                        PEcontrasenia IN CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                        PEcorreo_electronico IN CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
                        PEcp        IN CARTCARD.ICN_CLIENTES.CP%TYPE,
                        PEciudad    IN CARTCARD.ICN_CLIENTES.CIUDAD%TYPE,
                        PEcolonia   IN CARTCARD.ICN_CLIENTES.COLONIA%TYPE,
                        PEid_municipio IN CARTCARD.ICN_CLIENTES.ID_MUNICIPIO%TYPE,
                        PEid_estado IN CARTCARD.ICN_CLIENTES.ID_ESTADO%TYPE,
                        PEid_pais   IN CARTCARD.ICN_CLIENTES.ID_PAIS%TYPE,
                        PEcalle     IN CARTCARD.ICN_CLIENTES.CALLE%TYPE,
                        PEnum_ext   IN CARTCARD.ICN_CLIENTES.NUM_EXT%TYPE,
                        PEnum_int   IN CARTCARD.ICN_CLIENTES.NUM_INT%TYPE,
                        PEtelefono  IN CARTCARD.ICN_CLIENTES.TELEFONO%TYPE,
                        PEcelular   IN CARTCARD.ICN_CLIENTES.CELULAR%TYPE,
                        PEfecha_nacimiento IN CARTCARD.ICN_CLIENTES.FECHA_NACIMIENTO%TYPE,
                        PEid_tipo_identificacion IN CARTCARD.ICN_CLIENTES.ID_TIPO_IDENTIFICACION%TYPE,
                        PEnumero_identificacion IN CARTCARD.ICN_CLIENTES.NUMERO_IDENTIFICACION%TYPE,
                        PEtipo_cliente IN CARTCARD.ICN_CLIENTES.TIPO_CLIENTE%TYPE,
                        PEusuario_modifico IN CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE,
                        PECANAL      IN CARTCARD.ICN_CLIENTES.CANAL%TYPE,
                        PETelefonoOficina IN CARTCARD.ICN_CLIENTES.TELEFONO_OFICINA%TYPE,
                        PEExtension IN CARTCARD.ICN_CLIENTES.EXTENSION%TYPE,
                        psIdUsuario OUT cartcard.ICN_CLIENTES.id_usuario%TYPE,
                        PSReferencia OUT CARTCARD.ICN_CONTRATO.REFERENCIA%TYPE,
                        PSSUITE      OUT CARTCARD.ICN_CONTRATO.SUITE%TYPE);

 PROCEDURE Modifica_CLIENTE (pereg IN CARTCARD.ICN_CLIENTES%ROWTYPE,
                             PScod_error OUT NUMBER,
                             PSMsg_Error OUT VARCHAR2);

 PROCEDURE ADD_CONTRATO(PEReg          IN  CARTCARD.ICN_CONTRATO%ROWTYPE,
                        PSReferencia   OUT CARTCARD.ICN_CONTRATO.REFERENCIA%TYPE,
                        PSSUITE        OUT CARTCARD.ICN_CONTRATO.SUITE%TYPE);

 PROCEDURE ADD_CONTRATO(PEIdUsuario  IN  CARTCARD.ICN_CONTRATO.ID_USUARIO%TYPE,
                        PEENTIDAD    IN  CARTCARD.ICN_CONTRATO.ENTIDAD%TYPE,
                        PESUCURSAL   IN  CARTCARD.ICN_CONTRATO.SUCURSAL%TYPE,
                        PEUSUARIOMOD IN CARTCARD.ICN_CONTRATO.USUARIO_MODIFICO%TYPE,
                        PSReferencia   OUT CARTCARD.ICN_CONTRATO.REFERENCIA%TYPE,
                        PSSUITE        OUT CARTCARD.ICN_CONTRATO.SUITE%TYPE);

 PROCEDURE Modifica_contrato(pereg IN CARTCARD.Icn_Contrato%ROWTYPE,
                             PScod_error OUT NUMBER,
                             PSMsg_Error OUT VARCHAR2);

 PROCEDURE ADD_TARJETA(PEREG  IN  CARTCARD.ICN_TARJETA%ROWTYPE,
                       PSCod_error out number,
                       PSMsg_Error out varchar2);

 PROCEDURE ADD_TARJETA(PEReferencia          IN CARTCARD.ICN_TARJETA.REFERENCIA%type,
                       PEcardnumber          IN CARTCARD.ICN_TARJETA.CARDNUMBER%type,
                       PEpterminalcode       IN CARTCARD.ICN_TARJETA.PTERMINALCODE%type,
                       PEproductcode         IN CARTCARD.ICN_TARJETA.PRODUCTCODE%type,
                       PEpid                 IN CARTCARD.ICN_TARJETA.PID%type,
                       PEpidtype             IN CARTCARD.ICN_TARJETA.PIDTYPE%type,
                       PEprbservice          IN CARTCARD.ICN_TARJETA.PRBSERVICE%type,
                       PEpdateofbirth        IN CARTCARD.ICN_TARJETA.PDATEOFBIRTH%type,
                       PEpembossedname       IN CARTCARD.ICN_TARJETA.PEMBOSSEDNAME%type,
                       PEptelephoneareacode  IN CARTCARD.ICN_TARJETA.PTELEPHONEAREACODE%type,
                       PEptelephone          IN CARTCARD.ICN_TARJETA.PTELEPHONE%type,
                       PEpfaxareacode        IN CARTCARD.ICN_TARJETA.PFAXAREACODE%type,
                       PEpfaxphone           IN CARTCARD.ICN_TARJETA.PFAXPHONE%type,
                       PEpcellphone          IN CARTCARD.ICN_TARJETA.PCELLPHONE%type,
                       PEpcellphoneareacode  IN CARTCARD.ICN_TARJETA.PCELLPHONEAREACODE%type,
                       PEpidexpiration       IN CARTCARD.ICN_TARJETA.PIDEXPIRATION%type,
                       PEpidcountry          IN CARTCARD.ICN_TARJETA.PIDCOUNTRY%type,
                       PEpidstate            IN CARTCARD.ICN_TARJETA.PIDSTATE%type,
                       PEplastname           IN CARTCARD.ICN_TARJETA.PLASTNAME%type,
                       PEppersonaltitle      IN CARTCARD.ICN_TARJETA.PPERSONALTITLE%type,
                       PEpmaindenname        IN CARTCARD.ICN_TARJETA.PMAINDENNAME%type,
                       PEpmiddlename         IN CARTCARD.ICN_TARJETA.PMIDDLENAME%type,
                       PEpfirstname          IN CARTCARD.ICN_TARJETA.PFIRSTNAME%type,
                       PEpcountry            IN CARTCARD.ICN_TARJETA.PCOUNTRY%type,
                       PEpstate              IN CARTCARD.ICN_TARJETA.PSTATE%type,
                       PEpcity               IN CARTCARD.ICN_TARJETA.PCITY%type,
                       PEpaddress            IN CARTCARD.ICN_TARJETA.PADDRESS%type,
                       PEpzipcode            IN CARTCARD.ICN_TARJETA.PZIPCODE%type,
                       PEpemail              IN CARTCARD.ICN_TARJETA.PEMAIL%type,
                       PErequestid           IN CARTCARD.ICN_TARJETA.REQUESTID%type,
                       PEoperationid         IN CARTCARD.ICN_TARJETA.OPERATIONID%type,
                       PEtoken               IN CARTCARD.ICN_TARJETA.TOKEN%type,
                       PEexpirationdate      IN CARTCARD.ICN_TARJETA.EXPIRATIONDATE%type,
                       PEverificationcode    IN CARTCARD.ICN_TARJETA.VERIFICATIONCODE%type,
                       PEid_tipo_membresia   IN CARTCARD.ICN_TARJETA.ID_TIPO_MEMBRESIA%type,
                       PEid_emisor           IN CARTCARD.ICN_TARJETA.ID_EMISOR%type,
                       PEcvv                 IN CARTCARD.ICN_TARJETA.CVV%type,
                       PEtipo_tarjeta        IN CARTCARD.ICN_TARJETA.TIPO_TARJETA%type,
                       PEestatus_bloqueo     IN CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%type,
                       PEfecha_membrecia     IN CARTCARD.ICN_TARJETA.FECHA_MEMBRECIA%type,
                       PEfecha_creacion      IN CARTCARD.ICN_TARJETA.FECHA_CREACION%type,
                       PEusuario_modifico    IN CARTCARD.ICN_TARJETA.USUARIO_MODIFICO%type,
                       PSCod_error out number,
                       PSMsg_Error out varchar2);

 PROCEDURE Modifica_TARJETA (PEReg  IN  CARTCARD.ICN_TARJETA%ROWTYPE,
                             PScod_error OUT NUMBER,
                             PSMsg_Error OUT VARCHAR2);

 PROCEDURE ADD_MOVIMIENTOS(PEREG          IN  CARTCARD.ICN_MOVIMIENTOS%ROWTYPE,
                           PSIdMovimiento OUT  CARTCARD.ICN_MOVIMIENTOS.ID_MOVIMIENTO%TYPE);

 PROCEDURE ADD_OPERACIONES(PEREG          IN  CARTCARD.ICN_OPERACIONES%ROWTYPE,
                           PSCod_RESP out number,
                           PSMsg_RESP out varchar2);

 PROCEDURE ADD_MOVIMIENTOS(PEreferencia      IN  CARTCARD.ICN_MOVIMIENTOS.REFERENCIA%TYPE,
                           PEentidad         IN  CARTCARD.ICN_MOVIMIENTOS.ENTIDAD%TYPE,
                           PEidcanal         IN  CARTCARD.ICN_MOVIMIENTOS.ID_CANAL%TYPE,
                           PEidtipopago      IN  CARTCARD.ICN_MOVIMIENTOS.ID_TIPO_PAGO%TYPE,
                           PEidtiposervicio  IN  CARTCARD.ICN_MOVIMIENTOS.ID_TIPO_SERVICIO%TYPE,
                           PEoperacionid     IN  CARTCARD.ICN_MOVIMIENTOS.OPERACIONID%TYPE,
                           PEtipocambio      IN  CARTCARD.ICN_MOVIMIENTOS.TIPO_CAMBIO%TYPE,
                           PEimportemx       IN  CARTCARD.ICN_MOVIMIENTOS.IMPORTE_MX%TYPE,
                           PEimportedls      IN  CARTCARD.ICN_MOVIMIENTOS.IMPORTE_DLS%TYPE,
                           PEcomisiondls     IN  CARTCARD.ICN_MOVIMIENTOS.COMISION_DLS%TYPE,
                           PEfechaaplicacion IN  CARTCARD.ICN_MOVIMIENTOS.FECHA_APLICACION%TYPE,
                           PEtransaccion     IN  CARTCARD.ICN_MOVIMIENTOS.TRANSACCION%TYPE,
                           PEusuario         IN  CARTCARD.ICN_MOVIMIENTOS.USUARIO%TYPE,
                           PEsucursal        IN  CARTCARD.ICN_MOVIMIENTOS.SUCURSAL%TYPE,
                           PEoperador        IN  CARTCARD.ICN_MOVIMIENTOS.OPERADOR%TYPE,
                           PEdescripcion     IN  CARTCARD.ICN_MOVIMIENTOS.DESCRIPCION%TYPE,
                           PEctacargo        IN  CARTCARD.ICN_MOVIMIENTOS.NUM_CTA_CARGO%TYPE,
                           PEtitulacargo     IN  CARTCARD.ICN_MOVIMIENTOS.TITULA_CTA_CARGO%TYPE,
                           PEctaabono        IN  CARTCARD.ICN_MOVIMIENTOS.NUM_CTA_ABONO%TYPE,
                           PEtitulaabono     IN  CARTCARD.ICN_MOVIMIENTOS.TITULA_CTA_ABONO%TYPE,
                           PEINSTEMISORA     IN  CARTCARD.ICN_MOVIMIENTOS.INSTITUCION_EMISORA%TYPE,
                           PEestatusann      IN  CARTCARD.ICN_MOVIMIENTOS.ESTATUS_ANN%TYPE,
                           PEipaddress       IN  CARTCARD.ICN_MOVIMIENTOS.IP_ADDRESS%TYPE,
                           PEterminal        IN  CARTCARD.ICN_MOVIMIENTOS.TERMINAL%TYPE,
                           PEusuariomodifico IN  CARTCARD.ICN_MOVIMIENTOS.USUARIO_MODIFICO%TYPE,
                           psidmovimiento    OUT CARTCARD.ICN_MOVIMIENTOS.ID_MOVIMIENTO%TYPE);

 PROCEDURE ADD_OPERACIONES(PEterminal        IN CARTCARD.ICN_OPERACIONES.TERMINAL%type,
                           PEentidad         IN CARTCARD.ICN_OPERACIONES.ENTIDAD%type,
                           PEidcanal         IN CARTCARD.ICN_OPERACIONES.ID_CANAL%type,
                           PEusuario         IN CARTCARD.ICN_OPERACIONES.USUARIO%type,
                           PEsucursal        IN CARTCARD.ICN_OPERACIONES.SUCURSAL%type,
                           PEoperacionid     IN CARTCARD.ICN_OPERACIONES.OPERACIONID%type,
                           PEcodigooperacion IN CARTCARD.ICN_OPERACIONES.CODIGOOPERACION%type,
                           PEmsgoperacion    IN CARTCARD.ICN_OPERACIONES.MSGOPERACION%type,
                           PEcodigoerror     IN CARTCARD.ICN_OPERACIONES.CODIGOERROR%type,
                           PEmsgerror        IN CARTCARD.ICN_OPERACIONES.MSGERROR%type,
                           PEdescripcion     IN CARTCARD.ICN_OPERACIONES.DESCRIPCION%type,
                           PEentrada         IN CARTCARD.ICN_OPERACIONES.ENTIDAD%type,
                           PEsalida          IN CARTCARD.ICN_OPERACIONES.SALIDA%type,
                           PEtiemporesp      IN CARTCARD.ICN_OPERACIONES.TIEMPO_RESP%type,
                           PEreferencia      IN CARTCARD.ICN_OPERACIONES.REFERENCIA%type,
                           PEimporte         IN CARTCARD.ICN_OPERACIONES.IMPORTE%type,
                           PEfechaoperacion  IN CARTCARD.ICN_OPERACIONES.FECHAOPERACION%type,
                           PEusuariomodifico IN CARTCARD.ICN_OPERACIONES.USUARIO_MODIFICO%TYPE,
                           PSCod_RESP out number,
                           PSMsg_RESP out varchar2);

 function getIupiCard(PEcadena in varchar2) return sys_refcursor;

 PROCEDURE ADD_CAT_OPERACION(pereg IN CARTCARD.ICN_CAT_OPERACION%ROWTYPE,
                             psCod_Resul OUT NUMBER,
                             psMsg_Resul OUT VARCHAR2);

 PROCEDURE ADD_CAT_TIPO_BLOQUEO(pereg IN CARTCARD.ICN_CAT_TIPO_BLOQUEO%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2);

 PROCEDURE ADD_OPERACIONES_HIST(PEREG          IN  CARTCARD.ICN_OPERACIONES_HISTORICO%ROWTYPE,
                           PSCod_RESP out number,
                           PSMsg_RESP out varchar2);

 PROCEDURE ADD_TARJETA_COMPL(pereg IN CARTCARD.ICN_TARJETA_COMPLEMENTO%ROWTYPE,
                                 PSCod_RESP out number,
                                 PSMsg_RESP out varchar2);

 PROCEDURE ADD_TARJETA_COMPL(PEreferencia     IN CARTCARD.ICN_TARJETA_COMPLEMENTO.REFERENCIA%TYPE,
                             PEcardnumber     IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNUMBER%TYPE,
                             PEcardname       IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNAME%TYPE,
                             PEnombre_remesa  IN CARTCARD.ICN_TARJETA_COMPLEMENTO.NOMBRE_REMESA%TYPE,
                             PEid_estatus     IN CARTCARD.ICN_TARJETA_COMPLEMENTO.ID_ESTATUS%TYPE,
                             PEcomentario     IN CARTCARD.ICN_TARJETA_COMPLEMENTO.COMENTARIO%TYPE,
                             PEfecha_creacion IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_CREACION%TYPE,
                             PEusuario_modifico  IN CARTCARD.ICN_TARJETA_COMPLEMENTO.USUARIO_MODIFICO%TYPE,
                             PEfecha_vigencia  IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_VIGENCIA%TYPE,
                             PEfecha_bloqueo   IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_BLOQUEO%TYPE,
                             PSCod_RESP out number,
                             PSMsg_RESP out varchar2);

 PROCEDURE Migrar_clientes(PSCod_RESP out number,
                           PSMsg_RESP out varchar2);

 PROCEDURE Migrar_Operaciones(PSCod_RESP out number,
                              PSMsg_RESP out varchar2);

 PROCEDURE ADD_CAT_TIPO_PAGO(pereg IN CARTCARD.IC_CAT_TIPO_PAGO%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2);

 PROCEDURE ADD_CAT_CANAL(pereg IN CARTCARD.IC_CAT_CANAL%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2);

 PROCEDURE ADD_CAT_TIPO_SERVICIO(pereg IN CARTCARD.IC_CAT_TIPO_SERVICIO%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2);

 PROCEDURE ADD_CAT_STATUS_CUENTA(pereg IN CARTCARD.IC_CAT_STATUS_CUENTA%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2);

 PROCEDURE ELIMINA_CLIENTE (p_correo        IN cartcard.icn_clientes.correo_electronico%type,
                            p_nombreUsuario IN cartcard.icn_clientes.nombre_usuario%type,
                            PSCod_Error     OUT  number,
                            PSMsg_Error     OUT  varchar2);
end PKG_ICN_SERVICIO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE          PKG_INFORA IS
    FUNCTION getInfOra(p_cadena IN VARCHAR2) RETURN sys_refcursor;
END;
/

SHOW ERRORS;


CREATE OR REPLACE package PKG_IUPICARD is

  -- Author  : Cesar Loeza
  -- Created : Dic/2010
  -- Purpose : Administracion de servicios IUPICARD

  -- Public function and procedure declarations
  
  CESTADOBLOQUEADA CONSTANT  CARTCARD.IC_DOCUMENTO.ESTATUS%TYPE:='2';
  CESTADOACTIVA    CONSTANT  CARTCARD.IC_DOCUMENTO.ESTATUS%TYPE:='1';
  
  PROCEDURE IC_SP_INSERTA_DOCUMENTO(PEIdUsuario   IN CARTCARD.IC_DOCUMENTO.USUARIOID%type,
                                 PEIdTipoDocto IN CARTCARD.IC_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
                                 PENombre      IN CARTCARD.IC_DOCUMENTO.NOMBRE_ARCHIVO%TYPE,
                                 PEDocumento   IN CARTCARD.IC_DOCUMENTO.DOCUMENTO%TYPE,
                                 PEEstatus     IN CARTCARD.IC_DOCUMENTO.ESTATUS%TYPE,
                                 PEComentario  IN CARTCARD.IC_DOCUMENTO.COMENTARIO%TYPE,
                                 PEUsuario     IN CARTCARD.IC_DOCUMENTO.USUARIO_MODIFICO%TYPE,
                                 PETipoArchivo IN CARTCARD.IC_DOCUMENTO.TIPO_ARCHIVO%TYPE,                                 
                                 PSCodResp     OUT varchar2);

  FUNCTION IC_FC_LISTA_USUARIOS RETURN sys_refcursor;
  
  FUNCTION IC_FC_DETALLE_DOCUMENTO(peIdUsuario   IN   CARTCARD.IC_DOCUMENTO.USUARIOID%TYPE)
                                 RETURN sys_refcursor;

  FUNCTION IC_FC_DATOS_USUARIO(peIdUsuario   IN   CARTCARD.IC_DOCUMENTO.USUARIOID%TYPE)
                                 RETURN sys_refcursor;

    PROCEDURE IC_SP_ACTUALIZA_DOCUMENTO(peIdUsuario    IN  CARTCARD.IC_DOCUMENTO.USUARIOID%TYPE,
                                     peIdTipoDocto  IN  CARTCARD.IC_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
                                     peEstatus      IN  CARTCARD.IC_DOCUMENTO.ESTATUS%TYPE,
                                     PeComentario   IN  CARTCARD.IC_DOCUMENTO.COMENTARIO%TYPE,
                                     peNomUsuario   IN  CARTCARD.IC_DOCUMENTO.USUARIO_MODIFICO%TYPE,
                                     PSCodResp      OUT varchar2);

    PROCEDURE IC_SP_ACTUALIZA_IMAGEN(peIdUsuario    IN  CARTCARD.IC_DOCUMENTO.USUARIOID%TYPE,
                                  peIdTipoDocto  IN  CARTCARD.IC_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
                                  peDocto        IN  CARTCARD.IC_DOCUMENTO.DOCUMENTO%TYPE,
                                  peNomUsuario   IN  CARTCARD.IC_DOCUMENTO.USUARIO_MODIFICO%TYPE,
                                   PENombreArc    IN CARTCARD.IC_DOCUMENTO.NOMBRE_ARCHIVO%TYPE,
                                  PETipoArchivo IN CARTCARD.IC_DOCUMENTO.TIPO_ARCHIVO%TYPE,
                                  PsCodResp      OUT varchar2);

    FUNCTION IC_FC_BUSQUEDA_XEMAIL(peEmail        IN   CARTCARD.Usuario.MAIL%TYPE)
                                  RETURN sys_refcursor;

  PROCEDURE IC_SP_INSERTA_TIP_DOCTO(PEidTipDocto  IN CARTCARD.Ic_Cat_Documento.ID_TIPO_DOCUMENTO%type,
                                    PEDescripcion IN CARTCARD.Ic_Cat_Documento.DESCRIPCION%type,
                                    PEUsuario     IN CARTCARD.Ic_Cat_Documento.USUARIO_MODIFICO%type);
                                    
  PROCEDURE IC_SP_ACTUALIZA_TIP_DOCTO(PEidTipDocto  IN CARTCARD.Ic_Cat_Documento.ID_TIPO_DOCUMENTO%type,
                                    PEDescripcion IN CARTCARD.Ic_Cat_Documento.DESCRIPCION%type,
                                    PEUsuario     IN CARTCARD.Ic_Cat_Documento.USUARIO_MODIFICO%type);

   PROCEDURE IC_SP_ELIMINA_TIP_DOCTO(PEidTipDocto  IN CARTCARD.Ic_Cat_Documento.ID_TIPO_DOCUMENTO%type);                                  

end PKG_IUPICARD;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE          PKG_LOGIN is

    FUNCTION ICN_EXISTEUSER(
            CUSUARIO CARTCARD.USERLOGIN.IDSESSION%TYPE,
            CIDSESSION CARTCARD.USERLOGIN.USUARIO%TYPE,
            PSDESC_COD  OUT VARCHAR2) RETURN NUMBER;
 
    PROCEDURE ICN_INSERTAUSER(
            IISSESSION       IN      CARTCARD.USERLOGIN.IDSESSION%TYPE,
            IUSUARIO         IN      CARTCARD.USERLOGIN.USUARIO%TYPE,
            IIP              IN      CARTCARD.USERLOGIN.IP%TYPE,
            IINTENTOS        IN      CARTCARD.USERLOGIN.INTENTOS%TYPE,
            ISTATUS          IN      CARTCARD.USERLOGIN.STATUS%TYPE,
            IUSERMODIFICO    IN      CARTCARD.USERLOGIN.USUARIO_MODIFICO%TYPE);
            
    PROCEDURE ICN_DETELEUSER(
            DUSUARIO         IN      CARTCARD.USERLOGIN.USUARIO%TYPE);
                                  
    PROCEDURE ICN_UPDATEUSER(
            UISSESSION       IN      CARTCARD.USERLOGIN.IDSESSION%TYPE,
            UUSUARIO         IN      CARTCARD.USERLOGIN.USUARIO%TYPE,
            UIP              IN      CARTCARD.USERLOGIN.IP%TYPE,
            UINTENTOS        IN      CARTCARD.USERLOGIN.INTENTOS%TYPE,
            USTATUS          IN      CARTCARD.USERLOGIN.STATUS%TYPE,
            UUSERMODIFICO    IN      CARTCARD.USERLOGIN.USUARIO_MODIFICO%TYPE);
            
END PKG_LOGIN;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE PKG_RMA_SERVICES IS
/******************************************************************************
   NAME:       PKG_RMA_SERVICES
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        13/06/2012             1. Created this package.
******************************************************************************/

  PROCEDURE CAT_ROL (P_IDROL              IN  RMA_ROL.IDROL%TYPE,
                     P_DESCRIPCION        IN  RMA_ROL.DESCRIPCION%TYPE,
                     P_STATUS             IN  RMA_ROL.STATUS%TYPE,
                     P_USUARIO_MODIFICO   IN  RMA_ROL.USUARIO_MODIFICO%TYPE,
                     P_ACCION             IN NUMBER,
                     P_RESULTADO          OUT NUMBER,
                     P_RESULTADODES       OUT VARCHAR2);

  PROCEDURE CAT_EJBS(P_IDEJB              IN  RMA_EJBS.IDEJB%TYPE,
                     P_DESCRIPCION        IN  RMA_EJBS.DESCRIPCION%TYPE,
                     P_STATUS             IN  RMA_EJBS.STATUS%TYPE,
                     P_USUARIO_MODIFICO   IN  RMA_EJBS.USUARIO_MODIFICO%TYPE,
                     P_ACCION             IN NUMBER,
                     P_RESULTADO          OUT NUMBER,
                     P_RESULTADODES       OUT VARCHAR2);

  PROCEDURE CAT_METODOS(P_IDMETODO           IN  RMA_METODOS.IDMETODO%TYPE,
                        P_IDEJB              IN  RMA_METODOS.IDEJB %TYPE,
                        P_DESCRIPCION     IN  RMA_METODOS.DESCRIPCION %TYPE,
                        P_STATUS             IN  RMA_METODOS.STATUS%TYPE,
                        P_USUARIO_MODIFICO   IN  RMA_METODOS.USUARIO_MODIFICO%TYPE,
                        P_ACCION             IN NUMBER,
                        P_RESULTADO          OUT NUMBER,
                        P_RESULTADODES       OUT VARCHAR2);

  PROCEDURE CAT_ROL_METODO(P_IDROL_METODO       IN  RMA_ROL_METODOS.IDROL_METODO%TYPE,
                           P_IDMETODO           IN  RMA_ROL_METODOS.IDMETODO%TYPE,
                           P_IDROL              IN  RMA_ROL_METODOS.IDROL%TYPE,
                           P_STATUS             IN  RMA_ROL_METODOS.STATUS%TYPE,
                           P_USUARIO_MODIFICO   IN  RMA_ROL_METODOS.USUARIO_MODIFICO%TYPE,
                           P_ACCION             IN NUMBER,
                           P_RESULTADO          OUT NUMBER,
                           P_RESULTADODES       OUT VARCHAR2);

  PROCEDURE CAT_MACS(P_MAC                IN  RMA_MACS.MAC%TYPE,
                     P_IDROL              IN  RMA_MACS.IDROL%TYPE,
                     P_NOMBRE_APLICACION  IN  RMA_MACS.NOMBRE_APLICACION%TYPE,
                     P_STATUS             IN  RMA_MACS.STATUS%TYPE,
                     P_USUARIO_MODIFICO   IN  RMA_MACS.USUARIO_MODIFICO%TYPE,
                     P_ACCION             IN NUMBER,
                     P_RESULTADO          OUT NUMBER,
                     P_RESULTADODES       OUT VARCHAR2);

  FUNCTION GET_CAT_ROL RETURN SYS_REFCURSOR;

  FUNCTION GET_CAT_EJBS RETURN SYS_REFCURSOR;

  FUNCTION GET_CAT_METODOS RETURN SYS_REFCURSOR;

  FUNCTION GET_CAT_ROL_METODOS RETURN SYS_REFCURSOR;

  FUNCTION GET_CAT_MACS RETURN SYS_REFCURSOR;

  FUNCTION GET_ROL_METODOS_EJB RETURN SYS_REFCURSOR;

END PKG_RMA_SERVICES;
/

SHOW ERRORS;


CREATE OR REPLACE package PKG_USUARIO is

 FUNCTION IC_FC_GRUPO_ROLES(V_GRUP_ROL CARTCARD.IC_CAT_GRUPO_ROLES.ID%TYPE) RETURN sys_refcursor;
 
 FUNCTION IC_FC_ROLES_USUARIO(V_ID_USER CARTCARD.IC_USUARIO.ID_USUARIO%TYPE) RETURN sys_refcursor;
 
    PROCEDURE IC_SP_ADD_USUARIO_ROL(V_ID_USER      IN           CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
                              V_USER_MODIFICA      IN CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,
                                V_ID_ROL                  IN CARTCARD.IC_CAT_ROLES.ID_ROLES%TYPE);
    PROCEDURE IC_SP_ACTUALIZA_USUARIO_ROL(PEIDUSUARIOROL  IN CARTCARD.IC_TA_USUARIO_ROL.ID_USUARIO_ROL%TYPE,
                                          PEIDROL         IN CARTCARD.IC_TA_USUARIO_ROL.ID_ROL%TYPE,
                                          PEIDUSUARIO     IN CARTCARD.IC_TA_USUARIO_ROL.ID_USUARIO%TYPE,
                                          PEUSERMODIFICA  IN CARTCARD.IC_TA_USUARIO_ROL.USUARIO_MODIFICO%TYPE);
    PROCEDURE IC_SP_ADD_GRUPO_ROL(PENOMBRE_GRUPO     IN CARTCARD.IC_CAT_GRUPO_ROLES.NOMBRE_GRUP_ROL%TYPE,
                                       PE_USER_MODIFICA IN CARTCARD.IC_CAT_GRUPO_ROLES.USUARIO_MODIFICO%TYPE);
                                  
    PROCEDURE IC_SP_ACTUALIZA_GRUPO_ROL(PEID     IN   CARTCARD.IC_CAT_GRUPO_ROLES.ID%TYPE,
                                       PENOMBRE_GRUPO IN     CARTCARD.IC_CAT_GRUPO_ROLES.NOMBRE_GRUP_ROL%TYPE,
                                       PE_USER_MODIFICA IN CARTCARD.IC_CAT_GRUPO_ROLES.USUARIO_MODIFICO%TYPE);
    PROCEDURE IC_SP_ADD_PERMISOS(PEDESCRIPCION  IN CARTCARD.IC_CAT_PERMISO.DESCRIPCION%TYPE,
                                 PEUSUARIO      IN CARTCARD.IC_CAT_PERMISO.USUARIO_MODIFICO%TYPE);
    PROCEDURE IC_SP_ACTUALIZA_PERMISOS(PEIDPERMISO   IN  CARTCARD.IC_CAT_PERMISO.ID_PERMISO%TYPE,
                                       PEDESCRIPCION IN  CARTCARD.IC_CAT_PERMISO.DESCRIPCION%TYPE,
                                       PEUSUARIO     IN  CARTCARD.IC_CAT_PERMISO.USUARIO_MODIFICO%TYPE);
    PROCEDURE IC_SP_ADD_ROLES(PEIDGRUPO    IN CARTCARD.IC_CAT_ROLES.ID_GRUP_ROL%TYPE,
                              PEIDPERMISO  IN CARTCARD.IC_CAT_ROLES.ID_PERMISO%TYPE,
                              PEDESCRIPCION IN CARTCARD.IC_CAT_ROLES.NOMBRE_ROL%TYPE,
                              PEUSUARIO     IN CARTCARD.IC_CAT_ROLES.USUARIO_MODIFICO%TYPE);
    PROCEDURE IC_SP_ACTUALIZA_ROL(PEIDROL     IN   CARTCARD.IC_CAT_ROLES.ID_ROLES%TYPE,   
                                  PEIDGRUPO   IN   CARTCARD.IC_CAT_ROLES.ID_GRUP_ROL%TYPE,
                                  PEIDPERMISO IN   CARTCARD.IC_CAT_ROLES.ID_PERMISO%TYPE,
                                  PENOMBRE    IN   CARTCARD.IC_CAT_ROLES.NOMBRE_ROL%TYPE,
                                  PEUSUARIO   IN   CARTCARD.IC_CAT_ROLES.USUARIO_MODIFICO%TYPE);
 PROCEDURE IC_SP_REGISTRA_USUARIO(PELOGIN     IN CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
                               PECONTRASENIA  IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
                               PENOMBRE       IN CARTCARD.IC_USUARIO.NOMBRE%TYPE,
                               PEAPATERNO     IN CARTCARD.IC_USUARIO.APATERNO%TYPE,
                               PEAMATERNO     IN CARTCARD.IC_USUARIO.AMATERNO%TYPE,
                               PENUMIDENTIF   IN CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
                               PECALLE        IN CARTCARD.IC_USUARIO.CALLE%TYPE,
                               PECOLONIA      IN CARTCARD.IC_USUARIO.COLONIA%TYPE,
                               PECP           IN CARTCARD.IC_USUARIO.CP%TYPE,
                               PETELEFONO     IN CARTCARD.IC_USUARIO.TELEFONO%TYPE,
                               PECORREO       IN CARTCARD.IC_USUARIO.CORREO_ELECTRONICO%TYPE,
                               PEUSUARIOMOD   IN CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,                               
                               PSIDUSUARIO    OUT CARTCARD.IC_USUARIO.ID_USUARIO%TYPE);
 PROCEDURE IC_SP_ACTUALIZA_USUARIO(PEIDUSUARIO IN CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
                               PENOMBRE       IN CARTCARD.IC_USUARIO.NOMBRE%TYPE,
                               PEAPATERNO     IN CARTCARD.IC_USUARIO.APATERNO%TYPE,
                               PEAMATERNO     IN CARTCARD.IC_USUARIO.AMATERNO%TYPE,
                               PENUMIDENTIF   IN CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
                               PECALLE        IN CARTCARD.IC_USUARIO.CALLE%TYPE,
                               PECOLONIA      IN CARTCARD.IC_USUARIO.COLONIA%TYPE,
                               PECP           IN CARTCARD.IC_USUARIO.CP%TYPE,
                               PETELEFONO     IN CARTCARD.IC_USUARIO.TELEFONO%TYPE,
                               PECORREO       IN CARTCARD.IC_USUARIO.CORREO_ELECTRONICO%TYPE,
                               PEUSUARIOMOD   IN CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,
                               PECONTRASENIA  IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE);
   FUNCTION IC_FC_LISTA_USUARIOS
   RETURN sys_refcursor;
   FUNCTION IC_FC_VALIDA_USUARIO(PELOGIN     IN CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
                                 PEPASSWORD  IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
                                 PSDESC_COD  OUT VARCHAR2)
   RETURN NUMBER;
   
   procedure IC_SP_ALTA_USUARIO_ROL
                              (PENOMUSUARIO   IN CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
                               PECONTRASENIA  IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
                               PENOMBRE       IN CARTCARD.IC_USUARIO.NOMBRE%TYPE,
                               PEAPATERNO     IN CARTCARD.IC_USUARIO.APATERNO%TYPE,
                               PEAMATERNO     IN CARTCARD.IC_USUARIO.AMATERNO%TYPE,
                               PENUMIDENTIF   IN CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
                               PECALLE        IN CARTCARD.IC_USUARIO.CALLE%TYPE,
                               PECOLONIA      IN CARTCARD.IC_USUARIO.COLONIA%TYPE,
                               PECP           IN CARTCARD.IC_USUARIO.CP%TYPE,
                               PETELEFONO     IN CARTCARD.IC_USUARIO.TELEFONO%TYPE,
                               PECORREO       IN CARTCARD.IC_USUARIO.CORREO_ELECTRONICO%TYPE,
                               PEUSUARIOMOD   IN CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,
                               PEIDROL        IN CARTCARD.IC_TA_USUARIO_ROL.ID_ROL%TYPE,
                               PSIDUSUARIO    OUT CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
                               PSCOD_ERROR    OUT NUMBER);

 PROCEDURE IC_SP_ACTUALIZA_USUARIOREG(PEREGUSUARIO IN CARTCARD.IC_USUARIO%ROWTYPE);

end PKG_USUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE types
AS
    TYPE refCursor IS REF CURSOR;
END;
/

SHOW ERRORS;


CREATE OR REPLACE package body          PKG_CATALOGOS is
  PROCEDURE CAT_CANAL(pIdCanal           IN cartcard.ic_cat_canal.ID_CANAL%TYPE,
                      p_descripcion      IN cartcard.ic_cat_canal.DESCRIPCION%TYPE,
                      p_usuario_modifico IN cartcard.ic_cat_canal.USUARIO_MODIFICO%TYPE,
                      p_accion           IN NUMBER,
                      resultado          OUT number,
                      resultadotex       OUT varchar2) IS
    v_existe number;
  
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_cat_canal c
     where c.id_canal = pIdCanal;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO CARTCARD.IC_CAT_CANAL
        (id_canal, descripcion, usuario_modifico, ultima_modificacion)
      VALUES
        ((select max(ID_CANAL) + 1 from CARTCARD.ic_cat_canal),
         p_descripcion,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la Operacion se Inserto el elemento en el catalogo de Canal';
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_canal tm
         SET tm.descripcion         = nvl(p_descripcion,tm.descripcion),
             tm.ultima_modificacion = SYSDATE,
             tm.usuario_modifico    = p_usuario_modifico
       WHERE tm.ID_CANAL = pIdCanal;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Canal';
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from CARTCARD.ic_cat_canal where ID_CANAL = pIdCanal;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Canal';
    ELSE
      resultado    := 4;
      resultadotex := 'No se Realizo ninguna accion';
    END IF;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_CANAL(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

  PROCEDURE CAT_DOCUMENTO(pIdDocumento       IN cartcard.ic_cat_documento.id_tipo_documento%TYPE,
                          p_descripcion      IN cartcard.ic_cat_documento.DESCRIPCION%TYPE,
                          p_usuario_modifico IN cartcard.ic_cat_documento.USUARIO_MODIFICO%TYPE,
                          p_accion           IN NUMBER,
                          resultado          OUT number,
                          resultadotex       out varchar2) IS
  
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_cat_documento d
     where d.id_tipo_documento = pIdDocumento;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.ic_cat_documento
        (id_tipo_documento,
         descripcion,
         usuario_modifico,
         fecha_modificacion)
      values
        ((select max(id_tipo_documento) + 1 from cartcard.ic_cat_documento),
         p_descripcion,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Documento';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_documento td
         SET td.descripcion        = nvl(p_descripcion,td.descripcion),
             td.fecha_modificacion = SYSDATE,
             td.usuario_modifico   = p_usuario_modifico
       WHERE td.id_tipo_documento = pIdDocumento;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Documento';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_documento
       where id_tipo_documento = pIdDocumento;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Documento';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo ninguna accion';
    END IF;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.cat_documento(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

  PROCEDURE CAT_ESTADO(pIdEstado          IN cartcard.ic_estado.id_estado%TYPE,
                       pIdPais            IN cartcard.ic_estado.id_pais%TYPE,
                       pIdPaisNew         IN cartcard.ic_estado.id_pais%TYPE,
                       p_nombre           IN cartcard.ic_estado.nombre_estado%TYPE,
                       p_usuario_modifico IN cartcard.ic_estado.usuario_modifico%TYPE,
                       p_accion           IN NUMBER,
                       resultado          OUT number,
                       resultadotex       out varchar2) IS
  
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_estado e
     where e.id_estado = pIdEstado
       and e.id_pais = pIdPais;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.ic_estado
        (id_estado,
         id_pais,
         nombre_Estado,
         usuario_modifico,
         ultima_modificacion)
      values
        (pIdEstado, pIdPais, p_nombre, p_usuario_modifico, SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Estado';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_estado e
         SET e.id_estado           = NVL(pIdEstado, e.id_estado),
             e.id_pais             = NVL(pIdPaisNew, e.id_pais),
             e.nombre_estado       = NVL(p_nombre,e.nombre_estado),
             e.usuario_modifico    = p_usuario_modifico,
             e.ultima_modificacion = SYSDATE
       where e.id_estado = pIdEstado
         and e.id_pais = pIdPais;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Estado';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_estado e
       where e.id_estado = pIdEstado
         and e.id_pais = pIdPais;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Estado';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo ninguna accion';
    END IF;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.cat_estado(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

  PROCEDURE CAT_MUNICIPIO(pIdMunicipio       IN cartcard.ic_municipio.id_municipio%TYPE,
  						  pIdMunicipioNew    IN cartcard.ic_municipio.id_municipio%TYPE,
                          pIdEstado          IN cartcard.ic_municipio.id_estado%TYPE,
                          pIdEstadoNew       IN cartcard.ic_municipio.id_estado%TYPE,
                          pIdPais            IN cartcard.ic_municipio.id_pais%TYPE,
                          pIdPaisNew         IN cartcard.ic_municipio.id_pais%TYPE,
                          p_nombre           IN cartcard.ic_municipio.nombre_municipio%TYPE,
                          p_usuario_modifico IN cartcard.ic_municipio.usuario_modifico%TYPE,
                          p_accion           IN NUMBER,
                          resultado          OUT NUMBER,
                          resultadotex       OUT VARCHAR2) IS
  
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_municipio m
     where m.id_municipio = pIdMunicipio
       and m.id_estado = pIdEstado
       and m.id_pais = pIdPais;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.ic_municipio
        (id_municipio,
         id_estado,
         id_pais,
         nombre_municipio,
         usuario_modifico,
         ultima_modificacion)
      values
        (pIdMunicipio,
         pIdEstado,
         pIdPais,
         p_nombre,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Municipio';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_municipio m
         SET m.id_municipio        = NVL(pIdMunicipioNew, m.id_municipio),
             m.id_pais             = NVL(pIdPaisNew, m.id_pais),
             m.id_estado           = NVL(pIdEstadoNew, m.id_estado),
             m.nombre_municipio    = NVL(p_nombre,m.nombre_municipio),
             m.usuario_modifico    = p_usuario_modifico,
             m.ultima_modificacion = SYSDATE
       where m.id_municipio = pIdMunicipio
         and m.id_estado = pIdEstado
         and m.id_pais = pIdPais;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Municipio';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_municipio m
       where m.id_municipio = pIdMunicipio
         and m.id_estado = pIdEstado
         and m.id_pais = pIdPais;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Municipio';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    END IF;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_MUNICIPIO(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

  PROCEDURE CAT_PAIS(pIdPais            IN cartcard.ic_pais.id_pais%TYPE,
                     pIdPaisNew         IN cartcard.ic_pais.id_pais%TYPE,
                     p_nombre           IN cartcard.ic_pais.nombre_pais%TYPE,
                     p_clavetel         IN cartcard.ic_pais.clave_tel%TYPE,
                     p_usuario_modifico IN cartcard.ic_pais.usuario_modifico%TYPE,
                     p_accion           IN NUMBER,
                     resultado          OUT number,
                     resultadotex       out varchar2) IS
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from CARTCARD.ic_pais p
     where p.id_pais = pIdPais;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.ic_pais
        (id_pais,
         nombre_pais,
         clave_tel,
         usuario_modifico,
         ultima_modificacion)
      values
        (pIdPais, p_nombre, p_clavetel, p_usuario_modifico, SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Pais';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE CARTCARD.ic_pais p
         SET p.id_pais             = nvl(pIdPaisNew,p.id_pais),
             p.nombre_pais         = nvl(p_nombre, p.nombre_pais),
             p.clave_tel           = NVL(p_clavetel, p.clave_tel),
             p.usuario_modifico    = p_usuario_modifico,
             p.ultima_modificacion = SYSDATE
       where p.id_pais = pIdPais;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Pais';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from CARTCARD.ic_pais p where p.id_pais = pIdPais;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Pais';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_PAIS(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

  PROCEDURE CAT_PREGUNTA(pIdPregunta  IN cartcard.PREGUNTASESTANDAR.idpreguntaestandar%TYPE,
                         p_pregunta   IN cartcard.PREGUNTASESTANDAR.pregunta%TYPE,
                         p_accion     IN NUMBER,
                         resultado    OUT number,
                         resultadotex out varchar2) IS
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.PREGUNTASESTANDAR pe
     where pe.idpreguntaestandar = pIdPregunta;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.PREGUNTASESTANDAR
        (idpreguntaestandar, pregunta)
      values
        ((select max(idpreguntaestandar) + 1
           from cartcard.PREGUNTASESTANDAR),
         p_pregunta);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Pregunta';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.PREGUNTASESTANDAR pe
         SET pe.pregunta = p_pregunta
       where pe.idpreguntaestandar = pIdPregunta;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Pregunta';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.PREGUNTASESTANDAR pe
       where pe.idpreguntaestandar = pIdPregunta;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Pregunta';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_PREGUNTA(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

  PROCEDURE CAT_STATUS_CUENTA(pIdStatusCta       IN cartcard.ic_cat_status_cuenta.id_status_cuenta%TYPE,
                              p_codigo           IN cartcard.ic_cat_status_cuenta.codigo%TYPE,
                              p_descripcion      IN cartcard.ic_cat_status_cuenta.descripcion%TYPE,
                              p_usuario_modifico IN cartcard.ic_cat_status_cuenta.usuario_modifico%TYPE,
                              p_accion           IN NUMBER,
                              resultado          OUT number,
                              resultadotex       out varchar2) IS
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_cat_status_cuenta
     where id_status_cuenta = pIdStatusCta;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO CARTCARD.IC_CAT_STATUS_CUENTA
        (id_status_cuenta,
         codigo,
         descripcion,
         usuario_modifico,
         ultima_modificacion)
      VALUES
        ((select max(id_status_cuenta) + 1
           from cartcard.ic_cat_status_cuenta),
         p_codigo,
         p_descripcion,
         p_usuario_modifico,
         SYSDATE);
    
      resultado    := 1;
      resultadotex := 'Exito en la Operacion se Inserto el elemento en el catalogo de Estatus de Cuenta';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_status_cuenta tct
         SET tct.codigo              = NVL(p_codigo, tct.codigo),
             tct.descripcion         = NVL(p_descripcion,tct.descripcion),
             tct.usuario_modifico    = p_usuario_modifico,
             tct.ultima_modificacion = SYSDATE
       WHERE tct.id_status_cuenta = pIdStatusCta;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Estatus de Cuenta';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_status_cuenta tct
       WHERE tct.id_status_cuenta = pIdStatusCta;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Estatus de Cuenta';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_STATUS_CUENTA(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;
  PROCEDURE CAT_TIPOIDENTIFICACION(p_IdIdentificacion IN cartcard.ic_cat_tipo_identificacion.id_tipo_identificacion%TYPE,
                                   p_descripcion      IN cartcard.ic_cat_tipo_identificacion.descripcion%TYPE,
                                   p_usuario_modifico IN cartcard.ic_cat_tipo_identificacion.usuario_modifico%TYPE,
                                   p_accion           IN NUMBER,
                                   resultado          OUT number,
                                   resultadotex       out varchar2) IS
  
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_cat_tipo_identificacion ti
     where ti.id_tipo_identificacion = p_IdIdentificacion;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.ic_cat_tipo_identificacion ti
        (id_tipo_identificacion,
         descripcion,
         usuario_modifico,
         ultima_modificacion)
      values
        ((select max(id_tipo_identificacion) + 1
           from cartcard.ic_cat_tipo_identificacion),
         p_descripcion,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Tipo de Identificacion';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_tipo_identificacion ti
         SET ti.descripcion         = nvl(p_descripcion,ti.descripcion),
             ti.usuario_modifico    = p_usuario_modifico,
             ti.ultima_modificacion = SYSDATE
       where ti.id_tipo_identificacion = p_IdIdentificacion;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Tipo de Identificacion ';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_tipo_identificacion ti
       where ti.id_tipo_identificacion = p_IdIdentificacion;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Tipo de Identificacion';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_TIPOIDENTIFICACION(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;
  PROCEDURE CAT_TIPOPAGO(pIdTipoPago        IN cartcard.ic_cat_tipo_pago.id_tipo_pago%TYPE,
                         p_descripcion      IN cartcard.ic_cat_tipo_pago.descripcion%TYPE,
                         p_usuario_modifico IN cartcard.ic_cat_tipo_pago.usuario_modifico%TYPE,
                         p_accion           IN NUMBER,
                         resultado          OUT NUMBER,
                         resultadotex       OUT varchar2) IS
  
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_cat_tipo_pago tp
     where tp.id_tipo_pago = pIdTipoPago;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO CARTCARD.IC_CAT_TIPO_PAGO
        (id_tipo_pago, descripcion, usuario_modifico, ultima_modificacion)
      VALUES
        ((select max(id_tipo_pago) + 1 from cartcard.ic_cat_tipo_pago),
         p_descripcion,
         p_usuario_modifico,
         SYSDATE);
    
      resultado    := 1;
      resultadotex := 'Exito en la Operacion se Inserto el elemento en el catalogo de Tipo de Pago';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_tipo_pago tp
         SET tp.descripcion         = nvl(p_descripcion,tp.descripcion),
             tp.usuario_modifico    = p_usuario_modifico,
             tp.ultima_modificacion = SYSDATE
       where tp.id_tipo_pago = pIdTipoPago;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Tipo de Pago';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_tipo_pago tp
       where tp.id_tipo_pago = pIdTipoPago;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Tipo de Pago';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_TIPOPAGO(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;
  PROCEDURE CAT_TIPOSERVICIO(pIdTipoServicio    IN cartcard.ic_cat_tipo_servicio.id_tipo_servicio%TYPE,
                             p_descripcion      IN cartcard.ic_cat_tipo_pago.descripcion%TYPE,
                             p_usuario_modifico IN cartcard.ic_cat_tipo_pago.usuario_modifico%TYPE,
                             p_accion           IN NUMBER,
                             resultado          OUT number,
                             resultadotex       out varchar2) IS
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_cat_tipo_servicio ts
     where ts.id_tipo_servicio = pIdTipoServicio;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO CARTCARD.IC_CAT_TIPO_SERVICIO
        (id_tipo_servicio,
         descripcion,
         usuario_modifico,
         ultima_modificacion)
      VALUES
        ((select max(id_tipo_servicio) + 1
           from cartcard.ic_cat_tipo_servicio),
         p_descripcion,
         p_usuario_modifico,
         SYSDATE);
    
      resultado    := 1;
      resultadotex := 'Exito en la Operacion se Inserto el elemento en el catalogo de Tipo Servicio';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE CARTCARD.ic_cat_tipo_servicio ts
         SET ts.descripcion         = nvl(p_descripcion,ts.descripcion),
             ts.usuario_modifico    = p_usuario_modifico,
             ts.ultima_modificacion = SYSDATE
       where ts.id_tipo_servicio = pIdTipoServicio;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Servicio';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_tipo_servicio ts
       where ts.id_tipo_servicio = pIdTipoServicio;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Servicio';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_TIPOSERVICIO(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

  PROCEDURE CAT_TIPO_MEMBRESIA(p_id_tipo_membresia IN cartcard.ic_cat_tipo_membresia.id_tipo_membresia%TYPE,
                               p_costo             IN cartcard.ic_cat_tipo_membresia.costo%TYPE,
                               p_descripcion       IN cartcard.ic_cat_tipo_membresia.descripcion%TYPE,
                               p_usuario_modifico  IN cartcard.ic_cat_tipo_membresia.usuario_modifico%TYPE,
                               p_duracion          IN cartcard.ic_cat_tipo_membresia.duracion%TYPE,
                               p_accion            IN NUMBER,
                               resultado           OUT NUMBER,
                               resultadotex        OUT VARCHAR2) IS
    v_existe NUMBER;
  BEGIN
    SELECT COUNT(1)
      INTO v_existe
      FROM cartcard.ic_cat_tipo_membresia tm
     WHERE tm.id_tipo_membresia = p_id_tipo_membresia;
  
    IF p_accion = 1 and v_existe = 0 THEN
    
      INSERT INTO cartcard.ic_cat_tipo_membresia
        (id_tipo_membresia,
         descripcion,
         costo,
         usuario_modifico,
         ultima_modificacion,
         duracion)
      values
        ((select max(id_tipo_membresia) + 1
           from CARTCARD.ic_cat_tipo_membresia),
         p_descripcion,
         p_costo,
         p_usuario_modifico,
         SYSDATE,
         p_duracion);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Tipo Membresia';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_tipo_membresia tm
         SET tm.duracion            = NVL(p_duracion, tm.duracion),
             tm.descripcion         = NVL(p_descripcion,tm.descripcion),
             tm.costo               = NVL(p_costo, tm.costo),
             tm.ultima_modificacion = SYSDATE,
             tm.usuario_modifico    = p_usuario_modifico
       WHERE tm.id_tipo_membresia = p_id_tipo_membresia;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Tipo Membresia';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_tipo_membresia tm
       WHERE tm.id_tipo_membresia = p_id_tipo_membresia;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Tipo Membresia';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_TIPO_MEMBRESIA(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

 procedure CAT_TIPO_BLOQUEO(pEstatusBloqueo     IN cartcard.icn_cat_tipo_bloqueo.estatus_bloqueo%TYPE,
                            pEstatusBloqueNew   IN cartcard.icn_cat_tipo_bloqueo.estatus_bloqueo%TYPE,
                            p_descripcion       IN cartcard.icn_cat_tipo_bloqueo.descripcion%TYPE,
                            p_usuarioModifico   IN cartcard.icn_cat_tipo_bloqueo.usuario_modifico%TYPE,
                            p_accion            IN NUMBER, 
                            resultado           OUT number,
                            resultadotex        out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_cat_tipo_bloqueo b
  where b.estatus_bloqueo = pEstatusBloqueo;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_cat_tipo_bloqueo
        (estatus_bloqueo, descripcion, usuario_modifico, ultima_modificacion)
         VALUES (pEstatusBloqueo, p_descripcion, p_usuarioModifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Tipo Bloqueo';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_cat_tipo_bloqueo b
          SET b.estatus_bloqueo = nvl(pEstatusBloqueNew, b.estatus_bloqueo),
          b.descripcion = nvl(p_descripcion, b.descripcion),
          b.usuario_modifico = p_usuarioModifico,
          b.ultima_modificacion = SYSDATE
          WHERE b.estatus_bloqueo = pEstatusBloqueo;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Tipo Bloqueo';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        DELETE from cartcard.icn_cat_tipo_bloqueo b
        WHERE b.estatus_bloqueo = pEstatusBloqueo;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Tipo Bloqueo';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CAT_TIPO_BLOQUEO(' || SQLCODE|| ''|| SQLERRM || ')');
END;

  PROCEDURE CAT_GRUPOROLES(pIdgporol          IN cartcard.ic_cat_grupo_roles.id%TYPE,
                           p_nombre           IN cartcard.ic_cat_grupo_roles.nombre_grup_rol%TYPE,
                           p_usuario_modifico IN cartcard.ic_cat_grupo_roles.usuario_modifico%TYPE,
                           p_accion           IN NUMBER,
                           resultado          OUT number,
                           resultadotex       out varchar2) IS
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_cat_grupo_roles r
     where r.id = pIdgporol;
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.ic_cat_grupo_roles
        (id, nombre_grup_rol, usuario_modifico, ultima_modificacion)
      values
        ((select max(id) + 1 from cartcard.ic_cat_grupo_roles),
         p_nombre,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Grupo de Roles';
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_grupo_roles tgr
         SET tgr.nombre_grup_rol     = nvl(p_nombre,tgr.nombre_grup_rol),
             tgr.usuario_modifico    = p_usuario_modifico,
             tgr.ultima_modificacion = SYSDATE
       WHERE tgr.id = pIdgporol;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Grupo de Roles';
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_grupo_roles tgr WHERE tgr.id = pIdgporol;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Grupo de Roles';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_GRUPOROLES(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;
  PROCEDURE CAT_PERMISO(pIdpermiso         IN cartcard.ic_cat_permiso.id_permiso%TYPE,
                        p_descripcion      IN cartcard.ic_cat_permiso.descripcion%TYPE,
                        p_usuario_modifico IN cartcard.ic_cat_permiso.usuario_modifico%TYPE,
                        p_accion           IN NUMBER,
                        resultado          OUT number,
                        resultadotex       out varchar2) IS
  
    v_existe number;
  BEGIN
    select count(1) into v_existe from cartcard.ic_cat_permiso p where p.id_permiso = pIdpermiso;
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.ic_cat_permiso
        (id_permiso, descripcion, usuario_modifico, ultima_modificacion)
      values
        ((select max(id_permiso) + 1 from cartcard.ic_cat_permiso),
         p_descripcion,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Permiso';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_permiso tp
         SET tp.descripcion         = nvl(p_descripcion,tp.descripcion),
             tp.usuario_modifico    = p_usuario_modifico,
             tp.ultima_modificacion = SYSDATE
       WHERE tp.id_permiso = pIdpermiso;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Permiso';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_permiso tp
       WHERE tp.id_permiso = pIdpermiso;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Permiso';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_PERMISO(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;
  PROCEDURE CAT_ROLES(pIdroles           IN cartcard.ic_cat_roles.id_roles%TYPE,
                      p_Idgruprol        IN cartcard.ic_cat_roles.id_grup_rol%TYPE,
                      p_Idpermiso        IN cartcard.ic_cat_roles.id_permiso%TYPE,
                      p_Nombrerol        IN cartcard.ic_cat_roles.nombre_rol%TYPE,
                      p_usuario_modifico IN cartcard.ic_cat_roles.usuario_modifico%TYPE,
                      p_accion           IN NUMBER,
                      resultado          OUT number,
                      resultadotex       out varchar2) IS
  
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.ic_cat_roles r
     where r.id_roles = pIdroles;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.ic_cat_roles
        (id_roles,
         id_grup_rol,
         id_permiso,
         nombre_rol,
         usuario_modifico,
         ultima_modificacion)
      values
        ((select max(id_roles) + 1 from cartcard.ic_cat_roles),
         p_Idgruprol,
         p_Idpermiso,
         p_Nombrerol,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Roles';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_roles tr
         SET tr.id_grup_rol         = NVL(p_Idgruprol, tr.id_grup_rol),
             tr.id_permiso          = NVL(p_Idpermiso, tr.id_permiso),
             tr.nombre_rol          = NVL(p_Nombrerol,tr.nombre_rol),
             tr.usuario_modifico    = p_usuario_modifico,
             tr.ultima_modificacion = SYSDATE
       where tr.id_roles = pIdroles;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Roles';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.ic_cat_roles tr where tr.id_roles = pIdroles;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Roles';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_ROLES(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

  PROCEDURE CAT_USUARIOROL(pIdUsuarioRol      IN cartcard.IC_TA_USUARIO_ROL.id_usuario_rol%TYPE,
                           p_IdRol            IN cartcard.IC_TA_USUARIO_ROL.id_rol%TYPE,
                           p_IdUsuario        IN cartcard.IC_TA_USUARIO_ROL.id_usuario%TYPE,
                           p_usuario_modifico IN cartcard.IC_TA_USUARIO_ROL.usuario_modifico%TYPE,
                           p_accion           IN NUMBER,
                           resultado          OUT number,
                           resultadotex       out varchar2) IS
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from CARTCARD.IC_TA_USUARIO_ROL t
     where t.id_usuario_rol = pIdUsuarioRol;
  
    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO CARTCARD.IC_TA_USUARIO_ROL
        (id_usuario_rol,
         id_rol,
         id_usuario,
         usuario_modifico,
         ultima_modificacion)
      values
        ((select max(id_usuario_rol) + 1 from CARTCARD.IC_TA_USUARIO_ROL),
         p_IdRol,
         p_IdUsuario,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Usuario Rol';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE CARTCARD.IC_TA_USUARIO_ROL t
         SET t.id_rol              = NVL(p_IdRol, t.id_rol),
             t.id_usuario          = NVL(p_IdUsuario, t.id_usuario),
             t.usuario_modifico    = p_usuario_modifico,
             t.ultima_modificacion = SYSDATE
       where t.id_usuario_rol = pIdUsuarioRol;
      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Usuario Rol';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from CARTCARD.IC_TA_USUARIO_ROL t
       where t.id_usuario_rol = pIdUsuarioRol;
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Usuario Rol';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo la accion';
    
    END IF;
  
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CAT_USUARIOROL(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

 PROCEDURE CAT_BANCO(pCodigo          IN cartcard.icn_cat_banco.codigo%TYPE,
                    pCodigoNew        IN cartcard.icn_cat_banco.codigo%TYPE,
                    p_nombre          IN cartcard.icn_cat_banco.nombre%TYPE,
                    p_claveBanxico    IN cartcard.icn_cat_banco.clave_banxico%TYPE,
                    p_usuarioModifico IN cartcard.icn_cat_banco.USUARIO_MODIFICO%TYPE,
                    p_accion          IN NUMBER, 
                    resultado         OUT NUMBER,
                    resultadotex      out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_cat_banco b
  where b.codigo = pCodigo;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_cat_banco
        (codigo, nombre, clave_Banxico, usuario_modifico, ultima_modificacion)
         VALUES (pCodigo, p_nombre, p_claveBanxico, p_usuarioModifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Banco';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_cat_banco b
          SET b.codigo = nvl(pCodigoNew, b.codigo),
          b.nombre = nvl(p_nombre, b.nombre),
          b.clave_banxico = nvl(p_claveBanxico, b.clave_banxico),
          b.usuario_modifico = p_usuarioModifico,
          b.ultima_modificacion = SYSDATE
          WHERE b.codigo = pCodigo;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Banco';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        DELETE from cartcard.icn_cat_banco b
        WHERE b.codigo = pCodigo;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Banco';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CAT_BANCO(' || SQLCODE|| ''|| SQLERRM || ')');
END;

 procedure CAT_OPERACION(pCodigo           IN cartcard.icn_cat_operacion.codigooperacion%TYPE,
                         pCodigoNew        IN cartcard.icn_cat_operacion.codigooperacion%TYPE,
                         p_descripcion     IN cartcard.icn_cat_operacion.descripcion%TYPE,
                         p_usuarioModifico IN cartcard.icn_cat_operacion.USUARIO_MODIFICO%TYPE,
                         p_accion          IN NUMBER, 
                         resultado         OUT number,
                         resultadotex      out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_cat_operacion o
  where o.codigooperacion = pCodigo;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_cat_operacion
        (codigooperacion, descripcion, usuario_modifico, ultima_modificacion)
         VALUES (pCodigo, p_descripcion, p_usuarioModifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Operacion';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_cat_operacion o
          SET o.codigooperacion = nvl(pCodigoNew, o.codigooperacion),
          o.descripcion = nvl(p_descripcion, o.descripcion),
          o.usuario_modifico = p_usuarioModifico,
          o.ultima_modificacion = SYSDATE
          WHERE o.codigooperacion = pCodigo;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Operacion';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        DELETE from cartcard.icn_cat_operacion o
         WHERE o.codigooperacion = pCodigo;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Operacion';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CAT_OPERACION(' || SQLCODE|| ''|| SQLERRM || ')');
END;

 PROCEDURE CAT_ICN_APLICACION (pIdAplicacion      IN  cartcard.icn_aplic.idaplicacion%TYPE,
                           p_descripcion      IN  cartcard.icn_aplic.DESCRIPCION%TYPE,
                           p_status           IN  cartcard.icn_aplic.status%TYPE,
                           p_usuario_modifico IN  cartcard.icn_aplic.USUARIO_MODIFICO%TYPE,
                           p_accion IN NUMBER, 
                           resultado OUT number,
                           resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_aplic a
  where a.idaplicacion = pIdAplicacion;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO CARTCARD.icn_aplic
        (idaplicacion, descripcion, status,usuario_modifico, ultima_modificacion)
         VALUES ((select (nvl(max(idaplicacion), 0)) + 1 from cartcard.icn_aplic), p_descripcion, p_status, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Aplicacion';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_aplic a
          SET a.descripcion = nvl(p_descripcion, a.descripcion),
              a.status = nvl(p_status, a.status),
             a.ultima_modificacion = SYSDATE,
             a.usuario_modifico = p_usuario_modifico
          WHERE a.idaplicacion = pIdAplicacion;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Aplicacion';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_aplic 
        where idaplicacion = pIdAplicacion;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Aplicacion';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CAT_APLICACION(' || SQLCODE|| ''|| SQLERRM || ')');
END;

PROCEDURE CAT_ICN_GRUPO (pIdGrupo           IN cartcard.icn_grupo.idgrupo%TYPE,
                     p_descripcion      IN cartcard.icn_grupo.descripcion%TYPE,
                     p_status           IN cartcard.icn_grupo.status%TYPE,
                     p_usuario_modifico IN cartcard.icn_grupo.USUARIO_MODIFICO%TYPE,
                     p_accion           IN NUMBER, 
                     resultado          OUT NUMBER,
                     resultadotex       OUT VARCHAR2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_grupo g
  where g.idgrupo = pIdGrupo;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO CARTCARD.ICN_GRUPO
        (idgrupo, descripcion, status,usuario_modifico, ultima_modificacion)
         VALUES ((select (nvl(max(idgrupo), 0)) + 1 from cartcard.icn_grupo), p_descripcion, p_status, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Grupo';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE CARTCARD.ICN_GRUPO g
             SET g.descripcion         = nvl(p_descripcion, g.descripcion),
                 g.status              = nvl(p_status, g.status),
                 g.ultima_modificacion = SYSDATE,
                 g.usuario_modifico    = p_usuario_modifico
           WHERE g.idgrupo = pIdGrupo;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Grupo';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from CARTCARD.ICN_GRUPO g 
        where g.idgrupo = pIdGrupo;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Grupo';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CAT_ICN_GRUPOS(' || SQLCODE|| ''|| SQLERRM || ')');
END;
PROCEDURE CAT_ICN_PERFIL(pIdperfil          IN cartcard.icn_perfil.idperfil%TYPE,
                         p_descripcion      IN cartcard.icn_perfil.descripcion%TYPE,
                         p_status           IN cartcard.icn_perfil.status%TYPE,
                         p_usuario_modifico IN cartcard.icn_perfil.USUARIO_MODIFICO%TYPE,
                         p_accion           IN NUMBER, 
                         resultado          OUT NUMBER,
                         resultadotex       OUT VARCHAR2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_perfil p
  where p.idperfil = pIdperfil;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_perfil
        (idperfil, descripcion, status,usuario_modifico, ultima_modificacion)
         VALUES ((select (nvl(max(idperfil), 0)) + 1 from cartcard.icn_perfil), p_descripcion, p_status, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Perfil';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_perfil p
             SET p.descripcion         = nvl(p_descripcion, p.descripcion),
                 p.status              = nvl(p_status, p.status),
                 p.ultima_modificacion = SYSDATE,
                 p.usuario_modifico    = p_usuario_modifico
            where p.idperfil = pIdperfil;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Perfil';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_perfil p 
          where p.idperfil = pIdperfil;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Perfil';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CAT_PERFIL(' || SQLCODE|| ''|| SQLERRM || ')');
END;
PROCEDURE CAT_ICN_PERMISO(pIdPermiso         IN cartcard.icn_permiso.idpermiso%TYPE,
                          p_descripcion      IN cartcard.icn_permiso.descripcion%TYPE,
                          p_status           IN cartcard.icn_permiso.status%TYPE,
                          p_usuario_modifico IN cartcard.icn_permiso.USUARIO_MODIFICO%TYPE,
                          p_accion           IN NUMBER, 
                          resultado          OUT NUMBER,
                          resultadotex out VARCHAR2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_permiso pe
  where pe.idpermiso = pIdPermiso;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_permiso
        (idpermiso, descripcion, status,usuario_modifico, ultima_modificacion)
         VALUES ((select (nvl(max(idpermiso), 0)) + 1 from cartcard.icn_permiso), p_descripcion, p_status, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Permisos';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_permiso pe
             SET pe.descripcion         = nvl(p_descripcion, pe.descripcion),
                 pe.status              = nvl(p_status, pe.status),
                 pe.ultima_modificacion = SYSDATE,
                 pe.usuario_modifico    = p_usuario_modifico
           WHERE pe.idpermiso = pIdPermiso;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Permisos';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_permiso pe 
        where pe.idpermiso = pIdPermiso;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Permisos';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.CAT_PERMISOS(' || SQLCODE|| ''|| SQLERRM || ')');
END;
 PROCEDURE CAT_ICN_GPO_PERFIL (pIdGpoPfil         IN cartcard.icn_gpoperfil.idgpopfil%TYPE,
                               pIdAplicacion      IN cartcard.icn_gpoperfil.idaplicacion%TYPE,
                               pIdGrupo           IN cartcard.icn_gpoperfil.idgrupo%TYPE,
                               pIdperfil          IN cartcard.icn_gpoperfil.idperfil%TYPE,
                               pPrivilegios       IN cartcard.icn_gpoperfil.privilegios%TYPE,
                               p_status           IN cartcard.icn_gpoperfil.status%TYPE,
                               p_usuario_modifico IN cartcard.icn_gpoperfil.USUARIO_MODIFICO%TYPE,
                               p_accion           IN NUMBER,
                               resultado          OUT NUMBER,
                               resultadotex       OUT VARCHAR2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_gpoperfil gf
  where gf.idgpopfil = pIdGpoPfil;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_gpoperfil 
        (idgpopfil,idaplicacion,idgrupo,idperfil,privilegios,status,usuario_modifico,ultima_modificacion)
         VALUES ((select (nvl(max(idgpopfil), 0)) + 1 from cartcard.icn_gpoperfil), pIdAplicacion, pIdGrupo, pIdperfil,pPrivilegios,p_status,p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en Grupo Perfil';

    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_gpoperfil gf
             SET gf.idaplicacion         = nvl(pIdAplicacion, gf.idaplicacion),
                 gf.idgrupo              = nvl(pIdGrupo, gf.idgrupo),
                 gf.idperfil             = nvl(pIdperfil, gf.idperfil),
                 gf.privilegios          = nvl(pPrivilegios, gf.privilegios),
                 gf.status               = nvl(p_status, gf.status),
                 gf.ultima_modificacion  = SYSDATE,
                 gf.usuario_modifico     = p_usuario_modifico
           WHERE gf.idgpopfil = pIdGpoPfil;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en Grupo Perfil';

    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_gpoperfil gf
        where  gf.idgpopfil = pIdGpoPfil;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en Grupo Perfil';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_CATALOGOS.CAT_ICN_GPO_PERFIL(' || SQLCODE|| ''|| SQLERRM || ')');
END;

 PROCEDURE CAT_ICN_FUNCION (pIdfuncion        IN cartcard.icn_funcion.idfuncion%TYPE,
                            pIdGpoPfil        IN cartcard.icn_funcion.idgpopfil%TYPE,
                            pIdPadre          IN cartcard.icn_funcion.idpadre%TYPE,
                            pPosicion         IN cartcard.icn_funcion.posicion%TYPE,
                            pIcono            IN cartcard.icn_funcion.icono%TYPE,
                            pUrl              IN cartcard.icn_funcion.url%TYPE,
                            pStatus           IN cartcard.icn_funcion.status%TYPE,
                            pDescripcion      IN cartcard.icn_funcion.descripcion%TYPE,
                            pUsuario_modifico IN cartcard.icn_funcion.usuario_modifico%TYPE,
                            p_accion          IN NUMBER,
                            resultado         OUT NUMBER,
                            resultadotex      OUT VARCHAR2) IS
     
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_funcion f
  where f.idfuncion = pIdfuncion;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_funcion 
         (idfuncion,descripcion,idgpopfil,idpadre,posicion,icono,url,status,usuario_modifico,ultima_modificacion)
         VALUES ((select (nvl(max(idfuncion), 0)) + 1 from cartcard.icn_funcion),pDescripcion, pIdGpoPfil, pIdPadre, pPosicion,pIcono,pUrl,pStatus,pUsuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en Funcion';
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_funcion f
             SET  f.descripcion = nvl(pDescripcion, f.descripcion),
       f.idgpopfil = nvl(pIdGpoPfil,f.idgpopfil),
       f.idpadre   = nvl(pIdPadre,f.idpadre),
       f.posicion  = nvl(pPosicion,f.posicion),
       f.icono     = nvl(pIcono,f.icono),
       f.url       = nvl(pUrl,f.url),
       f.status    = nvl(pStatus,f.status),
       f.ultima_modificacion = SYSDATE,
       f.usuario_modifico =  pUsuario_modifico
       where f.idfuncion = pIdfuncion;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en Funcion';

    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_funcion f
        where f.idfuncion = pIdfuncion;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en Funcion';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_CATALOGOS.ICN_GPO_PERFIL(' || SQLCODE|| ''|| SQLERRM || ')');
END;
 PROCEDURE ICN_USR_ROL(pIdusuario        IN cartcard.icn_usr_rol.idusuario%TYPE,
                       pIdfuncion        IN cartcard.icn_usr_rol.idfuncion%TYPE,
                       pIdfuncionNew     IN cartcard.icn_usr_rol.idfuncion%TYPE,
                       pIdpermiso        IN cartcard.icn_usr_rol.idpermiso%TYPE,
                       pIdpermisoNew     IN cartcard.icn_usr_rol.idpermiso%TYPE,
                       pStatus           IN cartcard.icn_usr_rol.status%TYPE,
                       pUsuario_modifico IN cartcard.icn_usr_rol.usuario_modifico%TYPE,
                       p_accion          IN NUMBER,
                       resultado         OUT NUMBER,
                       resultadotex      OUT VARCHAR2) IS
  v_existe number;
BEGIN
  select count(1)
    into v_existe
    from cartcard.icn_usr_rol r
   where r.idusuario = pIdusuario
     and r.idfuncion = pIdfuncion
     and r.idpermiso = pIdpermiso;

  IF p_accion = 1 and v_existe = 0 THEN
    INSERT INTO cartcard.icn_usr_rol
      (idusuario,
       idfuncion,
       idpermiso,
       status,
       usuario_modifico,
       ultima_modificacion)
    VALUES
      (pIdusuario,
       pIdfuncion,
       pIdpermiso,
       pStatus,
       pUsuario_modifico,
       SYSDATE);
    resultado    := 1;
    resultadotex := 'Exito en la Operacion se Inserto el elemento en Usuario Roles';
  ELSIF p_accion = 2 and v_existe != 0 THEN
    UPDATE cartcard.icn_usr_rol r
       SET r.idfuncion           = nvl(pIdfuncionNew, r.idfuncion),
           r.idpermiso           = nvl(pIdpermisoNew, r.idpermiso),
           r.status              = nvl(pStatus, r.status),
           r.ultima_modificacion = SYSDATE,
           r.usuario_modifico    = pUsuario_modifico
     where r.idusuario = pIdusuario
       and r.idfuncion = pIdfuncion
       and r.idpermiso = pIdpermiso;
    resultado    := 2;
    resultadotex := 'Exito en la operacion se Actualizo el elemento en Usuario Roles';
  
  ELSIF p_accion = 3 and v_existe != 0 THEN
    delete from cartcard.icn_usr_rol r
     where r.idusuario = pIdusuario
       and r.idfuncion = pIdfuncion
       and r.idpermiso = pIdpermiso;
    resultado    := 3;
    resultadotex := 'Exito en la operacion se Elimino el elemento en Usuario Roles';
  ELSE
    resultado    := 4;
    resultadotex := 'No se Realizo ninguna accion';
  
  END IF;

  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    resultado    := 0;
    resultadotex := SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    raise_application_error(-20120, 'Error ocurrido en PKG_ICN_CATALOGOS.ICN_USR_ROL(' ||SQLCODE || '' || SQLERRM || ')');
END;
 PROCEDURE IC_USUARIO(pereg         IN CARTCARD.IC_USUARIO%ROWTYPE,
                      p_accion      IN NUMBER, 
                      RESULTADO     OUT NUMBER,
                      RESULTADOTEX  OUT VARCHAR2,
                      psIdUsuario   OUT cartcard.IC_USUARIO.id_usuario%TYPE) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from CARTCARD.IC_USUARIO u
  WHERE u.id_usuario = pereg.id_usuario; 

IF p_accion = 1 and v_existe = 0 THEN
      SELECT CARTCARD.USUARIOID_SEQ.NEXTVAL INTO psIdUsuario FROM DUAL;
      
      INSERT INTO CARTCARD.IC_USUARIO
        (id_usuario,id_tipo_identificacion,id_status_cuenta,id_estado,id_pais,
         id_municipio,nombre,apaterno,amaterno,calle,colonia,cp,telefono,
         correo_electronico,nombre_usuario,contrasenia,numero_identificacion,
         fecha_creacion,celular,newsletter,referencia,ciudad,fecha_nacimiento,
         usuario_modifico,ultima_modificacion)
      VALUES
        (psIdUsuario,pereg.id_tipo_identificacion,pereg.id_status_cuenta,pereg.id_estado,
         pereg.id_pais,pereg.id_municipio,pereg.nombre,pereg.apaterno,pereg.amaterno,
         pereg.calle,pereg.colonia,pereg.cp,pereg.telefono,pereg.correo_electronico,
         pereg.nombre_usuario,pereg.contrasenia,pereg.numero_identificacion,pereg.fecha_creacion,
         pereg.celular,pereg.newsletter,pereg.referencia,pereg.ciudad,pereg.fecha_nacimiento,
         pereg.usuario_modifico,SYSDATE);
         RESULTADO := 1;
         RESULTADOTEX:='Exito en la Operacion se Inserto el elemento de Alta de Usuario';
 ELSIF p_accion = 2 and v_existe != 0  THEN
 UPDATE CARTCARD.IC_USUARIO u SET
       u.id_tipo_identificacion = NVL(pereg.id_tipo_identificacion, u.id_tipo_identificacion),
       u.id_status_cuenta = NVL(pereg.id_status_cuenta, u.id_status_cuenta),
       u.id_estado= NVL(pereg.id_estado, u.id_estado),
       u.id_pais= NVL(pereg.id_pais, u.id_pais),
       u.id_municipio= NVL(pereg.id_municipio,u.id_municipio), 
       u.nombre= NVL(pereg.nombre,u.nombre),
       u.apaterno= NVL(pereg.apaterno,u.apaterno),
       u.amaterno= NVL(pereg.amaterno,u.amaterno),
       u.calle= NVL(pereg.calle,u.calle),
       u.colonia= NVL(pereg.colonia,u.colonia),
       u.cp=NVL(pereg.cp,u.cp),
       u.telefono= NVL(pereg.telefono,u.telefono),
       u.correo_electronico=NVL(pereg.correo_electronico,u.correo_electronico),
       u.nombre_usuario=NVL(pereg.nombre_usuario,u.nombre_usuario),
       u.contrasenia=NVL(pereg.contrasenia,u.contrasenia),
       u.numero_identificacion=NVL(pereg.numero_identificacion,u.numero_identificacion),
       u.fecha_creacion= NVL(pereg.fecha_creacion,u.fecha_creacion),
       u.celular=NVL(pereg.celular,u.celular),
       u.newsletter=NVL(pereg.newsletter,u.newsletter),
       u.referencia=NVL(pereg.referencia,u.referencia),
       u.ciudad=NVL(pereg.ciudad,u.ciudad),
       u.fecha_nacimiento= NVL(pereg.fecha_nacimiento,u.fecha_nacimiento),
       u.usuario_modifico= pereg.usuario_modifico,
       u.ultima_modificacion= SYSDATE
      WHERE u.id_usuario = pereg.id_usuario;  
       resultado := 2;
       resultadotex := 'Exito en la operacion se Actualizo el elemento de Alta de Usuario';

    ELSIF  p_accion = 3 and v_existe != 0  THEN
        DELETE FROM CARTCARD.IC_USUARIO U
        WHERE u.id_usuario = pereg.id_usuario;  
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento de Alta de Usuario';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     raise_application_error (-20120,'Error ocurrido en PKG_CATALOGOS.IC_USUARIO(' || SQLCODE|| ''|| SQLERRM || ')');
END;

  PROCEDURE CAT_CP(pcp                 IN cartcard.icn_cp.codigopostal%TYPE,
  				   pcpnew              IN cartcard.icn_cp.codigopostal%TYPE,
                   pASENTAMIENTO       IN cartcard.icn_cp.asentamiento%TYPE,
                   pASENTAMIENTONEW    IN cartcard.icn_cp.asentamiento%TYPE,
                   pTipoAsen           IN cartcard.icn_cp.tipo_asentamiento%TYPE,
				   pTipoAsennew        IN cartcard.icn_cp.tipo_asentamiento%TYPE,
                   pidMun              IN cartcard.icn_cp.id_municipio%TYPE,
				   pidMunnew           IN cartcard.icn_cp.id_municipio%TYPE,
                   pidEdo              IN cartcard.icn_cp.id_estado%TYPE,
				   pidEdonew           IN cartcard.icn_cp.id_estado%TYPE,
                   pidPais             IN cartcard.icn_cp.id_pais%TYPE,
				   pidPaisnew          IN cartcard.icn_cp.id_pais%TYPE,
                   pciudad             IN cartcard.icn_cp.ciudad%TYPE,
                   p_usuario_modifico IN cartcard.ic_cat_documento.USUARIO_MODIFICO%TYPE,
                   p_accion           IN NUMBER,
                   resultado          OUT number,
                   resultadotex       out varchar2) IS
  
    v_existe number;
  BEGIN
    select count(1)
      into v_existe
      from cartcard.icn_cp d
     where d.CODIGOPOSTAL = pcp
      and d.ASENTAMIENTO = pASENTAMIENTO
      and d.TIPO_ASENTAMIENTO =pTipoAsen
      and d.ID_MUNICIPIO = pidMun
      and d.ID_ESTADO = pidEdo
      and d.ID_PAIS  = pidPais;      

    IF p_accion = 1 and v_existe = 0 THEN
      INSERT INTO cartcard.icn_cp
        (codigopostal, 
         asentamiento, 
         tipo_asentamiento, 
         id_municipio, 
         id_estado, 
         id_pais, 
         ciudad, 
         usuario_modifico, 
         ultima_modificacion)
      values
        (pcp,
         pASENTAMIENTO,
         pTipoAsen,
         pidMun,
         pidEdo,
         pidPais,
         pciudad,
         p_usuario_modifico,
         SYSDATE);
      resultado    := 1;
      resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de CodigoPostal';
    
    ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.icn_cp t
         SET t.CODIGOPOSTAL=nvl(pcpnew,t.CODIGOPOSTAL),
		 	 t.TIPO_ASENTAMIENTO=nvl(pTipoAsennew,t.TIPO_ASENTAMIENTO),			 
		 	 t.asentamiento = nvl(pASENTAMIENTONEW,t.asentamiento),
			 t.ID_MUNICIPIO=nvl(pidMunnew,t.ID_MUNICIPIO),
			 t.ID_ESTADO=nvl(pidEdonew,t.ID_ESTADO),
			 t.ID_PAIS=nvl(pidPaisnew,t.ID_PAIS),
             t.ciudad = nvl(pciudad,t.CIUDAD),
             t.ultima_modificacion= SYSDATE,
             t.usuario_modifico   = p_usuario_modifico
       WHERE  t.CODIGOPOSTAL = pcp
      and t.ASENTAMIENTO = pASENTAMIENTO
      and t.TIPO_ASENTAMIENTO =pTipoAsen
      and t.ID_MUNICIPIO = pidMun
      and t.ID_ESTADO = pidEdo
      and t.ID_PAIS  = pidPais;      

      resultado    := 2;
      resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de CodigoPostal';
    
    ELSIF p_accion = 3 and v_existe != 0 THEN
      delete from cartcard.icn_cp t
       WHERE  t.CODIGOPOSTAL = pcp
      and t.ASENTAMIENTO = pASENTAMIENTO
      and t.TIPO_ASENTAMIENTO =pTipoAsen
      and t.ID_MUNICIPIO = pidMun
      and t.ID_ESTADO = pidEdo
      and t.ID_PAIS  = pidPais;      
      resultado    := 3;
      resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de CodigoPostal';
    ELSE
      resultado    := 4;
      resultadotex := 'No se efectuo ninguna accion';
    END IF;
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      resultado    := 0;
      resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error(-20120,
                              'Error ocurrido en PKG_CATALOGOS.CodigoPostal(' ||
                              SQLCODE || '' || SQLERRM || ')');
  END;

end PKG_CATALOGOS;
/

SHOW ERRORS;


CREATE OR REPLACE package body PKG_ICN_DATOS is

 PROCEDURE AgregaTarjetaC3(PENumTarjeta    in cartcard.icn_tarjeta.cardnumber%type,
                           PEToken         in cartcard.icn_tarjeta.token%type,
                           PENombre        in cartcard.icn_clientes.nombre%type,
                           PEFechaExpira   in varchar2,
                           PECvv           in cartcard.icn_tarjeta.cvv%type,
                           PEIdMembrecia   in cartcard.icn_tarjeta.id_tipo_membresia%type,
                           PEPasscode      in varchar2,
                           PSReferencia    out cartcard.icn_contrato.referencia%type,
                           PSSuite         out cartcard.icn_contrato.suite%type,
                           PSCod_Error     out  number,
                           PSMsg_Error     out  varchar2) is
 vlExiste     number;
 vlError      Exception;
 vlUsuarioID  cartcard.Icn_Clientes.id_usuario%type;
 pereg cartcard.icn_tarjeta%rowtype;
 BEGIN
    PSCod_Error:=0;
        select COUNT(1) INTO vlExiste from cartcard.Icn_Tarjeta t
        where T.CARDNUMBER = PENumTarjeta;
        IF vlExiste>0 THEN
           RAISE vlError;
        END IF;

        CARTCARD.pkg_icn_servicio.add_cliente(PENombre,
                               NULL,--peapaterno
                               NULL,--peamaterno
                               'ANONIMO',--penombre_usuario
                               NULL, --pecontrasenia
                               'ANONIMO@ANONIMO.COM', --pecorreo_electronico
                               NULL,--pecp
                               NULL,--peciudad
                               NULL,--pecolonia
                               12,--peid_municipio
                               9,--peid_estado
                               141,--peid_pais
                               NULL,--pecalle
                               NULL,--penum_ext
                               NULL,--penum_int
                               NULL,--petelefono
                               NULL,--pecelular
                               NULL,--pefecha_nacimiento
                               1,--peid_tipo_identificacion
                               '123456789011',--penumero_identificacion
                               NULL,--petipo_cliente
                               'IUPICARD',--peusuario_modifico,
                               'TIENDA',--PECANAL
                               NULL,--petelefono_oficina
                               NULL, --Pextension
                               vlUsuarioID,
                               PSReferencia,
                               PSSuite);--psidusuario

       pereg.referencia        :=PSReferencia;
       pereg.cardnumber        :=PENumTarjeta;
       pereg.pidexpiration     :=TO_NUMBER(PEFechaExpira);
       pereg.token             :=PEToken;
       pereg.expirationdate    :=TO_DATE(PEFechaExpira, 'YYYYMMdd' );
       pereg.Verificationcode  :=PEPasscode;
       pereg.id_tipo_membresia :=PEIdMembrecia;
       pereg.cvv               :=PECvv;
       pereg.usuario_modifico  :='IUPICARD';
       pereg.Id_Status_Tarjeta :=8;
       pereg.Tipo_Tarjeta      :='PP';

    cartcard.pkg_icn_servicio.ADD_TARJETA(PEREG,pscod_error,psmsg_error);

       IF pscod_error=1 THEN
          IF PENumTarjeta IS NOT NULL THEN
             CARTCARD.PKG_ICN_SERVICIO.ADD_TARJETA_COMPL(PSReferencia, PENumTarjeta,NULL,null,
                             pereg.id_status_tarjeta, null, TO_DATE(PEFechaExpira, 'YYYYMMdd' ), pereg.usuario_modifico,
                             null,null,
                             PSCod_error,PSMsg_error);
          END IF;
       END IF;

    cartcard.pkg_iupicard.ic_sp_inserta_documento(vlUsuarioID,--peidusuario
                                       1,--peidtipodocto
                                       'Identificacion Oficial',--penombre
                                       null,--pedocumento
                                       0,--peestatus
                                       'Documento Tienda',--pecomentario
                                       'IUPICARD',--peusuario
                                       NULL,--petipoarchivo
                                       pscod_error);

    cartcard.pkg_iupicard.ic_sp_inserta_documento(vlUsuarioID,--peidusuario
                                       2,--peidtipodocto
                                       'Comprobante de Domicilio',--penombre
                                       null,--pedocumento
                                       0,--peestatus
                                       'Documento Tienda',--pecomentario
                                       'IUPICARD',--peusuario
                                       NULL,--petipoarchivo
                                       pscod_error);

    commit;
    PSCod_Error:=1;
EXCEPTION
   WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENumTarjeta||' ya esta dado de alta';
  ROLLBACK;
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_DATOS.AgregaTarjetaC3  (' || SQLCODE || '  ' || SQLERRM || ')');
 END;

 procedure ActualizaTarjetaC3(PENumTarjeta    in cartcard.icn_tarjeta.cardnumber%type,
                              PEContraena     in cartcard.icn_clientes.contrasenia%type,
                              PENombreUsuario in cartcard.icn_clientes.nombre_usuario%type,
                              PENombre        in cartcard.icn_clientes.nombre%type,
                              PEApaterno      in cartcard.icn_clientes.apaterno%type,
                              PEAmaterno      in cartcard.icn_clientes.amaterno%type,
                              PEFnacimiento   in varchar2,
                              PECalle         in cartcard.icn_clientes.calle%type,
                              PEColonia       in cartcard.icn_clientes.colonia%type,
                              PECiudad        in cartcard.icn_clientes.ciudad%type,
                              PECP            in cartcard.icn_clientes.cp%type,
                              PEMunId         in cartcard.icn_clientes.id_municipio%type,
                              PEEdoId         in cartcard.icn_clientes.id_estado%type,
                              PEPaisId        in cartcard.icn_clientes.id_pais%type,
                              PETelefono      in cartcard.icn_clientes.telefono%type,
                              PECell          in cartcard.icn_clientes.celular%type,
                              PENIdentifica   in cartcard.icn_clientes.numero_identificacion%type,
                              PePregunta1     in cartcard.preguntasusuario.preguntaestandar1id%type,
                              PeRespuesta1    in cartcard.preguntasusuario.respuesta1%type,
                              PePregunta2     in cartcard.preguntasusuario.preguntaestandar2id%type,
                              PeRespuesta2    in cartcard.preguntasusuario.respuesta2%type,
                              PEDuracionMem   in cartcard.membrecia.duracion%type,
                              PEUsrModifica   in cartcard.icn_clientes.usuario_modifico%type,
                              PETelefonoOficina IN CARTCARD.ICN_CLIENTES.TELEFONO_OFICINA%TYPE,
                              PEExtension       IN CARTCARD.ICN_CLIENTES.EXTENSION%TYPE,
                              PSIdUsuario     out cartcard.icn_clientes.id_usuario%type,
                              PSToken         out cartcard.icn_tarjeta.token%type,
                              PSFechaVenc     out varchar2,
                              PSReferencia    out cartcard.icn_contrato.referencia%type,
                              PSSuite         out cartcard.icn_contrato.suite%type,
                              PSCod_Error     out  number,
                              PSMsg_Error     out  varchar2) is
 Cursor curTarjeta is
  select c.id_usuario,t.token,t.expirationdate,t.referencia,c.suite
  from cartcard.icn_tarjeta t,cartcard.icn_contrato c
  where t.referencia = c.referencia
  and T.Cardnumber= PENumTarjeta;

 Cursor curMembrecia is
    SELECT MM.MEMBRECIAID
   FROM CARTCARD.MEMBRECIA MM
   WHERE MM.DURACION = PEDuracionMem;

 RecTarjeta   curTarjeta%rowtype;
 RecMembrecia curMembrecia%rowtype;
 vlError      Exception;
 vlError2     Exception;
begin
 PSCod_Error:=0;

      open curTarjeta;
      fetch curTarjeta into RecTarjeta;
      if curTarjeta%NOTFOUND then
         RecTarjeta:=null;
      end if;
      close curTarjeta;

      open curMembrecia;
      fetch curMembrecia into RecMembrecia;
      if curMembrecia%NOTFOUND then
         close curMembrecia;
         raise vlError2;
      end if;
      close curMembrecia;

        IF RecTarjeta.Token is null THEN
           RAISE vlError;
        else
        update cartcard.icn_clientes u
        set u.contrasenia =PEContraena,u.nombre_usuario =PENombreUsuario,u.nombre =PENombre,u.apaterno =PEApaterno,u.amaterno =PEAmaterno,
            u.fecha_nacimiento =to_date(PEFnacimiento,'dd/mm/yyyy'),u.calle = PECalle,u.colonia =PEColonia,u.ciudad =PECiudad,u.cp =PECP,
            u.id_municipio =PEMunId,u.id_estado =PEEdoId,u.id_pais =PEPaisId,u.telefono =PETelefono,u.celular =PECell,u.numero_identificacion =PENIdentifica,
            U.Correo_Electronico = PENombreUsuario,u.usuario_modifico = nvl(PEUsrModifica,u.usuario_modifico),u.ultima_modificacion = sysdate,
            u.telefono_oficina = PETelefonoOficina, u.extension = PEExtension
        where u.id_usuario = RecTarjeta.Id_Usuario;

        update CARTCARD.preguntasusuario p
           set preguntaestandar1id = PePregunta1,
               respuesta1 = PeRespuesta1,
               preguntaestandar2id = PePregunta2,
               respuesta2 =  PeRespuesta2
        where p.usuarioid = RecTarjeta.Id_Usuario;

      update cartcard.icn_tarjeta t
       set t.id_status_tarjeta = 1,
           t.fecha_membrecia=sysdate 
      where t.referencia =  RecTarjeta.referencia;

      PSIdUsuario:=RecTarjeta.Id_Usuario;
      PSToken:=RecTarjeta.Token;
      PSReferencia:=RecTarjeta.referencia;
      PSFechaVenc:=to_char(RecTarjeta.expirationdate,'ddMMYYYY');
      PSSuite:=RecTarjeta.suite;
   end if;
    commit;
    PSCod_Error:=1;
EXCEPTION
   WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENumTarjeta||' No existe';
  ROLLBACK;
   WHEN vlerror2 then
     PSCod_Error:=0;
     PSMsg_Error:='La duracion membrecia :'||PEDuracionMem||' No existe';
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ActualizaTarjetaIupiCard  (' || PSMsg_Error||')');
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ActualizaTarjetaIupiCard  (' || SQLCODE || '  ' || SQLERRM || ')');
 end;


 PROCEDURE CAMBIOESTATUSUSUARIO (
   peid_usuario         IN   CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
   pereferencia         IN   CARTCARD.ICN_TARJETA.REFERENCIA%TYPE,
   peestatus_tarjeta    IN   CARTCARD.ICN_TARJETA.ID_STATUS_TARJETA%TYPE,
   peestatus_bloqueo    IN   CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%TYPE,
   peestatus_usuario    IN   CARTCARD.ICN_CLIENTES.ESTATUS%TYPE,
   peUsuarioModifica    IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE) IS
BEGIN
       UPDATE CARTCARD.ICN_TARJETA
          SET  ICN_TARJETA.ID_STATUS_TARJETA=peestatus_tarjeta,
              ICN_TARJETA.ESTATUS_BLOQUEO =peestatus_bloqueo,
              ICN_TARJETA.USUARIO_MODIFICO=peUsuarioModifica,
              ICN_TARJETA.ULTIMA_MODIFICACION=SYSDATE
        WHERE ICN_TARJETA.REFERENCIA =  pereferencia;

        UPDATE CARTCARD.ICN_CLIENTES
          SET  ICN_CLIENTES.ESTATUS=peestatus_usuario,
               ICN_CLIENTES.USUARIO_MODIFICO = peUsuarioModifica,
               ICN_CLIENTES.ULTIMA_MODIFICACION = SYSDATE
        WHERE ICN_CLIENTES.ID_USUARIO =  peid_usuario;

        COMMIT;
    EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
     RAISE_APPLICATION_ERROR (-20130, 'Error ocurrido al PKG_ICN_DATOS.CAMBIOESTATUSUSUARIO(' || SQLCODE || '  ' || SQLERRM || ')');
END;

PROCEDURE RESTABLECECARD(
   pereferencia         IN   CARTCARD.ICN_TARJETA.REFERENCIA%type,
   p_tipoMembresia      IN cartcard.icn_tarjeta.id_tipo_membresia%type,
   peUsuarioModifica    IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE
   ) IS

   v_duracion  CARTCARD.IC_CAT_TIPO_MEMBRESIA.DURACION%TYPE;
BEGIN
   SELECT TM.DURACION
   INTO v_duracion
   FROM CARTCARD.IC_CAT_TIPO_MEMBRESIA TM WHERE TM.ID_TIPO_MEMBRESIA =  p_tipoMembresia;


   UPDATE CARTCARD.ICN_TARJETA
      SET  icn_tarjeta.id_tipo_membresia= nvl(p_tipoMembresia,icn_tarjeta.id_tipo_membresia),
           ICN_TARJETA.FECHA_MEMBRECIA  = ADD_MONTHS(SYSDATE,v_duracion),
           ICN_TARJETA.USUARIO_MODIFICO = peUsuarioModifica,
           ICN_TARJETA.ULTIMA_MODIFICACION = SYSDATE
    WHERE ICN_TARJETA.REFERENCIA =  pereferencia;
    COMMIT;
    EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
     RAISE_APPLICATION_ERROR (-20130, 'Error ocurrido al PKG_ICN_DATOS.RESTABLECECARD(' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE agregamembresia(p_usuarioid        IN cartcard.icn_clientes.id_usuario%type,
                            p_tipomembresia    IN cartcard.icn_tarjeta.id_tipo_membresia%type,
                            p_fechaalta        IN VARCHAR2,
                            p_fechavencimiento IN VARCHAR2,
                            p_referencia       OUT  cartcard.icn_tarjeta.referencia%type,
                            p_suite            OUT  cartcard.icn_contrato.suite%type) IS
  v_existe INTEGER;
  PSCod_error  number;
  PSMsg_Error  varchar2(1000);
  error exception;
BEGIN
    SELECT COUNT(co.id_usuario)
      INTO v_existe
      FROM cartcard.icn_clientes cl
     INNER JOIN cartcard.icn_contrato co
        ON cl.id_usuario = co.id_usuario
     INNER JOIN cartcard.icn_tarjeta t
        ON co.referencia = t.referencia
     WHERE co.id_usuario = p_usuarioid
       AND t.id_status_tarjeta IN (0, 1, 4);

    IF v_existe = 0 THEN

      cartcard.pkg_icn_servicio.add_contrato(p_usuarioid,
                                             '141',
                                             null,
                                             'IUPICARD',
                                             p_referencia,
                                             p_suite);
      cartcard.pkg_icn_servicio.add_tarjeta(p_referencia,
                                            null,null,null,null,null,
                                            null,null,null,null,null,
                                            null,null,null,null,null,
                                            null,null,null,null,null,
                                            null,null,null,null,null,
                                            null,null,null,null,null,
                                            null,null,null,p_tipomembresia,null,
                                            null,null,null,
                                            TO_DATE (p_fechavencimiento, 'DDmmYYYY-HH24:MI:SS'),
                                            TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
                                            'IUPICARD',
                                            PSCod_error,
                                            PSMsg_Error);

      IF PSCod_error = 0 THEN
         raise error;
      END IF;

  ELSE

  SELECT referencia
    INTO p_referencia
    FROM cartcard.icn_clientes cl
   INNER JOIN cartcard.icn_contrato co
      ON cl.id_usuario = co.id_usuario
   INNER JOIN cartcard.icn_tarjeta t
      ON co.referencia = t.referencia
   WHERE cl.id_usuario = p_usuarioid
     AND t.id_status_tarjeta IN (0, 1, 4);

  UPDATE cartcard.icn_tarjeta
     SET FECHA_CREACION      = TO_DATE(p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
         ID_STATUS_TARJETA   = 0,
         ULTIMA_MODIFICACION = SYSDATE,
         ID_TIPO_MEMBRESIA   = p_tipomembresia
   WHERE referencia = p_referencia
     AND ID_TIPO_MEMBRESIA IN (0, 1, 4);

   END IF;
   commit;
exception
  when error then
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20100,
                                'Error ocurrido PKG_ICN_DATOS.agregamembresian  (' ||
                                PSMsg_Error || ')');
  when others then
        ROLLBACK;
        RAISE_APPLICATION_ERROR(-20100,
                                'Error ocurrido PKG_ICN_DATOS.agregamembresian  (' ||
                                SQLCODE || '  ' || SQLERRM || ')');

END;

 PROCEDURE actualizamembresia(PEIdMembresia  IN CARTCARD.icn_tarjeta.id_tipo_membresia%type,
                              PEfechaalta    IN   VARCHAR2,
                              PEreferencia   IN CARTCARD.icn_tarjeta.referencia%type) IS
BEGIN
      UPDATE CARTCARD.icn_tarjeta
         SET FECHA_MEMBRECIA = TO_DATE (PEfechaalta, 'DDmmYYYY-HH24:MI:SS'),
             id_status_tarjeta = 0,
       ESTATUS_BLOQUEO = 'BM',
             ultima_modificacion = SYSDATE,
             id_tipo_membresia =PEIdMembresia
       WHERE referencia = PEreferencia
       AND id_status_tarjeta in (0,1);

   COMMIT;
EXCEPTION
     WHEN OTHERS THEN
      ROLLBACK;
        RAISE_APPLICATION_ERROR(-20100,
                                'Error ocurrido PKG_ICN_DATOS.actualizamembresia(' ||
                                SQLCODE || '  ' || SQLERRM || ')');
END ;

 PROCEDURE renovacionmembresia(p_referencia   IN   cartcard.icn_tarjeta.referencia%TYPE) IS
   v_duracion            cartcard.membrecia.duracion%type;
BEGIN
      select m.duracion
      into v_duracion
       from cartcard.ic_cat_tipo_membresia m, cartcard.icn_tarjeta t
       where m.id_tipo_membresia = t.ID_TIPO_MEMBRESIA
       and t.referencia = p_referencia
       order by m.id_tipo_membresia;

      UPDATE cartcard.icn_tarjeta
         SET cartcard.icn_tarjeta.id_status_tarjeta = 1,
             cartcard.icn_tarjeta.fecha_membrecia =
                ADD_MONTHS
                   (CASE
                      WHEN TO_DATE (cartcard.icn_tarjeta.fecha_membrecia) > TO_DATE (SYSDATE)
                      THEN cartcard.icn_tarjeta.fecha_membrecia
                      ELSE SYSDATE
                    END,
                    v_duracion
                   )
       WHERE cartcard.icn_tarjeta.referencia = p_referencia
         AND cartcard.icn_tarjeta.id_status_tarjeta in (0,1);

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido en PKG_ICN_DATOS.renovacionmembresia(' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE actualizadatosusr (
   pusuarioid          IN   cartcard.icn_clientes.id_usuario%TYPE,
   pcalle              IN   cartcard.icn_clientes.calle%TYPE,
   pcolonia            IN   cartcard.icn_clientes.colonia%TYPE,
   pmunicipioid        IN   cartcard.icn_clientes.id_municipio%TYPE,
   pciudad             IN   cartcard.icn_clientes.ciudad%TYPE,
   pcodigopostal       IN   cartcard.icn_clientes.cp%TYPE,
   ptelefono           IN   cartcard.icn_clientes.telefono%TYPE,
   ppaisid             IN   cartcard.icn_clientes.id_pais%TYPE,
   pestadoid           IN   cartcard.icn_clientes.id_estado%TYPE,
   pcelular            IN   cartcard.icn_clientes.celular%TYPE,
   pusuario_modifico   IN   cartcard.icn_clientes.usuario_modifico%TYPE,
   pnumext             IN   cartcard.icn_clientes.num_ext%TYPE,
   pnumint             IN   cartcard.icn_clientes.num_int%TYPE,
   ptelefono_oficina   IN cartcard.icn_clientes.telefono_oficina%TYPE,
   pextension          IN cartcard.icn_clientes.extension%TYPE) IS
BEGIN
   UPDATE cartcard.icn_clientes cl
      SET cl.calle = pcalle,
          cl.colonia = pcolonia,
          cl.id_municipio = pmunicipioid,
          cl.ciudad = pciudad,
          cl.cp = pcodigopostal,
          cl.telefono = ptelefono,
          cl.id_pais = ppaisid,
          cl.id_estado = pestadoid,
          cl.celular = pcelular,
          cl.usuario_modifico = pusuario_modifico,
          cl.ultima_modificacion = SYSDATE,
          cl.num_ext = pnumext,
          cl.num_int = pnumint,
          cl.telefono_oficina = ptelefono_oficina,
          cl.extension = pextension
    WHERE cl.id_usuario = pusuarioid;

   COMMIT;
EXCEPTION
   WHEN OTHERS  THEN
      ROLLBACK;
       RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido en PKG_ICN_DATOS.actualizadatosusr  (' || SQLCODE || '  ' || SQLERRM || ')');
END;


 PROCEDURE ACTUALIZAMAILUSUARIO (pusuarioid       IN       CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                                pcorreonuevo      IN       CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
                                pcorreoanterior   IN       CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
                                pusuario_modifico   IN   cartcard.icn_clientes.usuario_modifico%TYPE,
                                pmensaje          OUT      INTEGER) IS
   vexistemail    INTEGER;
   vconsecutivo   INTEGER;
BEGIN
   BEGIN
      SELECT COUNT (ICN_CLIENTES.CORREO_ELECTRONICO)
        INTO vexistemail
        FROM CARTCARD.ICN_CLIENTES
       WHERE id_usuario = pusuarioid AND CORREO_ELECTRONICO = pcorreoanterior;

      IF (vexistemail > 0) THEN
         SELECT COUNT (ICN_CLIENTES.CORREO_ELECTRONICO)
           INTO vexistemail
           FROM CARTCARD.ICN_CLIENTES
          WHERE ICN_CLIENTES.CORREO_ELECTRONICO = pcorreonuevo;

         IF vexistemail = 0 THEN
            UPDATE CARTCARD.ICN_CLIENTES
               SET CORREO_ELECTRONICO = pcorreonuevo,
                   nombre_usuario = pcorreonuevo,
                   usuario_modifico = pusuario_modifico,
                   ultima_modificacion = SYSDATE

             WHERE CARTCARD.ICN_CLIENTES.id_usuario = pusuarioid;

            pmensaje := 0;

            SELECT nvl(MAX (consecutivo),0)+1
              INTO vconsecutivo
              FROM CARTCARD.hstusuario
             WHERE hstusuarioid = pusuarioid;

            INSERT INTO CARTCARD.hstusuario
                        (hstusuarioid, consecutivo, mail, fechasys
                        )
                 VALUES (pusuarioid, vconsecutivo, pcorreoanterior, SYSDATE
                        );

            pmensaje := 1;
         ELSE
            pmensaje := 2;
         END IF;
      ELSE
         pmensaje := 3;
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN others THEN
      ROLLBACK;
       RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido en PKG_ICN_DATOS.actualizamailusuario  (' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE ACTUALIZACONTRASE (PAUsuarioId       IN   CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                              PAContrasena      IN   CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                              PAUsuarioModifico IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE) IS
BEGIN
     UPDATE CARTCARD.ICN_CLIENTES CL
        SET CL.CONTRASENIA   = PAContrasena,
        CL.USUARIO_MODIFICO=PAUsuarioModifico,
        CL.ULTIMA_MODIFICACION=SYSDATE
      WHERE CL.ID_USUARIO = PAUsuarioId;

     commit;
EXCEPTION
     WHEN OTHERS THEN
           rollback;
         RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido en PKG_ICN_DATOS.actualizacontrasena  (' || SQLCODE || '  ' || SQLERRM || ')');
END;
PROCEDURE ACTUALIZAPASSW (PEIdUsuario           IN   CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                          PEContrasenaOLD       IN   CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                          PEContrasena          IN   CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                          PEUsuarioModifico     IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE,
                          PSCOD_RESUL           OUT NUMBER,
                          PSMSG_RESUL           OUT VARCHAR2) IS
    vlExiste              number;
BEGIN
    PSCOD_RESUL:=0;

    SELECT COUNT(1) INTO vlExiste
    from CARTCARD.ICN_CLIENTES c
    where c.id_usuario= PEIdUsuario
    and c.contrasenia = PEContrasenaOLD;

    IF vlExiste != 0 THEN
     UPDATE CARTCARD.ICN_CLIENTES USU
        SET USU.CONTRASENIA   = PEContrasena,
            USU.USUARIO_MODIFICO=PEUsuarioModifico,
            USU.ULTIMA_MODIFICACION=SYSDATE
      WHERE USU.ID_USUARIO = PEIdUsuario;
      PSCOD_RESUL:=1;
    ELSE
      PSMSG_RESUL:='Contrasena no valida';
    END IF;

   commit;
   EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido en PKG_ICN_DATOS.actualizapassw  (' || SQLCODE || '  ' || SQLERRM || ')');
END;

PROCEDURE ACTUALIZAIDENTIFICACION(p_idusuario in cartcard.icn_clientes.ID_USUARIO%TYPE,
                                  p_identificacionid   IN  CARTCARD.ICN_CLIENTES.ID_TIPO_IDENTIFICACION%TYPE,
                                  p_nroidentificacion  IN  CARTCARD.ICN_CLIENTES.NUMERO_IDENTIFICACION%TYPE,
                                  pusuario_modifico  IN  CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%type) IS
BEGIN

   UPDATE CARTCARD.ICN_CLIENTES A
         SET A.NUMERO_IDENTIFICACION=p_nroidentificacion,
             A.ID_TIPO_IDENTIFICACION=p_identificacionid,
             A.USUARIO_MODIFICO=pusuario_modifico,
             A.ULTIMA_MODIFICACION=SYSDATE
      WHERE A.id_usuario=p_idusuario;

   commit;

   EXCEPTION
     WHEN OTHERS THEN
     rollback;
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en PKG_ICN_DATOS.ACTUALIZAIDENTIFICACION  (' || SQLCODE || '  ' || SQLERRM || ')');
END;
 PROCEDURE agregausuario (
   p_nombre                IN       cartcard.icn_clientes.nombre%TYPE,
   p_apaterno              IN       cartcard.icn_clientes.apaterno%TYPE,
   p_amaterno              IN       cartcard.icn_clientes.amaterno%TYPE,
   p_calle                 IN       cartcard.icn_clientes.calle%TYPE,
   p_colonia               IN       cartcard.icn_clientes.colonia%TYPE,
   p_municipioid           IN       cartcard.icn_clientes.id_municipio%TYPE,
   p_ciudad                IN       cartcard.icn_clientes.ciudad%TYPE,
   p_codigopostal          IN       cartcard.icn_clientes.cp%TYPE,
   p_telefono              IN       cartcard.icn_clientes.telefono%TYPE,
   p_celular               IN       cartcard.icn_clientes.celular%TYPE,
   p_mail                  IN       cartcard.icn_clientes.correo_electronico%TYPE,
   p_paisid                IN       cartcard.icn_clientes.id_pais%TYPE,
   p_estadoid              IN       cartcard.icn_clientes.id_estado%TYPE,
   p_nombreusuario         IN       cartcard.icn_clientes.nombre_usuario%TYPE,
   ppreguntaestandar1      IN       CARTCARD.preguntasusuario.PREGUNTAESTANDAR1ID%TYPE,
   ppreguntaestandar2      IN       CARTCARD.preguntasusuario.PREGUNTAESTANDAR2ID%TYPE,
   ppregunta1              IN       CARTCARD.preguntasusuario.PREGUNTA3%TYPE,
   ppregunta2              IN       CARTCARD.preguntasusuario.PREGUNTA4%TYPE,
   prespuestaestandar1     IN       CARTCARD.preguntasusuario.RESPUESTA1%TYPE,
   prespuestaestandar2     IN       CARTCARD.preguntasusuario.RESPUESTA2%TYPE,
   prespuesta1             IN       CARTCARD.preguntasusuario.RESPUESTA3%TYPE,
   prespuesta2             IN       CARTCARD.preguntasusuario.RESPUESTA4%TYPE,
   pidentificacion         IN       cartcard.icn_clientes.id_tipo_identificacion%TYPE,
   pnumeroidentificacion   IN       cartcard.icn_clientes.numero_identificacion%TYPE,
   ptipocliente            IN       CARTCARD.icn_clientes.TIPO_CLIENTE%TYPE,
   pcontrasenia            IN       cartcard.icn_clientes.contrasenia%TYPE,
   p_fechanacimiento       IN       VARCHAR2,
   p_usuario_modifico      IN       cartcard.icn_clientes.USUARIO_MODIFICO%TYPE,
   p_numint                IN       cartcard.icn_clientes.num_int%TYPE,
   p_numext                IN       cartcard.icn_clientes.num_ext%TYPE,
   p_canal                 IN       cartcard.icn_clientes.canal%type,
   p_telefonoOficina       IN       cartcard.icn_clientes.telefono_oficina%type,
   p_extension             IN       cartcard.icn_clientes.extension%type,
   p_usuarioid             OUT      INTEGER,
   p_error                 OUT      INTEGER     ) IS
    pereg cartcard.Icn_Clientes%rowtype;
 BEGIN
  pereg.nombre:=p_nombre;
  pereg.apaterno:=p_apaterno;
  pereg.amaterno:=p_amaterno;
  pereg.nombre_usuario:=p_nombreusuario;
  pereg.contrasenia:=pcontrasenia;
  pereg.correo_electronico:=p_mail;
  pereg.cp:=p_codigopostal;
  pereg.ciudad:=p_ciudad;
  pereg.colonia:= p_colonia;
  pereg.id_municipio:=p_municipioid;
  pereg.id_estado:=p_estadoid;
  pereg.id_pais:=p_paisid;
  pereg.calle:=p_calle;
  pereg.num_ext:=p_numext;
  pereg.num_int:=p_numint;
  pereg.telefono:= p_telefono;
  pereg.celular:=p_celular;
  pereg.fecha_nacimiento:=  TO_DATE (p_fechanacimiento, 'ddMMYYYY-HH24:MI:ss');
  pereg.id_tipo_identificacion:=pidentificacion;
  pereg.numero_identificacion:=pnumeroidentificacion;
  pereg.tipo_cliente:=ptipocliente;
  pereg.estatus := 0;
  pereg.usuario_modifico:=p_usuario_modifico;
  pereg.canal:=p_canal;
  pereg.telefono_oficina:= p_telefonoOficina;
  pereg.extension:= p_extension;
  CARTCARD.pkg_icn_servicio.ADD_Cliente(pereg ,p_usuarioid);

     INSERT INTO CARTCARD.preguntasusuario
                  (usuarioid, preguntaestandar1id, respuesta1,
                   preguntaestandar2id, respuesta2, pregunta3,
                   respuesta3, pregunta4, respuesta4
                  )
           VALUES (p_usuarioid, ppreguntaestandar1, prespuestaestandar1,
                   ppreguntaestandar2, prespuestaestandar2, ppregunta1,
                   prespuesta1, ppregunta2, prespuesta2
                  );
   p_error:= 1;
   COMMIT;
EXCEPTION
   WHEN OTHERS   THEN
      ROLLBACK;
      raise_application_error
                       (-20100,
                           'Error ocurrido al agregar la PKG_ICN_DATOS.AGREGAUSUARIO  ('
                        || SQLCODE
                        || '  '
                        || SQLERRM
                        || ')'
                       );
END;
 PROCEDURE Actualizastatususr (pusuarioid         IN CARTCARD.ICN_CLIENTES.ID_USUARIO%type,
                               pestatus           IN CARTCARD.ICN_CLIENTES.estatus%type,
                               pusuario_modifico  IN CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%type) IS
p_existe  INTEGER;
BEGIN
   p_existe :=0;

   SELECT COUNT(1) INTO p_existe FROM CARTCARD.ICN_CLIENTES A
             WHERE A.ID_USUARIO=pusuarioid;

   IF p_existe > 0 THEN
            UPDATE CARTCARD.ICN_CLIENTES A
             SET A.ESTATUS=pestatus,
              A.USUARIO_MODIFICO=pusuario_modifico,
              A.ULTIMA_MODIFICACION=SYSDATE
          WHERE A.ID_USUARIO=pusuarioid;

             COMMIT;

   END IF;


   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la PKG_ICN_DATOS.Actualizastatususr (' || SQLCODE || '  ' || SQLERRM || ')');
END;

PROCEDURE Actstatustarjeta(PEidUsuario IN CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                                             PENUMEROTARJETA IN CARTCARD.ICN_TARJETA.CARDNUMBER%TYPE,
                                             PEESTATUSTARJETA IN CARTCARD.ICN_TARJETA.ID_STATUS_TARJETA%TYPE,
                                             PEESTATUSUSUARIO IN CARTCARD.ICN_CLIENTES.ESTATUS%TYPE,
                                             PSCOD_ERROR   OUT NUMBER,
                                             PSMsg_Error   OUT VARCHAR2,
                                             PSREFERENCIA  OUT CARTCARD.ICN_TARJETA.REFERENCIA%TYPE) IS
CURSOR curTarjeta IS
   SELECT u.ID_USUARIO, t.TOKEN, t.EXPIRATIONDATE, t.REFERENCIA
   FROM CARTCARD.ICN_TARJETA t INNER JOIN CARTCARD.ICN_CONTRATO c ON t.REFERENCIA = c.REFERENCIA
   INNER JOIN CARTCARD.ICN_CLIENTES u ON c.ID_USUARIO = u.ID_USUARIO
   WHERE t.CARDNUMBER = PENUMEROTARJETA
   AND u.ID_USUARIO = PEidUsuario;
   RecTarjeta   curTarjeta%ROWTYPE;
   vlError      EXCEPTION;

BEGIN
   PSCOD_ERROR:=0;

      OPEN curTarjeta;
      FETCH curTarjeta INTO RecTarjeta;
      IF curTarjeta%NOTFOUND THEN
         RecTarjeta:=NULL;
      END IF;
      CLOSE curTarjeta;

      IF RecTarjeta.REFERENCIA IS NULL THEN
           RAISE vlError;
      ELSE
   UPDATE CARTCARD.ICN_TARJETA t
    SET t.ID_STATUS_TARJETA = PEESTATUSTARJETA
   WHERE t.REFERENCIA = RecTarjeta.REFERENCIA;

   UPDATE CARTCARD.ICN_CLIENTES u
    SET u.ESTATUS = PEESTATUSUSUARIO
   WHERE u.ESTATUS = RecTarjeta.ID_USUARIO;

      UPDATE CARTCARD.ICN_CONTRATO c
       SET c.ESTATUS = PEESTATUSUSUARIO
      WHERE c.ID_USUARIO = RecTarjeta.ID_USUARIO
    AND c.REFERENCIA = RecTarjeta.REFERENCIA;

      PSREFERENCIA:=RecTarjeta.referencia;
    END IF;
   COMMIT;
   PSCod_Error:=1;
EXCEPTION
  WHEN vlerror THEN
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENUMEROTARJETA||' No existe';
  ROLLBACK;
   WHEN OTHERS THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_DATOS.Actstatustarjeta(' || SQLCODE || '  ' || SQLERRM || ')');
END;

PROCEDURE cambiastatustarjeta(p_referencia IN cartcard.icn_tarjeta.referencia%type,
                              p_status     IN cartcard.icn_tarjeta.id_status_tarjeta%type,
                              PusuarioModifica in cartcard.icn_tarjeta.usuario_modifico%type) IS
BEGIN
   UPDATE CARTCARD.ICN_TARJETA
      SET ID_STATUS_TARJETA = p_status,
          usuario_modifico = PusuarioModifica,
          ultima_modificacion = sysdate
    WHERE REFERENCIA = p_referencia;

   COMMIT;
EXCEPTION
   WHEN others THEN
   ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_DATOS.cambiastatustarjeta  (' || SQLCODE || '  ' || SQLERRM || ')');
END;

PROCEDURE ELIMINAUSUARIO (p_usuarioid IN cartcard.icn_clientes.id_usuario%type,
                          PSCod_Error  out  number,
                          PSMsg_Error     out  varchar2) IS
BEGIN
      DELETE FROM cartcard.icn_clientes cl
      where cl.id_usuario = p_usuarioid;

      DELETE FROM CARTCARD.ic_preguntas_usuario
      WHERE ID_usuario = p_usuarioid;

      DELETE FROM CARTCARD.ic_documento
      WHERE usuarioid = p_usuarioid;

   COMMIT;
EXCEPTION
    WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_DATOS.ELIMINAUSUARIO  (' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE Cat_tipo_membresia (p_id_tipo_membresia   IN   cartcard.ic_cat_tipo_membresia.id_tipo_membresia%TYPE,
                               p_costo               IN   cartcard.ic_cat_tipo_membresia.costo%TYPE,
                               p_descripcion         IN   cartcard.ic_cat_tipo_membresia.descripcion%TYPE,
                               p_usuario_modifico    IN   cartcard.ic_cat_tipo_membresia.usuario_modifico%TYPE,
                               p_duracion            IN   cartcard.ic_cat_tipo_membresia.duracion%TYPE) IS
   v_existe   NUMBER;
BEGIN
   SELECT COUNT (tm.id_tipo_membresia)
     INTO v_existe
     FROM cartcard.ic_cat_tipo_membresia tm
    WHERE tm.id_tipo_membresia = p_id_tipo_membresia;

   IF v_existe = 0   THEN
      INSERT INTO cartcard.ic_cat_tipo_membresia
         (id_tipo_membresia, descripcion, costo, usuario_modifico, ultima_modificacion, duracion)
      values((select max(id_tipo_membresia) + 1 from CARTCARD.ic_cat_tipo_membresia),p_descripcion,p_costo, p_usuario_modifico,SYSDATE,p_duracion);
   ELSE
      UPDATE cartcard.ic_cat_tipo_membresia tm
         SET tm.duracion = NVL(p_duracion,tm.duracion),
             tm.descripcion = NVL(p_descripcion,tm.descripcion),
             tm.costo = NVL(p_costo,tm.costo),
             tm.ultima_modificacion = SYSDATE,
             tm.usuario_modifico = NVL (p_usuario_modifico,tm.usuario_modifico)
       WHERE tm.id_tipo_membresia = p_id_tipo_membresia;

   END IF;
   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.Cat_tipo_membresia(' || SQLCODE|| ''|| SQLERRM || ')');
END;

 PROCEDURE OBTIENEPREGUNTAS (
   p_nombreusuario   IN     CARTCARD.ICN_CLIENTES.NOMBRE_USUARIO%TYPE,
   p_mail            IN     CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
   p_cursor          OUT    sys_refcursor) IS
   v_usuarioid   INTEGER;
BEGIN
   SELECT NVL (MAX (id_usuario), 0)
     INTO v_usuarioid
     FROM CARTCARD.icn_clientes
    WHERE p_nombreusuario = nombre_usuario AND correo_electronico = p_mail;

   OPEN p_cursor FOR
      SELECT icn_clientes.id_usuario, preguntaestandar1id,
             (SELECT pregunta
                FROM CARTCARD.preguntasestandar INNER JOIN CARTCARD.preguntasusuario ON CARTCARD.preguntasusuario.preguntaestandar1id =
                                                                        CARTCARD.preguntasestandar.idpreguntaestandar
               WHERE usuarioid = v_usuarioid) AS pregunta1,
             preguntaestandar2id,
             (SELECT pregunta
                FROM CARTCARD.preguntasestandar INNER JOIN CARTCARD.preguntasusuario ON CARTCARD.preguntasusuario.preguntaestandar2id =
                                                                        CARTCARD.preguntasestandar.idpreguntaestandar
               WHERE usuarioid = v_usuarioid) AS pregunta2, pregunta3,
             pregunta4
        FROM CARTCARD.preguntasusuario INNER JOIN CARTCARD.icn_clientes ON CARTCARD.preguntasusuario.usuarioid =
                                                             CARTCARD.icn_clientes.id_usuario
       WHERE CARTCARD.preguntasusuario.usuarioid = v_usuarioid AND correo_electronico = p_mail;
END;

 PROCEDURE ModificaTarjeta(PEReferencia IN CARTCARD.ICN_TARJETA.REFERENCIA%type,
                       PEcardnumber          IN CARTCARD.ICN_TARJETA.CARDNUMBER%type,
                       PEpterminalcode       IN CARTCARD.ICN_TARJETA.PTERMINALCODE%type,
                       PEproductcode         IN CARTCARD.ICN_TARJETA.PRODUCTCODE%type,
                       PEpid                 IN CARTCARD.ICN_TARJETA.PID%type,
                       PEpidtype             IN CARTCARD.ICN_TARJETA.PIDTYPE%type,
                       PEprbservice          IN CARTCARD.ICN_TARJETA.PRBSERVICE%type,
                       PEpdateofbirth        IN CARTCARD.ICN_TARJETA.PDATEOFBIRTH%type,
                       PEpembossedname       IN CARTCARD.ICN_TARJETA.PEMBOSSEDNAME%type,
                       PEptelephoneareacode  IN CARTCARD.ICN_TARJETA.PTELEPHONEAREACODE%type,
                       PEptelephone          IN CARTCARD.ICN_TARJETA.PTELEPHONE%type,
                       PEpfaxareacode        IN CARTCARD.ICN_TARJETA.PFAXAREACODE%type,
                       PEpfaxphone           IN CARTCARD.ICN_TARJETA.PFAXPHONE%type,
                       PEpcellphone          IN CARTCARD.ICN_TARJETA.PCELLPHONE%type,
                       PEpcellphoneareacode  IN CARTCARD.ICN_TARJETA.PCELLPHONEAREACODE%type,
                       PEpidexpiration       IN CARTCARD.ICN_TARJETA.PIDEXPIRATION%type,
                       PEpidcountry          IN CARTCARD.ICN_TARJETA.PIDCOUNTRY%type,
                       PEpidstate            IN CARTCARD.ICN_TARJETA.PIDSTATE%type,
                       PEplastname           IN CARTCARD.ICN_TARJETA.PLASTNAME%type,
                       PEppersonaltitle      IN CARTCARD.ICN_TARJETA.PPERSONALTITLE%type,
                       PEpmaindenname        IN CARTCARD.ICN_TARJETA.PMAINDENNAME%type,
                       PEpmiddlename         IN CARTCARD.ICN_TARJETA.PMIDDLENAME%type,
                       PEpfirstname          IN CARTCARD.ICN_TARJETA.PFIRSTNAME%type,
                       PEpcountry            IN CARTCARD.ICN_TARJETA.PCOUNTRY%type,
                       PEpstate              IN CARTCARD.ICN_TARJETA.PSTATE%type,
                       PEpcity               IN CARTCARD.ICN_TARJETA.PCITY%type,
                       PEpaddress            IN CARTCARD.ICN_TARJETA.PADDRESS%type,
                       PEpzipcode            IN CARTCARD.ICN_TARJETA.PZIPCODE%type,
                       PEpemail              IN CARTCARD.ICN_TARJETA.PEMAIL%type,
                       PErequestid           IN CARTCARD.ICN_TARJETA.REQUESTID%type,
                       PEoperationid         IN CARTCARD.ICN_TARJETA.OPERATIONID%type,
                       PEtoken               IN CARTCARD.ICN_TARJETA.TOKEN%type,
                       PEexpirationdate      IN CARTCARD.ICN_TARJETA.EXPIRATIONDATE%type,
                       PEverificationcode    IN CARTCARD.ICN_TARJETA.VERIFICATIONCODE%type,
                       PEid_emisor           IN CARTCARD.ICN_TARJETA.ID_EMISOR%type,
                       PEcvv                 IN CARTCARD.ICN_TARJETA.CVV%type,
                       PEtipo_tarjeta        IN CARTCARD.ICN_TARJETA.TIPO_TARJETA%type,
                       PEestatus_bloqueo     IN CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%type,
                       PEusuario_modifico    IN CARTCARD.ICN_TARJETA.USUARIO_MODIFICO%type,
                       PSCod_error out number,
                       PSMsg_Error out varchar2) IS

BEGIN

   PScod_error := 0;
   UPDATE CARTCARD.ICN_TARJETA t
   SET

        T.CARDNUMBER          = nvl(PEcardnumber, T.CARDNUMBER),
        T.PTERMINALCODE       = nvl(PEpterminalcode,T.PTERMINALCODE),
        T.PRODUCTCODE         = nvl(PEproductcode,T.PRODUCTCODE),
        T.PID                 = nvl(PEpid,T.PID),
        T.PIDTYPE             = nvl(PEpidtype,T.PIDTYPE),
        T.PRBSERVICE          = nvl(PEprbservice,T.PRBSERVICE),
        T.PDATEOFBIRTH        = nvl(PEpdateofbirth,T.PDATEOFBIRTH),
        T.PEMBOSSEDNAME       = nvl(PEpembossedname,T.PEMBOSSEDNAME),
        T.PTELEPHONEAREACODE  = nvl(PEptelephoneareacode,T.PTELEPHONEAREACODE),
        T.PTELEPHONE          = nvl(PEptelephone,T.PTELEPHONE),
        T.PFAXAREACODE        = nvl(PEpfaxareacode,T.PFAXAREACODE),
        T.PFAXPHONE           = nvl(PEpfaxphone,T.PFAXPHONE),
        T.PCELLPHONE          = nvl(PEpcellphone,T.PCELLPHONE),
        T.PCELLPHONEAREACODE  = nvl(PEpcellphoneareacode,T.PCELLPHONEAREACODE),
        T.PIDEXPIRATION       = nvl(PEpidexpiration,T.PIDEXPIRATION),
        T.PIDCOUNTRY          = nvl(PEpidcountry,T.PIDCOUNTRY),
        T.PIDSTATE            = nvl(PEpidstate,T.PIDSTATE),
        T.PLASTNAME           = nvl(PEplastname,T.PLASTNAME),
        T.PPERSONALTITLE      = nvl(PEppersonaltitle,T.PPERSONALTITLE),
        T.PMAINDENNAME        = nvl(PEpmaindenname,T.PMAINDENNAME),
        T.PMIDDLENAME         = nvl(PEpmiddlename,T.PMIDDLENAME),
        T.PFIRSTNAME          = nvl(PEpfirstname,T.PFIRSTNAME),
        T.PCOUNTRY            = nvl(PEpcountry,T.PCOUNTRY),
        T.PSTATE              = nvl(PEpstate,T.PSTATE),
        T.PCITY               = nvl(PEpcity,T.PCITY),
        T.PADDRESS            = nvl(PEpaddress,T.PADDRESS),
        T.PZIPCODE            = nvl(PEpzipcode,T.PZIPCODE),
        T.PEMAIL              = nvl(PEpemail,T.PEMAIL),
        T.REQUESTID           = nvl(PErequestid,T.REQUESTID),
        T.OPERATIONID         = nvl(PEoperationid,T.OPERATIONID),
        T.TOKEN               = nvl(PEtoken,T.TOKEN),
        T.EXPIRATIONDATE      = nvl(PEexpirationdate,T.EXPIRATIONDATE),
        T.VERIFICATIONCODE    = nvl(PEverificationcode,T.VERIFICATIONCODE),
        T.ID_EMISOR           = nvl(PEid_emisor,T.ID_EMISOR),
        T.CVV                 = nvl(PEcvv,T.CVV),
        T.TIPO_TARJETA        = nvl(PEtipo_tarjeta,T.TIPO_TARJETA),
        T.ESTATUS_BLOQUEO     = nvl(PEestatus_bloqueo,T.ESTATUS_BLOQUEO),
        T.USUARIO_MODIFICO    = nvl(PEusuario_modifico,T.USUARIO_MODIFICO),
        T.ULTIMA_MODIFICACION = sysdate
        WHERE T.REFERENCIA = PEReferencia;

  COMMIT;
   PScod_error:=1;
  EXCEPTION
  WHEN OTHERS THEN
  PScod_error:=0;
  PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_DATOS.Modifica_TARJETA  (' || SQLCODE || '  ' || SQLERRM || ')');
END ;
 PROCEDURE ELIMINAR_MEMBRESIA (p_id  IN CARTCARD.IC_CAT_TIPO_MEMBRESIA.ID_TIPO_MEMBRESIA%TYPE)is
 BEGIN
  delete from CARTCARD.IC_CAT_TIPO_MEMBRESIA M
   where id_tipo_membresia = p_id;
  commit;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_DATOS.ELIMINAR_MEMBRESIA  (' || SQLCODE || '  ' || SQLERRM || ')');
  end;

PROCEDURE membresiaexpirada(p_referencia IN cartcard.icn_tarjeta_complemento.referencia%type,
                            p_estatus    IN cartcard.icn_tarjeta_complemento.id_estatus%type,
                            p_comentario IN cartcard.icn_tarjeta_complemento.comentario%type,
                            p_accion IN NUMBER,
                            p_resultado  OUT NUMBER,
                            resultadotex OUT VARCHAR2) IS
   v_referencia            cartcard.icn_contrato.referencia%type;
   v_cardnumber            cartcard.icn_tarjeta.cardnumber%type;
   v_fecha_creacion        cartcard.icn_tarjeta.fecha_creacion%type;
   v_ultima_modificacion   cartcard.icn_tarjeta.ultima_modificacion%type;
   v_expiration_date       cartcard.icn_tarjeta.expirationdate%type;
   v_embossedname          cartcard.icn_tarjeta.pembossedname%type;
   PSMsg_RESP              VARCHAR2(250);
BEGIN

    SELECT t.referencia, t.cardnumber, t.pembossedname, t.fecha_creacion, t.ultima_modificacion, t.expirationdate
     INTO v_referencia, v_cardnumber, v_embossedname, v_fecha_creacion, v_ultima_modificacion, v_expiration_date
     FROM cartcard.icn_tarjeta t INNER JOIN cartcard.icn_contrato co  ON co.referencia = t.referencia
    WHERE co.referencia = p_referencia;

    IF p_accion = 1  THEN
        cartcard.PKG_ICN_SERVICIO.ADD_TARJETA_COMPL(v_referencia,
                             v_cardnumber,
                             v_embossedname,
                             null,
                             p_estatus,
                             p_comentario,
                             v_fecha_creacion,
                             'IUPICARD',
                             v_expiration_date,
                             SYSDATE,
                             p_resultado,
                             PSMsg_RESP);
         p_resultado := 1;
         resultadotex := 'Inserto cuando Bloquea';

    ELSIF p_accion = 2 THEN
          cartcard.PKG_ICN_SERVICIO.ADD_TARJETA_COMPL(v_referencia,
                             v_cardnumber,
                             v_embossedname,
                             null,
                             p_estatus,
                             p_comentario,
                             v_fecha_creacion,
                             'IUPICARD',
                             v_expiration_date,
                             null,
                             p_resultado,
                             PSMsg_RESP);
         p_resultado := 2;
         resultadotex := 'Inserto cuando cobra la membresia';


    ELSE
         p_resultado := 3;
        resultadotex :=  'NO SE EFECTUO LA ACCION';

    END IF;

   COMMIT;

 EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      p_resultado := 0;
      RAISE_APPLICATION_ERROR (-20100, 'Error '||SQLCODE||' '||substr(SQLERRM, 1, 200));
END;

 PROCEDURE CambioStatusBloqueo(pCardNumber    IN cartcard.icn_tarjeta.cardnumber%type,
                               pStatusBloqueo in cartcard.icn_tarjeta.estatus_bloqueo%type,
                               pResultado     out NUMBER,
                               pResultadoMsg  out VARCHAR2) IS
BEGIN
     UPDATE cartcard.icn_tarjeta t
       SET t.estatus_bloqueo = pStatusBloqueo
       WHERE t.cardnumber = pCardNumber;
  pResultado:=1;
  pResultadoMsg := 'OK';
    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     pResultado:=0;
     pResultadoMsg:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_DATOS.CambioStatusBloqueo  (' || SQLCODE || '  ' || SQLERRM || ')');
end;

 PROCEDURE ACTUALIZAPREGUNTA(pusuarioID     IN cartcard.preguntasusuario.usuarioid%type,
                             pidPregunta1   IN cartcard.preguntasusuario.preguntaestandar1id%type,
                             pRespuesta1    IN cartcard.preguntasusuario.respuesta1%type,
                             pidPregunta2   IN cartcard.preguntasusuario.preguntaestandar2id%type,
                             pidRespuesta2  IN cartcard.preguntasusuario.respuesta2%type,
                             pResultado     OUT NUMBER,
                             pResultadoMsg  OUT VARCHAR2) IS
BEGIN
     UPDATE cartcard.preguntasusuario p
       SET p.preguntaestandar1id = NVL(pidPregunta1, p.preguntaestandar1id),
           P.RESPUESTA1          = NVL(pRespuesta1, p.respuesta1),
           p.preguntaestandar2id = NVL(pidPregunta2,p.preguntaestandar2id),
           P.RESPUESTA2          = NVL(pidRespuesta2,P.RESPUESTA2)
     WHERE p.usuarioid           = pusuarioID;
  pResultado :=1;
  pResultadoMsg := 'OK';
    COMMIT;
 EXCEPTION
  WHEN OTHERS THEN
  pResultado :=0;
  pResultadoMsg:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizarla pregunta  (' || SQLCODE || '  ' || SQLERRM || ')');
 END;

PROCEDURE MODIFICA_TARJETA_COM(PEReferencia          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.REFERENCIA%type,
                               PECardnumber          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNUMBER%type,
                               PECardname            IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNAME%type,
                               PENombre_remesa       IN CARTCARD.ICN_TARJETA_COMPLEMENTO.NOMBRE_REMESA%type,
                               PEId_estatus          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.ID_ESTATUS%type,
                               PEComentario          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.COMENTARIO%type,
                               PEFecha_creacion      IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_CREACION%type,
                               PEUsuario_modifico    IN CARTCARD.ICN_TARJETA_COMPLEMENTO.USUARIO_MODIFICO%type,
                               PEFecha_vigencia      IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_VIGENCIA%type,
                               PEFecha_bloqueo       IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_BLOQUEO%type,
                               PSCod_error           out number,
                               PSMsg_Error           out varchar2) IS
v_existe INTEGER;

BEGIN
  select count(1)
   into v_existe
   from cartcard.icn_tarjeta_complemento c
   where  c.referencia = PEReferencia and c.ID_ESTATUS=PEId_estatus;

 IF v_existe != 0 THEN

  UPDATE CARTCARD.ICN_TARJETA_COMPLEMENTO c
    SET c.referencia  = nvl(PEReferencia, c.referencia),
        c.cardnumber  = nvl(PECardnumber, c.cardnumber),
        c.cardname  = nvl(PECardname, c.cardname),
        c.nombre_remesa  = nvl(PENombre_remesa, c.nombre_remesa),
        c.id_estatus  = nvl(PEId_estatus, c.id_estatus),
        c.comentario  = nvl(PEComentario, c.comentario),
        c.fecha_creacion  = nvl(PEFecha_creacion, c.fecha_creacion),
        c.usuario_modifico  = nvl(PEUsuario_modifico, c.usuario_modifico),
        c.ultima_modificacion  = sysdate,
        c.fecha_vigencia  = nvl( PEFecha_vigencia, c.fecha_vigencia),
        c.fecha_bloqueo  = nvl(PEFecha_bloqueo, c.fecha_bloqueo)
        WHERE c.referencia = PEReferencia and c.ID_ESTATUS=PEId_estatus;
        PScod_error := 1;
        PSMsg_Error:='OK';
     ELSE

     INSERT INTO CARTCARD.ICN_TARJETA_COMPLEMENTO
        (referencia,cardnumber,cardname,nombre_remesa,
        id_estatus,comentario,fecha_creacion,usuario_modifico,ultima_modificacion,
        fecha_vigencia,fecha_bloqueo)
        VALUES (PEReferencia, PECardnumber, PECardname, PENombre_remesa,
        PEId_estatus, PEComentario, NVL(PEFecha_creacion,SYSDATE), PEUsuario_modifico,sysdate,
        PEFecha_vigencia,PEFecha_bloqueo);

       PScod_error := 1;
       PSMsg_Error:='OK';

      END IF;
   COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
  PScod_error:=0;
  PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_DATOS.ICN_TARJETA_COMPLEMENTO  (' || SQLCODE || '  ' || SQLERRM || ')');
END ;

end PKG_ICN_DATOS;
/

SHOW ERRORS;


CREATE OR REPLACE package body PKG_ICN_REPORTES is
  Function getTotalFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) return number is
    vlResultado     number(10):=0;
  begin
    select count(1) 
      into vlResultado
    from cartcard.ICN_MOVIMIENTOS t
    where t.id_canal in (1,2,3,8)
    and t.referencia = PEReferencia;
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;

  Function getFechaFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.fecha_aplicacion%type is
    vlResultado     cartcard.ICN_MOVIMIENTOS.fecha_aplicacion%type;
  begin
    select i.fecha_aplicacion
     into vlResultado
    from cartcard.icn_movimientos i
    where i.id_movimiento = (select min(id_movimiento)
                            from cartcard.icn_movimientos m
                            where m.referencia =PEReferencia
                            and m.id_canal in (1,2,3,8));
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;

  Function getAnualidad(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.importe_dls%type is
    vlResultado     cartcard.ICN_MOVIMIENTOS.importe_dls%type;
  begin
    select NVL(SUM(I.IMPORTE_DLS),0)
     into vlResultado
    from cartcard.icn_movimientos i    
    where I.REFERENCIA = PEReferencia
    AND i.transaccion in ('CMEM','RM00');
                  
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;

  Function getImporteMxpFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.importe_mx%type is
    vlResultado     cartcard.ICN_MOVIMIENTOS.importe_mx%type;
  begin
    select i.importe_mx
     into vlResultado
    from cartcard.icn_movimientos i
    where i.id_movimiento = (select min(id_movimiento)
                            from cartcard.icn_movimientos m
                            where m.referencia =PEReferencia
                            and m.id_canal in (1,2,3,8));
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;
  Function getTipoCambioFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.tipo_cambio%type is
    vlResultado     cartcard.ICN_MOVIMIENTOS.tipo_cambio%type;
  begin
    select i.tipo_cambio
     into vlResultado
    from cartcard.icn_movimientos i
    where i.id_movimiento = (select min(id_movimiento)
                            from cartcard.icn_movimientos m
                            where m.referencia =PEReferencia
                            and m.id_canal in (1,2,3,8));
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;
  Function getImporteDlsFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.importe_dls%type is
    vlResultado     cartcard.ICN_MOVIMIENTOS.importe_dls%type;
  begin
    select i.importe_dls
     into vlResultado
    from cartcard.icn_movimientos i
    where i.id_movimiento = (select min(id_movimiento)
                            from cartcard.icn_movimientos m
                            where m.referencia =PEReferencia
                            and m.id_canal in (1,2,3,8));
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;
  Function getFechaUltimaFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ICN_MOVIMIENTOS.fecha_aplicacion%type is
    vlResultado     cartcard.ICN_MOVIMIENTOS.fecha_aplicacion%type;
  begin
    select i.fecha_aplicacion
     into vlResultado
    from cartcard.icn_movimientos i
    where i.id_movimiento = (select max(id_movimiento)
                            from cartcard.icn_movimientos m
                            where m.referencia =PEReferencia);
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;
  Function getTipoFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.ic_cat_canal.descripcion%type is
    vlResultado     cartcard.ic_cat_canal.descripcion%type;
  begin
    select can.descripcion
     into vlResultado
    from cartcard.icn_movimientos i,cartcard.ic_cat_canal can
    where i.id_movimiento = (select min(id_movimiento)
                            from cartcard.icn_movimientos m
                            where m.referencia =PEReferencia
                            and m.id_canal in (1,2,3,8))
       and i.id_canal  = can.id_canal;                            
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;
  Function getSucursalFondeo(PEReferencia in cartcard.ICN_MOVIMIENTOS.referencia%type) 
    return cartcard.icn_cat_banco.nombre%type is
    vlResultado     cartcard.icn_cat_banco.nombre%type;
  begin
    select case
          when i.id_canal = 1 then i.sucursal
          when i.id_canal = 2 then 'N/A'
          when i.id_canal = 8 then i.sucursal
          else b.nombre
         end
     into vlResultado
    from cartcard.icn_movimientos i,cartcard.icn_cat_banco b
    where i.id_movimiento = (select min(id_movimiento)
                            from cartcard.icn_movimientos m
                            where m.referencia =PEReferencia
                            and m.id_canal in (1,2,3,8))
       and i.institucion_emisora = b.codigo(+);
    return vlResultado;
  EXCEPTION
   WHEN OTHERS THEN
     return   vlResultado;
  end;
end;
/

SHOW ERRORS;


CREATE OR REPLACE package body          PKG_ICN_SERVICIO is

PROCEDURE ADD_Cliente (pereg       IN CARTCARD.ICN_CLIENTES%ROWTYPE,
                       psIdUsuario OUT cartcard.ICN_CLIENTES.id_usuario%TYPE) IS
BEGIN
   SELECT CARTCARD.USUARIOID_SEQ.NEXTVAL INTO psIdUsuario FROM DUAL;

      INSERT INTO CARTCARD.ICN_CLIENTES
        (id_usuario, nombre, apaterno,
         amaterno, calle, num_ext,
         num_int, colonia, id_municipio,
         ciudad, cp, telefono,
         correo_electronico, id_pais, id_estado,
         nombre_usuario, estatus, numero_identificacion,id_tipo_identificacion,
         tipo_cliente, b_ldap, contrasenia,
         fecha_creacion, celular,
         fecha_nacimiento, usuario_modifico,
         ultima_modificacion,CANAL, telefono_oficina, extension
         )
      VALUES (psIdUsuario, pereg.nombre, pereg.apaterno,
              pereg.amaterno,  pereg.calle,pereg.num_ext,
              pereg.num_int, pereg.colonia, pereg.id_municipio,
              pereg.ciudad, pereg.cp, pereg.telefono,
              pereg.correo_electronico, pereg.id_pais, pereg.id_estado,
              pereg.nombre_usuario, pereg.estatus, pereg.numero_identificacion,
        pereg.id_tipo_identificacion,
              pereg.tipo_cliente, pereg.b_ldap, pereg.contrasenia,
              SYSDATE, pereg.celular,
              pereg.fecha_nacimiento, pereg.usuario_modifico, SYSDATE,pereg.Canal, pereg.Telefono_Oficina, pereg.extension);

   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_SERVICIO.ADD_Cliente(' || SQLCODE || '  ' || SQLERRM || ')');
 END;

 PROCEDURE ADD_Cliente (PEnombre    IN CARTCARD.ICN_CLIENTES.NOMBRE%TYPE,
                        PEapaterno  IN CARTCARD.ICN_CLIENTES.APATERNO%TYPE,
                        PEamaterno  IN CARTCARD.ICN_CLIENTES.AMATERNO%TYPE,
                        PEnombre_usuario IN CARTCARD.ICN_CLIENTES.NOMBRE_USUARIO%TYPE,
                        PEcontrasenia IN CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                        PEcorreo_electronico IN CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
                        PEcp        IN CARTCARD.ICN_CLIENTES.CP%TYPE,
                        PEciudad    IN CARTCARD.ICN_CLIENTES.CIUDAD%TYPE,
                        PEcolonia   IN CARTCARD.ICN_CLIENTES.COLONIA%TYPE,
                        PEid_municipio IN CARTCARD.ICN_CLIENTES.ID_MUNICIPIO%TYPE,
                        PEid_estado IN CARTCARD.ICN_CLIENTES.ID_ESTADO%TYPE,
                        PEid_pais   IN CARTCARD.ICN_CLIENTES.ID_PAIS%TYPE,
                        PEcalle     IN CARTCARD.ICN_CLIENTES.CALLE%TYPE,
                        PEnum_ext   IN CARTCARD.ICN_CLIENTES.NUM_EXT%TYPE,
                        PEnum_int   IN CARTCARD.ICN_CLIENTES.NUM_INT%TYPE,
                        PEtelefono  IN CARTCARD.ICN_CLIENTES.TELEFONO%TYPE,
                        PEcelular   IN CARTCARD.ICN_CLIENTES.CELULAR%TYPE,
                        PEfecha_nacimiento IN CARTCARD.ICN_CLIENTES.FECHA_NACIMIENTO%TYPE,
                        PEid_tipo_identificacion IN CARTCARD.ICN_CLIENTES.ID_TIPO_IDENTIFICACION%TYPE,
                        PEnumero_identificacion IN CARTCARD.ICN_CLIENTES.NUMERO_IDENTIFICACION%TYPE,
                        PEtipo_cliente IN CARTCARD.ICN_CLIENTES.TIPO_CLIENTE%TYPE,
                        PEusuario_modifico IN CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE,
                        PECANAL      IN CARTCARD.ICN_CLIENTES.CANAL%TYPE,
                        PETelefonoOficina IN CARTCARD.ICN_CLIENTES.TELEFONO_OFICINA%TYPE,
                        PEExtension IN CARTCARD.ICN_CLIENTES.EXTENSION%TYPE,
                        psIdUsuario  OUT cartcard.ICN_CLIENTES.id_usuario%TYPE,
                        PSReferencia OUT CARTCARD.ICN_CONTRATO.REFERENCIA%TYPE,
                        PSSUITE      OUT CARTCARD.ICN_CONTRATO.SUITE%TYPE) IS
  pereg cartcard.Icn_Clientes%rowtype;
 BEGIN
  pereg.nombre:=PEnombre;
  pereg.apaterno:=PEapaterno;
  pereg.amaterno:=PEamaterno;
  pereg.nombre_usuario:=PEnombre_usuario;
  pereg.contrasenia:=PEcontrasenia;
  pereg.correo_electronico:=PEcorreo_electronico;
  pereg.cp:=PEcp;
  pereg.ciudad:=PEciudad;
  pereg.colonia:= PEcolonia;
  pereg.id_municipio:=PEid_municipio;
  pereg.id_estado:=PEid_estado;
  pereg.id_pais:=PEid_pais;
  pereg.calle:=PEcalle;
  pereg.num_ext:=PEnum_ext;
  pereg.num_int:=PEnum_int;
  pereg.telefono:= PEtelefono;
  pereg.celular:=PEcelular;
  pereg.fecha_nacimiento:=PEfecha_nacimiento;
  pereg.id_tipo_identificacion:=PEid_tipo_identificacion;
  pereg.numero_identificacion:=PEnumero_identificacion;
  pereg.tipo_cliente:=PEtipo_cliente;
  pereg.estatus := 0;
  pereg.usuario_modifico:=PEusuario_modifico;
  pereg.Canal:=PECANAL;
  pereg.telefono_oficina:= PETelefonoOficina;
  pereg.extension:= PEExtension;
  CARTCARD.pkg_icn_servicio.ADD_Cliente(pereg ,psIdUsuario);

  CARTCARD.pkg_icn_servicio.ADD_CONTRATO(psIdUsuario,'141',null,'IUPICARD',PSReferencia,PSSUITE);
 END;

 PROCEDURE Modifica_CLIENTE (pereg IN CARTCARD.ICN_CLIENTES%ROWTYPE,
                             PScod_error OUT NUMBER,
                             PSMsg_Error OUT VARCHAR2) IS
BEGIN
PScod_error:=0;
       UPDATE CARTCARD.ICN_CLIENTES c SET
              c.nombre = NVL(pereg.nombre,c.nombre), c.apaterno = NVL(pereg.apaterno,c.apaterno),
              c.amaterno = NVL(pereg.amaterno,c.amaterno),c.calle = NVL(pereg.calle,c.calle),
              c.num_ext = NVL(pereg.num_ext,c.num_ext), c.num_int = NVL(pereg.num_int,c.num_int),
              c.colonia = NVL(pereg.colonia,c.colonia),c.id_municipio = NVL(pereg.id_municipio,c.id_municipio),
              c.ciudad = NVL(pereg.ciudad,c.ciudad),c.cp = NVL(pereg.cp,c.cp),c.telefono = NVL(pereg.telefono,c.telefono),
              c.correo_electronico = NVL(pereg.correo_electronico,c.correo_electronico),
              c.id_pais = NVL(pereg.id_pais,c.id_pais), c.id_estado = NVL(pereg.id_estado,c.id_estado),
              c.nombre_usuario = NVL(pereg.nombre_usuario,c.nombre_usuario),
              c.estatus = NVL(pereg.estatus,c.estatus), c.id_tipo_identificacion = NVL(pereg.id_tipo_identificacion,c.id_tipo_identificacion),
              c.numero_identificacion = NVL(pereg.numero_identificacion,c.numero_identificacion),
              c.contrasenia = NVL(pereg.contrasenia,c.contrasenia), c.celular = NVL(pereg.celular,c.celular),
              c.fecha_nacimiento = NVL(pereg.fecha_nacimiento,c.fecha_nacimiento),
              c.usuario_modifico = NVL(pereg.usuario_modifico,c.usuario_modifico),c.ultima_modificacion = SYSDATE, c.canal = NVL(pereg.canal, c.canal),
              c.telefono_oficina = NVL(pereg.telefono_oficina, c.telefono_oficina), c.extension = NVL(pereg.extension, c.extension)
      WHERE c.id_usuario = pereg.id_usuario;


   COMMIT;
  PScod_error:=1;
EXCEPTION
  WHEN OTHERS THEN
  PScod_error:=0;
  PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en PKG_ICN_SERVICIO.Modifica_CLIENTE(' || SQLCODE || '  ' || SQLERRM || ')');
 END;

 PROCEDURE ADD_CONTRATO(PEReg          IN  CARTCARD.ICN_CONTRATO%ROWTYPE,
                        PSReferencia   OUT CARTCARD.ICN_CONTRATO.REFERENCIA%TYPE,
                        PSSUITE        OUT CARTCARD.ICN_CONTRATO.SUITE%TYPE) IS
 BEGIN
   PSReferencia := CARTCARD.GENERAREFERENCIA();
   --select PASARELBAZ.consecutivosuites.NEXTVAL into PSSUITE from dual;
   pasarelbaz.ASIGNASUITE(PEReg.ID_USUARIO,null,PSSUITE);
   INSERT INTO CARTCARD.ICN_CONTRATO(REFERENCIA, ID_USUARIO, ENTIDAD, SUCURSAL,
                                     SUITE, ESTATUS, FECHA_ALTA, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
   VALUES(PSReferencia,PEReg.ID_USUARIO, PEReg.ENTIDAD, PEReg.SUCURSAL,
          PSSUITE, PEReg.ESTATUS, sysdate, PEReg.USUARIO_MODIFICO, sysdate);
   cartcard.Ic_Agregasuite(pereg.id_usuario,pssuite,pereg.USUARIO_MODIFICO);
    COMMIT;
 EXCEPTION
    WHEN others THEN
    ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_SERVICIO.ADD_CONTRATO(' || SQLCODE || '  ' || SQLERRM || ')');
END ;

 PROCEDURE ADD_CONTRATO(PEIdUsuario  IN  CARTCARD.ICN_CONTRATO.ID_USUARIO%TYPE,
                        PEENTIDAD    IN  CARTCARD.ICN_CONTRATO.ENTIDAD%TYPE,
                        PESUCURSAL   IN  CARTCARD.ICN_CONTRATO.SUCURSAL%TYPE,
                        PEUSUARIOMOD IN CARTCARD.ICN_CONTRATO.USUARIO_MODIFICO%TYPE,
                        PSReferencia   OUT CARTCARD.ICN_CONTRATO.REFERENCIA%TYPE,
                        PSSUITE        OUT CARTCARD.ICN_CONTRATO.SUITE%TYPE) IS
  pereg cartcard.Icn_Contrato%rowtype;
 BEGIN
  pereg.id_usuario:=PEIdUsuario;
  pereg.entidad:=PEENTIDAD;
  pereg.sucursal:=PESUCURSAL;
  pereg.estatus:='0';
  pereg.Usuario_Modifico:=PEUSUARIOMOD;
  CARTCARD.pkg_icn_servicio.ADD_CONTRATO(pereg ,PSReferencia,PSSUITE );
 END ;

 PROCEDURE Modifica_contrato(pereg IN CARTCARD.Icn_Contrato%ROWTYPE,
                             PScod_error OUT NUMBER,
                             PSMsg_Error OUT VARCHAR2) IS
BEGIN
  PScod_error:=0;
   UPDATE CARTCARD.ICN_CONTRATO c
   SET c.ID_USUARIO = nvl(pereg.ID_USUARIO,c.ID_USUARIO),
       c.ENTIDAD = nvl(pereg.ENTIDAD,c.ENTIDAD),
       c.SUCURSAL = nvl(pereg.SUCURSAL, c.SUCURSAL),
       c.SUITE = nvl(pereg.SUITE, c.SUITE),
       c.ESTATUS = nvl(pereg.ESTATUS,c.ESTATUS),
       c.USUARIO_MODIFICO = nvl(pereg.USUARIO_MODIFICO, c.USUARIO_MODIFICO),
       c.ULTIMA_MODIFICACION = sysdate
   WHERE c.REFERENCIA = pereg.REFERENCIA;


   COMMIT;
     PScod_error:=1;
   EXCEPTION
   WHEN OTHERS THEN
     PSMsg_Error:= SQLCODE || '  ' || SQLERRM;
         ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_SERVICIO.Modifica_contrato(' || SQLCODE || '  ' || SQLERRM || ')');
 END ;

 PROCEDURE ADD_TARJETA(PEREG  IN  CARTCARD.ICN_TARJETA%ROWTYPE,
                       PSCod_error out number,
                       PSMsg_Error out varchar2) IS
BEGIN
  PSCod_error:=0;
   INSERT INTO CARTCARD.ICN_TARJETA
   (    REFERENCIA, CARDNUMBER, PTERMINALCODE,
        PRODUCTCODE, PID, PIDTYPE, PRBSERVICE,
        PDATEOFBIRTH, PEMBOSSEDNAME, PTELEPHONEAREACODE,
        PTELEPHONE, PFAXAREACODE, PFAXPHONE,
        PCELLPHONE, PCELLPHONEAREACODE, PIDEXPIRATION,
        PIDCOUNTRY, PIDSTATE, PLASTNAME,
        PPERSONALTITLE, PMAINDENNAME, PMIDDLENAME,
        PFIRSTNAME, PCOUNTRY, PSTATE, PCITY,
        PADDRESS, PZIPCODE, PEMAIL, REQUESTID,
        OPERATIONID, TOKEN, EXPIRATIONDATE,
        VERIFICATIONCODE, ID_TIPO_MEMBRESIA, ID_EMISOR,
        ID_STATUS_TARJETA, CVV, TIPO_TARJETA,
        ESTATUS_BLOQUEO, FECHA_MEMBRECIA, FECHA_CREACION,
        USUARIO_MODIFICO, ULTIMA_MODIFICACION   )
   VALUES(
       PEREG.REFERENCIA, PEREG.CARDNUMBER, PEREG.PTERMINALCODE, PEREG.PRODUCTCODE,
       PEREG.PID, PEREG.PIDTYPE, PEREG.PRBSERVICE, PEREG.PDATEOFBIRTH,
       PEREG.PEMBOSSEDNAME, PEREG.PTELEPHONEAREACODE, PEREG.PTELEPHONE, PEREG.PFAXAREACODE,
       PEREG.PFAXPHONE, PEREG.PCELLPHONE, PEREG.PCELLPHONEAREACODE, PEREG.PIDEXPIRATION,
       PEREG.PIDCOUNTRY, PEREG.PIDSTATE, PEREG.PLASTNAME, PEREG.PPERSONALTITLE,
       PEREG.PMAINDENNAME, PEREG.PMIDDLENAME, PEREG.PFIRSTNAME, PEREG.PCOUNTRY, PEREG.PSTATE,
       PEREG.PCITY, PEREG.PADDRESS, PEREG.PZIPCODE, PEREG.PEMAIL, PEREG.REQUESTID,
       PEREG.OPERATIONID, PEREG.TOKEN, PEREG.EXPIRATIONDATE, PEREG.VERIFICATIONCODE,
       PEREG.ID_TIPO_MEMBRESIA, PEREG.ID_EMISOR, PEREG.ID_STATUS_TARJETA, PEREG.CVV,
       PEREG.TIPO_TARJETA, PEREG.ESTATUS_BLOQUEO, PEREG.FECHA_MEMBRECIA,NVL(PEREG.FECHA_CREACION,sysdate),
       PEREG.USUARIO_MODIFICO, sysdate);
  COMMIT;
    PSCod_error:=1;
    PSMsg_Error:='OK';
  EXCEPTION
   WHEN OTHERS THEN
     PSCod_error:=0;
     PSMsg_Error:= SQLCODE || '  ' || SQLERRM;
         ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_SERVICIO.ADD_TARJETA(' || SQLCODE || '  ' || SQLERRM || ')');
END ;


 PROCEDURE ADD_TARJETA(PEReferencia          IN CARTCARD.ICN_TARJETA.REFERENCIA%type,
                       PEcardnumber          IN CARTCARD.ICN_TARJETA.CARDNUMBER%type,
                       PEpterminalcode       IN CARTCARD.ICN_TARJETA.PTERMINALCODE%type,
                       PEproductcode         IN CARTCARD.ICN_TARJETA.PRODUCTCODE%type,
                       PEpid                 IN CARTCARD.ICN_TARJETA.PID%type,
                       PEpidtype             IN CARTCARD.ICN_TARJETA.PIDTYPE%type,
                       PEprbservice          IN CARTCARD.ICN_TARJETA.PRBSERVICE%type,
                       PEpdateofbirth        IN CARTCARD.ICN_TARJETA.PDATEOFBIRTH%type,
                       PEpembossedname       IN CARTCARD.ICN_TARJETA.PEMBOSSEDNAME%type,
                       PEptelephoneareacode  IN CARTCARD.ICN_TARJETA.PTELEPHONEAREACODE%type,
                       PEptelephone          IN CARTCARD.ICN_TARJETA.PTELEPHONE%type,
                       PEpfaxareacode        IN CARTCARD.ICN_TARJETA.PFAXAREACODE%type,
                       PEpfaxphone           IN CARTCARD.ICN_TARJETA.PFAXPHONE%type,
                       PEpcellphone          IN CARTCARD.ICN_TARJETA.PCELLPHONE%type,
                       PEpcellphoneareacode  IN CARTCARD.ICN_TARJETA.PCELLPHONEAREACODE%type,
                       PEpidexpiration       IN CARTCARD.ICN_TARJETA.PIDEXPIRATION%type,
                       PEpidcountry          IN CARTCARD.ICN_TARJETA.PIDCOUNTRY%type,
                       PEpidstate            IN CARTCARD.ICN_TARJETA.PIDSTATE%type,
                       PEplastname           IN CARTCARD.ICN_TARJETA.PLASTNAME%type,
                       PEppersonaltitle      IN CARTCARD.ICN_TARJETA.PPERSONALTITLE%type,
                       PEpmaindenname        IN CARTCARD.ICN_TARJETA.PMAINDENNAME%type,
                       PEpmiddlename         IN CARTCARD.ICN_TARJETA.PMIDDLENAME%type,
                       PEpfirstname          IN CARTCARD.ICN_TARJETA.PFIRSTNAME%type,
                       PEpcountry            IN CARTCARD.ICN_TARJETA.PCOUNTRY%type,
                       PEpstate              IN CARTCARD.ICN_TARJETA.PSTATE%type,
                       PEpcity               IN CARTCARD.ICN_TARJETA.PCITY%type,
                       PEpaddress            IN CARTCARD.ICN_TARJETA.PADDRESS%type,
                       PEpzipcode            IN CARTCARD.ICN_TARJETA.PZIPCODE%type,
                       PEpemail              IN CARTCARD.ICN_TARJETA.PEMAIL%type,
                       PErequestid           IN CARTCARD.ICN_TARJETA.REQUESTID%type,
                       PEoperationid         IN CARTCARD.ICN_TARJETA.OPERATIONID%type,
                       PEtoken               IN CARTCARD.ICN_TARJETA.TOKEN%type,
                       PEexpirationdate      IN CARTCARD.ICN_TARJETA.EXPIRATIONDATE%type,
                       PEverificationcode    IN CARTCARD.ICN_TARJETA.VERIFICATIONCODE%type,
                       PEid_tipo_membresia   IN CARTCARD.ICN_TARJETA.ID_TIPO_MEMBRESIA%type,
                       PEid_emisor           IN CARTCARD.ICN_TARJETA.ID_EMISOR%type,
                       PEcvv                 IN CARTCARD.ICN_TARJETA.CVV%type,
                       PEtipo_tarjeta        IN CARTCARD.ICN_TARJETA.TIPO_TARJETA%type,
                       PEestatus_bloqueo     IN CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%type,
                       PEfecha_membrecia     IN CARTCARD.ICN_TARJETA.FECHA_MEMBRECIA%type,
                       PEfecha_creacion      IN CARTCARD.ICN_TARJETA.FECHA_CREACION%type,
                       PEusuario_modifico    IN CARTCARD.ICN_TARJETA.USUARIO_MODIFICO%type,
                       PSCod_error out number,
                       PSMsg_Error out varchar2) IS
  pereg cartcard.icn_tarjeta%rowtype;
  begin
  pereg.referencia:= PEReferencia;
  pereg.cardnumber:=PEcardnumber;
  pereg.pterminalcode:=PEpterminalcode;
  pereg.productcode:=PEproductcode;
  pereg.pid:=PEpid;
  pereg.pidtype:=PEpidtype;
  pereg.prbservice:=PEprbservice;
  pereg.pdateofbirth:=PEpdateofbirth;
  pereg.pembossedname:=PEpembossedname;
  pereg.ptelephoneareacode:=PEptelephoneareacode;
  pereg.ptelephone:=PEptelephone;
  pereg.pfaxareacode:=PEpfaxareacode;
  pereg.pfaxphone:=PEpfaxphone;
  pereg.pcellphone:=PEpcellphone;
  pereg.pcellphoneareacode:=PEpcellphoneareacode;
  pereg.pidexpiration:=PEpidexpiration;
  pereg.pidcountry:=PEpidcountry;
  pereg.pidstate:=PEpidstate;
  pereg.plastname:=PEplastname;
  pereg.ppersonaltitle:=PEppersonaltitle;
  pereg.pmaindenname:=PEpmaindenname;
  pereg.pmiddlename:=PEpmiddlename;
  pereg.pfirstname:=PEpfirstname;
  pereg.pcountry:=PEpcountry;
  pereg.pstate:=PEpstate;
  pereg.pcity:=PEpcity;
  pereg.paddress:=PEpaddress;
  pereg.pzipcode:=PEpzipcode;
  pereg.pemail:=PEpemail;
  pereg.requestid:=PErequestid;
  pereg.operationid:=PEoperationid;
  pereg.token:=PEtoken;
  pereg.expirationdate:=PEexpirationdate;
  pereg.verificationcode:=PEverificationcode;
  pereg.id_tipo_membresia:=PEid_tipo_membresia;
  pereg.id_emisor:=PEid_emisor;
  pereg.id_status_tarjeta:=0;
  pereg.cvv:=PEcvv;
  pereg.tipo_tarjeta:=PEtipo_tarjeta;
  pereg.estatus_bloqueo:=PEestatus_bloqueo;
  pereg.fecha_membrecia:=PEfecha_membrecia;
  pereg.fecha_creacion:=PEfecha_creacion;
  pereg.usuario_modifico:=PEusuario_modifico;

  CARTCARD.PKG_ICN_SERVICIO.ADD_TARJETA(pereg,PSCod_error,PSMsg_Error);
  IF PSCod_error=1 THEN
   IF PEcardnumber IS NOT NULL THEN
   CARTCARD.PKG_ICN_SERVICIO.ADD_TARJETA_COMPL(PEReferencia, PEcardnumber,PEpembossedname,null,
                             pereg.id_status_tarjeta, null, PEfecha_creacion, PEusuario_modifico,
                             null,null,
                             PSCod_error,PSMsg_error);
   END IF;
  END IF;
  end;


 PROCEDURE Modifica_TARJETA (PEReg  IN  CARTCARD.ICN_TARJETA%ROWTYPE,
                             PScod_error OUT NUMBER,
                             PSMsg_Error OUT VARCHAR2) IS
BEGIN

   PScod_error := 0;
   UPDATE CARTCARD.ICN_TARJETA t
   SET  T.CARDNUMBER          = nvl(PEReg.CARDNUMBER, T.CARDNUMBER),
        T.PTERMINALCODE       = nvl(PEReg.PTERMINALCODE,T.PTERMINALCODE),
        T.PRODUCTCODE         = nvl(PEReg.PRODUCTCODE,T.PRODUCTCODE),
        T.PID                 = nvl(PEReg.PID,T.PID),
        T.PIDTYPE             = nvl(PEReg.PIDTYPE,T.PIDTYPE),
        T.PRBSERVICE          = nvl(PEReg.PRBSERVICE,T.PRBSERVICE),
        T.PDATEOFBIRTH        = nvl(PEReg.PDATEOFBIRTH,T.PDATEOFBIRTH),
        T.PEMBOSSEDNAME       = nvl(PEReg.PEMBOSSEDNAME,T.PEMBOSSEDNAME),
        T.PTELEPHONEAREACODE  = nvl(PEReg.PTELEPHONEAREACODE,T.PTELEPHONEAREACODE),
        T.PTELEPHONE          = nvl(PEReg.PTELEPHONE,T.PTELEPHONE),
        T.PFAXAREACODE        = nvl(PEReg.PFAXAREACODE,T.PFAXAREACODE),
        T.PFAXPHONE           = nvl(PEReg.PFAXPHONE,T.PFAXPHONE),
        T.PCELLPHONE          = nvl(PEReg.PCELLPHONE,T.PCELLPHONE),
        T.PCELLPHONEAREACODE  = nvl(PEReg.PCELLPHONEAREACODE,T.PCELLPHONEAREACODE),
        T.PIDEXPIRATION       = nvl(PEReg.PIDEXPIRATION,T.PIDEXPIRATION),
        T.PIDCOUNTRY          = nvl(PEReg.PIDCOUNTRY,T.PIDCOUNTRY),
        T.PIDSTATE            = nvl(PEReg.PIDSTATE,T.PIDSTATE),
        T.PLASTNAME           = nvl(PEReg.PLASTNAME,T.PLASTNAME),
        T.PPERSONALTITLE      = nvl(PEReg.PPERSONALTITLE,T.PPERSONALTITLE),
        T.PMAINDENNAME        = nvl(PEReg.PMAINDENNAME,T.PMAINDENNAME),
        T.PMIDDLENAME         = nvl(PEReg.PMIDDLENAME,T.PMIDDLENAME),
        T.PFIRSTNAME          = nvl(PEReg.PFIRSTNAME,T.PFIRSTNAME),
        T.PCOUNTRY            = nvl(PEReg.PCOUNTRY,T.PCOUNTRY),
        T.PSTATE              = nvl(PEReg.PSTATE,T.PSTATE),
        T.PCITY               = nvl(PEReg.PCITY,T.PCITY),
        T.PADDRESS            = nvl(PEReg.PADDRESS,T.PADDRESS),
        T.PZIPCODE            = nvl(PEReg.PZIPCODE,T.PZIPCODE),
        T.PEMAIL              = nvl(PEReg.PEMAIL,T.PEMAIL),
        T.REQUESTID           = nvl(PEReg.REQUESTID,T.REQUESTID),
        T.OPERATIONID         = nvl(PEReg.OPERATIONID,T.OPERATIONID),
        T.TOKEN               = nvl(PEReg.TOKEN,T.TOKEN),
        T.EXPIRATIONDATE      = nvl(PEReg.EXPIRATIONDATE,T.EXPIRATIONDATE),
        T.VERIFICATIONCODE    = nvl(PEReg.VERIFICATIONCODE,T.VERIFICATIONCODE),
        T.ID_TIPO_MEMBRESIA   = nvl(PEReg.ID_TIPO_MEMBRESIA,T.ID_TIPO_MEMBRESIA),
        T.ID_EMISOR           = nvl(PEReg.Id_Emisor,T.Id_Emisor),
        T.ID_STATUS_TARJETA   = nvl(PEReg.Id_Status_Tarjeta,T.Id_Status_Tarjeta),
        T.CVV                 = nvl(PEReg.Cvv,T.Cvv),
        T.TIPO_TARJETA        = nvl(PEReg.TIPO_TARJETA,T.TIPO_TARJETA),
        T.ESTATUS_BLOQUEO     = nvl(PEReg.ESTATUS_BLOQUEO,T.ESTATUS_BLOQUEO),
        T.FECHA_MEMBRECIA     = nvl(PEReg.FECHA_MEMBRECIA,T.FECHA_MEMBRECIA),
        T.USUARIO_MODIFICO    = nvl(PEReg.USUARIO_MODIFICO,T.USUARIO_MODIFICO),
        T.ULTIMA_MODIFICACION = sysdate
        WHERE T.REFERENCIA = PEReg.REFERENCIA;

  COMMIT;
   PScod_error:=1;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
  BEGIN
  PScod_error:=0;
  PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_SERVICIO.Modifica_TARJETA  (' || SQLCODE || '  ' || SQLERRM || ')');
  END;
END ;

 PROCEDURE ADD_MOVIMIENTOS(PEREG          IN  CARTCARD.ICN_MOVIMIENTOS%ROWTYPE,
                           PSIdMovimiento OUT  CARTCARD.ICN_MOVIMIENTOS.ID_MOVIMIENTO%TYPE) IS

 BEGIN
    select nvl(max(m.id_movimiento),0)+1 into PSIdMovimiento from CARTCARD.ICN_MOVIMIENTOS m;
   INSERT INTO CARTCARD.ICN_MOVIMIENTOS
   (id_movimiento, referencia, entidad, id_canal, id_tipo_pago,
    id_tipo_servicio, operacionid, tipo_cambio, importe_mx,
    importe_dls, comision_dls, fecha_aplicacion, transaccion,
    usuario, sucursal, operador, descripcion, num_cta_cargo,
    titula_cta_cargo, num_cta_abono, titula_cta_abono,
    institucion_emisora, estatus_ann, ip_address,
    terminal, usuario_modifico, ultima_modificacion)
   VALUES(
    PSIdMovimiento, PEREG.referencia, PEREG.entidad, PEREG.id_canal, PEREG.id_tipo_pago,
    PEREG.id_tipo_servicio, PEREG.operacionid, PEREG.tipo_cambio, PEREG.importe_mx,
    PEREG.importe_dls, PEREG.comision_dls, PEREG.fecha_aplicacion, PEREG.transaccion,
    PEREG.usuario, PEREG.sucursal, PEREG.operador, PEREG.descripcion, PEREG.num_cta_cargo,
    PEREG.titula_cta_cargo, PEREG.num_cta_abono, PEREG.titula_cta_abono,
    PEREG.institucion_emisora, PEREG.estatus_ann, PEREG.ip_address,
    PEREG.terminal, PEREG.usuario_modifico, sysdate );
  COMMIT;

  EXCEPTION
   WHEN OTHERS THEN
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_SERVICIO.ADD_MOVIMIENTOS(' || SQLCODE || '  ' || SQLERRM || ')');
END ;

 PROCEDURE ADD_OPERACIONES(PEREG          IN  CARTCARD.ICN_OPERACIONES%ROWTYPE,
                           PSCod_RESP out number,
                           PSMsg_RESP out varchar2) IS

 BEGIN
   PSCod_RESP:=0;

   INSERT INTO CARTCARD.ICN_OPERACIONES
   (fecha, terminal, entidad, id_canal, usuario,
    sucursal, operacionid, Codigooperacion, Msgoperacion,
    codigoerror, msgerror, descripcion, entrada,
    salida, tiempo_resp, referencia, importe, fechaoperacion,
    usuario_modifico,ultima_modificacion)
   VALUES(
    CURRENT_TIMESTAMP , PEREG.terminal, PEREG.entidad, PEREG.id_canal, PEREG.usuario,
    PEREG.sucursal, PEREG.operacionid, PEREG.Codigooperacion, PEREG.Msgoperacion,
    PEREG.codigoerror, PEREG.msgerror, PEREG.descripcion, PEREG.entrada,
    PEREG.salida, PEREG.tiempo_resp, PEREG.referencia, PEREG.importe, PEREG.fechaoperacion,
    PEREG.usuario_modifico,SYSDATE);
  COMMIT;
   PSCod_RESP:=1;
   PSMsg_RESP:='OK';
  EXCEPTION
   WHEN OTHERS THEN
     PSCod_RESP:=0;
     PSMsg_RESP:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_SERVICIO.ADD_OPERACIONES(' || SQLCODE || '  ' || SQLERRM || ')');
END ;

 PROCEDURE ADD_MOVIMIENTOS(PEreferencia      IN  CARTCARD.ICN_MOVIMIENTOS.REFERENCIA%TYPE,
                           PEentidad         IN  CARTCARD.ICN_MOVIMIENTOS.ENTIDAD%TYPE,
                           PEidcanal         IN  CARTCARD.ICN_MOVIMIENTOS.ID_CANAL%TYPE,
                           PEidtipopago      IN  CARTCARD.ICN_MOVIMIENTOS.ID_TIPO_PAGO%TYPE,
                           PEidtiposervicio  IN  CARTCARD.ICN_MOVIMIENTOS.ID_TIPO_SERVICIO%TYPE,
                           PEoperacionid     IN  CARTCARD.ICN_MOVIMIENTOS.OPERACIONID%TYPE,
                           PEtipocambio      IN  CARTCARD.ICN_MOVIMIENTOS.TIPO_CAMBIO%TYPE,
                           PEimportemx       IN  CARTCARD.ICN_MOVIMIENTOS.IMPORTE_MX%TYPE,
                           PEimportedls      IN  CARTCARD.ICN_MOVIMIENTOS.IMPORTE_DLS%TYPE,
                           PEcomisiondls     IN  CARTCARD.ICN_MOVIMIENTOS.COMISION_DLS%TYPE,
                           PEfechaaplicacion IN  CARTCARD.ICN_MOVIMIENTOS.FECHA_APLICACION%TYPE,
                           PEtransaccion     IN  CARTCARD.ICN_MOVIMIENTOS.TRANSACCION%TYPE,
                           PEusuario         IN  CARTCARD.ICN_MOVIMIENTOS.USUARIO%TYPE,
                           PEsucursal        IN  CARTCARD.ICN_MOVIMIENTOS.SUCURSAL%TYPE,
                           PEoperador        IN  CARTCARD.ICN_MOVIMIENTOS.OPERADOR%TYPE,
                           PEdescripcion     IN  CARTCARD.ICN_MOVIMIENTOS.DESCRIPCION%TYPE,
                           PEctacargo        IN  CARTCARD.ICN_MOVIMIENTOS.NUM_CTA_CARGO%TYPE,
                           PEtitulacargo     IN  CARTCARD.ICN_MOVIMIENTOS.TITULA_CTA_CARGO%TYPE,
                           PEctaabono        IN  CARTCARD.ICN_MOVIMIENTOS.NUM_CTA_ABONO%TYPE,
                           PEtitulaabono     IN  CARTCARD.ICN_MOVIMIENTOS.TITULA_CTA_ABONO%TYPE,
                           PEINSTEMISORA     IN  CARTCARD.ICN_MOVIMIENTOS.INSTITUCION_EMISORA%TYPE,
                           PEestatusann      IN  CARTCARD.ICN_MOVIMIENTOS.ESTATUS_ANN%TYPE,
                           PEipaddress       IN  CARTCARD.ICN_MOVIMIENTOS.IP_ADDRESS%TYPE,
                           PEterminal        IN  CARTCARD.ICN_MOVIMIENTOS.TERMINAL%TYPE,
                           PEusuariomodifico IN  CARTCARD.ICN_MOVIMIENTOS.USUARIO_MODIFICO%TYPE,
                           psidmovimiento    OUT CARTCARD.ICN_MOVIMIENTOS.ID_MOVIMIENTO%TYPE) IS
  pereg cartcard.icn_movimientos%rowtype;
begin
  -- Call the procedure
  pereg.referencia:=PEreferencia;
  pereg.entidad:=PEentidad;
  pereg.id_canal:=PEidcanal;
  pereg.id_tipo_pago:=PEidtipopago;
  pereg.id_tipo_servicio:=PEidtiposervicio;
  pereg.operacionid:= PEoperacionid;
  pereg.tipo_cambio:=PEtipocambio;
  pereg.importe_mx:=PEimportemx;
  pereg.importe_dls:=PEimportedls;
  pereg.comision_dls:=PEcomisiondls ;
  pereg.fecha_aplicacion:=PEfechaaplicacion;
  pereg.transaccion:=PEtransaccion;
  pereg.usuario:=PEusuario;
  pereg.sucursal:=PEsucursal;
  pereg.operador:=PEoperador;
  pereg.descripcion:=PEdescripcion;
  pereg.num_cta_cargo:=PEctacargo;
  pereg.titula_cta_cargo:=PEtitulacargo;
  pereg.num_cta_abono:=PEctaabono;
  pereg.titula_cta_abono:=PEtitulaabono;
  pereg.institucion_emisora:=PEINSTEMISORA;
  pereg.estatus_ann:=PEestatusann;
  pereg.ip_address:=PEipaddress;
  pereg.terminal:=PEterminal;
  pereg.usuario_modifico:=PEusuariomodifico;
  pereg.ultima_modificacion := SYSDATE;

  CARTCARD.pkg_icn_servicio.add_movimientos(pereg ,psidmovimiento );
 END;

 PROCEDURE ADD_OPERACIONES(PEterminal        IN CARTCARD.ICN_OPERACIONES.TERMINAL%type,
                           PEentidad         IN CARTCARD.ICN_OPERACIONES.ENTIDAD%type,
                           PEidcanal         IN CARTCARD.ICN_OPERACIONES.ID_CANAL%type,
                           PEusuario         IN CARTCARD.ICN_OPERACIONES.USUARIO%type,
                           PEsucursal        IN CARTCARD.ICN_OPERACIONES.SUCURSAL%type,
                           PEoperacionid     IN CARTCARD.ICN_OPERACIONES.OPERACIONID%type,
                           PEcodigooperacion IN CARTCARD.ICN_OPERACIONES.CODIGOOPERACION%type,
                           PEmsgoperacion    IN CARTCARD.ICN_OPERACIONES.MSGOPERACION%type,
                           PEcodigoerror     IN CARTCARD.ICN_OPERACIONES.CODIGOERROR%type,
                           PEmsgerror        IN CARTCARD.ICN_OPERACIONES.MSGERROR%type,
                           PEdescripcion     IN CARTCARD.ICN_OPERACIONES.DESCRIPCION%type,
                           PEentrada         IN CARTCARD.ICN_OPERACIONES.ENTIDAD%type,
                           PEsalida          IN CARTCARD.ICN_OPERACIONES.SALIDA%type,
                           PEtiemporesp      IN CARTCARD.ICN_OPERACIONES.TIEMPO_RESP%type,
                           PEreferencia      IN CARTCARD.ICN_OPERACIONES.REFERENCIA%type,
                           PEimporte         IN CARTCARD.ICN_OPERACIONES.IMPORTE%type,
                           PEfechaoperacion  IN CARTCARD.ICN_OPERACIONES.FECHAOPERACION%type,
                           PEusuariomodifico IN CARTCARD.ICN_OPERACIONES.USUARIO_MODIFICO%TYPE,
                           PSCod_RESP out number,
                           PSMsg_RESP out varchar2) IS

  pereg cartcard.icn_operaciones%rowtype;
 begin
   pereg.terminal:=PEterminal;
   pereg.Entidad:=PEentidad;
   pereg.Id_Canal:=PEidcanal;
   pereg.Usuario:=PEusuario;
   pereg.Sucursal:=PEsucursal;
   pereg.Operacionid:=PEoperacionid;
   pereg.Codigooperacion:=PEcodigooperacion;
   pereg.Msgoperacion:=PEmsgoperacion;
   pereg.Codigoerror:=PEcodigoerror;
   pereg.Msgerror:=PEmsgerror;
   pereg.Descripcion:=PEdescripcion;
   pereg.Entrada:=PEentrada;
   pereg.Salida:=PEsalida;
   pereg.Tiempo_Resp:=PEtiemporesp;
   pereg.Referencia:=PEreferencia;
   pereg.Importe:=PEimporte;
   pereg.Fechaoperacion:=PEfechaoperacion;
   pereg.Usuario_Modifico:=PEusuariomodifico;
    CARTCARD.pkg_icn_servicio.add_OPERACIONES(pereg,PSCod_RESP,PSMsg_RESP);

 end;

 function getIupiCard(PEcadena in varchar2)
return sys_refcursor is
TYPE CUR_TYP IS REF CURSOR;
c_cursor   CUR_TYP;
BEGIN
  OPEN c_cursor FOR PEcadena;
  return c_cursor;
exception
 WHEN OTHERS THEN
     RAISE_APPLICATION_ERROR (-20121, 'Error ocurrido al PKG_ICN_SERVICIO.getIupiCard(' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE ADD_CAT_OPERACION(pereg IN CARTCARD.ICN_CAT_OPERACION%ROWTYPE,
                             psCod_Resul OUT NUMBER,
                             psMsg_Resul OUT VARCHAR2) IS
BEGIN
      psCod_Resul := 0;
   INSERT INTO CARTCARD.ICN_CAT_OPERACION
        (codigooperacion, descripcion,
         usuario_modifico, ultima_modificacion)
        VALUES (pereg.codigooperacion,pereg.descripcion, pereg.usuario_modifico, SYSDATE);

        psCod_Resul := 1;
        psMsg_Resul:='OK';
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
       psCod_Resul := 0;
      psMsg_Resul := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20131, 'Error ocurrido al agregar PKG_ICN_SERVICIO.ADD_CAT_OPERACION   (' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE ADD_CAT_TIPO_BLOQUEO(pereg IN CARTCARD.ICN_CAT_TIPO_BLOQUEO%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2) IS

BEGIN
      psCod_Resul := 0;
      INSERT INTO CARTCARD.ICN_CAT_TIPO_BLOQUEO
        (estatus_bloqueo,  descripcion,  usuario_modifico, ultima_modificacion)
      VALUES (pereg.estatus_bloqueo, pereg.descripcion, pereg.usuario_modifico, SYSDATE);

      psCod_Resul := 1;
      psMsg_Resul:='OK';
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
       psCod_Resul := 0;
      psMsg_Resul := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20131, 'Error ocurrido al agregar PKG_ICN_SERVICIO.ADD_CAT_TIPO_BLOQUEO (' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE ADD_OPERACIONES_HIST(PEREG IN  CARTCARD.ICN_OPERACIONES_HISTORICO%ROWTYPE,
                           PSCod_RESP out number,
                           PSMsg_RESP out varchar2) IS

 BEGIN
   PSCod_RESP:=0;

   INSERT INTO CARTCARD.ICN_OPERACIONES_HISTORICO
   (fecha, terminal, entidad, id_canal, usuario,
    sucursal, operacionid, Codigooperacion, Msgoperacion,
    codigoerror, msgerror, descripcion, entrada,
    salida, tiempo_resp, referencia, importe, fechaoperacion,
    usuario_modifico,ultima_modificacion)
   VALUES(
    PEREG.FECHA , PEREG.terminal, PEREG.entidad, PEREG.id_canal, PEREG.usuario,
    PEREG.sucursal, PEREG.operacionid, PEREG.CODIGOOPERACION, PEREG.Msgoperacion,
    PEREG.codigoerror, PEREG.msgerror, PEREG.descripcion, PEREG.entrada,
    PEREG.salida, PEREG.tiempo_resp, PEREG.referencia, PEREG.importe, PEREG.fechaoperacion,
    PEREG.usuario_modifico,PEREG.ultima_modificacion);
  COMMIT;
   PSCod_RESP:=1;
   PSMsg_RESP:='OK';
  EXCEPTION
   WHEN OTHERS THEN
     PSCod_RESP:=0;
     PSMsg_RESP:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_SERVICIO.ADD_OPERACIONES(' || SQLCODE || '  ' || SQLERRM || ')');
END ;


 PROCEDURE ADD_TARJETA_COMPL(pereg IN CARTCARD.ICN_TARJETA_COMPLEMENTO%ROWTYPE,
                                 PSCod_RESP out number,
                                 PSMsg_RESP out varchar2) IS

BEGIN
      PSCod_RESP := 0;

      INSERT INTO CARTCARD.ICN_TARJETA_COMPLEMENTO
        (referencia,cardnumber,cardname,nombre_remesa,
        id_estatus,comentario,fecha_creacion,usuario_modifico,ultima_modificacion,
        fecha_vigencia,fecha_bloqueo)
        VALUES (pereg.referencia, pereg.cardnumber, pereg.cardname, pereg.nombre_remesa,
        pereg.id_estatus, pereg.comentario, NVL(pereg.Fecha_Creacion,SYSDATE), pereg.usuario_modifico,sysdate,
        pereg.fecha_vigencia,pereg.fecha_bloqueo);

       PSCod_RESP := 1;
       PSMsg_RESP:='OK';
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
     PSCod_RESP:=0;
     PSMsg_RESP:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_SERVICIO.ADD_TARJETA_COMPL(' || SQLCODE || '  ' || SQLERRM || ')');
END ;

 PROCEDURE ADD_TARJETA_COMPL(PEreferencia     IN CARTCARD.ICN_TARJETA_COMPLEMENTO.REFERENCIA%TYPE,
                             PEcardnumber     IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNUMBER%TYPE,
                             PEcardname       IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNAME%TYPE,
                             PEnombre_remesa  IN CARTCARD.ICN_TARJETA_COMPLEMENTO.NOMBRE_REMESA%TYPE,
                             PEid_estatus     IN CARTCARD.ICN_TARJETA_COMPLEMENTO.ID_ESTATUS%TYPE,
                             PEcomentario     IN CARTCARD.ICN_TARJETA_COMPLEMENTO.COMENTARIO%TYPE,
                             PEfecha_creacion IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_CREACION%TYPE,
                             PEusuario_modifico  IN CARTCARD.ICN_TARJETA_COMPLEMENTO.USUARIO_MODIFICO%TYPE,
                             PEfecha_vigencia  IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_VIGENCIA%TYPE,
                             PEfecha_bloqueo   IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_BLOQUEO%TYPE,
                             PSCod_RESP out number,
                             PSMsg_RESP out varchar2) IS

  pereg cartcard.Icn_Tarjeta_Complemento%rowtype;
 BEGIN
   pereg.referencia:=PEreferencia;
   pereg.cardnumber:=PEcardnumber;
   pereg.cardname:=PEcardname;
   pereg.nombre_remesa:=PEnombre_remesa;
   pereg.id_estatus:=PEid_estatus;
   pereg.comentario:=PEcomentario;
   pereg.fecha_creacion:=PEfecha_creacion;
   pereg.usuario_modifico:=PEusuario_modifico;
   pereg.Fecha_Vigencia:=PEfecha_vigencia;
   pereg.Fecha_Bloqueo:=PEfecha_bloqueo;
   CARTCARD.PKG_ICN_SERVICIO.ADD_TARJETA_COMPL( pereg, PSCod_RESP,PSMsg_RESP);
 END;
 PROCEDURE Migrar_clientes(PSCod_RESP out number,
                           PSMsg_RESP out varchar2) IS
BEGIN
  PSCod_RESP:=0;
         MERGE
        INTO CARTCARD.ICN_CLIENTES cli
        USING CARTCARD.IC_USUARIO usu
        ON (cli.id_usuario = usu.id_usuario)
        WHEN MATCHED THEN
          UPDATE SET
           cli.nombre = NVL(usu.nombre, cli.nombre), cli.apaterno = NVL(usu.apaterno, cli.apaterno),
           cli.amaterno = NVL(usu.amaterno, cli.amaterno),
           cli.calle = NVL(DECODE(INSTR(usu.calle,'|',1),0,usu.calle,NVL(SUBSTR(usu.calle, 1 ,INSTR(usu.calle,  '|' , 1 , 1) - 1), usu.calle)), cli.calle),
           cli.num_ext =  NVL(SUBSTR(usu.calle, INSTR(usu.calle,'|', 1, 1)+1, INSTR(usu.calle,'|',1,2)-INSTR(usu.calle,'|',1,1)-1), cli.num_ext),
           cli.num_int =  NVL(DECODE( INSTR(usu.calle,'|', 1, 2), 0, ' ', SUBSTR(usu.calle, INSTR(usu.calle,'|', 1, 2)+1) ), cli.num_int),
           cli.colonia = NVL(usu.colonia, cli.colonia), cli.id_municipio = NVL(usu.id_municipio, cli.id_municipio),
           cli.ciudad = NVL(usu.ciudad, cli.ciudad), cli.cp = NVL(usu.cp, cli.cp), cli.telefono = NVL(usu.telefono, cli.telefono),
           cli.correo_electronico = NVL(usu.correo_electronico, cli.correo_electronico), cli.id_pais = NVL(usu.id_pais, cli.id_pais),
           cli.id_estado = NVL(usu.id_estado, cli.id_estado), cli.nombre_usuario = NVL(usu.nombre_usuario, cli.nombre_usuario),
           cli.estatus = NVL(usu.id_status_cuenta, cli.estatus), cli.numero_identificacion = NVL(usu.numero_identificacion, cli.numero_identificacion),
               cli.contrasenia = NVL(usu.contrasenia, cli.contrasenia), cli.celular = NVL(usu.celular, cli.celular),
           cli.fecha_nacimiento = NVL(usu.fecha_nacimiento, cli.fecha_nacimiento), cli.usuario_modifico = NVL(usu.usuario_modifico, cli.usuario_modifico),
               cli.ultima_modificacion = SYSDATE
        WHEN NOT MATCHED THEN
                  INSERT
               (cli.id_usuario, cli.nombre, cli.apaterno, cli.amaterno, cli.calle, cli.num_ext,
               cli.num_int, cli.colonia, cli.id_municipio, cli.ciudad, cli.cp, cli.telefono,
           cli.correo_electronico, cli.id_pais, cli.id_estado, cli.nombre_usuario, cli.estatus,
           cli.numero_identificacion, cli.contrasenia, cli.fecha_creacion, cli.celular,
           cli.fecha_nacimiento, cli.usuario_modifico, cli.ultima_modificacion)
               VALUES (usu.id_usuario, usu.nombre, usu.apaterno, usu.amaterno,
           DECODE(INSTR(usu.calle,'|',1),0,usu.calle,NVL(SUBSTR(usu.calle, 1 ,INSTR(usu.calle,  '|' , 1 , 1) - 1), usu.calle)),
           SUBSTR(usu.calle, INSTR(usu.calle,'|', 1, 1)+1, INSTR(usu.calle,'|',1,2)-INSTR(usu.calle,'|',1,1)-1),
           DECODE( INSTR(usu.calle,'|', 1, 2), 0, ' ', SUBSTR(usu.calle, INSTR(usu.calle,'|', 1, 2)+1) ),
           usu.colonia, usu.id_municipio, usu.ciudad, usu.cp, usu.telefono,
               usu.correo_electronico, usu.id_pais, usu.id_estado, usu.nombre_usuario,
           usu.id_status_cuenta, usu.numero_identificacion, usu.contrasenia, SYSDATE,
           usu.celular, usu.fecha_nacimiento, nvl(usu.usuario_modifico,'IUPICARD'), SYSDATE);
  PSCod_RESP:=1;
    COMMIT;
 EXCEPTION
  WHEN OTHERS THEN
  PSCod_RESP:=0;
  PSMsg_RESP:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al migrar los datos  (' || SQLCODE || '  ' || SQLERRM || ')');
 END;

 PROCEDURE Migrar_Operaciones(PSCod_RESP out number,
                              PSMsg_RESP out varchar2) IS
 BEGIN
  PSCod_RESP:=0;
      MERGE
        INTO CARTCARD.ICN_OPERACIONES_HISTORICO his
        USING CARTCARD.ICN_OPERACIONES ope
        ON (ope.fecha <= SYSDATE AND ope.fecha = his.fecha)
        WHEN MATCHED THEN
             UPDATE SET
                    his.terminal = NVL(ope.terminal, his.terminal), his.entidad = NVL(ope.entidad, his.entidad),
              his.id_canal = NVL(ope.id_canal, his.id_canal), his.USUARIO = NVL(ope.USUARIO, his.USUARIO),
              his.sucursal = NVL(ope.sucursal, his.sucursal), his.operacionid = NVL(ope.operacionid, his.operacionid),
              his.codigooperacion = NVL(ope.codigooperacion, his.codigooperacion),
              his.msgoperacion = NVL(ope.msgoperacion, his.msgoperacion),
              his.codigoerror = NVL(ope.codigoerror, his.codigoerror), his.msgerror = NVL(ope.msgerror, his.msgerror),
              his.descripcion = NVL(ope.descripcion, his.descripcion), his.entrada = NVL (ope.entrada, his.entrada),
              his.salida = NVL(ope.salida, his.salida), his.tiempo_resp = NVL(ope.tiempo_resp, his.tiempo_resp),
              his.referencia = NVL(ope.referencia, his.referencia), his.importe = NVL(ope.importe, his.importe) ,
              his.fechaoperacion = NVL(ope.fechaoperacion, his.fechaoperacion),
              his.usuario_modifico = NVL(ope.usuario_modifico,his.usuario_modifico),
              his.ultima_modificacion = sysdate
        WHEN NOT MATCHED THEN
                   INSERT
                   (his.fecha, his.terminal, his.entidad, his.id_canal, his.USUARIO, his.sucursal,
                   his.operacionid, his.codigooperacion,
              his.msgoperacion, his.codigoerror, his.msgerror, his.descripcion, his.entrada,
              his.salida, his.tiempo_resp, his.referencia, his.importe, his.fechaoperacion,
              his.usuario_modifico,his.ultima_modificacion)
              VALUES (ope.fecha, ope.terminal, ope.entidad, ope.id_canal,
                 ope.USUARIO, ope.sucursal, ope.operacionid,
              ope.codigooperacion, ope.msgoperacion, ope.codigoerror, ope.msgerror,
              ope.descripcion, ope.entrada, ope.salida, ope.tiempo_resp,
              ope.referencia, ope.importe, ope.fechaoperacion,
              ope.usuario_modifico,ope.ultima_modificacion);

        DELETE FROM CARTCARD.ICN_OPERACIONES WHERE (fecha <= SYSDATE);
  PSCod_RESP:=0;
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    PSCod_RESP:=0;
    PSMsg_RESP:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al migrar a ICN_OPERACIONES_HISTORICO   (' || SQLCODE || '  ' || SQLERRM || ')');
 END;

 PROCEDURE ADD_CAT_TIPO_PAGO(pereg IN CARTCARD.IC_CAT_TIPO_PAGO%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2) IS

BEGIN
      psCod_Resul := 0;
      INSERT INTO CARTCARD.IC_CAT_TIPO_PAGO
        (id_tipo_pago, descripcion, usuario_modifico, ultima_modificacion)
      VALUES ((select max(id_tipo_pago) + 1 from cartcard.ic_cat_tipo_pago), pereg.descripcion, pereg.usuario_modifico, SYSDATE);

      psCod_Resul := 1;
      psMsg_Resul:='Exito en la Operacion se Inserto el elemento en el catalogo de Tipo de Pago';
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
       psCod_Resul := 0;
      psMsg_Resul := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20131, 'Error ocurrido al agregar PKG_ICN_SERVICIO.ADD_CAT_TIPO_PAGO (' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE ADD_CAT_CANAL(pereg IN CARTCARD.IC_CAT_CANAL%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2) IS

BEGIN

      INSERT INTO CARTCARD.IC_CAT_CANAL
        (id_canal, descripcion, usuario_modifico, ultima_modificacion)
      VALUES ((select max(ID_CANAL) + 1 from CARTCARD.ic_cat_canal), pereg.descripcion, pereg.usuario_modifico, SYSDATE);

      psCod_Resul := 1;
      psMsg_Resul:='Exito en la Operacion se Inserto el elemento en el catalogo de Canal';
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
       psCod_Resul := 0;
      psMsg_Resul := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20131, 'Error ocurrido al agregar PKG_ICN_SERVICIO.ADD_CAT_CANAL (' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE ADD_CAT_TIPO_SERVICIO(pereg IN CARTCARD.IC_CAT_TIPO_SERVICIO%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2) IS

BEGIN
      psCod_Resul := 0;
      INSERT INTO CARTCARD.IC_CAT_TIPO_SERVICIO
        (id_tipo_servicio, descripcion, usuario_modifico, ultima_modificacion)
      VALUES ((select max(id_tipo_servicio) + 1 from cartcard.ic_cat_tipo_servicio), pereg.descripcion, pereg.usuario_modifico, SYSDATE);

      psCod_Resul := 1;
      psMsg_Resul:='Exito en la Operacion se Inserto el elemento en el catalogo de Tipo Servicio';
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
       psCod_Resul := 0;
      psMsg_Resul := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20131, 'Error ocurrido al agregar PKG_ICN_SERVICIO.ADD_CAT_TIPO_SERVICIO (' || SQLCODE || '  ' || SQLERRM || ')');
END;

 PROCEDURE ADD_CAT_STATUS_CUENTA(pereg IN CARTCARD.IC_CAT_STATUS_CUENTA%ROWTYPE,
                                psCod_Resul OUT NUMBER,
                                psMsg_Resul OUT VARCHAR2) IS

BEGIN
     psCod_Resul := 0;
      INSERT INTO CARTCARD.IC_CAT_STATUS_CUENTA
        (id_status_cuenta, codigo, descripcion, usuario_modifico, ultima_modificacion)
      VALUES ((select max(id_status_cuenta) + 1 from cartcard.ic_cat_status_cuenta), pereg.codigo, pereg.descripcion, pereg.usuario_modifico, SYSDATE);

      psCod_Resul := 1;
      psMsg_Resul:='Exito en la Operacion se Inserto el elemento en el catalogo de Estatus de Cuenta';
   COMMIT;
EXCEPTION
  WHEN OTHERS THEN
       psCod_Resul := 0;
      psMsg_Resul := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20131, 'Error ocurrido al agregar PKG_ICN_SERVICIO.ADD_CAT_STATUS_CUENTA (' || SQLCODE || '  ' || SQLERRM || ')');
END;

PROCEDURE ELIMINA_CLIENTE (p_correo       IN cartcard.icn_clientes.correo_electronico%type,
                          p_nombreUsuario IN cartcard.icn_clientes.nombre_usuario%type,
                          PSCod_Error     OUT  number,
                          PSMsg_Error     OUT  varchar2) IS 
    v_existe number;
    v_idUsuario cartcard.icn_clientes.id_usuario%type;
    v_referencia cartcard.icn_tarjeta.referencia%type;

BEGIN
  
 select count(1), cl.id_usuario, t.referencia
   into v_existe, v_idUsuario, v_referencia
   from cartcard.icn_clientes cl, cartcard.icn_contrato co, cartcard.icn_tarjeta t
  where cl.id_usuario = co.id_usuario(+)
    and co.referencia = t.referencia(+)
    and t.cardnumber IS NULL
    and cl.correo_electronico = p_correo
    and cl.nombre_usuario = p_nombreUsuario
  group by cl.id_usuario, t.referencia;

IF v_existe IS NOT NULL  THEN
      
      DELETE FROM CARTCARD.ICN_TARJETA_COMPLEMENTO CL
      WHERE CL.REFERENCIA = v_referencia;            
     
      DELETE FROM CARTCARD.icn_Tarjeta t
      WHERE t.referencia = v_referencia;
        
      DELETE FROM CARTCARD.icn_Contrato co
      WHERE co.id_usuario = v_idUsuario;
     
      DELETE FROM CARTCARD.icn_clientes cl
      where cl.id_usuario = v_idUsuario;

      DELETE FROM CARTCARD.Preguntasusuario p
      WHERE p.usuarioid = v_idUsuario;

      DELETE FROM CARTCARD.ic_documento d
      WHERE d.usuarioid = v_idUsuario;

  COMMIT;
           PSCod_Error:= 1;
           PSMsg_Error := 'Usuario Eliminado';
   

 ELSE
         PSCod_Error:= 2;
         PSMsg_Error := 'No existe el usuario';
 END IF;
   
    COMMIT;

EXCEPTION
    WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
      
END;

end PKG_ICN_SERVICIO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY pkg_infora is
    FUNCTION getInfOra(p_cadena in VARCHAR2)
    RETURN sys_refcursor is
    TYPE CUR_TYP IS REF CURSOR;
    c_cursor CUR_TYP;
    BEGIN
       OPEN c_cursor for p_cadena;
       return c_cursor;
    EXCEPTION
        WHEN others then
            RAISE_APPLICATION_ERROR (-20121, 'Error en getInfOra'); 
    END;
        
END pkg_infora;
/

SHOW ERRORS;


CREATE OR REPLACE package body PKG_IUPICARD is

  -- Author  : Cesar Loeza
  -- Created : Dic/2010
  -- Purpose : Administracion de servicios IUPICARD

  -- Public function and procedure declarations
  PROCEDURE IC_SP_INSERTA_DOCUMENTO(PEIdUsuario   IN CARTCARD.IC_DOCUMENTO.USUARIOID%type,
                                 PEIdTipoDocto IN CARTCARD.IC_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
                                 PENombre      IN CARTCARD.IC_DOCUMENTO.NOMBRE_ARCHIVO%TYPE,
                                 PEDocumento   IN CARTCARD.IC_DOCUMENTO.DOCUMENTO%TYPE,
                                 PEEstatus     IN CARTCARD.IC_DOCUMENTO.ESTATUS%TYPE,
                                 PEComentario  IN CARTCARD.IC_DOCUMENTO.COMENTARIO%TYPE,
                                 PEUsuario     IN CARTCARD.IC_DOCUMENTO.USUARIO_MODIFICO%TYPE,
                                 PETipoArchivo IN CARTCARD.IC_DOCUMENTO.TIPO_ARCHIVO%TYPE,
                                 PSCodResp     OUT varchar2) IS
  vlId_documento        integer;
  BEGIN
  PSCodResp:='0';
  select CARTCARD.ic_seq_documento.nextval into vlId_documento from dual;
  
  insert into CARTCARD.IC_DOCUMENTO(ID_DOCUMENTO, 
                           USUARIOID, 
                           ID_TIPO_DOCUMENTO, 
                           NOMBRE_ARCHIVO, 
                           DOCUMENTO, 
                           ESTATUS, 
                           COMENTARIO, 
                           USUARIO_MODIFICO, 
                           FECHA_REGISTRO,
                           TIPO_ARCHIVO)
  values (vlId_documento, 
          PEIdUsuario, 
          PEIdTipoDocto, 
          PENombre, 
          PEDocumento, 
          NVL(PEEstatus,'0'), 
          PEComentario, 
          PEUsuario, 
          SYSDATE,
          PETipoArchivo);
   PSCodResp:='1';
   COMMIT;
   EXCEPTION
     WHEN OTHERS THEN
       PSCodResp:='0'|| SQLCODE || '  ' || SQLERRM ;
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20180, 'Error ocurrido al insertar PKG_IUPICARD.SP_INSERTA_DOCUMENTO  (' || SQLCODE || '  ' || SQLERRM || ')');
   END;                        

   FUNCTION IC_FC_LISTA_USUARIOS
   RETURN sys_refcursor IS
   ps_cursor      sys_refcursor;
   BEGIN
      OPEN ps_cursor FOR
           select distinct u.usuarioid,u.nombre||' '||u.apaterno||' '||u.amaterno NOMBRE ,
                  to_char(u.fechasys,'dd/mm/yyyy hh24:mi:ss') FECHA,
                  --u.fechasys FECHA,
                  u.telefono TELEFONO
           from CARTCARD.IC_DOCUMENTO d,CARTCARD.USUARIO u
           where d.usuarioid = u.usuarioid
             and d.estatus = '0';
--             order by fecha;
       RETURN  ps_cursor;     
    END;

    FUNCTION IC_FC_DETALLE_DOCUMENTO(peIdUsuario   IN   CARTCARD.IC_DOCUMENTO.USUARIOID%TYPE)
                                   RETURN sys_refcursor IS
    ps_cursor      sys_refcursor;
    BEGIN
      OPEN ps_cursor FOR
        select d.id_documento,d.id_tipo_documento,c.descripcion,d.documento,
          d.estatus,DECODE(d.estatus,'0','INVALIDO','1','VALIDO','DESCONOCIDO') DESC_ESTATUS,
          d.comentario,D.TIPO_ARCHIVO
       from CARTCARD.IC_DOCUMENTO d,CARTCARD.USUARIO u,CARTCARD.IC_CAT_DOCUMENTO C
       where d.usuarioid = u.usuarioid
         and d.id_tipo_documento = c.id_tipo_documento
         and u.usuarioid =peIdUsuario
       ORDER BY d.id_tipo_documento;
       RETURN ps_cursor;
    END;
    
    FUNCTION IC_FC_DATOS_USUARIO(peIdUsuario   IN   CARTCARD.IC_DOCUMENTO.USUARIOID%TYPE)
      RETURN sys_refcursor IS
    ps_cursor      sys_refcursor;
    BEGIN
      OPEN ps_cursor FOR
         SELECT u.nombre, u.apaterno, u.amaterno, 
                u.calle, u.colonia, m.nombremunicipio,
                u.ciudad, u.codigopostal, p.nombrepais, 
                e.nombreestado, u.mail,
                to_char(u.fechanacimiento,'dd')||' de '||trim(to_char(u.fechanacimiento,'month'))||' de '||to_char(u.fechanacimiento,'yyyy') fechaNacimiento,
                u.usuarioid,u.nombre||' '||u.apaterno||' '||u.amaterno NOMBREcompleto,
                trim(substr(u.calle,1,instr(u.calle,'|',1)-1))||
                ' '||trim(substr(u.calle,instr(u.calle,'|',2)+1,instr(u.calle,'|',1,2)-instr(u.calle,'|',2)-1))||
                ' '||trim(substr(u.calle,instr(u.calle,'|',1,2)+1))||
                ' Col '||trim(u.colonia)||' '||m.nombremunicipio||','||u.ciudad||' C.P. '||u.codigopostal||' '||e.nombreestado||','||p.nombrepais domicilio
           FROM CARTCARD.usuario u,
                CARTCARD.pais p,
                CARTCARD.estado e,
                CARTCARD.municipio m
          WHERE p.paisid           = u.paisid
            AND e.paisid         = u.paisid
            AND e.estadoid       = u.estadoid
            AND m.municipioid = u.municipioid
            AND m.estadoid    = u.estadoid
            AND u.usuarioid     = peIdUsuario;
      RETURN ps_cursor;                  
    END;        

    PROCEDURE IC_SP_ACTUALIZA_DOCUMENTO(peIdUsuario    IN  CARTCARD.IC_DOCUMENTO.USUARIOID%TYPE,
                                     peIdTipoDocto  IN  CARTCARD.IC_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
                                     peEstatus      IN  CARTCARD.IC_DOCUMENTO.ESTATUS%TYPE,
                                     PeComentario   IN  CARTCARD.IC_DOCUMENTO.COMENTARIO%TYPE,
                                     peNomUsuario   IN  CARTCARD.IC_DOCUMENTO.USUARIO_MODIFICO%TYPE,
                                     PsCodResp      OUT varchar2) IS
    CURSOR CurConsulta is
      select * from CARTCARD.IC_DOCUMENTO t
      WHERE T.USUARIOID = peIdUsuario
      AND T.ID_TIPO_DOCUMENTO = peIdTipoDocto;

    RecConsulta      CurConsulta%rowtype;  
    sinDatos         Exception;
    BEGIN
      open CurConsulta;
      fetch CurConsulta into RecConsulta;
      if CurConsulta%NOTFOUND then
         close CurConsulta;
         raise sinDatos; 
      end if;
      close CurConsulta;
      
      UPDATE CARTCARD.IC_DOCUMENTO t
       SET T.ESTATUS = peEstatus,
           T.COMENTARIO = PeComentario,
           T.USUARIO_MODIFICO = NVL(peNomUsuario,T.USUARIO_MODIFICO),
           T.FECHA_MODIFICACION = SYSDATE
      WHERE T.USUARIOID = peIdUsuario
        AND T.ID_TIPO_DOCUMENTO = peIdTipoDocto;
          
   PSCodResp:='1';
   COMMIT;
   EXCEPTION
     WHEN sinDatos THEN
       PSCodResp:='0'|| SQLCODE || '  ' || SQLERRM ;
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20181, 'Error PKG_IUPICARD.SP_ACTUALIZA_DOCUMENTO NO EXISTE DOCUMENTO TIPO:'|| peIdTipoDocto||' IDUSR:'||peIdUsuario);               
     WHEN OTHERS THEN
       PSCodResp:='0'|| SQLCODE || '  ' || SQLERRM ;
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20181, 'Error ocurrido al actualiza PKG_IUPICARD.SP_ACTUALIZA_DOCUMENTO(' || SQLCODE || '  ' || SQLERRM || ')');        
    END;

    PROCEDURE IC_SP_ACTUALIZA_IMAGEN(peIdUsuario    IN  CARTCARD.IC_DOCUMENTO.USUARIOID%TYPE,
                                  peIdTipoDocto  IN  CARTCARD.IC_DOCUMENTO.ID_TIPO_DOCUMENTO%TYPE,
                                  peDocto        IN  CARTCARD.IC_DOCUMENTO.DOCUMENTO%TYPE,
                                  peNomUsuario   IN  CARTCARD.IC_DOCUMENTO.USUARIO_MODIFICO%TYPE,
                                  PENombreArc    IN CARTCARD.IC_DOCUMENTO.NOMBRE_ARCHIVO%TYPE,
                                  PETipoArchivo IN CARTCARD.IC_DOCUMENTO.TIPO_ARCHIVO%TYPE,
                                  PsCodResp      OUT varchar2) IS
    CURSOR CurConsulta is
      select * from CARTCARD.IC_DOCUMENTO t
      WHERE T.USUARIOID = peIdUsuario
      AND T.ID_TIPO_DOCUMENTO = peIdTipoDocto;

    RecConsulta      CurConsulta%rowtype;  
    sinDatos         Exception;
    BEGIN
      open CurConsulta;
      fetch CurConsulta into RecConsulta;
      if CurConsulta%NOTFOUND then
         close CurConsulta;
         raise sinDatos; 
      end if;
      close CurConsulta;
      
      UPDATE CARTCARD.IC_DOCUMENTO t
       SET t.documento = peDocto,
           T.ESTATUS = '0',
           T.USUARIO_MODIFICO = NVL(peNomUsuario,T.USUARIO_MODIFICO),
           t.nombre_archivo = PENombreArc,
           T.TIPO_ARCHIVO = PETipoArchivo,
           T.FECHA_MODIFICACION = SYSDATE
      WHERE T.USUARIOID = peIdUsuario
        AND T.ID_TIPO_DOCUMENTO = peIdTipoDocto;
        
   PSCodResp:='1';
   COMMIT;
   EXCEPTION
     WHEN sinDatos THEN
       PSCodResp:='0'|| SQLCODE || '  ' || SQLERRM ;
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20181, 'Error PKG_IUPICARD.SP_ACTUALIZA_IMAGEN NO EXISTE DOCUMENTO TIPO:'|| peIdTipoDocto||' IDUSR:'||peIdUsuario);               
     WHEN OTHERS THEN
       PSCodResp:='0'|| SQLCODE || '  ' || SQLERRM ;
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20181, 'Error ocurrido al actualiza PKG_IUPICARD.SP_ACTUALIZA_IMAGEN(' || SQLCODE || '  ' || SQLERRM || ')');        
    END;

    FUNCTION IC_FC_BUSQUEDA_XEMAIL(peEmail        IN   CARTCARD.Usuario.MAIL%TYPE)
      RETURN sys_refcursor IS
    ps_cursor      sys_refcursor;
    BEGIN
      OPEN ps_cursor FOR
         SELECT u.nombre, u.apaterno, u.amaterno, 
                u.calle, u.colonia, m.nombremunicipio,
                u.ciudad, u.codigopostal, p.nombrepais, 
                e.nombreestado, u.mail,
                to_char(u.fechanacimiento,'dd')||' de '||trim(to_char(u.fechanacimiento,'month'))||' de '||to_char(u.fechanacimiento,'yyyy') fechaNacimiento,
                u.usuarioid,u.nombre||' '||u.apaterno||' '||u.amaterno NOMBREcompleto,
                u.calle||' Col '||trim(u.colonia)||' '||m.nombremunicipio||','||u.ciudad||' C.P. '||u.codigopostal||' '||e.nombreestado||','||p.nombrepais domicilio
           FROM CARTCARD.usuario u,
                CARTCARD.pais p,
                CARTCARD.estado e,
                CARTCARD.municipio m
          WHERE p.paisid           = u.paisid
            AND e.paisid         = u.paisid
            AND e.estadoid       = u.estadoid
            AND m.municipioid = u.municipioid
            AND m.estadoid    = u.estadoid
            AND upper(u.mail)   = upper(peEmail);
    RETURN   ps_cursor;          
    END;        

  PROCEDURE IC_SP_INSERTA_TIP_DOCTO(PEidTipDocto  IN CARTCARD.Ic_Cat_Documento.ID_TIPO_DOCUMENTO%type,
                                    PEDescripcion IN CARTCARD.Ic_Cat_Documento.DESCRIPCION%type,
                                    PEUsuario     IN CARTCARD.Ic_Cat_Documento.USUARIO_MODIFICO%type) IS
  BEGIN
    insert into IC_CAT_DOCUMENTO (ID_TIPO_DOCUMENTO, 
                                  DESCRIPCION, 
                                  USUARIO_MODIFICO, 
                                  FECHA_MODIFICACION)
         values (PEidTipDocto, PEDescripcion, PEUsuario, sysdate);
   COMMIT;

   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20181, 'Error ocurrido al actualiza PKG_IUPICARD.IC_SP_INSERTA_TIP_DOCTO(' || SQLCODE || '  ' || SQLERRM || ')');        
  END;

  PROCEDURE IC_SP_ACTUALIZA_TIP_DOCTO(PEidTipDocto  IN CARTCARD.Ic_Cat_Documento.ID_TIPO_DOCUMENTO%type,
                                    PEDescripcion IN CARTCARD.Ic_Cat_Documento.DESCRIPCION%type,
                                    PEUsuario     IN CARTCARD.Ic_Cat_Documento.USUARIO_MODIFICO%type) IS
  BEGIN
    update CARTCARD.ic_cat_documento d
     set d.descripcion = PEDescripcion,
         d.usuario_modifico= PEUsuario,
         d.fecha_modificacion = sysdate
    where d.id_tipo_documento = PEidTipDocto;
  
   COMMIT;

   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20181, 'Error ocurrido al actualiza PKG_IUPICARD.IC_SP_ACTUALIZA_TIP_DOCTO(' || SQLCODE || '  ' || SQLERRM || ')');        
  END;

  PROCEDURE IC_SP_ELIMINA_TIP_DOCTO(PEidTipDocto  IN CARTCARD.Ic_Cat_Documento.ID_TIPO_DOCUMENTO%type) IS
  BEGIN
    DELETE CARTCARD.ic_cat_documento d
    where d.id_tipo_documento = PEidTipDocto;
  
   COMMIT;

   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20181, 'Error ocurrido al actualiza PKG_IUPICARD.IC_SP_ELIMINA_TIP_DOCTO(' || SQLCODE || '  ' || SQLERRM || ')');        
  END;

end PKG_IUPICARD;
/

SHOW ERRORS;


CREATE OR REPLACE package body          PKG_LOGIN is
    
    FUNCTION ICN_EXISTEUSER(
                CUSUARIO CARTCARD.USERLOGIN.IDSESSION%TYPE,
                CIDSESSION CARTCARD.USERLOGIN.USUARIO%TYPE,
                PSDESC_COD  OUT VARCHAR2) RETURN NUMBER IS
    
    V_USUARIOS NUMBER;
    resp       NUMBER:=0;
    BEGIN
        SELECT COUNT(1) INTO V_USUARIOS
        FROM CARTCARD.USERLOGIN U 
        WHERE U.USUARIO = CUSUARIO AND U.IDSESSION = CIDSESSION; 
     
    IF V_USUARIOS = 0 THEN
       resp:=0;
       PSDESC_COD:='NO EXISTE USUARIO: '||CUSUARIO;
    END IF; 
      
    IF V_USUARIOS > 0 THEN
        resp:=1;
        PSDESC_COD:='USUARIO ENCONTRADO : '||CUSUARIO||' #VECES: '||V_USUARIOS;
    END IF;  
            
   RETURN resp;
   END ICN_EXISTEUSER;
   
   
    PROCEDURE ICN_INSERTAUSER(
            IISSESSION       IN      CARTCARD.USERLOGIN.IDSESSION%TYPE,
            IUSUARIO         IN      CARTCARD.USERLOGIN.USUARIO%TYPE,
            IIP              IN      CARTCARD.USERLOGIN.IP%TYPE,
            IINTENTOS        IN      CARTCARD.USERLOGIN.INTENTOS%TYPE,
            ISTATUS          IN      CARTCARD.USERLOGIN.STATUS%TYPE,
            IUSERMODIFICO    IN      CARTCARD.USERLOGIN.USUARIO_MODIFICO%TYPE) IS
    BEGIN
        INSERT INTO CARTCARD.USERLOGIN(
            IDSESSION,
            USUARIO,
            IP,
            INTENTOS,
            STATUS,
            USUARIO_MODIFICO,
            ULTIMA_MODIFICACION)
            VALUES(
            IISSESSION,
            IUSUARIO,
            IIP,
            IINTENTOS,
            ISTATUS,
            IUSERMODIFICO,
            SYSDATE);
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en ICN_INSERTAUSER (' || SQLCODE || '  ' || SQLERRM || ')');
    END;

    PROCEDURE ICN_DETELEUSER(
            DUSUARIO         IN      CARTCARD.USERLOGIN.USUARIO%TYPE) IS
    BEGIN
        DELETE FROM CARTCARD.USERLOGIN WHERE USUARIO = DUSUARIO;
        COMMIT;    
    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en ICN_DETELEUSER (' || SQLCODE || '  ' || SQLERRM || ')');
    END;

    PROCEDURE ICN_UPDATEUSER(
            UISSESSION       IN      CARTCARD.USERLOGIN.IDSESSION%TYPE,
            UUSUARIO         IN      CARTCARD.USERLOGIN.USUARIO%TYPE,
            UIP              IN      CARTCARD.USERLOGIN.IP%TYPE,
            UINTENTOS        IN      CARTCARD.USERLOGIN.INTENTOS%TYPE,
            USTATUS          IN      CARTCARD.USERLOGIN.STATUS%TYPE,
            UUSERMODIFICO    IN      CARTCARD.USERLOGIN.USUARIO_MODIFICO%TYPE) IS
    BEGIN
        UPDATE CARTCARD.USERLOGIN T
        SET T.IDSESSION             = NVL(UISSESSION,T.IDSESSION),
            T.USUARIO               = UUSUARIO,
            T.IP                    = NVL(UIP,T.IP),
            T.INTENTOS              = NVL(UINTENTOS,T.INTENTOS),
            T.STATUS                = USTATUS,
            T.USUARIO_MODIFICO      = UUSERMODIFICO,            
            T.ULTIMA_MODIFICACION   = SYSDATE
        WHERE T.USUARIO = UUSUARIO;
        COMMIT;    
    EXCEPTION
        WHEN OTHERS THEN
        ROLLBACK;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en ICN_UPDATEUSER (' || SQLCODE || '  ' || SQLERRM || ')');    
    END;            
          
    
   
END PKG_LOGIN;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY PKG_RMA_SERVICES IS
/******************************************************************************
   NAME:       PKG_RMA_SERVICES
   PURPOSE:

   REVISIONS:
   Ver        Date        Author           Description
   ---------  ----------  ---------------  ------------------------------------
   1.0        13/06/2012             1. Created this package.
******************************************************************************/

  PROCEDURE CAT_ROL (P_IDROL              IN  RMA_ROL.IDROL%TYPE,
                     P_DESCRIPCION        IN  RMA_ROL.DESCRIPCION%TYPE,
                     P_STATUS             IN  RMA_ROL.STATUS%TYPE,
                     P_USUARIO_MODIFICO   IN  RMA_ROL.USUARIO_MODIFICO%TYPE,
                     P_ACCION             IN NUMBER,
                     P_RESULTADO          OUT NUMBER,
                     P_RESULTADODES       OUT VARCHAR2) IS
  P_EXISTE NUMBER;
  CURSOR_CONSULTA TYPES.refcursor;

  BEGIN

   OPEN CURSOR_CONSULTA
     FOR SELECT COUNT(1)
         FROM  RMA_ROL R
         WHERE R.IDROL = P_IDROL;
     LOOP
       FETCH CURSOR_CONSULTA INTO P_EXISTE;
       EXIT WHEN CURSOR_CONSULTA%NOTFOUND;
     END LOOP;
   CLOSE CURSOR_CONSULTA;


    IF P_ACCION = 1 AND P_EXISTE = 0 THEN
      INSERT INTO  RMA_ROL
        (IDROL,
         DESCRIPCION,
         STATUS,
         USUARIO_MODIFICO,
         ULTIMA_MODIFICACION)
      VALUES
        ((SELECT (NVL(MAX(IDROL), 0) ) + 1 FROM  RMA_ROL),
         P_DESCRIPCION,
         P_STATUS,
         P_USUARIO_MODIFICO,
         SYSDATE);
      P_RESULTADO    := 1;
      P_RESULTADODES := 'Exito en la operacion se Inserto el elemento en el catalogo de Rol';

    ELSIF P_ACCION = 2 AND P_EXISTE != 0 THEN
      UPDATE  RMA_ROL R
         SET R.IDROL               = NVL(P_IDROL, R.IDROL),
             R.DESCRIPCION         = NVL(P_DESCRIPCION, R.DESCRIPCION),
             R.STATUS              = NVL(P_STATUS,R.STATUS),
             R.USUARIO_MODIFICO    = P_USUARIO_MODIFICO,
             R.ULTIMA_MODIFICACION = SYSDATE
      WHERE R.IDROL = P_IDROL;
      P_RESULTADO    := 2;
      P_RESULTADODES := 'Exito en la operacion se Actualizo el elemento en el catalogo de Rol';

    ELSIF P_ACCION = 3 AND P_EXISTE != 0 THEN
      DELETE FROM  RMA_ROL R
             WHERE R.IDROL=P_IDROL;
      P_RESULTADO    := 3;
      P_RESULTADODES := 'Exito en la operacion se Elimino el elemento en el catalogo de Rol';
    ELSE
      P_RESULTADO    := 4;
      P_RESULTADODES := 'No se efectuo la accion';

    END IF;

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      P_RESULTADO    := 0;
      P_RESULTADODES := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20120,'Error ocurrido en PKG_RMA_SERVICES.CAT_ROL(' ||SQLCODE || '' || SQLERRM || ')');
  END;


  PROCEDURE CAT_EJBS(P_IDEJB              IN  RMA_EJBS.IDEJB%TYPE,
                     P_DESCRIPCION        IN  RMA_EJBS.DESCRIPCION%TYPE,
                     P_STATUS             IN  RMA_EJBS.STATUS%TYPE,
                     P_USUARIO_MODIFICO   IN  RMA_EJBS.USUARIO_MODIFICO%TYPE,
                     P_ACCION             IN NUMBER,
                     P_RESULTADO          OUT NUMBER,
                     P_RESULTADODES       OUT VARCHAR2) IS
  P_EXISTE NUMBER;
  CURSOR_CONSULTA  TYPES.refcursor;

  BEGIN

   OPEN CURSOR_CONSULTA
     FOR SELECT COUNT(1)
        FROM  RMA_EJBS E
        WHERE E.IDEJB = P_IDEJB;
     LOOP
       FETCH CURSOR_CONSULTA INTO P_EXISTE;
       EXIT WHEN CURSOR_CONSULTA%NOTFOUND;
     END LOOP;
   CLOSE CURSOR_CONSULTA;


    IF P_ACCION = 1 and P_EXISTE = 0 THEN
      INSERT INTO  RMA_EJBS
        (IDEJB,
         DESCRIPCION,
         STATUS,
         USUARIO_MODIFICO,
         ULTIMA_MODIFICACION)
      VALUES
        ((SELECT (NVL(MAX(IDEJB), 0) ) + 1 FROM  RMA_EJBS),
         P_DESCRIPCION,
         P_STATUS,
         P_USUARIO_MODIFICO,
         SYSDATE);
      P_RESULTADO    := 1;
      P_RESULTADODES := 'Exito en la operacion se Inserto el elemento en el catalogo de Ejbs';

    ELSIF P_ACCION = 2 and P_EXISTE != 0 THEN
      UPDATE  RMA_EJBS E
         SET E.IDEJB               = NVL(P_IDEJB, E.IDEJB),
             E.DESCRIPCION         = NVL(P_DESCRIPCION, E.DESCRIPCION),
             E.STATUS              = NVL(P_STATUS,E.STATUS),
             E.USUARIO_MODIFICO    = P_USUARIO_MODIFICO,
             E.ULTIMA_MODIFICACION = SYSDATE
      WHERE  E.IDEJB = P_IDEJB;
      P_RESULTADO    := 2;
      P_RESULTADODES := 'Exito en la operacion se Actualizo el elemento en el catalogo de Ejbs';

    ELSIF P_ACCION = 3 and P_EXISTE != 0 THEN
      DELETE FROM  RMA_EJBS E
             WHERE E.IDEJB=P_IDEJB;
      P_RESULTADO    := 3;
      P_RESULTADODES := 'Exito en la operacion se Elimino el elemento en el catalogo de Ejbs';
    ELSE
      P_RESULTADO    := 4;
      P_RESULTADODES := 'No se efectuo la accion';

    END IF;
   COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      P_RESULTADO    := 0;
      P_RESULTADODES := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20120,'Error ocurrido en PKG_RMA_SERVICES.CAT_EJBS(' ||SQLCODE || '' || SQLERRM || ')');
  END;


  PROCEDURE CAT_METODOS(P_IDMETODO           IN  RMA_METODOS.IDMETODO%TYPE,
                        P_IDEJB              IN  RMA_METODOS.IDEJB %TYPE,
                        P_DESCRIPCION        IN  RMA_METODOS.DESCRIPCION %TYPE,
                        P_STATUS             IN  RMA_METODOS.STATUS%TYPE,
                        P_USUARIO_MODIFICO   IN  RMA_METODOS.USUARIO_MODIFICO%TYPE,
                        P_ACCION             IN NUMBER,
                        P_RESULTADO          OUT NUMBER,
                        P_RESULTADODES       OUT VARCHAR2) IS
  P_EXISTE NUMBER;
  CURSOR_CONSULTA  TYPES.refcursor;

  BEGIN

   OPEN CURSOR_CONSULTA
     FOR SELECT COUNT(1)
        FROM  RMA_METODOS ME
        WHERE ME.IDMETODO = P_IDMETODO;
     LOOP
       FETCH CURSOR_CONSULTA INTO P_EXISTE;
       EXIT WHEN CURSOR_CONSULTA%NOTFOUND;
     END LOOP;
   CLOSE CURSOR_CONSULTA;


    IF P_ACCION = 1 and P_EXISTE = 0 THEN
      INSERT INTO  RMA_METODOS
        (IDMETODO,
         IDEJB,
         DESCRIPCION,
         STATUS,
         USUARIO_MODIFICO,
         ULTIMA_MODIFICACION)
      VALUES
        ((SELECT (NVL(MAX(IDMETODO), 0) ) + 1 FROM  RMA_METODOS),
         P_IDEJB,
         P_DESCRIPCION,
         P_STATUS,
         P_USUARIO_MODIFICO,
         SYSDATE);
      P_RESULTADO    := 1;
      P_RESULTADODES := 'Exito en la operacion se Inserto el elemento en el catalogo de Metodos';

    ELSIF P_ACCION = 2 and P_EXISTE != 0 THEN
      UPDATE  RMA_METODOS ME
         SET ME.IDMETODO            = NVL(P_IDMETODO, ME.IDMETODO),
             ME.IDEJB               = NVL(P_IDEJB, ME.IDEJB),
             ME.DESCRIPCION         = NVL(P_DESCRIPCION,ME.DESCRIPCION),
             ME.STATUS              = NVL(P_STATUS,ME.STATUS),
             ME.USUARIO_MODIFICO    = P_USUARIO_MODIFICO,
             ME.ULTIMA_MODIFICACION = SYSDATE
      WHERE ME.IDMETODO = P_IDMETODO;
      P_RESULTADO    := 2;
      P_RESULTADODES := 'Exito en la operacion se Actualizo el elemento en el catalogo de Metodos';

    ELSIF P_ACCION = 3 and P_EXISTE != 0 THEN
      DELETE FROM  RMA_METODOS ME
             WHERE ME.IDMETODO=P_IDMETODO;
      P_RESULTADO    := 3;
      P_RESULTADODES := 'Exito en la operacion se Elimino el elemento en el catalogo de Metodos';
    ELSE
      P_RESULTADO    := 4;
      P_RESULTADODES := 'No se efectuo la accion';

    END IF;

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      P_RESULTADO    := 0;
      P_RESULTADODES := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20120,'Error ocurrido en PKG_RMA_SERVICES.CAT_METODOS(' ||SQLCODE || '' || SQLERRM || ')');
  END;


  PROCEDURE CAT_ROL_METODO(P_IDROL_METODO       IN  RMA_ROL_METODOS.IDROL_METODO%TYPE,
                           P_IDMETODO           IN  RMA_ROL_METODOS.IDMETODO%TYPE,
                           P_IDROL              IN  RMA_ROL_METODOS.IDROL%TYPE,
                           P_STATUS             IN  RMA_ROL_METODOS.STATUS%TYPE,
                           P_USUARIO_MODIFICO   IN  RMA_ROL_METODOS.USUARIO_MODIFICO%TYPE,
                           P_ACCION             IN NUMBER,
                           P_RESULTADO          OUT NUMBER,
                           P_RESULTADODES       OUT VARCHAR2) IS
  P_EXISTE NUMBER;
  CURSOR_CONSULTA  TYPES.refcursor;

  BEGIN

   OPEN CURSOR_CONSULTA
     FOR SELECT COUNT(1)
        FROM  RMA_ROL_METODOS RM
        WHERE RM.IDROL_METODO = P_IDROL_METODO;
     LOOP
       FETCH CURSOR_CONSULTA INTO P_EXISTE;
       EXIT WHEN CURSOR_CONSULTA%NOTFOUND;
     END LOOP;
   CLOSE CURSOR_CONSULTA;


    IF P_ACCION = 1 AND P_EXISTE = 0 THEN
      INSERT INTO  RMA_ROL_METODOS
        (IDROL_METODO,
         IDMETODO,
         IDROL,
         STATUS,
         USUARIO_MODIFICO,
         ULTIMA_MODIFICACION)
      VALUES
        ((SELECT (NVL(MAX(IDROL_METODO), 0) ) + 1 FROM  RMA_ROL_METODOS),
         P_IDMETODO,
         P_IDROL,
         P_STATUS,
         P_USUARIO_MODIFICO,
         SYSDATE);
      P_RESULTADO    := 1;
      P_RESULTADODES := 'Exito en la operacion se Inserto el elemento en el catalogo de Rol_Metodo';

    ELSIF P_ACCION = 2 AND P_EXISTE != 0 THEN
      UPDATE  RMA_ROL_METODOS ME
         SET ME.IDROL_METODO        = NVL(P_IDROL_METODO, ME.IDROL_METODO),
             ME.IDMETODO            = NVL(P_IDMETODO,ME.IDMETODO),
             ME.IDROL               = NVL(P_IDROL, ME.IDROL),
             ME.STATUS              = NVL(P_STATUS,ME.STATUS),
             ME.USUARIO_MODIFICO    = P_USUARIO_MODIFICO,
             ME.ULTIMA_MODIFICACION = SYSDATE
      WHERE ME.IDROL_METODO = P_IDROL_METODO;
      P_RESULTADO    := 2;
      P_RESULTADODES := 'Exito en la operacion se Actualizo el elemento en el catalogo de Rol_Metodo';

    ELSIF P_ACCION = 3 AND P_EXISTE != 0 THEN
      DELETE FROM  RMA_ROL_METODOS ME
             WHERE ME.IDROL_METODO=P_IDROL_METODO;
      P_RESULTADO    := 3;
      P_RESULTADODES := 'Exito en la operacion se Elimino el elemento en el catalogo de Rol_Metodo';
    ELSE
      P_RESULTADO    := 4;
      P_RESULTADODES := 'No se efectuo la accion';

    END IF;

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      P_RESULTADO    := 0;
      P_RESULTADODES := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20120,'Error ocurrido en PKG_RMA_SERVICES.CAT_ROL_METODO(' ||SQLCODE || '' || SQLERRM || ')');
  END;



  PROCEDURE CAT_MACS(P_MAC                IN  RMA_MACS.MAC%TYPE,
                     P_IDROL              IN  RMA_MACS.IDROL%TYPE,
                     P_NOMBRE_APLICACION  IN  RMA_MACS.NOMBRE_APLICACION%TYPE,
                     P_STATUS             IN  RMA_MACS.STATUS%TYPE,
                     P_USUARIO_MODIFICO   IN  RMA_MACS.USUARIO_MODIFICO%TYPE,
                     P_ACCION             IN NUMBER,
                     P_RESULTADO          OUT NUMBER,
                     P_RESULTADODES       OUT VARCHAR2) IS
  P_EXISTE NUMBER;
  CURSOR_CONSULTA  TYPES.refcursor;

  BEGIN

   OPEN CURSOR_CONSULTA
     FOR SELECT COUNT(1)
        FROM  RMA_MACS M
        WHERE M.MAC = P_MAC;
     LOOP
       FETCH CURSOR_CONSULTA INTO P_EXISTE;
       EXIT WHEN CURSOR_CONSULTA%NOTFOUND;
     END LOOP;
   CLOSE CURSOR_CONSULTA;


    IF P_ACCION = 1 AND P_EXISTE = 0 THEN
      INSERT INTO  RMA_MACS
        (MAC,
         IDROL,
         NOMBRE_APLICACION,
         STATUS,
         USUARIO_MODIFICO,
         ULTIMA_MODIFICACION)
      VALUES
        (P_MAC,
         P_IDROL,
         P_NOMBRE_APLICACION,
         P_STATUS,
         P_USUARIO_MODIFICO,
         SYSDATE);
      P_RESULTADO    := 1;
      P_RESULTADODES := 'Exito en la operacion se Inserto el elemento en el catalogo de Macs';

    ELSIF P_ACCION = 2 AND P_EXISTE != 0 THEN
      UPDATE  RMA_MACS M
         SET M.MAC                 = NVL(P_MAC, M.MAC),
             M.IDROL               = NVL(P_IDROL, M.IDROL),
             M.NOMBRE_APLICACION   = NVL(P_NOMBRE_APLICACION,M.NOMBRE_APLICACION),
             M.STATUS              = NVL(P_STATUS,M.STATUS),
             M.USUARIO_MODIFICO    = P_USUARIO_MODIFICO,
             M.ULTIMA_MODIFICACION = SYSDATE
      WHERE M.MAC = P_MAC;
      P_RESULTADO    := 2;
      P_RESULTADODES := 'Exito en la operacion se Actualizo el elemento en el catalogo de Macs';

    ELSIF P_ACCION = 3 AND P_EXISTE != 0 THEN
      DELETE FROM  RMA_MACS M
             WHERE M.MAC=P_MAC;
      P_RESULTADO    := 3;
      P_RESULTADODES := 'Exito en la operacion se Elimino el elemento en el catalogo de Macs';
    ELSE
      P_RESULTADO    := 4;
      P_RESULTADODES := 'No se efectuo la accion';

    END IF;

    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      P_RESULTADO    := 0;
      P_RESULTADODES := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20120,'Error ocurrido en PKG_RMA_SERVICES.CAT_MACS(' ||SQLCODE || '' || SQLERRM || ')');
  END;

  FUNCTION GET_CAT_ROL RETURN SYS_REFCURSOR IS
    CURSOR_CONSULTA    sys_refcursor;
    BEGIN
      OPEN CURSOR_CONSULTA
         FOR SELECT R.*
            FROM  RMA_ROL R
         ORDER BY R.DESCRIPCION;
      RETURN CURSOR_CONSULTA;
  CLOSE CURSOR_CONSULTA;
  END;

  FUNCTION GET_CAT_EJBS RETURN SYS_REFCURSOR IS
    CURSOR_CONSULTA  SYS_REFCURSOR;
    BEGIN
       OPEN CURSOR_CONSULTA
    FOR SELECT E.*
         FROM  RMA_EJBS E
      ORDER BY E.DESCRIPCION;
    RETURN CURSOR_CONSULTA;
  CLOSE CURSOR_CONSULTA;
  END;

  FUNCTION GET_CAT_METODOS RETURN SYS_REFCURSOR IS
    CURSOR_CONSULTA   TYPES.refcursor;
    BEGIN
      OPEN CURSOR_CONSULTA
         FOR SELECT ME.*,E.DESCRIPCION DESCRIPCION_EJB, E.STATUS STATUS_EJB
       FROM  RMA_METODOS ME INNER JOIN  RMA_EJBS E ON ME.IDEJB = E.IDEJB
       ORDER BY E.DESCRIPCION,ME.DESCRIPCION ;
      RETURN CURSOR_CONSULTA;
    CLOSE CURSOR_CONSULTA;
  END;

  FUNCTION GET_CAT_ROL_METODOS RETURN SYS_REFCURSOR IS
    CURSOR_CONSULTA   SYS_REFCURSOR;
    BEGIN
      OPEN CURSOR_CONSULTA
         FOR SELECT RM.*,  R.DESCRIPCION DESCRIPCION_ROL ,R.STATUS STATUS_ROL ,
               ME.DESCRIPCION DESCRIPCION_METODO, E.DESCRIPCION DESCRIPCION_EJB
         FROM  RMA_ROL_METODOS RM INNER JOIN  RMA_METODOS ME ON ME.IDMETODO = RM.IDMETODO
                           INNER JOIN  RMA_ROL R ON R.IDROL = RM.IDROL
                        INNER JOIN  RMA_EJBS E ON E.IDEJB = ME.IDEJB
         ORDER BY E.DESCRIPCION, ME.DESCRIPCION;
    RETURN CURSOR_CONSULTA;
    CLOSE CURSOR_CONSULTA;
  END;

  FUNCTION GET_CAT_MACS RETURN SYS_REFCURSOR IS
    CURSOR_CONSULTA   SYS_REFCURSOR;
    BEGIN
      OPEN CURSOR_CONSULTA
         FOR SELECT M.* , R.DESCRIPCION DESCRIPCION_ROL
            FROM  RMA_MACS M INNER JOIN  RMA_ROL R ON R.IDROL = M.IDROL
         ORDER BY R.DESCRIPCION, M.NOMBRE_APLICACION;
    RETURN CURSOR_CONSULTA;
    CLOSE CURSOR_CONSULTA;
  END;

  FUNCTION GET_ROL_METODOS_EJB RETURN SYS_REFCURSOR IS
    CURSOR_CONSULTA   SYS_REFCURSOR;
    BEGIN
      OPEN CURSOR_CONSULTA
         FOR SELECT R.*
            FROM  RMA_ROL R
         ORDER BY R.DESCRIPCION;
    RETURN CURSOR_CONSULTA;
    CLOSE CURSOR_CONSULTA;
  END;

END PKG_RMA_SERVICES;
/

SHOW ERRORS;


CREATE OR REPLACE package body PKG_USUARIO is
 FUNCTION IC_FC_GRUPO_ROLES(V_GRUP_ROL   IN   CARTCARD.IC_CAT_GRUPO_ROLES.ID%TYPE) 
   RETURN sys_refcursor IS
    ROLES_CURSOR sys_refcursor;
BEGIN
   OPEN ROLES_CURSOR FOR
   SELECT CR.ID_ROLES, CR.NOMBRE_ROL, CR.ID_GRUP_ROL
   FROM CARTCARD.IC_CAT_ROLES CR, CARTCARD.IC_CAT_GRUPO_ROLES CGR, CARTCARD.IC_CAT_PERMISO CP
   WHERE CR.ID_GRUP_ROL = CGR.ID AND CR.ID_PERMISO = CP.ID_PERMISO
   AND CGR.ID = V_GRUP_ROL;
   RETURN ROLES_CURSOR;
END IC_FC_GRUPO_ROLES;

FUNCTION IC_FC_ROLES_USUARIO(V_ID_USER     IN       CARTCARD.IC_USUARIO.ID_USUARIO%TYPE)
RETURN sys_refcursor IS
ROLES_CURSOR sys_refcursor;
BEGIN
    OPEN ROLES_CURSOR FOR
    SELECT UR.ID_USUARIO, UR.USUARIO_MODIFICO, UR.ID_ROL, CR.NOMBRE_ROL, CR.ID_GRUP_ROL, CR.ID_PERMISO
  FROM CARTCARD.IC_TA_USUARIO_ROL UR, CARTCARD.IC_CAT_ROLES CR, CARTCARD.IC_USUARIO U
  WHERE UR.ID_ROL = CR.ID_ROLES AND U.ID_USUARIO = UR.ID_USUARIO AND U.ID_USUARIO = V_ID_USER;

  RETURN ROLES_CURSOR;
END IC_FC_ROLES_USUARIO;
    PROCEDURE IC_SP_ADD_USUARIO_ROL(V_ID_USER      IN  CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
                              V_USER_MODIFICA      IN  CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,
                                V_ID_ROL                  IN  CARTCARD.IC_CAT_ROLES.ID_ROLES%TYPE) IS
    BEGIN
    INSERT INTO CARTCARD.IC_TA_USUARIO_ROL(ID_USUARIO_ROL, ID_USUARIO, USUARIO_MODIFICO, ID_ROL,ULTIMA_MODIFICACION)
    VALUES(CARTCARD.IC_SEQ_TA_USUARIO_ROL.NEXTVAL, V_ID_USER, V_USER_MODIFICA, V_ID_ROL, SYSDATE );
    COMMIT;
EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en IC_SP_ADD_USUARIO_ROL (' || SQLCODE || '  ' || SQLERRM || ')');
  END IC_SP_ADD_USUARIO_ROL;
PROCEDURE IC_SP_ACTUALIZA_USUARIO_ROL(PEIDUSUARIOROL  IN CARTCARD.IC_TA_USUARIO_ROL.ID_USUARIO_ROL%TYPE,
                                          PEIDROL         IN CARTCARD.IC_TA_USUARIO_ROL.ID_ROL%TYPE,
                                          PEIDUSUARIO     IN CARTCARD.IC_TA_USUARIO_ROL.ID_USUARIO%TYPE,
                                          PEUSERMODIFICA  IN CARTCARD.IC_TA_USUARIO_ROL.USUARIO_MODIFICO%TYPE) IS
    BEGIN
     UPDATE CARTCARD.IC_TA_USUARIO_ROL  T
      SET T.ID_ROL = PEIDROL,
          T.ID_USUARIO = PEIDUSUARIO,
          T.USUARIO_MODIFICO = PEUSERMODIFICA,
          T.ULTIMA_MODIFICACION = SYSDATE
     WHERE T.ID_USUARIO_ROL = PEIDUSUARIOROL;
    COMMIT;
    EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20190, 'Error ocurrido en IC_SP_ACTUALIZA_USUARIO_ROL (' || SQLCODE || '  ' || SQLERRM || ')');
    END;
    PROCEDURE IC_SP_ADD_GRUPO_ROL(PENOMBRE_GRUPO     IN CARTCARD.IC_CAT_GRUPO_ROLES.NOMBRE_GRUP_ROL%TYPE,
                                       PE_USER_MODIFICA IN CARTCARD.IC_CAT_GRUPO_ROLES.USUARIO_MODIFICO%TYPE) IS
    BEGIN
    insert into CARTCARD.IC_CAT_GRUPO_ROLES (ID, NOMBRE_GRUP_ROL, USUARIO_MODIFICO)
    values (CARTCARD.IC_SEQ_GRUPO_ROL.NEXTVAL, PENOMBRE_GRUPO, PE_USER_MODIFICA);
    COMMIT;
    EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20190, 'Error ocurrido en IC_SP_ADD_GRUPO_ROL (' || SQLCODE || '  ' || SQLERRM || ')');
    END;
    PROCEDURE IC_SP_ACTUALIZA_GRUPO_ROL(PEID     IN  CARTCARD.IC_CAT_GRUPO_ROLES.ID%TYPE,
                                       PENOMBRE_GRUPO     IN CARTCARD.IC_CAT_GRUPO_ROLES.NOMBRE_GRUP_ROL%TYPE,
                                       PE_USER_MODIFICA IN CARTCARD.IC_CAT_GRUPO_ROLES.USUARIO_MODIFICO%TYPE) IS
    BEGIN
     UPDATE CARTCARD.IC_CAT_GRUPO_ROLES  T
      SET T.NOMBRE_GRUP_ROL = PENOMBRE_GRUPO,
          T.USUARIO_MODIFICO = PE_USER_MODIFICA,
          T.ULTIMA_MODIFICACION = SYSDATE
     WHERE T.ID = PEID;
    COMMIT;
    EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20190, 'Error ocurrido en IC_SP_ACTUALIZA_GRUPO_ROL (' || SQLCODE || '  ' || SQLERRM || ')');
    END;
    PROCEDURE IC_SP_ADD_PERMISOS(PEDESCRIPCION IN  CARTCARD.IC_CAT_PERMISO.DESCRIPCION%TYPE,
                                 PEUSUARIO     IN  CARTCARD.IC_CAT_PERMISO.USUARIO_MODIFICO%TYPE) IS
    BEGIN
insert into CARTCARD.IC_CAT_PERMISO (ID_PERMISO, DESCRIPCION, USUARIO_MODIFICO)
values (CARTCARD.IC_SEQ_CAT_PERMISO.NEXTVAL, PEDESCRIPCION, PEUSUARIO);
    COMMIT;
    EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20190, 'Error ocurrido en IC_SP_ADD_PERMISOS (' || SQLCODE || '  ' || SQLERRM || ')');
    END;
    PROCEDURE IC_SP_ACTUALIZA_PERMISOS(PEIDPERMISO   IN  CARTCARD.IC_CAT_PERMISO.ID_PERMISO%TYPE,
                                       PEDESCRIPCION IN  CARTCARD.IC_CAT_PERMISO.DESCRIPCION%TYPE,
                                       PEUSUARIO     IN  CARTCARD.IC_CAT_PERMISO.USUARIO_MODIFICO%TYPE) IS
    BEGIN
    UPDATE CARTCARD.IC_CAT_PERMISO T
     SET  T.DESCRIPCION = PEDESCRIPCION,
          T.USUARIO_MODIFICO = PEUSUARIO,
          T.ULTIMA_MODIFICACION = SYSDATE
    WHERE T.ID_PERMISO =  PEIDPERMISO;
    COMMIT;
    EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20190, 'Error ocurrido en IC_SP_ACTUALIZA_PERMISOS (' || SQLCODE || '  ' || SQLERRM || ')');
    END;
    PROCEDURE IC_SP_ADD_ROLES(PEIDGRUPO    IN CARTCARD.IC_CAT_ROLES.ID_GRUP_ROL%TYPE,
                              PEIDPERMISO  IN CARTCARD.IC_CAT_ROLES.ID_PERMISO%TYPE,
                              PEDESCRIPCION IN CARTCARD.IC_CAT_ROLES.NOMBRE_ROL%TYPE,
                              PEUSUARIO     IN CARTCARD.IC_CAT_ROLES.USUARIO_MODIFICO%TYPE) IS
    BEGIN
   insert into CARTCARD.IC_CAT_ROLES (ID_ROLES, ID_GRUP_ROL, ID_PERMISO, NOMBRE_ROL, USUARIO_MODIFICO)
   values (CARTCARD.IC_SEQ_ROLES.NEXTVAL, PEIDGRUPO , PEIDPERMISO,PEDESCRIPCION, PEUSUARIO);
   COMMIT;
EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en IC_SP_ADD_ROLES (' || SQLCODE || '  ' || SQLERRM || ')');
  END IC_SP_ADD_ROLES;
    PROCEDURE IC_SP_ACTUALIZA_ROL(PEIDROL     IN   CARTCARD.IC_CAT_ROLES.ID_ROLES%TYPE,   
                                  PEIDGRUPO   IN   CARTCARD.IC_CAT_ROLES.ID_GRUP_ROL%TYPE,
                                  PEIDPERMISO IN   CARTCARD.IC_CAT_ROLES.ID_PERMISO%TYPE,
                                  PENOMBRE    IN   CARTCARD.IC_CAT_ROLES.NOMBRE_ROL%TYPE,
                                  PEUSUARIO   IN   CARTCARD.IC_CAT_ROLES.USUARIO_MODIFICO%TYPE) IS
    BEGIN
    UPDATE CARTCARD.IC_CAT_ROLES T
    SET T.ID_GRUP_ROL =PEIDGRUPO, 
          T.ID_PERMISO =PEIDPERMISO,
          T.NOMBRE_ROL = PENOMBRE,
          T.USUARIO_MODIFICO = PEUSUARIO,
          T.ULTIMA_MODIFICACION= SYSDATE
    WHERE T.ID_ROLES = PEIDROL;      
   COMMIT;
EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en IC_SP_ACTUALIZA_ROL (' || SQLCODE || '  ' || SQLERRM || ')');
  END IC_SP_ACTUALIZA_ROL;
PROCEDURE IC_SP_REGISTRA_USUARIO(PELOGIN     IN CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
                               PECONTRASENIA  IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
                               PENOMBRE       IN CARTCARD.IC_USUARIO.NOMBRE%TYPE,
                               PEAPATERNO     IN CARTCARD.IC_USUARIO.APATERNO%TYPE,
                               PEAMATERNO     IN CARTCARD.IC_USUARIO.AMATERNO%TYPE,
                               PENUMIDENTIF   IN CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
                               PECALLE        IN CARTCARD.IC_USUARIO.CALLE%TYPE,
                               PECOLONIA      IN CARTCARD.IC_USUARIO.COLONIA%TYPE,
                               PECP           IN CARTCARD.IC_USUARIO.CP%TYPE,
                               PETELEFONO     IN CARTCARD.IC_USUARIO.TELEFONO%TYPE,
                               PECORREO       IN CARTCARD.IC_USUARIO.CORREO_ELECTRONICO%TYPE,
                               PEUSUARIOMOD   IN CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,                               
                               PSIDUSUARIO    OUT CARTCARD.IC_USUARIO.ID_USUARIO%TYPE) IS   
  CESTADOACTIVA    CONSTANT  CARTCARD.IC_CAT_STATUS_CUENTA.ID_STATUS_CUENTA%TYPE:='1';
BEGIN
   SELECT CARTCARD.usuarioid_seq.NEXTVAL INTO PSIDUSUARIO FROM DUAL;
   
   insert into CARTCARD.IC_USUARIO (ID_USUARIO, 
                                     ID_STATUS_CUENTA, 
                                     NOMBRE, 
                                     APATERNO, 
                                     AMATERNO, 
                                     NOMBRE_USUARIO, 
                                     CONTRASENIA, 
                                     FECHA_CREACION, 
                                     NUMERO_IDENTIFICACION,
                                     CALLE,
                                     COLONIA,
                                     CP,
                                     TELEFONO,
                                     CORREO_ELECTRONICO,                               
                                     USUARIO_MODIFICO)
                             values (PSIDUSUARIO,
                                     CESTADOACTIVA,
                                     PENOMBRE,
                                     PEAPATERNO,
                                     PEAMATERNO,
                                     PELOGIN, 
                                     PECONTRASENIA,
                                     SYSDATE,
                                     PENUMIDENTIF,
                                     PECALLE,
                                     PECOLONIA,
                                     PECP,
                                     PETELEFONO,
                                     PECORREO,
                                     PEUSUARIOMOD);
  COMMIT;
EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en IC_SP_REGISTRA_USUARIO (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_SP_REGISTRA_USUARIO;

 PROCEDURE IC_SP_ACTUALIZA_USUARIO(PEIDUSUARIO IN CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
                               PENOMBRE       IN CARTCARD.IC_USUARIO.NOMBRE%TYPE,
                               PEAPATERNO     IN CARTCARD.IC_USUARIO.APATERNO%TYPE,
                               PEAMATERNO     IN CARTCARD.IC_USUARIO.AMATERNO%TYPE,
                               PENUMIDENTIF   IN CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
                               PECALLE        IN CARTCARD.IC_USUARIO.CALLE%TYPE,
                               PECOLONIA      IN CARTCARD.IC_USUARIO.COLONIA%TYPE,
                               PECP           IN CARTCARD.IC_USUARIO.CP%TYPE,
                               PETELEFONO     IN CARTCARD.IC_USUARIO.TELEFONO%TYPE,
                               PECORREO       IN CARTCARD.IC_USUARIO.CORREO_ELECTRONICO%TYPE,
                               PEUSUARIOMOD   IN CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,
                               PECONTRASENIA  IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE) IS   
 BEGIN
   UPDATE CARTCARD.IC_USUARIO T
   SET T.NOMBRE = PENOMBRE,       
       T.APATERNO = PEAPATERNO,
       T.AMATERNO = PEAMATERNO,
       T.NUMERO_IDENTIFICACION = PENUMIDENTIF,
       T.CALLE = PECALLE,
       T.COLONIA = PECOLONIA,
       T.CP = PECP,
       T.TELEFONO = PETELEFONO,
       T.CORREO_ELECTRONICO = PECORREO,
       T.USUARIO_MODIFICO = PEUSUARIOMOD,
       T.ULTIMA_MODIFICACION = SYSDATE,
       T.CONTRASENIA = PECONTRASENIA
   WHERE T.ID_USUARIO = PEIDUSUARIO;    
  COMMIT;
EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en IC_SP_ACTUALIZA_USUARIO (' || SQLCODE || '  ' || SQLERRM || ')');   
 END;

   FUNCTION IC_FC_LISTA_USUARIOS
   RETURN sys_refcursor IS
   ps_cursor      sys_refcursor;
   BEGIN
      OPEN ps_cursor FOR
           select /*+ index (u XPKIC_USUARIO) */
           U.ID_USUARIO,U.NOMBRE,U.APATERNO,U.AMATERNO,U.CONTRASENIA,u.nombre_usuario,
           u.numero_identificacion,u.calle,u.colonia,u.cp,u.telefono,u.correo_electronico
           from CARTCARD.IC_USUARIO U
           where exists (select ''
                         from CARTCARD.IC_TA_USUARIO_ROL R
                         where u.id_usuario = r.id_usuario);
       RETURN  ps_cursor;     
    END;
    FUNCTION IC_FC_VALIDA_USUARIO(PELOGIN     IN CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
                                  PEPASSWORD  IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
                                  PSDESC_COD  OUT VARCHAR2)
    RETURN NUMBER IS
    V_NUM_USUARIOS NUMBER;
    resp           NUMBER:=0;
    BEGIN
    -- VALIDA LOGIN
    SELECT COUNT(1) INTO V_NUM_USUARIOS
        FROM CARTCARD.IC_USUARIO U 
           WHERE UPPER(U.NOMBRE_USUARIO)=UPPER(PELOGIN); 
     
    IF V_NUM_USUARIOS = 0 THEN
       resp:=0;
       PSDESC_COD:='NO EXISTE USUARIO: '||PELOGIN;
    END IF; 
    -- VALIDA PASSWORD  
    IF V_NUM_USUARIOS > 0 THEN
        SELECT COUNT(1) INTO V_NUM_USUARIOS
        FROM CARTCARD.IC_USUARIO U 
           WHERE U.NOMBRE_USUARIO=PELOGIN
           and U.CONTRASENIA = PEPASSWORD; 
        IF V_NUM_USUARIOS > 0 THEN
           resp:=1;
        ELSE
           resp:=0;
           PSDESC_COD:='CONTRASE¿A INCORRECTA: '||PEPASSWORD;
        END IF;   
    END IF;  
            
   RETURN resp;
   END IC_FC_VALIDA_USUARIO;

   procedure IC_SP_ALTA_USUARIO_ROL
                              (PENOMUSUARIO   IN CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
                               PECONTRASENIA  IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
                               PENOMBRE       IN CARTCARD.IC_USUARIO.NOMBRE%TYPE,
                               PEAPATERNO     IN CARTCARD.IC_USUARIO.APATERNO%TYPE,
                               PEAMATERNO     IN CARTCARD.IC_USUARIO.AMATERNO%TYPE,
                               PENUMIDENTIF   IN CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
                               PECALLE        IN CARTCARD.IC_USUARIO.CALLE%TYPE,
                               PECOLONIA      IN CARTCARD.IC_USUARIO.COLONIA%TYPE,
                               PECP           IN CARTCARD.IC_USUARIO.CP%TYPE,
                               PETELEFONO     IN CARTCARD.IC_USUARIO.TELEFONO%TYPE,
                               PECORREO       IN CARTCARD.IC_USUARIO.CORREO_ELECTRONICO%TYPE,
                               PEUSUARIOMOD   IN CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,
                               PEIDROL        IN CARTCARD.IC_TA_USUARIO_ROL.ID_ROL%TYPE,
                               PSIDUSUARIO    OUT CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
                               PSCOD_ERROR    OUT NUMBER) IS   
cursor curRol(pidIsuario in CARTCARD.IC_TA_USUARIO_ROL.ID_USUARIO%type) is
  SELECT R.ID_USUARIO_ROL
  FROM CARTCARD.IC_TA_USUARIO_ROL R
  where r.id_usuario = pidIsuario
  and r.id_rol = PEIDROL;

RecRol               curRol%rowtype;
begin
  PSCOD_ERROR:=0;
  begin
  SELECT T.ID_USUARIO
   INTO PSIDUSUARIO
  FROM CARTCARD.IC_USUARIO T
  WHERE UPPER(T.NOMBRE_USUARIO) = UPPER(PENOMUSUARIO);
  exception
  when no_data_found then
      PSIDUSUARIO:=0;
  end;
  IF PSIDUSUARIO=0 THEN
 CARTCARD.pkg_usuario.ic_sp_registra_usuario(PENOMUSUARIO,
                                     pecontrasenia,
                                     penombre,
                                     peapaterno,
                                     peamaterno,
                                     penumidentif,
                                     pecalle,
                                     pecolonia,
                                     pecp,
                                     petelefono,
                                     pecorreo,
                                     peusuariomod,
                                     psidusuario);
  END IF;
      open curRol(psidusuario);
      fetch curRol into RecRol;
      if curRol%NOTFOUND then
         RecRol:=null;
      end if;
      close curRol;
      IF RecRol.Id_Usuario_Rol IS NULL THEN
         CARTCARD.PKG_USUARIO.IC_SP_ADD_USUARIO_ROL(psidusuario ,'IUPICART' ,PEIDROL );
         PSCOD_ERROR:=1;
      ELSE
        PSCOD_ERROR:=0;   
      END IF;
        
   COMMIT;
  
EXCEPTION
 WHEN OTHERS THEN
   PSCOD_ERROR:=0;
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20100, 'IC_SP_ALTA_USUARIO_ROL (' || SQLCODE || '  ' || SQLERRM || ')');                                        
end IC_SP_ALTA_USUARIO_ROL;

 PROCEDURE IC_SP_ACTUALIZA_USUARIOREG(PEREGUSUARIO IN CARTCARD.IC_USUARIO%ROWTYPE) IS   
 BEGIN
   UPDATE CARTCARD.IC_USUARIO T
   SET T.NOMBRE = NVL(PEREGUSUARIO.Nombre,T.NOMBRE),
       T.NOMBRE_USUARIO = NVL(PEREGUSUARIO.NOMBRE_USUARIO,T.NOMBRE_USUARIO),
       T.APATERNO = NVL(PEREGUSUARIO.APATERNO,T.APATERNO),
       T.AMATERNO = NVL(PEREGUSUARIO.AMATERNO,T.AMATERNO),
       T.CALLE = NVL(PEREGUSUARIO.CALLE,T.CALLE),
       T.COLONIA = NVL(PEREGUSUARIO.COLONIA,T.COLONIA),
       T.CP = NVL(PEREGUSUARIO.CP,T.CP),
       T.TELEFONO = NVL(PEREGUSUARIO.TELEFONO,T.TELEFONO),
       T.CORREO_ELECTRONICO = NVL(PEREGUSUARIO.CORREO_ELECTRONICO,T.CORREO_ELECTRONICO),
       T.NUMERO_IDENTIFICACION = NVL(PEREGUSUARIO.NUMERO_IDENTIFICACION,T.NUMERO_IDENTIFICACION),
       T.USUARIO_MODIFICO = PEREGUSUARIO.USUARIO_MODIFICO,
       T.ULTIMA_MODIFICACION = SYSDATE
   WHERE T.ID_USUARIO = PEREGUSUARIO.ID_USUARIO;
  COMMIT;
EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en IC_SP_ACTUALIZA_USUARIOREG (' || SQLCODE || '  ' || SQLERRM || ')');   
 END;
end PKG_USUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY types AS

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTSTATUSTARJETA(PEidUsuario IN CARTCARD.IC_TARJETAS.ID_USUARIO%TYPE,
                                             PENUMEROTARJETA IN CARTCARD.IC_TARJETAS.NUMERO_TARJETA%TYPE,
                                             PEESTATUSTARJETA IN CARTCARD.IC_TARJETAS.ESTATUS%TYPE,
                                             PEESTATUSUSUARIO IN CARTCARD.IC_TARJETAS.ID_STATUS_TARJETA%TYPE,
                                             PSCOD_ERROR   out NUMBER,
                                             PSMsg_Error   out VARCHAR2,
                                             PSREFERENCIA  out CARTCARD.IC_USUARIO.REFERENCIA%TYPE) is
 Cursor curTarjeta is
  select t.id_tarjeta,t.id_usuario,t.token_tarjeta,t.fecha_expiracion ,c.referencia
  from cartcard.card c,cartcard.IC_TARJETAS t
  where c.cartcardid = t.id_tarjeta
  and c.usuarioid = t.id_usuario 
  and T.NUMERO_TARJETA = PENUMEROTARJETA
  and c.usuarioid = PEidUsuario;
 RecTarjeta   curTarjeta%rowtype;
  vlError      Exception;
BEGIN
   PSCOD_ERROR:=0;

      open curTarjeta;
      fetch curTarjeta into RecTarjeta;
      if curTarjeta%NOTFOUND then
         RecTarjeta:=null;
      end if;
      close curTarjeta;

      IF RecTarjeta.Id_Tarjeta is null THEN
           RAISE vlError;
      else
      update cartcard.IC_TARJETAS t
       set t.estatus = PEESTATUSTARJETA,
           t.id_status_tarjeta = PEESTATUSUSUARIO
      where t.id_tarjeta = RecTarjeta.Id_Tarjeta;

      update cartcard.card rd
       set rd.estadoconsultait = PEESTATUSTARJETA
      where rd.cartcardid = RecTarjeta.Id_Tarjeta;

      update cartcard.usuario c
       set c.estadodecuentaid = PEESTATUSUSUARIO -- activa
      where c.usuarioid = RecTarjeta.id_usuario;
      
      update cartcard.ic_usuario ic
       set ic.id_status_cuenta = PEESTATUSUSUARIO
      where ic.id_usuario = RecTarjeta.id_usuario;
      
      PSREFERENCIA:=RecTarjeta.referencia;
    end if;
   commit;
   PSCod_Error:=1;
EXCEPTION
  WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENUMEROTARJETA||' No existe';
  ROLLBACK;
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ACTUALIZAESTATUSTARJETA  (' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Actstatustarjetav2(PEidUsuario IN CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                                             PENUMEROTARJETA IN CARTCARD.ICN_TARJETA.CARDNUMBER%TYPE,
                                             PEESTATUSTARJETA IN CARTCARD.ICN_TARJETA.ID_STATUS_TARJETA%TYPE,
                                             PEESTATUSUSUARIO IN CARTCARD.ICN_CLIENTES.ESTATUS%TYPE,
                                             PSCOD_ERROR   OUT NUMBER,
                                             PSMsg_Error   OUT VARCHAR2,
                                             PSREFERENCIA  OUT CARTCARD.ICN_TARJETA.REFERENCIA%TYPE) IS
CURSOR curTarjeta IS
--ICN_TARJETA.PID = IC_TARJETAS.ID_TARJETA?
   SELECT u.ID_USUARIO, t.TOKEN, t.EXPIRATIONDATE, t.REFERENCIA
   FROM CARTCARD.ICN_TARJETA t INNER JOIN CARTCARD.ICN_CONTRATO c ON t.REFERENCIA = c.REFERENCIA
   INNER JOIN ICN_CLIENTES u ON c.ID_USUARIO = u.ID_USUARIO
   WHERE t.CARDNUMBER = PENUMEROTARJETA
   AND u.ID_USUARIO = PEidUsuario;
   RecTarjeta   curTarjeta%ROWTYPE;
   vlError      EXCEPTION;

BEGIN
   PSCOD_ERROR:=0;

      OPEN curTarjeta;
      FETCH curTarjeta INTO RecTarjeta;
      IF curTarjeta%NOTFOUND THEN
         RecTarjeta:=NULL;
      END IF;
      CLOSE curTarjeta;

      IF RecTarjeta.REFERENCIA IS NULL THEN
           RAISE vlError;
      ELSE
   UPDATE CARTCARD.ICN_TARJETA t
    SET t.ID_STATUS_TARJETA = PEESTATUSTARJETA
   WHERE t.REFERENCIA = RecTarjeta.REFERENCIA;

   UPDATE CARTCARD.ICN_CLIENTES u
    SET u.ESTATUS = PEESTATUSUSUARIO
   WHERE u.ESTATUS = RecTarjeta.ID_USUARIO;
      
      UPDATE CARTCARD.ICN_CONTRATO c
       SET c.ESTATUS = PEESTATUSUSUARIO
      WHERE c.ID_USUARIO = RecTarjeta.ID_USUARIO
    AND c.REFERENCIA = RecTarjeta.REFERENCIA;
      
      PSREFERENCIA:=RecTarjeta.referencia;
    END IF;
   COMMIT;
   PSCod_Error:=1;
EXCEPTION
  WHEN vlerror THEN
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENUMEROTARJETA||' No existe';
  ROLLBACK;
   WHEN OTHERS THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ACTUALIZAESTATUSTARJETA  (' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ACTUALIZACANCELACIONPENDIENTE (
   pidregistro   IN   INTEGER,
   pusuarioid    IN   INTEGER
)
IS
/* -------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZACANCELACIONPENDIENTE                                    */
/* Objetivo: Establece el estatus de la membrecia a cancelación pendiente.                */
/* Autor:    Equipo CartCard (Siscon)                                                     */
/* Fecha Creacion: Oct/2008                                                               */
/* Fecha Modificacion:                                                                    */
/* Ejemplo Ejecucion: exec ACTUALIZACANCELACIONPENDIENTE(<<idregistro>>,<<usuarioid>>)    */
/* -------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      UPDATE CARTCARD.cc_cancelaciones
         SET estadodecuentaid = 6,
             fechaautorizaadmin = SYSDATE
       WHERE idregistro = pidregistro;

      UPDATE CARTCARD.card
         SET bloqueo = 6
       WHERE usuarioid = pusuarioid AND bloqueo = 5;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END actualizacancelacionpendiente;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ACTUALIZACORREO  (p_usuarioid IN cartcard.icn_clientes.id_usuario%type,
                                             p_correo_e IN cartcard.icn_clientes.correo_electronico%type,
                          PSCod_Error  out  number,
                          PSMsg_Error     out  varchar2) IS
BEGIN
     update cartcard.icn_clientes cl
    set cl.correo_electronico =  p_correo_e ,
	    cl.nombre_usuario =  p_correo_e ,
        cl.ultima_modificacion = SYSDATE
    where cl.id_usuario = p_usuarioid;
   PSCod_Error := 1;
   PSMsg_Error := 'Actualizo el correo';

   COMMIT;
EXCEPTION
    WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al O  (' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZADATOSUSUARIO (
   pusuarioid              IN   INTEGER,
   pnombre                 IN   VARCHAR,
   papaterno               IN   VARCHAR,
   pamaterno               IN   VARCHAR,
   pcalle                  IN   VARCHAR,
   pcolonia                IN   VARCHAR,
   pmunicipioid            IN   INTEGER,
   pciudad                 IN   VARCHAR,
   pcodigopostal           IN   VARCHAR,
   ptelefono               IN   VARCHAR,
   pfax                    IN   VARCHAR,
   ppaisid                 IN   INTEGER,
   pestadoid               IN   INTEGER,
   pidentificacionid       IN   INTEGER,
   pnumeroidentificacion   IN   VARCHAR,
   pcelular                IN   VARCHAR
)
IS
/* ----------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZADATOSUSUARIO                                   */
/* Objetivo: Actualiza el registro de los datos del usuario.                   	 */
/* Autor:    Equipo CartCard (Siscon)                                            */
/* Fecha Creacion: Oct/2008                                                      */
/* Fecha Modificacion:                                                           */
/* Ejemplo Ejecucion: exec ACTUALIZADATOSUSUARIO(<<usuarioid>>,..,<<celular>>)   */
/* ----------------------------------------------------------------------------- */
   vnombre                 VARCHAR (200);
   vapaterno               VARCHAR (200);
   vamaterno               VARCHAR (200);
   vcalle                  VARCHAR (200);
   vcolonia                VARCHAR (200);
   vmunicipioid            INTEGER;
   vciudad                 VARCHAR (200);
   vcodigopostal           INTEGER;
   vtelefono               VARCHAR (200);
   vfax                    VARCHAR (200);
   vpaisid                 INTEGER;
   vestadoid               INTEGER;
   videntificacionid       INTEGER;
   vnumeroidentificacion   VARCHAR (200);
   vcelular                VARCHAR (200);
   vconsecutivo            INTEGER;
BEGIN
   BEGIN
      SELECT nombre, apaterno, amaterno, calle, colonia, municipioid,
             ciudad, codigopostal, telefono, fax, paisid, estadoid,
             identificacionid, numeroidentificacion, celular
        INTO vnombre, vapaterno, vamaterno, vcalle, vcolonia, vmunicipioid,
             vciudad, vcodigopostal, vtelefono, vfax, vpaisid, vestadoid,
             videntificacionid, vnumeroidentificacion, vcelular
        FROM CARTCARD.usuario
       WHERE usuarioid = pusuarioid;

      SELECT MAX (consecutivo)
        INTO vconsecutivo
        FROM CARTCARD.hstusuario
       WHERE hstusuarioid = pusuarioid;

      IF (vconsecutivo > 0)
      THEN
         BEGIN
            vconsecutivo := vconsecutivo + 1;
         END;
      ELSE
         BEGIN
            vconsecutivo := 1;
         END;
      END IF;

      INSERT INTO CARTCARD.hstusuario
                  (hstusuarioid, consecutivo, nombre, apaterno, amaterno,
                   calle, colonia, municipioid, ciudad, codigopostal,
                   telefono, fax, paisid, estadoid, identificacionid,
                   numeroidentificacion, fechasys, celular
                  )
           VALUES (pusuarioid, vconsecutivo, vnombre, vapaterno, vamaterno,
                   vcalle, vcolonia, vmunicipioid, vciudad, vcodigopostal,
                   vtelefono, vfax, vpaisid, vestadoid, videntificacionid,
                   vnumeroidentificacion, SYSDATE, vcelular
                  );

      UPDATE CARTCARD.usuario
         SET calle = pcalle,
             colonia = pcolonia,
             municipioid = pmunicipioid,
             ciudad = pciudad,
             codigopostal = pcodigopostal,
             telefono = ptelefono,
             fax = pfax,
             paisid = ppaisid,
             estadoid = pestadoid,
             fechasys = SYSDATE,
             descripcionmovimiento = 'Actualización de datos',
             celular = pcelular
       WHERE usuarioid = pusuarioid;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END actualizadatosusuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZADOCUMENTOUSR (
   p_iddocumento       IN   INTEGER,
   p_usuarioid         IN   INTEGER,
   p_documento         IN   BLOB,
   p_idtipodocumento   IN   INTEGER,
   p_nombredocumento   IN   VARCHAR2
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGADOCUMENTOUSR                                          */
/* Objetivo: Agrega un documento con los datos especificados.                        */
/* Autor:    Equipo CartCard (Siscon)                                                */
/* Fecha Creacion: Oct/2008                                                          */
/* Fecha Modificacion:                                                               */
/* Ejemplo Ejecucion: exec AGREGADOCUMENTOUSR(<<iddocumento>>,..<<nombredocumento>>) */
/* --------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      UPDATE CARTCARD.cc_documentosusr
         SET documento = p_documento,
             idtipodocumento = p_idtipodocumento,
             docaceptado = 0,
             nombredocumento = p_nombredocumento
       WHERE usuarioid = p_usuarioid AND iddocumento = p_iddocumento;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END actualizadocumentousr;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ACTUALIZAESTADOCONSULTA (pusuarioid IN INTEGER)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZAESTADOCONSULTA                                     */
/* Objetivo: Actualiza el estado de cuenta del usuario a activada.                   */
/* Autor:    Equipo CartCard (Siscon)                                                */
/* Fecha Creacion: Oct/2008                                                          */
/* Fecha Modificacion:                                                               */
/* Ejemplo Ejecucion: exec ACTUALIZAESTADOCONSULTA(<<usuarioid>>)                 	 */
/* --------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      UPDATE CARTCARD.card
         SET estadoconsultait = 1
       WHERE usuarioid = pusuarioid
         AND bloqueo IN (0,1,4);
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END actualizaestadoconsulta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZAESTADOCORE (
   P_USUARIOID       IN       CARTCARD.USUARIO.USUARIOID%TYPE,
   P_NOMBRE          OUT      CARTCARD.USUARIO.NOMBRE%TYPE,
   P_APELLIDOS       OUT      VARCHAR2,
   P_NOMBREUSUARIO   OUT      CARTCARD.USUARIO.NOMBREUSUARIO%TYPE,
   P_CONTRASENIA     OUT      CARTCARD.USUARIO.CONTRASENIA%TYPE,
   P_MAIL            OUT      CARTCARD.USUARIO.MAIL%TYPE,
   P_RESULTADO       OUT      INTEGER
)
IS
/* ------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: ACTUALIZAESTADOCORE                                      */
/* OBJETIVO: ACTUALIZA EL ESTADO DE LA CUENTA DEL USUARIO POR SU ID               */
/* AUTOR:    EQUIPO IUPICARD                                                      */
/* FECHA CREACION: JUL/2010                                                       */
/* FECHA MODIFICACION:                                                            */
/* EJEMPLO EJECUCION: EXEC ACTUALIZAESTADOCORE(<P_USUARIOID>,..,<:P_RESULTADO>)   */
/* ------------------------------------------------------------------------------ */
BEGIN
   P_RESULTADO := 1;
   BEGIN
      UPDATE CARTCARD.USUARIO USU
         SET USU.ESTADODECUENTAID = 1
       WHERE USU.USUARIOID = P_USUARIOID;

      SELECT USU.MAIL, USU.NOMBRE, USU.CONTRASENIA, USU.NOMBREUSUARIO,
             USU.APATERNO || ' ' || USU.AMATERNO
        INTO P_MAIL, P_NOMBRE, P_CONTRASENIA, P_NOMBREUSUARIO,
             P_APELLIDOS
        FROM CARTCARD.USUARIO USU
       WHERE USUARIOID = P_USUARIOID;

      UPDATE CARTCARD.USUARIO USU
         SET USU.CONTRASENIA = ' '
       WHERE USU.USUARIOID = P_USUARIOID;
   END;

   COMMIT;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := 0;
      ROLLBACK;

END ACTUALIZAESTADOCORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZAESTADOCUENTA (
   p_nombreusuario   IN   VARCHAR2,
   p_estadocuenta    IN   INTEGER
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZAESTADOCUENTA                                     	 */
/* Objetivo: Actualiza el estado de cuenta del usuario.                   			 */
/* Autor:    Equipo CartCard (Siscon)                                                */
/* Fecha Creacion: Oct/2008                                                          */
/* Fecha Modificacion:                                                               */
/* Ejemplo Ejecucion: exec ACTUALIZAESTADOCUENTA(<<nombreusuario>>,<<estadocuenta>>) */
/* --------------------------------------------------------------------------------- */
BEGIN
   UPDATE CARTCARD.usuario
      SET estadodecuentaid = p_estadocuenta
    WHERE nombreusuario = p_nombreusuario;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END actualizaestadocuenta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZAMAILUSUARIO (
   pusuarioid        IN       INTEGER,
   pcorreonuevo      IN       VARCHAR,
   pcorreoanterior   IN       VARCHAR,
   pmensaje          OUT      VARCHAR
)
IS
/* --------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZAMAILUSUARIO                                                                       */
/* Objetivo: Actualiza el email del usuario y registra el cambio en el historico.                                   */
/* Autor:    Equipo CartCard (Siscon)                                                                               */
/* Fecha Creacion: Oct/2008                                                                                         */
/* Fecha Modificacion:                                                                                              */
/* Ejemplo Ejecucion: exec ACTUALIZAMAILUSUARIO(<<pusuarioid>>,<<pcorreonuevo>>,<<pcorreoanterior>>,<<:pmensaje>>) */
/* --------------------------------------------------------------------------------------------------------------- */
   vexistemail    INTEGER;
   vconsecutivo   INTEGER;
BEGIN
   BEGIN
      SELECT COUNT (mail)
        INTO vexistemail
        FROM CARTCARD.usuario
       WHERE usuarioid = pusuarioid AND mail = pcorreoanterior;

      IF (vexistemail > 0)
      THEN
         SELECT COUNT (mail)
           INTO vexistemail
           FROM usuario
          WHERE mail = pcorreonuevo;

         IF vexistemail = 0
         THEN
            UPDATE CARTCARD.usuario
               SET mail = pcorreonuevo,
                   nombreusuario = pcorreonuevo,
                   fechasys = SYSDATE,
                   descripcionmovimiento = 'Actualizacion de Mail'
             WHERE usuarioid = pusuarioid;

            pmensaje := '';

            SELECT MAX (consecutivo)
              INTO vconsecutivo
              FROM CARTCARD.hstusuario
             WHERE hstusuarioid = pusuarioid;

            IF (vconsecutivo > 0)
            THEN
               vconsecutivo := vconsecutivo + 1;
            ELSE
               vconsecutivo := 1;
            END IF;

            INSERT INTO CARTCARD.hstusuario
                        (hstusuarioid, consecutivo, mail, fechasys
                        )
                 VALUES (pusuarioid, vconsecutivo, pcorreoanterior, SYSDATE
                        );

            pmensaje := 'mail.registrado';
         ELSE
            pmensaje := 'error.mail.registrado';
         END IF;
      ELSE
         pmensaje := 'error.mailincorrecto';
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END actualizamailusuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZAMEMBRESIA(
   PEIdMembresia  in CARTCARD.card.MEMBRECIAID%type,
   PEfechaalta    IN   VARCHAR2,
   PEusuarioid    IN CARTCARD.card.USUARIOID%type) IS
BEGIN
      UPDATE CARTCARD.card
         SET fechaalta = TO_DATE (PEfechaalta, 'DDmmYYYY-HH24:MI:SS'),
             bloqueo = 0,
             fechasys = SYSDATE,
             membreciaid =PEIdMembresia
       WHERE usuarioid = PEusuarioid
       AND bloqueo in (0,1);

   COMMIT;
EXCEPTION
     WHEN OTHERS THEN
	   ROLLBACK;
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en ACTUALIZAMEMBRESIA(' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZANROIDENTIFICACION(
   p_nombreusuario      IN  VARCHAR2,
   p_identificacionid   IN  INTEGER,
   p_nroidentificacion  IN  VARCHAR2
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZANROIDENTIFICACION                                          */
/* Objetivo: Actualiza el estado de cuenta del usuario.                                */
/* Autor:    Equipo CartCard (Siscon)                                                */
/* Fecha Creacion: Abril/2008                                                          */
/* Fecha Modificacion:                                                               */
/* Ejemplo Ejecucion: exec ACTUALIZANROIDENTIFICACION(<<nombreusuario>>,<<estadocuenta>>) */
/* --------------------------------------------------------------------------------- */
BEGIN
   UPDATE CARTCARD.USUARIO
      SET identificacionid = p_identificacionid, numeroidentificacion=p_nroidentificacion
    WHERE nombreusuario = p_nombreusuario;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END ACTUALIZANROIDENTIFICACION;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZASOLICITUDPLASTICO (
   p_numerosolicitud    IN   INTEGER,
   p_cartcardid         IN   INTEGER,
   p_estadodecuentaid   IN   INTEGER
)
IS
/* ------------------------------------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: ACTUALIZASOLICITUDPLASTICO                                                            	*/
/* Objetivo: Actualiza el estatus del plastico solicitado.                                                     	*/
/* Autor:    Equipo CartCard (Siscon)                                                                          	*/
/* Fecha Creacion: Nov/2008                                                                                    	*/
/* Fecha Modificacion:                                                                                         	*/
/* Ejemplo Ejecucion: exec ACTUALIZASOLICITUDPLASTICO(<<numerosolicitud>>,<<cartcardid>>,<<estadodecuentaid>>)  */
/* ------------------------------------------------------------------------------------------------------------ */
BEGIN
   UPDATE CARTCARD.cc_solicitudplastico
      SET estadodecuentaid = p_estadodecuentaid,
          fechaautorizaimpresion = SYSDATE
    WHERE numerosolicitud = p_numerosolicitud AND cartcardid = p_cartcardid;
END actualizasolicitudplastico;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ACTUALIZASTATUS (
   pusuarioid       IN       INTEGER,
   pnombre          OUT      VARCHAR2,
   papellidos       OUT      VARCHAR2,
   pnombreusuario   OUT      VARCHAR2,
   pcontrasenia     OUT      VARCHAR2,
   pmail            OUT      VARCHAR2
)
IS
/* ----------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZASTATUS                                               */
/* Objetivo: Actualiza el estatus del plastico solicitado.                             */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Nov/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec ACTUALIZASTATUS(<<pusuarioid>>,<<:pnombre>>,..,<<pmail>>)   */
/* ----------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      UPDATE CARTCARD.usuario
         SET estadodecuentaid = 1
       WHERE usuarioid = pusuarioid;

      SELECT mail, nombre, contrasenia, nombreusuario,
             apaterno || ' ' || amaterno
        INTO pmail, pnombre, pcontrasenia, pnombreusuario,
             papellidos
        FROM CARTCARD.usuario
       WHERE usuarioid = pusuarioid;

      --UPDATE CARTCARD.usuario
       --  SET contrasenia = ' '
       --WHERE usuarioid = pusuarioid;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END actualizastatus;
/

SHOW ERRORS;


CREATE OR REPLACE procedure ActualizaTarjetaC3(PENumTarjeta    in cartcard.icn_tarjeta.cardnumber%type,
                              PEContraena     in cartcard.icn_clientes.contrasenia%type,
                              PENombreUsuario in cartcard.icn_clientes.nombre_usuario%type,
                              PENombre        in cartcard.icn_clientes.nombre%type,
                              PEApaterno      in cartcard.icn_clientes.apaterno%type,
                              PEAmaterno      in cartcard.icn_clientes.amaterno%type,
                              PEFnacimiento   in varchar2,
                              PECalle         in cartcard.icn_clientes.calle%type,
                              PEColonia       in cartcard.icn_clientes.colonia%type,
                              PECiudad        in cartcard.icn_clientes.ciudad%type,
                              PECP            in cartcard.icn_clientes.cp%type,
                              PEMunId         in cartcard.icn_clientes.id_municipio%type,
                              PEEdoId         in cartcard.icn_clientes.id_estado%type,
                              PEPaisId        in cartcard.icn_clientes.id_pais%type,
                              PETelefono      in cartcard.icn_clientes.telefono%type,
                              PECell          in cartcard.icn_clientes.celular%type,
                              PENIdentifica   in cartcard.icn_clientes.numero_identificacion%type,
                              PePregunta1     in cartcard.preguntasusuario.preguntaestandar1id%type,
                              PeRespuesta1    in cartcard.preguntasusuario.respuesta1%type,
                              PePregunta2     in cartcard.preguntasusuario.preguntaestandar2id%type,
                              PeRespuesta2    in cartcard.preguntasusuario.respuesta2%type,
                              PEDuracionMem   in cartcard.membrecia.duracion%type,
                              PEUsrModifica   in cartcard.icn_clientes.usuario_modifico%type,
                              PSIdUsuario     out cartcard.icn_clientes.id_usuario%type,
                              PSToken         out cartcard.icn_tarjeta.token%type,
                              PSFechaVenc     out varchar2,
                              PSReferencia    out cartcard.icn_contrato.referencia%type,
                              PSSuite         out cartcard.icn_contrato.suite%type,
                              PSCod_Error     out  number,
                              PSMsg_Error     out  varchar2) is
 Cursor curTarjeta is
  select c.id_usuario,t.token,t.pidexpiration,t.referencia,c.suite
  from cartcard.icn_tarjeta t,cartcard.icn_contrato c
  where t.referencia = c.referencia
  and T.Cardnumber= PENumTarjeta;

 Cursor curMembrecia is
    SELECT MM.MEMBRECIAID
   FROM CARTCARD.MEMBRECIA MM
   WHERE MM.DURACION = PEDuracionMem;

 RecTarjeta   curTarjeta%rowtype;
 RecMembrecia curMembrecia%rowtype;
 vlError      Exception;
 vlError2     Exception;
begin
 PSCod_Error:=0;

      open curTarjeta;
      fetch curTarjeta into RecTarjeta;
      if curTarjeta%NOTFOUND then
         RecTarjeta:=null;
      end if;
      close curTarjeta;

      open curMembrecia;
      fetch curMembrecia into RecMembrecia;
      if curMembrecia%NOTFOUND then
         close curMembrecia;
         raise vlError2;
      end if;
      close curMembrecia;

        IF RecTarjeta.Token is null THEN
           RAISE vlError;
        else
        update cartcard.icn_clientes u
        set u.contrasenia =PEContraena,u.nombre_usuario =PENombreUsuario,u.nombre =PENombre,u.apaterno =PEApaterno,u.amaterno =PEAmaterno,
            u.fecha_nacimiento =to_date(PEFnacimiento,'dd/mm/yyyy'),u.calle = PECalle,u.colonia =PEColonia,u.ciudad =PECiudad,u.cp =PECP,
            u.id_municipio =PEMunId,u.id_estado =PEEdoId,u.id_pais =PEPaisId,u.telefono =PETelefono,u.celular =PECell,u.numero_identificacion =PENIdentifica,
            U.Correo_Electronico = PENombreUsuario,u.usuario_modifico = nvl(PEUsrModifica,u.usuario_modifico),u.ultima_modificacion = sysdate
        where u.id_usuario = RecTarjeta.Id_Usuario;

        update CARTCARD.preguntasusuario p
           set preguntaestandar1id = PePregunta1,
               respuesta1 = PeRespuesta1,
               preguntaestandar2id = PePregunta2,
               respuesta2 =  PeRespuesta2
        where p.usuarioid = RecTarjeta.Id_Usuario;

      update cartcard.icn_tarjeta t
       set t.id_status_tarjeta = 1,
           t.fecha_membrecia=sysdate
      where t.referencia =  RecTarjeta.referencia;

      PSIdUsuario:=RecTarjeta.Id_Usuario;
      PSToken:=RecTarjeta.Token;
      PSReferencia:=RecTarjeta.referencia;
      PSFechaVenc:=to_char(RecTarjeta.Pidexpiration,'ddMMYYYY');
      PSSuite:=RecTarjeta.suite;
   end if;
    commit;
    PSCod_Error:=1;
EXCEPTION
   WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENumTarjeta||' No existe';
  ROLLBACK;
   WHEN vlerror2 then
     PSCod_Error:=0;
     PSMsg_Error:='La duracion membrecia :'||PEDuracionMem||' No existe';
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ActualizaTarjetaIupiCard  (' || PSMsg_Error||')');
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
--     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ActualizaTarjetaIupiCard  (' || SQLCODE || '  ' || SQLERRM || ')');
 end;
/

SHOW ERRORS;


CREATE OR REPLACE procedure ActualizaTarjetaIupiCard(PEIDusuario in cartcard.usuario.usuarioid%type,
                                          PENumTarjeta    in cartcard.ic_tarjetas.numero_tarjeta%type,
                                          PEContraena     in cartcard.usuario.contrasenia%type,
                                          PENombreUsuario in cartcard.usuario.nombreusuario%type,
                                          PENombre        in cartcard.usuario.nombre%type,
                                          PEApaterno      in cartcard.usuario.apaterno%type,
                                          PEAmaterno      in cartcard.usuario.amaterno%type,
                                          PEFnacimiento   in varchar2,
                                          PECalle         in cartcard.usuario.calle%type,
                                          PEColonia       in cartcard.usuario.colonia%type,
                                          PECiudad        in cartcard.usuario.ciudad%type,
                                          PECP            in cartcard.usuario.codigopostal%type,
                                          PEMunId         in cartcard.usuario.municipioid%type,
                                          PEEdoId         in cartcard.usuario.estadoid%type,
                                          PEPaisId        in cartcard.usuario.paisid%type,
                                          PETelefono      in cartcard.usuario.telefono%type,
                                          PECell          in cartcard.usuario.celular%type,
                                          PENIdentifica   in cartcard.usuario.numeroidentificacion%type,
                                          PENews          in cartcard.usuario.news_letter%type,
                                          PePregunta1     in cartcard.preguntasusuario.preguntaestandar1id%type,
                                          PeRespuesta1    in cartcard.preguntasusuario.respuesta1%type,
                                          PePregunta2     in cartcard.preguntasusuario.preguntaestandar2id%type,
                                          PeRespuesta2    in cartcard.preguntasusuario.respuesta2%type,  
                                          PEDuracionMem   in cartcard.membrecia.duracion%type,                                        
                                          PEUsrModifica   in cartcard.ic_usuario.usuario_modifico%type,
                                          PSIdUsuario     out cartcard.ic_usuario.id_usuario%type,
                                          PSToken         out cartcard.ic_tarjetas.token_tarjeta%type,
                                          PSFechaVenc     out varchar2,
										                      PSReferencia    out cartcard.card.referencia%type,
                                          PSSuite         out cartcard.ic_suite.id_suite%type,
                                          PSCod_Error     out  number,
                                          PSMsg_Error     out  varchar2) is
 Cursor curTarjeta is
  select t.id_tarjeta,t.id_usuario,t.token_tarjeta,t.fecha_expiracion ,c.referencia
  from cartcard.card c,cartcard.IC_TARJETAS t
  where c.cartcardid = t.id_tarjeta
  and c.usuarioid = t.id_usuario 
  and T.NUMERO_TARJETA = PENumTarjeta
  and c.usuarioid = PEIDusuario;
 
 Cursor curMembrecia is
    SELECT MM.MEMBRECIAID
   FROM CARTCARD.MEMBRECIA MM 
   WHERE MM.DURACION = PEDuracionMem;

 Cursor curSuite(PIdUsuario in cartcard.ic_usuario.id_usuario%type) is
SELECT a.id_suite FROM CARTCARD.IC_SUITE A WHERE A.ID_USUARIO= PIdUsuario;
 RecTarjeta   curTarjeta%rowtype;
 RecMembrecia curMembrecia%rowtype;
 RecSuite     curSuite%rowtype;
 vlError      Exception;
 vlError2     Exception;
begin
 PSCod_Error:=0;

      open curTarjeta;
      fetch curTarjeta into RecTarjeta;
      if curTarjeta%NOTFOUND then
         RecTarjeta:=null;
      end if;
      close curTarjeta;

      open curMembrecia;
      fetch curMembrecia into RecMembrecia;
      if curMembrecia%NOTFOUND then
         close curMembrecia;
         raise vlError2;
      end if;
      close curMembrecia;

      open curSuite(RecTarjeta.Id_Usuario);
      fetch curSuite into RecSuite;
      if curSuite%NOTFOUND then
         RecSuite:=null;
      end if;
      close curSuite;

        IF RecTarjeta.Id_Tarjeta is null THEN
           RAISE vlError;
        else
        update cartcard.usuario u
        set u.contrasenia =PEContraena,u.nombreusuario =PENombreUsuario,u.nombre =PENombre,u.apaterno =PEApaterno,u.amaterno =PEAmaterno,
            u.fechanacimiento =to_date(PEFnacimiento,'dd/mm/yyyy'),u.calle = PECalle,u.colonia =PEColonia,u.ciudad =PECiudad,u.codigopostal =PECP,
            u.municipioid =PEMunId,u.estadoid =PEEdoId,u.paisid =PEPaisId,u.telefono =PETelefono,u.celular =PECell,u.numeroidentificacion =PENIdentifica,
            u.news_letter =PENews,U.MAIL = PENombreUsuario
        where u.usuarioid = RecTarjeta.Id_Usuario;
        UPDATE cartcard.Ic_Usuario iu
        set iu.contrasenia =PEContraena,iu.nombre_usuario =PENombreUsuario,iu.nombre =PENombre,iu.apaterno =PEApaterno,iu.amaterno =PEAmaterno,
            iu.fecha_nacimiento =to_date(PEFnacimiento,'dd/mm/yyyy'),iu.calle = PECalle,iu.colonia =PEColonia,iu.ciudad =PECiudad,iu.cp =PECP,
            iu.id_municipio =PEMunId,iu.id_estado =PEEdoId,iu.id_pais =PEPaisId,iu.telefono =PETelefono,iu.celular =PECell,iu.numero_identificacion =PENIdentifica,
            iu.newsletter =PENews,iu.usuario_modifico = PEUsrModifica,iu.ultima_modificacion=sysdate,
            IU.CORREO_ELECTRONICO = PENombreUsuario
        where iu.id_usuario = RecTarjeta.Id_Usuario;

        update CARTCARD.preguntasusuario p
           set preguntaestandar1id = PePregunta1,
               respuesta1 = PeRespuesta1,
               preguntaestandar2id = PePregunta2,
               respuesta2 =  PeRespuesta2
        where p.usuarioid = RecTarjeta.Id_Usuario;          

        update CARTCARD.Card c
        set c.membreciaid = RecMembrecia.Membreciaid,
            c.bloqueo = 0 -- no ha pagado membrecia
        where c.CARTCARDID = RecTarjeta.Id_Tarjeta
        and c.USUARIOID  = RecTarjeta.Id_Usuario;           
           
      update cartcard.IC_TARJETAS t
       set t.estatus = 3 -- activa
      where t.id_tarjeta = RecTarjeta.Id_Tarjeta;
       
      PSIdUsuario:=RecTarjeta.Id_Usuario;        
      PSToken:=RecTarjeta.token_tarjeta;
	  PSReferencia:=RecTarjeta.referencia;
      PSFechaVenc:=to_char(RecTarjeta.fecha_expiracion,'ddMMYYYY');
      PSSuite:=RecSuite.id_suite;
   end if;
    commit;
    PSCod_Error:=1;
EXCEPTION
   WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENumTarjeta||' No existe';
  ROLLBACK;
   WHEN vlerror2 then
     PSCod_Error:=0;
     PSMsg_Error:='La duracion membrecia :'||PEDuracionMem||' No existe';
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ActualizaTarjetaIupiCard  (' || PSMsg_Error||')');  
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ActualizaTarjetaIupiCard  (' || SQLCODE || '  ' || SQLERRM || ')');
end ActualizaTarjetaIupiCard;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Actualizatarjetaiupicardv2(PEIDusuario IN cartcard.ICN_CLIENTES.ID_USUARIO%TYPE,
                                          PENumTarjeta    IN cartcard.ICN_TARJETA.CARDNUMBER%TYPE,
                                          PEContraena     IN cartcard.ICN_CLIENTES.contrasenia%TYPE,
                                          PENombreUsuario IN cartcard.ICN_CLIENTES.nombre_usuario%TYPE,
                                          PENombre        IN cartcard.ICN_CLIENTES.nombre%TYPE,
                                          PEApaterno      IN cartcard.ICN_CLIENTES.apaterno%TYPE,
                                          PEAmaterno      IN cartcard.ICN_CLIENTES.amaterno%TYPE,
                                          PEFnacimiento   IN VARCHAR2,
                                          PECalle         IN cartcard.ICN_CLIENTES.calle%TYPE,
                                          PEColonia       IN cartcard.ICN_CLIENTES.colonia%TYPE,
                                          PECiudad        IN cartcard.ICN_CLIENTES.ciudad%TYPE,
                                          PECP            IN cartcard.ICN_CLIENTES.cp%TYPE,
                                          PEMunId         IN cartcard.ICN_CLIENTES.id_municipio%TYPE,
                                          PEEdoId         IN cartcard.ICN_CLIENTES.id_estado%TYPE,
                                          PEPaisId        IN cartcard.ICN_CLIENTES.id_pais%TYPE,
                                          PETelefono      IN cartcard.ICN_CLIENTES.telefono%TYPE,
                                          PECell          IN cartcard.ICN_CLIENTES.celular%TYPE,
                                          PENIdentifica   IN cartcard.ICN_CLIENTES.numero_identificacion%TYPE,
                                          PePregunta1     IN cartcard.PREGUNTASUSUARIO.preguntaestandar1id%TYPE,
                                          PeRespuesta1    IN cartcard.PREGUNTASUSUARIO.respuesta1%TYPE,
                                          PePregunta2     IN cartcard.PREGUNTASUSUARIO.preguntaestandar2id%TYPE,
                                          PeRespuesta2    IN cartcard.PREGUNTASUSUARIO.respuesta2%TYPE,
                                          PEDuracionMem   IN cartcard.MEMBRECIA.duracion%TYPE,
                                          PEUsrModifica   IN cartcard.ICN_CLIENTES.usuario_modifico%TYPE,
                                          PSIdUsuario     OUT cartcard.ICN_CLIENTES.id_usuario%TYPE,
                                          PSToken         OUT cartcard.ICN_TARJETA.TOKEN%TYPE,
                                          PSFechaVenc     OUT VARCHAR2,
                                          PSReferencia    OUT cartcard.ICN_TARJETA.referencia%TYPE,
                                          PSSuite         OUT cartcard.IC_SUITE.id_suite%TYPE,
                                          PSCod_Error     OUT  NUMBER,
                                          PSMsg_Error     OUT  VARCHAR2) IS

CURSOR curTarjeta IS
   SELECT c.id_usuario, t.token, t.expirationdate, t.referencia
     FROM cartcard.ICN_CONTRATO c INNER JOIN cartcard.ICN_TARJETA t
       ON c.REFERENCIA = t.REFERENCIA
    WHERE t.CARDNUMBER = PENumTarjeta
      AND c.ID_USUARIO = PEIDusuario;

CURSOR curMembrecia IS
   SELECT MM.MEMBRECIAID
     FROM CARTCARD.MEMBRECIA MM 
    WHERE MM.DURACION = PEDuracionMem;

CURSOR curSuite(PIdUsuario IN cartcard.IC_USUARIO.id_usuario%TYPE) IS
   SELECT a.id_suite FROM CARTCARD.IC_SUITE A WHERE A.ID_USUARIO= PIdUsuario;

   RecTarjeta     curTarjeta%ROWTYPE;
   RecMembrecia   curMembrecia%ROWTYPE;
   RecSuite       curSuite%ROWTYPE;
   vlError        EXCEPTION;
   vlError2       EXCEPTION;
BEGIN
   PSCod_Error:=0;

   OPEN curTarjeta;
      FETCH curTarjeta INTO RecTarjeta;
      IF curTarjeta%NOTFOUND THEN
         RecTarjeta:=NULL;
      END IF;
   CLOSE curTarjeta;

   OPEN curMembrecia;
      FETCH curMembrecia INTO RecMembrecia;
      IF curMembrecia%NOTFOUND THEN
         CLOSE curMembrecia;
         RAISE vlError2;
      END IF;
   CLOSE curMembrecia;

   OPEN curSuite(RecTarjeta.Id_Usuario);
      FETCH curSuite INTO RecSuite;
      IF curSuite%NOTFOUND THEN
         RecSuite:=NULL;
      END IF;
   CLOSE curSuite;

   UPDATE cartcard.ICN_CLIENTES u
      SET u.contrasenia = PEContraena
        , u.nombre_usuario = PENombreUsuario
        , u.nombre = PENombre
        , u.apaterno = PEApaterno
        , u.amaterno = PEAmaterno
        , u.fecha_nacimiento = TO_DATE(PEFnacimiento,'dd/mm/yyyy')
        , u.calle = PECalle
        , u.colonia = PEColonia
        , u.ciudad = PECiudad
        , u.cp = PECP
        , u.id_municipio = PEMunId
        , u.id_estado = PEEdoId
        , u.id_pais = PEPaisId
        , u.telefono = PETelefono
        , u.celular = PECell
        , u.numero_identificacion = PENIdentifica
        , U.CORREO_ELECTRONICO = PENombreUsuario
        , u.usuario_modifico = PEUsrModifica
        , u.ultima_modificacion=SYSDATE
    WHERE u.ID_USUARIO = RecTarjeta.Id_Usuario;

   UPDATE CARTCARD.PREGUNTASUSUARIO p
      SET preguntaestandar1id = PePregunta1
        , respuesta1 = PeRespuesta1
        , preguntaestandar2id = PePregunta2
        , respuesta2 =  PeRespuesta2
    WHERE p.usuarioid = RecTarjeta.Id_Usuario;          

   UPDATE CARTCARD.ICN_TARJETA t
      SET t.ID_TIPO_MEMBRESIA = RecMembrecia.Membreciaid
        , t.ID_STATUS_TARJETA = 0 -- no ha pagado membrecia
    WHERE t.REFERENCIA = (SELECT REFERENCIA
                            FROM CARTCARD.ICN_CONTRATO
                           WHERE ID_USUARIO = RecTarjeta.Id_Usuario);           
           
   PSIdUsuario:=RecTarjeta.Id_Usuario;        
   PSToken:=RecTarjeta.token;
   PSReferencia:=RecTarjeta.referencia;
   PSFechaVenc:=TO_CHAR(RecTarjeta.EXPIRATIONDATE,'ddMMYYYY');
   PSSuite:=RecSuite.id_suite;


   COMMIT;
   PSCod_Error:=1;
   
EXCEPTION
   WHEN vlerror THEN
      PSCod_Error:=0;
      PSMsg_Error:='El Numero de Tarjeta:'||PENumTarjeta||' No existe';
      ROLLBACK;
   WHEN vlerror2 THEN
      PSCod_Error:=0;
      PSMsg_Error:='La duracion membrecia :'||PEDuracionMem||' No existe';
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ActualizaTarjetaIupiCard  (' || PSMsg_Error||')');  
   WHEN OTHERS THEN
      PSCod_Error:=0;
      PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al ActualizaTarjetaIupiCard  (' || SQLCODE || '  ' || SQLERRM || ')');
END Actualizatarjetaiupicardv2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE actualizaTipoMembresia (p_referencia    IN cartcard.icn_tarjeta.referencia%type,
                                                    p_tipoMembresia IN cartcard.icn_tarjeta.id_tipo_membresia%type,
                                                    p_resultado     OUT NUMBER) is
BEGIN
    update cartcard.icn_tarjeta t
    set t.id_tipo_membresia = p_tipoMembresia
    where referencia = p_referencia;

    COMMIT;
       p_resultado := 1;
EXCEPTION
   WHEN OTHERS THEN
      p_resultado := 0;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CARTCARD.CAT_CANAL(' || SQLCODE|| ''|| SQLERRM || ')');
END actualizaTipoMembresia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ACTUALIZAVENCTARJETASCORE (
   pmesvencimiento    IN   INTEGER,
   paniovencimiento   IN   INTEGER,
   pcartcardid        IN   INTEGER
)
IS
/* --------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZAVENCIMIENTOTARJETAS                                                  			   */
/* Objetivo: Actualiza la fecha de vencimiento.                  									   			   */
/* Autor:    Equipo CartCard (Siscon)                                                    						   */
/* Fecha Creacion: Sep/2008                                                              						   */
/* Fecha Modificacion:                                                                   						   */
/* Ejemplo Ejecucion: exec ACTUALIZAVENCIMIENTOTARJETAS(<<pmesvencimiento>>,<<paniovencimiento>>,<<pcartcardid>>)  */
/* --------------------------------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      UPDATE PASARELBAZ.pcc_tarjetas
         SET mesexpira = pmesvencimiento,
             añoexpira = paniovencimiento
       WHERE cartcardid = pcartcardid
         AND idtipotarjeta = 3
         AND idestadotarjeta = 1;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END ACTUALIZAVENCTARJETASCORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ACTUALIZAVENTANILLA (
   p_referencia           IN       VARCHAR2,
   p_usuariodepositante   IN       VARCHAR2,
   p_sucursalid           IN       INTEGER,
   p_operadorid           IN       INTEGER,
   p_fechaoperacion       IN       VARCHAR2,
   p_codigoresultado      IN       VARCHAR2,
   p_mensajeresultado     IN       VARCHAR2,
   p_ip                   IN       VARCHAR2,
   p_mensajeoperacion     IN       VARCHAR2,
   p_operacionid          OUT      INTEGER
)
IS
/* ----------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZAVENTANILLA                                               				 */
/* Objetivo: Agrega un registro como operación en ventanilla.                             				 */
/* Autor:    Equipo CartCard (Siscon)                                                  					 */
/* Fecha Creacion: Nov/2008                                                            					 */
/* Fecha Modificacion:                                                                 					 */
/* Ejemplo Ejecucion: exec ACTUALIZAVENTANILLA(<<referencia>>,..,<<mensajeoperacion>>,<<:operacionid>>)  */
/* ----------------------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      SELECT CARTCARD.operacionventanillaseq.NEXTVAL
        INTO p_operacionid
        FROM DUAL;

      INSERT INTO CARTCARD.operacionventanilla
                  (operacionid, nconsecutivo, referencia, usuariodepositante,
                   sucursalid, operadorid,
                   fechaoperacion,
                   codigoresultado, mensajeresultado, ip, fechasys,
                   mensajeoperacion
                  )
           VALUES (p_operacionid, 0, p_referencia, p_usuariodepositante,
                   p_sucursalid, p_operadorid,
                   TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                   p_codigoresultado, p_mensajeresultado, p_ip, SYSDATE,
                   p_mensajeoperacion
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_operacionid := 0;
      ROLLBACK;
END actualizaventanilla;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ACTUALIZA_PREGUNTA(pusuarioID IN cartcard.preguntasusuario.usuarioid%type,
                           pidPregunta1 in cartcard.preguntasusuario.preguntaestandar1id%type,
                           pRespuesta1 in cartcard.preguntasusuario.respuesta1%type,
                           pidPregunta2 in cartcard.preguntasusuario.preguntaestandar2id%type,
                           pidRespuesta2 in cartcard.preguntasusuario.respuesta2%type,
                           pResultado out NUMBER,
                           pResultadoMsg out VARCHAR2) IS
BEGIN
     UPDATE cartcard.preguntasusuario p
       SET p.preguntaestandar1id = NVL(pidPregunta1, p.preguntaestandar1id),
       P.RESPUESTA1 = NVL(pRespuesta1, p.respuesta1),
       p.preguntaestandar2id = NVL(pidPregunta2,p.preguntaestandar2id),
       P.RESPUESTA2 = NVL(pidRespuesta2,P.RESPUESTA2)
       WHERE p.usuarioid = pusuarioID;
  pResultado :=1;
  pResultadoMsg := 'OK';
    COMMIT;
 EXCEPTION
  WHEN OTHERS THEN
  pResultado :=0;
  pResultadoMsg:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizarla pregunta  (' || SQLCODE || '  ' || SQLERRM || ')');
 END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE addtarjetaexpirada (
   p_usuarioid      IN       NUMBER,
   p_idregistrote   OUT      NUMBER
)
IS
/* --------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: addtarjetaexpirada                                                             */
/* Objetivo: Agrega una membresia expirada.                                                                       */
/* Autor:    Equipo CartCard (Siscon)                                                                                      */
/* Fecha Creacion: Abril / 2009                                                                                               */
/* Fecha Modificacion:                                                                                                             */
/* Ejemplo Ejecucion: exec AddTarjetaExpirada(<<usuarioid>>,<<:cartcardid>>)        */
/* --------------------------------------------------------------------------------------------------------------- */
   v_cartcardid      NUMBER;
   v_membresiaid     NUMBER;
   v_fechavigencia   DATE;
BEGIN
   SELECT cartcardid, membreciaid, fechavencimiento
     INTO v_cartcardid, v_membresiaid, v_fechavigencia
     FROM CARTCARD.CARD
    WHERE usuarioid = p_usuarioid
      AND bloqueo IN (0,1,4);

   SELECT NVL (MAX (idregistrote), 0) + 1
     INTO p_idregistrote
     FROM CARTCARD.CC_TARJETASEXPIRADAS;

   INSERT INTO CARTCARD.CC_TARJETASEXPIRADAS
               (idregistrote, cartcardid, usuarioid, fechavigencia,
                fechabloqueo, membreciaid
               )
        VALUES (p_idregistrote, v_cartcardid, p_usuarioid, v_fechavigencia,
                SYSDATE, v_membresiaid
               );

   UPDATE CARTCARD.USUARIO
      SET estadodecuentaid = 10
    WHERE usuarioid = p_usuarioid;

   CARTCARD.Bloqueatarjeta (v_cartcardid);
   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
      p_idregistrote := 0;
END addtarjetaexpirada;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ADD_ICN_CAT_OPERACION
(pereg IN CARTCARD.ICN_CAT_OPERACION%ROWTYPE, 
 pcodigooperacion OUT CARTCARD.ICN_CAT_OPERACION.codigooperacion%TYPE, 
 spCod_Error OUT NUMBER, spMsg_Error OUT VARCHAR)
IS
/* ----------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ADD_ICN_CAT_OPERACION                                */
/* Objetivo: Agrega un nuevo registro en ICN_CAT_OPERACION                    */
/* Autor:    Abraham Salomon Ramirez Guzman                                                                */
/* Fecha Creacion: FEB/2011                                                                                                   */
/* Fecha Modificacion:                                                                                                                */
/* ----------------------------------------------------------------------------------------------------------------- */

BEGIN   
      spCod_Error := 0;
      INSERT INTO CARTCARD.ICN_CAT_OPERACION
        (ICN_CAT_OPERACION.codigooperacion, ICN_CAT_OPERACION.descripcion, 
		ICN_CAT_OPERACION.usuario_modifico, ICN_CAT_OPERACION.ultima_modificacion)
        VALUES (pereg.codigooperacion,pereg.descripcion, pereg.usuario_modifico, SYSDATE);
		
        spCod_Error := 1;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      spCod_Error := 0;
      ROLLBACK;
	  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar en ICN_CAT_OPERACION  (' || SQLCODE || '  ' || SQLERRM || ')');
	WHEN OTHERS THEN
		 	spCod_Error := 0;
  			spMsg_Error := SQLERRM;
			DBMS_OUTPUT.put_line(spMsg_Error);  
			ROLLBACK;
			RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar en ICN_CAT_OPERACION  (' || SQLCODE || '  ' || SQLERRM || ')');
END ADD_ICN_CAT_OPERACION;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ADD_ICN_CAT_TIPO_BLOQUEO
(pereg IN CARTCARD.ICN_CAT_TIPO_BLOQUEO%ROWTYPE,
 spCod_Error OUT NUMBER, spMsg_Error OUT VARCHAR)
IS
/* ----------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ADD_ICN_CAT_TIPO_BLOQUEO                        */
/* Objetivo: Agrega un nuevo registro en ICN_CAT_TIPO_BLOQUEO                    */
/* Autor:    Abraham Salomon Ramirez Guzman                                                                */
/* Fecha Creacion: FEB/2011                                                                                                   */
/* Fecha Modificacion:                                                                                                                */
/* ----------------------------------------------------------------------------------------------------------------- */

BEGIN
      spCod_Error := 0;
      INSERT INTO CARTCARD.ICN_CAT_TIPO_BLOQUEO
        (ICN_CAT_TIPO_BLOQUEO.estatus_bloqueo,
		ICN_CAT_TIPO_BLOQUEO.descripcion,
		ICN_CAT_TIPO_BLOQUEO.usuario_modifico,
        ICN_CAT_TIPO_BLOQUEO.ultima_modificacion)
        VALUES (pereg.estatus_bloqueo, pereg.descripcion, pereg.usuario_modifico, SYSDATE);

        spCod_Error := 1;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      spCod_Error := 0;
      ROLLBACK;
	  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar en ICN_CAT_TIPO_BLOQUEO  (' || SQLCODE || '  ' || SQLERRM || ')');
	WHEN OTHERS THEN
		 	spCod_Error := 0;
  			spMsg_Error := SQLERRM;
			DBMS_OUTPUT.put_line(spMsg_Error);
			ROLLBACK;
			RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar en ICN_CAT_TIPO_BLOQUEO  (' || SQLCODE || '  ' || SQLERRM || ')');
END ADD_ICN_CAT_TIPO_BLOQUEO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Add_Icn_Operaciones
(pereg IN CARTCARD.ICN_OPERACIONES%ROWTYPE, 
 spCod_Error OUT NUMBER, spMsg_Error OUT VARCHAR)
IS
/* ----------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ADD_ICN_OPERACIONES                                     */
/* Objetivo: Agrega un nuevo registro en ICN_OPERACIONES                                  */
/* Autor:    Abraham Salomon Ramirez Guzman                                                                */
/* Fecha Creacion: FEB/2011                                                                                                   */
/* Fecha Modificacion:                                                                                                                */
/* ----------------------------------------------------------------------------------------------------------------- */

BEGIN   
      spCod_Error := 0;
      INSERT INTO CARTCARD.ICN_OPERACIONES
        (ICN_OPERACIONES.fecha, ICN_OPERACIONES.terminal, ICN_OPERACIONES.entidad,
		ICN_OPERACIONES.id_canal, ICN_OPERACIONES.USUARIO, ICN_OPERACIONES.sucursal,
        ICN_OPERACIONES.operacionid,ICN_OPERACIONES.codigooperacion, ICN_OPERACIONES.msgoperacion,
        ICN_OPERACIONES.codigoerror, ICN_OPERACIONES.msgerror, 
		ICN_OPERACIONES.descripcion, ICN_OPERACIONES.entrada, ICN_OPERACIONES.salida,
        ICN_OPERACIONES.tiempo_resp, ICN_OPERACIONES.referencia, ICN_OPERACIONES.importe,
		ICN_OPERACIONES.fechaoperacion)
        VALUES (CURRENT_TIMESTAMP, pereg.terminal, pereg.entidad, pereg.id_canal,  
		pereg.USUARIO, pereg.sucursal, pereg.operacionid, pereg.codigooperacion, 
		pereg.msgoperacion, pereg.codigoerror, pereg.msgerror,
		pereg.descripcion, pereg.entrada, pereg.salida, pereg.tiempo_resp, 
		pereg.referencia, pereg.importe, SYSDATE);
		
        spCod_Error := 1;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      spCod_Error := 0;
      ROLLBACK;
	  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar en   (' || SQLCODE || '  ' || SQLERRM || ')');
	WHEN OTHERS THEN
		 	spCod_Error := 0;
  			spMsg_Error := SQLERRM;
			DBMS_OUTPUT.put_line(spMsg_Error);  
			ROLLBACK;
			RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar en   (' || SQLCODE || '  ' || SQLERRM || ')');
END Add_Icn_Operaciones;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Add_Icn_Oper_Histo
(pereg IN CARTCARD.ICN_OPERACIONES_HISTORICO%ROWTYPE, 
 spCod_Error OUT NUMBER, spMsg_Error OUT VARCHAR)
IS
/* ----------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ADD_ICN_OPER_HISTO                                         */
/* Objetivo: Agrega un nuevo registro en ICN_OPERACIONES_HISTORICO       */
/* Autor:    Abraham Salomon Ramirez Guzman                                                                */
/* Fecha Creacion: FEB/2011                                                                                                   */
/* Fecha Modificacion:                                                                                                                */
/* ----------------------------------------------------------------------------------------------------------------- */

BEGIN   
      spCod_Error := 0;
      INSERT INTO CARTCARD.ICN_OPERACIONES_HISTORICO
        (ICN_OPERACIONES_HISTORICO.fecha, ICN_OPERACIONES_HISTORICO.terminal, ICN_OPERACIONES_HISTORICO.entidad,
		ICN_OPERACIONES_HISTORICO.id_canal, ICN_OPERACIONES_HISTORICO.USUARIO, ICN_OPERACIONES_HISTORICO.sucursal,
        ICN_OPERACIONES_HISTORICO.operacionid, ICN_OPERACIONES_HISTORICO.codigooperacion, 
		ICN_OPERACIONES_HISTORICO.msgoperacion, ICN_OPERACIONES_HISTORICO.codigoerror, 
		ICN_OPERACIONES_HISTORICO.msgerror, ICN_OPERACIONES_HISTORICO.descripcion, 
		ICN_OPERACIONES_HISTORICO.entrada, ICN_OPERACIONES_HISTORICO.salida,
        ICN_OPERACIONES_HISTORICO.tiempo_resp, ICN_OPERACIONES_HISTORICO.referencia, ICN_OPERACIONES_HISTORICO.importe,
		ICN_OPERACIONES_HISTORICO.fechaoperacion)
        VALUES (CURRENT_TIMESTAMP, pereg.terminal, pereg.entidad, pereg.id_canal,  
		pereg.USUARIO, pereg.sucursal, pereg.operacionid, pereg.codigooperacion, 
		pereg.msgoperacion, pereg.codigoerror, pereg.msgerror,
		pereg.descripcion, pereg.entrada, pereg.salida, pereg.tiempo_resp, 
		pereg.referencia, pereg.importe, pereg.fechaoperacion);
		
        spCod_Error := 1;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      spCod_Error := 0;
      ROLLBACK;
	  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar en   (' || SQLCODE || '  ' || SQLERRM || ')');
	WHEN OTHERS THEN
		 	spCod_Error := 0;
  			spMsg_Error := SQLERRM;
			DBMS_OUTPUT.put_line(spMsg_Error);  
			ROLLBACK;
			RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar en   (' || SQLCODE || '  ' || SQLERRM || ')');
END Add_Icn_Oper_Histo;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ADD_IC_ENVIO_ESTAFETA(

        V_ID_ESTAFETA             CARTCARD.IC_ENVIO_ESTAFETA.ID_ESTAFETA%TYPE,
        V_ID_MERCANCIA            CARTCARD.IC_ENVIO_ESTAFETA.ID_MERCANCIA%TYPE,
        V_ID_PAIS                 CARTCARD.IC_ENVIO_ESTAFETA.ID_PAIS%TYPE,
        V_ID_ESTADO               CARTCARD.IC_ENVIO_ESTAFETA.ID_ESTADO%TYPE,
        V_ID_MUNICIPIO            CARTCARD.IC_ENVIO_ESTAFETA.ID_MUNICIPIO%TYPE,
        V_NOMBRE_DESTINATARIO     CARTCARD.IC_ENVIO_ESTAFETA.NOMBRE_DESTINATARIO%TYPE,
        V_APELLIDOS_DESTINATARIO  CARTCARD.IC_ENVIO_ESTAFETA.APELLIDOS_DESTINATARIO%TYPE,
        V_CALLE                   CARTCARD.IC_ENVIO_ESTAFETA.CALLE%TYPE,
        V_NUMERO_EXTERIOR         CARTCARD.IC_ENVIO_ESTAFETA.NUMERO_EXTERIOR%TYPE,
        V_NUMERO_INTERIOR         CARTCARD.IC_ENVIO_ESTAFETA.NUMERO_INTERIOR%TYPE,
        V_COLONIA                 CARTCARD.IC_ENVIO_ESTAFETA.COLONIA%TYPE,
        V_CP                      CARTCARD.IC_ENVIO_ESTAFETA.CP%TYPE,
        V_TELEFONO                CARTCARD.IC_ENVIO_ESTAFETA.TELEFONO%TYPE,
        V_ACCION                  CARTCARD.IC_ENVIO_ESTAFETA.ACCION%TYPE,
        V_RESULTADO               CARTCARD.IC_ENVIO_ESTAFETA.RESULTADO%TYPE,
        V_MENSAJE                 CARTCARD.IC_ENVIO_ESTAFETA.MENSAJE%TYPE,
        V_GUIAESTAFETA            CARTCARD.IC_ENVIO_ESTAFETA.GUIAESTAFETA%TYPE,
        V_FECHA_ENVIO             CARTCARD.IC_ENVIO_ESTAFETA.FECHA_ENVIO%TYPE
)
IS
BEGIN    
     BEGIN
           INSERT INTO CARTCARD.IC_ENVIO_ESTAFETA(ID_ESTAFETA, ID_MERCANCIA, ID_PAIS, ID_ESTADO, ID_MUNICIPIO, NOMBRE_DESTINATARIO, APELLIDOS_DESTINATARIO, CALLE, NUMERO_EXTERIOR, NUMERO_INTERIOR, COLONIA, CP, TELEFONO, ACCION ,RESULTADO ,MENSAJE ,GUIAESTAFETA ,FECHA_ENVIO )
            VALUES(V_ID_ESTAFETA ,V_ID_MERCANCIA ,V_ID_PAIS ,V_ID_ESTADO ,V_ID_MUNICIPIO ,V_NOMBRE_DESTINATARIO ,V_APELLIDOS_DESTINATARIO ,V_CALLE ,V_NUMERO_EXTERIOR ,V_NUMERO_INTERIOR ,V_COLONIA ,V_CP ,V_TELEFONO, V_ACCION, V_RESULTADO ,V_MENSAJE, V_GUIAESTAFETA, V_FECHA_ENVIO);
     EXCEPTION                                                                                                                                                                                     
             WHEN OTHERS THEN
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_ENVIO_ESTAFETA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END ADD_IC_ENVIO_ESTAFETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Add_Ic_Factura(

        V_ID_MERCANCIA                 CARTCARD.IC_FACTURA.ID_MERCANCIA%TYPE,
        V_ID_FACTURA                   CARTCARD.IC_FACTURA.ID_FACTURA%TYPE,
        V_DOCUMENTO                    CARTCARD.IC_FACTURA.DOCUMENTO%TYPE,
        V_FECHA_REGISTRO               CARTCARD.IC_FACTURA.FECHA_REGISTRO%TYPE
)
IS
BEGIN    
     BEGIN
           INSERT INTO CARTCARD.IC_FACTURA(ID_MERCANCIA, ID_FACTURA, DOCUMENTO, FECHA_REGISTRO )
            VALUES(V_ID_MERCANCIA ,V_ID_FACTURA ,V_DOCUMENTO ,SYSDATE );
     EXCEPTION
             WHEN OTHERS THEN
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_FACTURA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END Add_Ic_Factura;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ADD_IC_IMPORTES_ESTAFETA(

        V_ID_IMPORTE_EST                 CARTCARD.IC_IMPORTES_ESTAFETA.ID_IMPORTE_EST%TYPE,
        V_ID_TIPO_SERVICIO               CARTCARD.IC_IMPORTES_ESTAFETA.ID_TIPO_SERVICIO%TYPE,
        V_ID_MERCANCIA                   CARTCARD.IC_IMPORTES_ESTAFETA.ID_MERCANCIA%TYPE,
        V_IMPORTE_MANEJO                 CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_MANEJO%TYPE,
        V_IMPORTE_SOBREPESO              CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_SOBREPESO%TYPE,
        V_IMPORTE_GDEVOLUCION            CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_GDEVOLUCION%TYPE,
        V_IMPORTE_SEGURO                 CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_SEGURO%TYPE,
        V_IMPORTE_IMPUESTOS_IMPORTAC     CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_IMPUESTOS_IMPORTACION%TYPE,
        V_TOTAL_APAGAR                   CARTCARD.IC_IMPORTES_ESTAFETA.TOTAL_APAGAR%TYPE,
        V_FECHA_NOTIFICACION             CARTCARD.IC_IMPORTES_ESTAFETA.FECHA_NOTIFICACION%TYPE
)
IS
BEGIN    
     BEGIN
           INSERT INTO CARTCARD.IC_IMPORTES_ESTAFETA(ID_IMPORTE_EST, ID_TIPO_SERVICIO, ID_MERCANCIA, IMPORTE_MANEJO, IMPORTE_SOBREPESO, IMPORTE_GDEVOLUCION, IMPORTE_SEGURO, IMPORTE_IMPUESTOS_IMPORTACION, TOTAL_APAGAR, FECHA_NOTIFICACION )
            VALUES(V_ID_IMPORTE_EST ,V_ID_TIPO_SERVICIO ,V_ID_MERCANCIA ,V_IMPORTE_MANEJO ,V_IMPORTE_SOBREPESO ,V_IMPORTE_GDEVOLUCION ,V_IMPORTE_SEGURO ,V_IMPORTE_IMPUESTOS_IMPORTAC ,V_TOTAL_APAGAR ,V_FECHA_NOTIFICACION );
     EXCEPTION
             WHEN OTHERS THEN
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_IMPORTES_ESTAFETA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END ADD_IC_IMPORTES_ESTAFETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ADD_IC_IMPORTES_IUPICARD(

        V_ID_IMPORTE_IC                 CARTCARD.IC_IMPORTES_IUPICARD.ID_IMPORTE_IC%TYPE,
        V_ID_TIPO_SERVICIO               CARTCARD.IC_IMPORTES_IUPICARD.ID_TIPO_SERVICIO%TYPE,
        V_ID_MERCANCIA                   CARTCARD.IC_IMPORTES_IUPICARD.ID_MERCANCIA%TYPE,
        V_IMPORTE_MANEJO_IUPI                 CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_MANEJO_IUPI%TYPE,
        V_IMPORTE_KG_ADICIONAL              CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_KG_ADICIONAL%TYPE,
        V_IMPORTE_ENVIO            CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_ENVIO%TYPE,
        V_IMPORTE_SEGURO                 CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_SEGURO%TYPE,
        V_IMPORTE_ALMACENAMIENTO_EX     CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_ALMACENAMIENTO_EX%TYPE,
        V_TOTAL_PAGAR                   CARTCARD.IC_IMPORTES_IUPICARD.TOTAL_PAGAR%TYPE,
        V_FECHA_PAGO             CARTCARD.IC_IMPORTES_IUPICARD.FECHA_PAGO%TYPE
)
IS
BEGIN    
     BEGIN
           INSERT INTO CARTCARD.IC_IMPORTES_IUPICARD(ID_IMPORTE_IC, ID_TIPO_SERVICIO, ID_MERCANCIA, IMPORTE_MANEJO_IUPI, IMPORTE_KG_ADICIONAL, IMPORTE_ENVIO, IMPORTE_SEGURO, IMPORTE_ALMACENAMIENTO_EX, TOTAL_PAGAR, FECHA_PAGO )
            VALUES(V_ID_IMPORTE_IC ,V_ID_TIPO_SERVICIO ,V_ID_MERCANCIA ,V_IMPORTE_MANEJO_IUPI ,V_IMPORTE_KG_ADICIONAL ,V_IMPORTE_ENVIO ,V_IMPORTE_SEGURO ,V_IMPORTE_ALMACENAMIENTO_EX ,V_TOTAL_PAGAR ,V_FECHA_PAGO );
     EXCEPTION
             WHEN OTHERS THEN
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_IMPORTES_IUPICARD  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END ADD_IC_IMPORTES_IUPICARD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Add_Ic_Mercancia(
        
        V_FOLIO                        CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
        V_NOMBRE                       CARTCARD.IC_MERCANCIA.NOMBRE%TYPE,
        V_DESCRIPCION                  CARTCARD.IC_MERCANCIA.DESCRIPCION%TYPE,
        V_COSTO                        CARTCARD.IC_MERCANCIA.COSTO%TYPE,
        V_PESO                         CARTCARD.IC_MERCANCIA.PESO%TYPE,
        V_PROVEEDOR                    CARTCARD.IC_MERCANCIA.PROVEEDOR%TYPE,
        V_TIEMPO_ALMACENAMIENTO        CARTCARD.IC_MERCANCIA.TIEMPO_ALMACENAMIENTO%TYPE,
        V_ID_STATUS_FACTURA            CARTCARD.IC_MERCANCIA.ID_STATUS_FACTURA%TYPE,
        V_SOBREPESO                    CARTCARD.IC_MERCANCIA.SOBREPESO%TYPE,
		V_IMAGEN                       CARTCARD.IC_MERCANCIA.IMAGEN%TYPE,
		V_USUARIO_MODIFICO			   CARTCARD.IC_MERCANCIA.USUARIO_MODIFICO%TYPE,
		V_SRCIMAGEN					   CARTCARD.IC_MERCANCIA.SRCIMAGEN%TYPE,
		V_ID_SUITE					   CARTCARD.IC_MERCANCIA.ID_SUITE%TYPE
)
IS
        V_ID_MERCANCIA                 CARTCARD.IC_MERCANCIA.ID_MERCANCIA%TYPE;

BEGIN    
     BEGIN
     
           SELECT CARTCARD.IC_SEQ_MERCANCIA.NEXTVAL INTO V_ID_MERCANCIA FROM DUAL;
     
           INSERT INTO CARTCARD.IC_MERCANCIA(ID_MERCANCIA, FOLIO, NOMBRE, DESCRIPCION, COSTO, PESO, PROVEEDOR, TIEMPO_ALMACENAMIENTO, FECHA_REGISTRO, ID_STATUS_FACTURA, SOBREPESO, IMAGEN, USUARIO_MODIFICO, SRCIMAGEN,ID_SUITE)
            	  	   				VALUES(V_ID_MERCANCIA, V_FOLIO,V_NOMBRE,V_DESCRIPCION,V_COSTO,V_PESO,V_PROVEEDOR,V_TIEMPO_ALMACENAMIENTO,SYSDATE,V_ID_STATUS_FACTURA,V_SOBREPESO,V_IMAGEN,V_USUARIO_MODIFICO,V_SRCIMAGEN,V_ID_SUITE);
		   COMMIT;
		   
     EXCEPTION
             WHEN OTHERS THEN
			 	   ROLLBACK;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_MERCANCIA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END Add_Ic_Mercancia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ADD_IC_MERCANCIAS_UNLOAD(

        V_ID_MERCANCIA_UNLOAD           CARTCARD.IC_MERCANCIAS_UNLOAD.ID_MERCANCIA_UNLOAD%TYPE,
        V_ID_UNLOAD                     CARTCARD.IC_MERCANCIAS_UNLOAD.ID_UNLOAD%TYPE,
        V_ID_MERCANCIA                  CARTCARD.IC_MERCANCIAS_UNLOAD.ID_MERCANCIA%TYPE,
        V_STATUS_PAGO                   CARTCARD.IC_MERCANCIAS_UNLOAD.STATUS_PAGO%TYPE
)
IS
BEGIN    
     BEGIN
           INSERT INTO CARTCARD.IC_MERCANCIAS_UNLOAD(ID_MERCANCIA_UNLOAD, ID_UNLOAD, ID_MERCANCIA, STATUS_PAGO )
            VALUES(V_ID_MERCANCIA_UNLOAD ,V_ID_UNLOAD ,V_ID_MERCANCIA ,V_STATUS_PAGO );
     EXCEPTION
             WHEN OTHERS THEN
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_MERCANCIAS_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END ADD_IC_MERCANCIAS_UNLOAD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ADD_IC_TRACKING_MERCANCIA(

        V_ID_MERCANCIA                 CARTCARD.IC_TRACKING_MERCANCIA.ID_MERCANCIA%TYPE,
        V_ID_STATUS                    CARTCARD.IC_TRACKING_MERCANCIA.ID_STATUS%TYPE,
        V_ID_TRACKING                  CARTCARD.IC_TRACKING_MERCANCIA.ID_TRACKING%TYPE,
        V_FECHA_ACTUALIZACION          CARTCARD.IC_TRACKING_MERCANCIA.FECHA_ACTUALIZACION%TYPE
)
IS
BEGIN    
     BEGIN
           INSERT INTO CARTCARD.IC_TRACKING_MERCANCIA(ID_MERCANCIA, ID_STATUS, ID_TRACKING, FECHA_ACTUALIZACION )
            VALUES(V_ID_MERCANCIA ,V_ID_STATUS ,V_ID_TRACKING ,V_FECHA_ACTUALIZACION );
     EXCEPTION
             WHEN OTHERS THEN
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TRACKING_MERCANCIA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END ADD_IC_TRACKING_MERCANCIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ADD_IC_TX_CARDMARTE_UNLOAD(

        V_ID_TARJETA                 CARTCARD.IC_TX_CARDMARTE_UNLOAD.ID_TARJETA%TYPE,
        V_ID_UNLOAD                  CARTCARD.IC_TX_CARDMARTE_UNLOAD.ID_UNLOAD%TYPE,
        V_PTERMINALCODE              CARTCARD.IC_TX_CARDMARTE_UNLOAD.PTERMINALCODE%TYPE,
        V_PCARDNUMBER                CARTCARD.IC_TX_CARDMARTE_UNLOAD.PCARDNUMBER%TYPE,
        V_PTRANSAMOUNT               CARTCARD.IC_TX_CARDMARTE_UNLOAD.PTRANSAMOUNT%TYPE,
        V_PDETAIL                    CARTCARD.IC_TX_CARDMARTE_UNLOAD.PDETAIL%TYPE,
        V_FECHA_EJECUCION            CARTCARD.IC_TX_CARDMARTE_UNLOAD.FECHA_EJECUCION%TYPE,
        V_REQUESTID                  CARTCARD.IC_TX_CARDMARTE_UNLOAD.REQUESTID%TYPE,
        V_OPERATIONID                 CARTCARD.IC_TX_CARDMARTE_UNLOAD.OPERATIONID%TYPE,
        V_RESULTCODE                 CARTCARD.IC_TX_CARDMARTE_UNLOAD.RESULTCODE%TYPE,
        V_RESULTMESSAGE              CARTCARD.IC_TX_CARDMARTE_UNLOAD.RESULTMESSAGE%TYPE,
        V_TRANSACTIONNUMBER          CARTCARD.IC_TX_CARDMARTE_UNLOAD.TRANSACTIONNUMBER%TYPE,
        V_AMOUNT                     CARTCARD.IC_TX_CARDMARTE_UNLOAD.AMOUNT%TYPE
)
IS
BEGIN    
     BEGIN
           INSERT INTO CARTCARD.IC_TX_CARDMARTE_UNLOAD(ID_TARJETA, ID_UNLOAD, PTERMINALCODE, PCARDNUMBER, PTRANSAMOUNT, PDETAIL, FECHA_EJECUCION, REQUESTID, OPERATIONID, RESULTCODE, RESULTMESSAGE, TRANSACTIONNUMBER, AMOUNT )
            VALUES(V_ID_TARJETA ,V_ID_UNLOAD ,V_PTERMINALCODE ,V_PCARDNUMBER ,V_PTRANSAMOUNT ,V_PDETAIL ,V_FECHA_EJECUCION ,V_REQUESTID ,V_OPERATIONID ,V_RESULTCODE ,V_RESULTMESSAGE ,V_TRANSACTIONNUMBER ,V_AMOUNT);
     EXCEPTION
             WHEN OTHERS THEN
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END ADD_IC_TX_CARDMARTE_UNLOAD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGAAESTADOPEDIDO (
   p_numerofolio        IN   VARCHAR2,
   p_porcentajeseguro   IN   FLOAT,
   p_idestado           IN   INTEGER,
   p_observaciones      IN   VARCHAR2
)
IS
/* --------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAAESTADOPEDIDO                                                     */
/* Objetivo: Agrega un registro de la respuesta recibida por CartMarte                           */
/* Autor:    Equipo CartCard (Siscon)                                                            */
/* Fecha Creacion: Sep/2008                                                                      */
/* Fecha Modificacion:                                                                           */
/* Ejemplo Ejecucion: exec AGREGAAESTADOPEDIDO(<<numerofolio>>,<<porcentajeseguro>>)             */
/* --------------------------------------------------------------------------------------------- */
   v_costoseguro   FLOAT;
   v_existe        INTEGER;
BEGIN

   INSERT INTO PASARELBAZ.pcc_estadosproducto
               (numerofolio, consecutivo,
                tiemporestante, fechaefectiva,
                idestado, observaciones
               )
        VALUES (p_numerofolio, (SELECT NVL (MAX (consecutivo), 0) + 1
                                  FROM PASARELBAZ.pcc_estadosproducto
                                 WHERE numerofolio = p_numerofolio),
                (SELECT NVL (MAX (tiemporestante), 0)
                   FROM PASARELBAZ.pcc_estadosproducto
                  WHERE numerofolio = p_numerofolio), SYSDATE,
                p_idestado, p_observaciones
               );

   IF p_porcentajeseguro != 0
   THEN

      SELECT costo * p_porcentajeseguro
        INTO v_costoseguro
        FROM PASARELBAZ.pcc_desglocecosto
       WHERE numerofolio = p_numerofolio AND idconcepto = 13;

      SELECT COUNT (idconcepto)
        INTO v_existe
        FROM PASARELBAZ.pcc_desglocecosto
       WHERE numerofolio = p_numerofolio AND idconcepto = 6;

      IF v_existe = 0
      THEN
         INSERT INTO PASARELBAZ.pcc_desglocecosto
                     (numerofolio, consecutivo,
                      costo, fecharegistro, idconcepto
                     )
              VALUES (p_numerofolio, (SELECT MAX (consecutivo) + 1
                                        FROM PASARELBAZ.pcc_desglocecosto
                                       WHERE numerofolio = p_numerofolio),
                      v_costoseguro, SYSDATE, 6
                     );
      ELSE
         UPDATE PASARELBAZ.pcc_desglocecosto
            SET costo = v_costoseguro
          WHERE numerofolio = p_numerofolio AND idconcepto = 6;
      END IF;

      UPDATE PASARELBAZ.pcc_desglocecosto
         SET costo = costo + v_costoseguro
       WHERE numerofolio = p_numerofolio AND idconcepto = 13;
   END IF;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregaaestadopedido;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGACANCELACION (
   pcartcardid   IN   INTEGER,
   pusuarioid    IN   INTEGER
)
IS
/* ---------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGACANCELACION                                    	*/
/* Objetivo: Agrega un registro de cancelación de membrecía.                   	*/
/* Autor:    Equipo CartCard (Siscon)                                           */
/* Fecha Creacion: Nov/2008                                                     */
/* Fecha Modificacion:                                                          */
/* Ejemplo Ejecucion: exec AGREGACANCELACION(<<pcartcardid>>,<<pusuarioid>>)  	*/
/* ---------------------------------------------------------------------------- */
   vidregistro   INTEGER;
BEGIN
   BEGIN
      SELECT CARTCARD.cancelaciones_seq.NEXTVAL
        INTO vidregistro
        FROM DUAL;

      INSERT INTO CARTCARD.cc_cancelaciones
                  (idregistro, cartcardid, usuarioid, fechasolicitudusr,
                   estadodecuentaid
                  )
           VALUES (vidregistro, pcartcardid, pusuarioid, SYSDATE,
                   5
                  );

      UPDATE CARTCARD.card
         SET bloqueo = 5
       WHERE cartcardid = pcartcardid;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregacancelacion;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGACANCELACIONREPOSICION (
   pcartcardidactual   IN   INTEGER,
   pusuarioid          IN   INTEGER,
   pcartcardidnueva    IN   INTEGER
)
IS
/* -------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGACANCELACIONREPOSICION                                                    		  */
/* Objetivo: Agrega la cancelación y la nueva reposición de membrecía.                                  		  */
/* Autor:    Equipo CartCard (Siscon)                                                                   		  */
/* Fecha Creacion: Nov/2008                                                                             		  */
/* Fecha Modificacion:                                                                                  		  */
/* Ejemplo Ejecucion: exec AGREGACANCELACIONREPOSICION(<<pcartcardidactual>>,<<pusuarioid>>,<<pcartcardidnueva>>) */
/* -------------------------------------------------------------------------------------------------------------- */
   vidregistro   INTEGER;
BEGIN
   BEGIN
      SELECT CARTCARD.cancelaciones_seq.NEXTVAL
        INTO vidregistro
        FROM DUAL;

      INSERT INTO CARTCARD.cc_cancelaciones
                  (idregistro, cartcardid, usuarioid, fechasolicitudusr,
                   estadodecuentaid
                  )
           VALUES (vidregistro, pcartcardidactual, pusuarioid, SYSDATE,
                   7
                  );

      UPDATE CARTCARD.card
         SET bloqueo = 7
       WHERE cartcardid = pcartcardidactual;

      SELECT CARTCARD.reposicion_seq.NEXTVAL
        INTO vidregistro
        FROM DUAL;

      INSERT INTO CARTCARD.cc_reposiciones
                  (idregistro, cartcardidcancela, cartcardidrepone,
                   usuarioid, fecharegistro
                  )
           VALUES (vidregistro, pcartcardidactual, pcartcardidnueva,
                   pusuarioid, SYSDATE
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregacancelacionreposicion;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGACONSTANTE (
	   pId 		       in Varchar2,
	   pDescripcion    in Varchar2,
	   pTipoValor 	   in Char,
	   pValorEntero	   in Integer,
	   pValorDecimal   in Float,
	   pValorFecha 	   in Varchar2,
	   pValorCaracter  in Varchar2,
   	   pValorImagen    in Blob,
	   pUsuario 	   in Varchar2,
	   pFechaRegistro  in Varchar2
	   
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: agregaConstante                                              */
/* Objetivo: Inserta un registro en la tabla constantes.                       		   */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec agregaConstante(<<id>>...<<Usuario>>)      */
/* --------------------------------------------------------------------------------------- */
BEGIN

BEGIN
   INSERT INTO CARTCARD.CONSTANTES (
   ID_CONSTANTES, DESCRIPCION, TIPO_VALOR, 
   VALOR_ENTERO, VALOR_DECIMAL, VALOR_FECHA, 
   VALOR_CARACTER, 
   VALOR_IMAGEN,
    USUARIO, 
   FECHA_REGISTRO) 
    VALUES ( pId,pDescripcion, pTipoValor,
        pValorEntero,pValorDecimal ,        
        To_date(pValorFecha,'ddMMYYYY-HH24:MI:ss'), pValorCaracter,
        pValorImagen, 
        pUsuario, To_date(pFechaRegistro,'ddMMYYYY-HH24:MI:ss'));
    END;
COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregaConstante;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGADOCUMENTOUSR (
   p_usuarioid         IN   INTEGER,
   p_documento         IN   BLOB,
   p_idtipodocumento   IN   INTEGER,
   p_nombredocumento   IN   VARCHAR2
)
IS
/* --------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGADOCUMENTOUSR                                                                        */
/* Objetivo: Agrega un documento con los datos especificados.                                                      */
/* Autor:    Equipo CartCard (Siscon)                                                                              */
/* Fecha Creacion: Oct/2008                                                                                        */
/* Fecha Modificacion:                                                                                             */
/* Ejemplo Ejecucion: exec AGREGADOCUMENTOUSR(<<usuarioid>>,<<documento>>.<<idtipodocumento>>,<<nombredocumento>>) */
/* --------------------------------------------------------------------------------------------------------------- */
BEGIN
   INSERT INTO CARTCARD.cc_documentosusr
               (iddocumento, usuarioid,
                documento, idtipodocumento, docaceptado, nombredocumento
               )
        VALUES ((SELECT NVL (MAX (iddocumento), 0) + 1
                   FROM CARTCARD.cc_documentosusr
                  WHERE usuarioid = p_usuarioid), p_usuarioid,
                p_documento, p_idtipodocumento, 0, p_nombredocumento
               );

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregadocumentousr;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGAHTPACTIVADA(
    P_ACTUALCARDNUMBER   IN    CARTCARD.T_P_ACTIVADAS.ACTUALCARDNUMBER%TYPE,
    P_CARDNUMBER         IN    CARTCARD.T_P_ACTIVADAS.CARDNUMBER%TYPE,
    P_FECHAVENCIMIENTO   IN    CARTCARD.T_P_ACTIVADAS.FECHAVENCIMIENTO%TYPE,
    P_IDSUITE            IN    CARTCARD.T_P_ACTIVADAS.IDSUITE%TYPE,
    P_REFERENCIA         IN    CARTCARD.T_P_ACTIVADAS.REFERENCIA%TYPE,
    P_IDESTATUS          IN    CARTCARD.H_T_P_ACTIVADAS.ID_ESTATUS_VENTA%TYPE,
    P_USUARIOID          IN    CARTCARD.H_T_P_ACTIVADAS.USUARIOID%TYPE,
    P_CARTCARDID         IN    CARTCARD.H_T_P_ACTIVADAS.CARTCARDID%TYPE,
    P_NOMBREUSUARIO      IN    CARTCARD.H_T_P_ACTIVADAS.NOMBREUSUARIO%TYPE,
    P_IDTIENDA           IN    CARTCARD.H_T_P_ACTIVADAS.IDTIENDA%TYPE,
    P_RESULTADO          OUT   INTEGER,
    P_FOLIO              OUT   CARTCARD.H_T_P_ACTIVADAS.FOLIO%TYPE
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAHTPACTIVADA                                                 */
/* OBJETIVO: AGREGA LA TARJETA PREACTIVADA A EL HISTORICO DE TARJETAS PREACTIVADAS         */
/* AUTOR: EQUIPO IUPICARD                                                                  */
/* FECHA CREACION: JUN/2010                                                                */
/* FECHA MODIFICACION:                                                                     */
/* EJEMPLO EJECUCION: EXEC AGREGAHTPACTIVADA(<<P_ACTUALCARDNUMBER>>,...,<<P_FOLIO>>);      */
/* --------------------------------------------------------------------------------------- */
   V_ID_HTPACTIVADA    CARTCARD.H_T_P_ACTIVADAS.ID_H_T_P_ACTIVADAS%TYPE;

BEGIN
   P_RESULTADO := 1;

   SELECT NVL (MAX (HTP.ID_H_T_P_ACTIVADAS), 0) + 1
     INTO V_ID_HTPACTIVADA
     FROM CARTCARD.H_T_P_ACTIVADAS HTP;

   -- AGREGAR SECUENCIA PARA FOLIO
   SELECT NVL (MAX (HTP.FOLIO), 1000) + 1
     INTO P_FOLIO
     FROM CARTCARD.H_T_P_ACTIVADAS HTP;


   INSERT INTO CARTCARD.H_T_P_ACTIVADAS HTP (
                 HTP.ID_H_T_P_ACTIVADAS,
                 HTP.ACTUALCARDNUMBER,
                 HTP.CARDNUMBER,
                 HTP.FECHAVENCIMIENTO,
                 HTP.IDSUITE,
                 HTP.REFERENCIA,
                 HTP.ID_ESTATUS_VENTA,
                 HTP.USUARIOID,
                 HTP.CARTCARDID,
                 HTP.NOMBREUSUARIO,
                 HTP.FOLIO,
                 HTP.IDTIENDA
               )
        VALUES ( V_ID_HTPACTIVADA,
                 P_ACTUALCARDNUMBER,
                 P_CARDNUMBER,
                 P_FECHAVENCIMIENTO,
                 P_IDSUITE,
                 P_REFERENCIA,
                 P_IDESTATUS,
                 P_USUARIOID,
                 P_CARTCARDID,
                 P_NOMBREUSUARIO,
                 P_FOLIO,
                 P_IDTIENDA
               );

       COMMIT;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
           P_RESULTADO := 0;
           ROLLBACK;

END AGREGAHTPACTIVADA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE AGREGAMEMBRECIA1 (
   p_tipomoneda         IN       INTEGER,
   p_costo              IN       FLOAT,
   p_fechaalta          IN       VARCHAR2,
   p_fechavencimiento   IN       VARCHAR2,
   p_usuarioid          IN       INTEGER,
   P_duracion           IN       INTEGER,
   p_referencia         OUT      VARCHAR2,
   p_cartcardid         OUT      INTEGER
)
IS
/* --------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAMEMBRECIA1                                                                          */
/* Objetivo: Agrega o actualiza una membrecia.                                                                     */
/* Autor:    Equipo CartCard (Siscon)                                                                              */
/* Fecha Creacion: Oct/2008                                                                                        */
/* Fecha Modificacion: 15/12/2010 CLV SE INCLUYE PARAMETRO DE ENTRADA DURACION                                                                                            */
/* Ejemplo Ejecucion: exec AGREGAMEMBRECIA1(<<tipomoneda>>,..,<<usuarioid>>,<<:referencia>>,<<:cartcardid>>)       */
/* --------------------------------------------------------------------------------------------------------------- */
   v_existe   INTEGER;
BEGIN
   BEGIN
      SELECT COUNT (usuarioid)
        INTO v_existe
        FROM CARTCARD.card
       WHERE usuarioid = p_usuarioid
         AND (bloqueo = 0 OR bloqueo = 1 OR bloqueo = 4);

      IF v_existe = 0
      THEN
         SELECT NVL (MAX (cartcardid), 413) + 1, CARTCARD.generareferencia
           INTO p_cartcardid, p_referencia
           FROM CARTCARD.card;

         INSERT INTO CARTCARD.card
                     (cartcardid, usuarioid,
                      fechaalta,
                      fechavencimiento,
                      referencia, bloqueo, fechasys,
                      membreciaid,
                      estadoconsultait
                     )
              VALUES (p_cartcardid, p_usuarioid,
                      TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
                      TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
                      --TO_DATE (p_fechavencimiento, 'DDMMYYYY-HH24:MI:SS'),
                      p_referencia, 0, SYSDATE,
                      (SELECT membreciaid
                         FROM CARTCARD.membrecia
                        WHERE costo = p_costo AND p_tipomoneda = tipomoneda and duracion=P_duracion),
                      0
                     );
      ELSE
         UPDATE CARTCARD.card
            SET fechaalta = TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
                --fechavencimiento = TO_DATE (p_fechavencimiento, 'DDMMYYYY-HH24:MI:SS'),
                bloqueo = 0,
                fechasys = SYSDATE,
                membreciaid =
                        (SELECT membreciaid
                           FROM CARTCARD.membrecia
                          WHERE costo = p_costo AND p_tipomoneda = tipomoneda and duracion=P_duracion)
          WHERE usuarioid = p_usuarioid
            AND (bloqueo = 0 OR bloqueo = 1 OR bloqueo = 4);

         SELECT cartcardid, referencia
           INTO p_cartcardid, p_referencia
           FROM CARTCARD.card
          WHERE usuarioid = p_usuarioid
            AND (bloqueo = 0 OR bloqueo = 1 OR bloqueo = 4);
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregamembrecia1;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE AGREGAMEMBRECIAN12 (
   p_tipomoneda         IN       INTEGER,
   p_costo              IN       FLOAT,
   p_fechaalta          IN       VARCHAR2,
   p_fechavencimiento   IN       VARCHAR2,
   p_usuarioid          IN       INTEGER,
   P_duracion           IN       INTEGER,
   p_referencia         OUT      VARCHAR2,
   p_cartcardid         OUT      INTEGER
)
IS
/* --------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAMEMBRECIA2                                                                          */
/* Objetivo: Agrega o actualiza una membrecia.                                                                     */
/* Autor:    Equipo CartCard (Siscon)                                                                              */
/* Fecha Creacion: Dic/2010                                                                                        */
/* Fecha Modificacion: 15/12/2010 CLV SE INCLUYE PARAMETRO DE ENTRADA DURACION                                                                                            */
/* Ejemplo Ejecucion: exec AGREGAMEMBRECIA1(<<tipomoneda>>,..,<<usuarioid>>,<<:referencia>>,<<:cartcardid>>)       */
/* --------------------------------------------------------------------------------------------------------------- */
   v_existe   INTEGER;
BEGIN
   BEGIN
      SELECT COUNT (usuarioid)
        INTO v_existe
        FROM CARTCARD.card
       WHERE usuarioid = p_usuarioid
         AND bloqueo IN (0,1,4);

      IF v_existe = 0
      THEN
         SELECT NVL (MAX (cartcardid), 413) + 1, CARTCARD.generareferencia
           INTO p_cartcardid, p_referencia
           FROM CARTCARD.card;

         INSERT INTO CARTCARD.card
                     (cartcardid, usuarioid,
                      fechaalta,
                      fechavencimiento,
                      referencia, bloqueo, fechasys,
                      membreciaid,
                      estadoconsultait
                     )
              VALUES (p_cartcardid, p_usuarioid,
                      TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
                      TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
                      --TO_DATE (p_fechavencimiento, 'DDMMYYYY-HH24:MI:SS'),
                      p_referencia, 0, SYSDATE,
                      (SELECT membreciaid
                         FROM CARTCARD.membrecia
                        WHERE costo = p_costo AND p_tipomoneda = tipomoneda and duracion=P_duracion),
                      0
                     );
      ELSE
         UPDATE CARTCARD.card
            SET fechaalta = TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
                --fechavencimiento = TO_DATE (p_fechavencimiento, 'DDMMYYYY-HH24:MI:SS'),
                bloqueo = 0,
                fechasys = SYSDATE,
                membreciaid =
                        (SELECT membreciaid
                           FROM CARTCARD.membrecia
                          WHERE costo = p_costo AND p_tipomoneda = tipomoneda and duracion=P_duracion)
          WHERE usuarioid = p_usuarioid
            AND bloqueo IN (0,1,4);

         SELECT cartcardid, referencia
           INTO p_cartcardid, p_referencia
           FROM CARTCARD.card
          WHERE usuarioid = p_usuarioid
            AND bloqueo IN (0,1,4);
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregamembrecian12;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGAMEMBRESIA (
   P_MEMBRESIAID        IN       CARTCARD.CARD.MEMBRECIAID%TYPE,
   P_FECHAALTA          IN       VARCHAR2,
   P_FECHAVENCIMIENTO   IN       VARCHAR2,
   P_USUARIOID          IN       CARTCARD.CARD.USUARIOID%TYPE,
   P_REFERENCIA         IN       CARTCARD.CARD.REFERENCIA%TYPE,
   P_CARTCARDID         OUT      CARTCARD.CARD.CARTCARDID%TYPE,
   P_RESULTADO          OUT      INTEGER
)
IS
/* ------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAMEMBRESIA                                                                   */
/* OBJETIVO: AGREGA O ACTUALIZA UNA MEMBRESIA PARA EL REGISTRO DEL USUARIO DENTRO DEL CORE DE IUPICARD.    */
/* AUTOR:    EQUIPO IUPICARD                                                                               */
/* FECHA CREACION: JUN/2010                                                                                */
/* FECHA MODIFICACION:                                                                                     */
/* EJEMPLO EJECUCION: EXEC AGREGAMEMBRESIA(<<P_MEMBRESIAID>>,..,<<:P_RESULTADO>>)                          */
/* --------------------------------------------------------------------------------------------------------*/
   V_EXISTE   INTEGER;
BEGIN
   BEGIN
      P_RESULTADO := 1;

      SELECT COUNT (USUARIOID)
        INTO V_EXISTE
        FROM CARTCARD.CARD
       WHERE USUARIOID = P_USUARIOID
         AND (BLOQUEO = 0 OR BLOQUEO = 1 OR BLOQUEO = 4);

      IF V_EXISTE = 0 THEN
         SELECT NVL (MAX (CARTCARDID), 413) + 1
           INTO P_CARTCARDID
           FROM CARTCARD.CARD;

         INSERT INTO CARTCARD.CARD
                     (CARTCARDID,
                      USUARIOID,
                      FECHAALTA,
                      FECHAVENCIMIENTO,
                      REFERENCIA, BLOQUEO, FECHASYS,
                      MEMBRECIAID,
                      ESTADOCONSULTAIT
                     )
              VALUES (P_CARTCARDID,
                      P_USUARIOID,
                      TO_DATE (P_FECHAALTA, 'DDMMYYYY-HH24:MI:SS'),
                      TO_DATE (P_FECHAVENCIMIENTO, 'DDMMYYYY-HH24:MI:SS'),
                      P_REFERENCIA,
                      0,
                      SYSDATE,
                      P_MEMBRESIAID,
                      0
                     );
         COMMIT;

      ELSE
         UPDATE CARTCARD.CARD
            SET FECHAALTA = TO_DATE (P_FECHAALTA, 'DDMMYYYY-HH24:MI:SS'),
                FECHAVENCIMIENTO = TO_DATE (P_FECHAVENCIMIENTO, 'DDMMYYYY-HH24:MI:SS'),
                BLOQUEO = 0,
                FECHASYS = SYSDATE,
                MEMBRECIAID = P_MEMBRESIAID
          WHERE USUARIOID = P_USUARIOID
            AND (BLOQUEO = 0 OR BLOQUEO = 1 OR BLOQUEO = 4);

         SELECT CARTCARDID
           INTO P_CARTCARDID
           FROM CARTCARD.CARD
          WHERE USUARIOID = P_USUARIOID
            AND (BLOQUEO = 0 OR BLOQUEO = 1 OR BLOQUEO = 4);

         COMMIT;

      END IF;
   END;


EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := 0;
      ROLLBACK;


END AGREGAMEMBRESIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE AgregamembresiaV2 (
   P_MEMBRESIAID        IN       CARTCARD.ICN_TARJETA.ID_TIPO_MEMBRESIA%TYPE,
   P_FECHAALTA          IN       VARCHAR2,
   P_FECHAVENCIMIENTO   IN       VARCHAR2,
   P_REFERENCIA         IN       CARTCARD.ICN_TARJETA.REFERENCIA%TYPE,
   P_RESULTADO          OUT      INTEGER
)
IS
/* ------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAMEMBRESIA                                                                   */
/* OBJETIVO: AGREGA O ACTUALIZA UNA MEMBRESIA PARA EL REGISTRO DEL USUARIO DENTRO DEL CORE DE IUPICARD.    */
/* AUTOR:    EQUIPO IUPICARD                                                                               */
/* FECHA CREACION: JUN/2010                                                                                */
/* FECHA MODIFICACION:                                                                                     */
/* EJEMPLO EJECUCION: EXEC AGREGAMEMBRESIA(<<P_MEMBRESIAID>>,..,<<:P_RESULTADO>>)                          */
/* --------------------------------------------------------------------------------------------------------*/
BEGIN
   P_RESULTADO := 0;

   UPDATE CARTCARD.ICN_TARJETA
      SET FECHA_CREACION = TO_DATE (P_FECHAALTA, 'DDMMYYYY-HH24:MI:SS'),
          FECHA_MEMBRECIA = TO_DATE (P_FECHAALTA, 'DDMMYYYY-HH24:MI:SS'),
          EXPIRATIONDATE = TO_DATE (P_FECHAVENCIMIENTO, 'DDMMYYYY-HH24:MI:SS'),
          ID_STATUS_TARJETA = 0,
          ULTIMA_MODIFICACION = SYSDATE,
          ID_TIPO_MEMBRESIA = P_MEMBRESIAID
    WHERE REFERENCIA = P_REFERENCIA
      AND (ID_STATUS_TARJETA = 0 OR ID_STATUS_TARJETA = 1 OR ID_STATUS_TARJETA = 4);

   COMMIT;
   P_RESULTADO := 1;

END AgregamembresiaV2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE AGREGAPETICIONCARDMARTECORE (
   p_cartcardid           IN   INTEGER,
   p_numerotarjeta        IN   VARCHAR2,
   p_pproductcode         IN   NUMBER,
   p_pid                  IN   VARCHAR2,
   p_pidtype              IN   NUMBER,
   p_pidexpiration        IN   NUMBER,
   p_pidcountry           IN   NUMBER,
   p_pidstate             IN   NUMBER,
   p_pfirstname           IN   VARCHAR2,
   p_plastname            IN   VARCHAR,
   p_pembossedname        IN   VARCHAR2,
   p_pdateofbirth         IN   VARCHAR2,
   p_pcountry             IN   NUMBER,
   p_pstate               IN   NUMBER,
   p_pcity                IN   VARCHAR2,
   p_paddress             IN   VARCHAR2,
   p_pzipcode             IN   NUMBER,
   p_pemail               IN   VARCHAR2,
   p_ptelephoneareacode   IN   NUMBER,
   p_ptelephone           IN   VARCHAR2,
   p_prbservice           IN   NUMBER,
   p_terminalcode         IN   VARCHAR2
)
IS
/* -------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAPETICIONCARDMARTE                                                      */
/* Objetivo: Agrega el registro de la solicitud de tarjeta.                       					  */
/* Autor:    Equipo CartCard (Siscon)                                                                 */
/* Fecha Creacion: Sep/2008                                                                           */
/* Fecha Modificacion:                                                                                */
/* Ejemplo Ejecucion: exec AGREGAPETICIONCARDMARTE(<<cartcardid>>,..,<<terminalcode>>)    			  */
/* -------------------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      INSERT INTO PASARELBAZ.pcc_creaciontarjeta
                  (cartcardid, numerotarjeta, pproductcode, pid,
                   pidtype, pidexpiration, pidcountry, pidstate,
                   pfirstname, plastname, pembossedname,
                   pdateofbirth, pcountry, pstate, pcity,
                   paddress, pzipcode, pemail, ptelephoneareacode,
                   ptelephone, prbservice, pterminalcode
                  )
           VALUES (p_cartcardid, p_numerotarjeta, p_pproductcode, p_pid,
                   p_pidtype, p_pidexpiration, p_pidcountry, p_pidstate,
                   p_pfirstname, p_plastname, p_pembossedname,
                   p_pdateofbirth, p_pcountry, p_pstate, p_pcity,
                   p_paddress, p_pzipcode, p_pemail, p_ptelephoneareacode,
                   p_ptelephone, p_prbservice, p_terminalcode
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END AGREGAPETICIONCARDMARTECORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGARESPUESTAACLARACION (
   p_numeroaclaracion    IN       INTEGER,
   p_usuarioid           IN       INTEGER,
   p_asunto              IN       VARCHAR2,
   p_respuesta           IN       CLOB,
   p_estatusaclaracion   IN       INTEGER,
   p_numerorespuesta     OUT      INTEGER,
   p_numeroregistro      OUT      INTEGER
)
IS
/* --------------------------------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGARESPUESTAACLARACION                                                                                         */
/* Objetivo: Agrega una nueva respuesta de Aclaración.                                                                                     */
/* Autor:    Equipo CartCard (Siscon)                                                                                                      */
/* Fecha Creacion: Dic/2008                                                                                                                */
/* Fecha Modificacion:                                                                                                                     */
/* Ejemplo Ejecucion: exec AGREGARESPUESTAACLARACION(<<numeroaclaracion>,..,<<estatusaclaracion>>,<<:numerorespuesta>>,<<numeroregistro>>) */
/* --------------------------------------------------------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      SELECT NVL (MAX (CARTCARD.cc_rspaclaracion.numerorespuesta), 0) + 1
        INTO p_numerorespuesta
        FROM CARTCARD.cc_rspaclaracion;

      SELECT NVL (MAX (CARTCARD.cc_rspaclaracion.numeroregistro), 0) + 1
        INTO p_numeroregistro
        FROM CARTCARD.cc_rspaclaracion
       WHERE CARTCARD.cc_rspaclaracion.numeroaclaracion = p_numeroaclaracion;

      INSERT INTO CARTCARD.cc_rspaclaracion
                  (CARTCARD.cc_rspaclaracion.numerorespuesta, CARTCARD.cc_rspaclaracion.numeroaclaracion, 
                   CARTCARD.cc_rspaclaracion.usuarioid, CARTCARD.cc_rspaclaracion.fecharespuesta, 
                   CARTCARD.cc_rspaclaracion.asunto, CARTCARD.cc_rspaclaracion.respuesta, 
                   CARTCARD.cc_rspaclaracion.numeroregistro
                  )
           VALUES (p_numerorespuesta, p_numeroaclaracion, p_usuarioid,
                   SYSDATE, p_asunto, p_respuesta, p_numeroregistro
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregarespuestaaclaracion;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE AGREGARESPUESTACARDMARTECORE (
   p_usuarioid              IN   INTEGER,
   p_numerotarjeta          IN   VARCHAR2,
   p_tokentarjeta           IN   VARCHAR2,
   p_sucessfullprocessing   IN   VARCHAR2,
   p_requestid              IN   INTEGER,
   p_systemname             IN   VARCHAR2,
   p_operationname          IN   VARCHAR2,
   p_timet                  IN   VARCHAR2,
   p_operationid            IN   INTEGER,
   p_resultcode             IN   INTEGER,
   p_resultmessage          IN   VARCHAR2,
   p_cvv                    IN   VARCHAR2,
   p_fechaexpiracion        IN   VARCHAR,
   p_embossedname           IN   VARCHAR2
)
IS
/* -------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGARESPUESTACARDMARTE                                                     */
/* Objetivo: Agrega la respuesta recibida de CardMarte.                                              */
/* Autor:    Equipo CartCard (Siscon)                                                                 */
/* Fecha Creacion: Sep/2008                                                                           */
/* Fecha Modificacion:                                                                                */
/* Ejemplo Ejecucion: exec AGREGARESPUESTACARDMARTE(<<usuarioid>>,..,<<cvv>>)                        */
/* -------------------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      UPDATE PASARELBAZ.pcc_tarjetascardmarte
         SET sucessfullprocessing = p_sucessfullprocessing,
             requestid = p_requestid,
             systemname = p_systemname,
             operationname = p_operationname,
             timet = p_timet,
             operationid = p_operationid,
             resultcode = p_resultcode,
             resultmessage = p_resultmessage,
             cvv = p_cvv,
             fechaexpiracion = TO_DATE (p_fechaexpiracion, 'YYYYmmDD'),
             embossedname = p_embossedname
       WHERE cartcardid = (SELECT cartcardid
                             FROM PASARELBAZ.pcc_suites
                            WHERE usuarioid = p_usuarioid)
         AND numerotarjeta = p_numerotarjeta
         AND tokentarjeta = p_tokentarjeta;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END AGREGARESPUESTACARDMARTECORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGARSOLICITUDPLASTICO (
   p_cartcardid       IN   INTEGER,
   p_usuarioid        IN   INTEGER,
   p_direccionenvio   IN   VARCHAR2
)
IS
/* ------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGARSOLICITUDPLASTICO                   								 */
/* Objetivo: Agrega una nueva solicitud de plastico.                								 */
/* Autor:    Equipo CartCard (Siscon)                               								 */
/* Fecha Creacion: Nov/2008                                         								 */
/* Fecha Modificacion:                                              								 */
/* Ejemplo Ejecucion: exec AGREGARSOLICITUDPLASTICO(<<cartcardid>>,<<usuarioid>>,<<direccionenvio>>) */
/* ------------------------------------------------------------------------------------------------- */
BEGIN
   INSERT INTO CARTCARD.cc_solicitudplastico
               (numerosolicitud, cartcardid,
                usuarioid, fechasolicitud, estadodecuentaid, direccionenvio
               )
        VALUES ((SELECT NVL (MAX (numerosolicitud), 0) + 1
                   FROM CARTCARD.cc_solicitudplastico), p_cartcardid,
                p_usuarioid, SYSDATE, 8, p_direccionenvio
               );

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregarsolicitudplastico;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGAR_MEMBRECIA (
		  p_duracion IN int,
		  p_descripcion IN varchar,
		  p_tipomoneda IN int,
		  p_costo IN number)
is
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ELIMINAR_MEMBRECIA                                              */
/* Objetivo: Elimina la membrecia, segun el criterio de busqueda.                        */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: ELIMINAR_MEMBRECIA     <Id>	                                     */
/* ------------------------------------------------------------------------------------- */
BEGIN       
insert into CARTCARD.membrecia (membreciaid, duracion, descripcion, tipomoneda, costo) values ((select max(membreciaid) + 1 from CARTCARD.membrecia), p_duracion, p_descripcion, p_tipomoneda, p_costo);
   
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL; 
	  
	  
end AGREGAR_MEMBRECIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE AGREGAR_MEMBRESIA (p_costo               IN   cartcard.ic_cat_tipo_membresia.costo%TYPE,
                               p_descripcion         IN   cartcard.ic_cat_tipo_membresia.descripcion%TYPE,
                               p_usuario_modifico    IN   cartcard.ic_cat_tipo_membresia.usuario_modifico%TYPE,
                               p_duracion            IN   cartcard.ic_cat_tipo_membresia.duracion%TYPE) IS
BEGIN
INSERT INTO cartcard.ic_cat_tipo_membresia
         (id_tipo_membresia, descripcion, costo, usuario_modifico, ultima_modificacion, duracion)
      values((select max(id_tipo_membresia) + 1 from CARTCARD.ic_cat_tipo_membresia),p_descripcion,p_costo, p_usuario_modifico,SYSDATE,p_duracion);

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error '||SQLCODE||' '||substr(SQLERRM, 1, 200));


END AGREGAR_MEMBRESIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGASITIOSFAVORITOS (
	   pUsuarioId 	   in Integer,
	   pDescripcion    in Varchar2,
	   pUrlFavorito	   in Varchar2	   
)
IS
/* ---------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGASITIOSFAVORITOS                                        */
/* Objetivo: Inserta un registro en la tabla cc_sitiosFavoritos.                      */
/* Autor:    Equipo CartCard (Siscon)                                                 */
/* Fecha Creacion: Dic/2008                                                           */
/* Fecha Modificacion:                                                                */
/* Ejemplo Ejecucion: exec AGREGASITIOSFAVORITOS(<<pUsuarioId>>...<<pUrlFavorito>>)   */
/* ---------------------------------------------------------------------------------- */
vConsecutivo           INTEGER      := 0;
BEGIN
	BEGIN	
	   SELECT NVL (MAX (CARTCARD.CC_SITIOSFAVORITOS.NUMSITIOUSUARIO), 0) + 1
	   INTO vConsecutivo
	   FROM CARTCARD.CC_SITIOSFAVORITOS
	   WHERE CARTCARD.CC_SITIOSFAVORITOS.USUARIOID = pUsuarioId;
		   
	   INSERT INTO CARTCARD.CC_SITIOSFAVORITOS (
	   CARTCARD.CC_SITIOSFAVORITOS.NUMSITIOUSUARIO, CARTCARD.CC_SITIOSFAVORITOS.USUARIOID, 
           CARTCARD.CC_SITIOSFAVORITOS.DESCRIPCIONCORTA, CARTCARD.CC_SITIOSFAVORITOS.URLFAVORITO) 
	   VALUES (vConsecutivo , pUsuarioId, pDescripcion, pUrlFavorito);
	
	END;
COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END AGREGASITIOSFAVORITOS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGASOLICITUDACLARACION (
   p_usuarioid           IN       INTEGER,
   p_numeroaclaracion    IN       INTEGER,
   p_asunto              IN       VARCHAR2,
   p_comentario          IN       CLOB,
   p_estatusaclaracion   IN       INTEGER,
   p_numeroregistro      OUT      INTEGER
)
IS
   v_numeroaclaracion   INTEGER;
/* ---------------------------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGASOLICITUDACLARACION                                                                                    */
/* Objetivo: Agrega una nueva solicitud de Aclaración.                                                                                */
/* Autor:    Equipo CartCard (Siscon)                                                                                                 */
/* Fecha Creacion: Dic/2008                                                                                                           */
/* Fecha Modificacion:                                                                                                                */
/* Ejemplo Ejecucion: exec AGREGASOLICITUDACLARACION(<<usuarioid>,..,<<estatusaclaracion>>,<<:numeroaclaracion>>,<<numeroregistro>>)  */
/* ---------------------------------------------------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      IF p_numeroaclaracion = 0
      THEN
         SELECT CARTCARD.numeroaclaracion_seq.NEXTVAL
           INTO v_numeroaclaracion
           FROM DUAL;
      ELSE
         v_numeroaclaracion := p_numeroaclaracion;
      END IF;

      SELECT NVL (MAX (CARTCARD.cc_slcaclaracion.numeroregistro), 0) + 1
        INTO p_numeroregistro
        FROM CARTCARD.cc_slcaclaracion
       WHERE CARTCARD.cc_slcaclaracion.numeroaclaracion = v_numeroaclaracion;

      INSERT INTO CARTCARD.cc_slcaclaracion
                  (CARTCARD.cc_slcaclaracion.numeroaclaracion, CARTCARD.cc_slcaclaracion.usuarioid, 
                   CARTCARD.cc_slcaclaracion.fechasolicitud, CARTCARD.cc_slcaclaracion.asunto,
                   CARTCARD.cc_slcaclaracion.comentario, CARTCARD.cc_slcaclaracion.estatusaclaracion, 
                   CARTCARD.cc_slcaclaracion.numeroregistro
                  )
           VALUES (v_numeroaclaracion, p_usuarioid, SYSDATE, p_asunto,
                   p_comentario, p_estatusaclaracion, p_numeroregistro
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END agregasolicitudaclaracion;
/

SHOW ERRORS;


CREATE OR REPLACE procedure AgregaTarjetaC3(PENumTarjeta    in cartcard.icn_tarjeta.cardnumber%type,
                           PEToken         in cartcard.icn_tarjeta.token%type,
                           PENombre        in cartcard.icn_clientes.nombre%type,
                           PEFechaExpira   in varchar2,
                           PECvv           in cartcard.icn_tarjeta.cvv%type,
                           PEIdMembrecia   in cartcard.icn_tarjeta.id_tipo_membresia%type,
                           PEPasscode      in varchar2,
                           PSReferencia    out cartcard.icn_contrato.referencia%type,
                           PSSuite         out cartcard.icn_contrato.suite%type,
                           PSCod_Error     out  number,
                           PSMsg_Error     out  varchar2) is
 vlExiste     number;
 vlError      Exception;
 vlUsuarioID  cartcard.Icn_Clientes.id_usuario%type;
 BEGIN
    PSCod_Error:=0;
        select COUNT(1) INTO vlExiste from cartcard.Icn_Tarjeta t
        where T.CARDNUMBER = PENumTarjeta;
        IF vlExiste>0 THEN
           RAISE vlError;
        END IF;

        CARTCARD.pkg_icn_servicio.add_cliente(PENombre,
                               NULL,--peapaterno
                               NULL,--peamaterno
                               'ANONIMO',--penombre_usuario
                               NULL, --pecontrasenia
                               'ANONIMO@ANONIMO.COM', --pecorreo_electronico
                               NULL,--pecp
                               NULL,--peciudad
                               NULL,--pecolonia
                               12,--peid_municipio
                               9,--peid_estado
                               141,--peid_pais
                               NULL,--pecalle
                               NULL,--penum_ext
                               NULL,--penum_int
                               NULL,--petelefono
                               NULL,--pecelular
                               NULL,--pefecha_nacimiento
                               1,--peid_tipo_identificacion
                               '123456789011',--penumero_identificacion
                               NULL,--petipo_cliente
                               'IUPICARD',--peusuario_modifico,
                               'TIENDA',--PECANAL
                               NULL, --pTelefono_oficina
                               NULL, --pextension
                               vlUsuarioID, 
                               PSReferencia,
                               PSSuite);--psidusuario

       cartcard.pkg_icn_servicio.add_tarjeta(PSReferencia,
                               PENumTarjeta,--pecardnumber
                               null,--pepterminalcode
                               null,--peproductcode
                               null,--pepid
                               null,--pepidtype
                               null,--peprbservice
                               null,--pepdateofbirth
                               null,--pepembossedname
                               null,--peptelephoneareacode
                               null,--peptelephone
                               null,--pepfaxareacode
                               null,--pepfaxphone
                               null,--pepcellphone
                               null,--pepcellphoneareacode
                               TO_NUMBER(TO_CHAR(TO_DATE(PEFechaExpira, 'YYYYMMdd' ),'YYYYMMdd')),--pepidexpiration
                               null,--pepidcountry
                               null,--pepidstate
                               null,--peplastname
                               null,--peppersonaltitle
                               null,--pepmaindenname
                               null,--pepmiddlename
                               null,--pepfirstname
                               null,--pepcountry
                               null,--pepstate
                               null,--pepcity
                               null,--pepaddress
                               null,--pepzipcode
                               null,--pepemail
                               null,--perequestid
                               null,--peoperationid
                               PEToken,--petoken
                               null,--peexpirationdate
                               PEPasscode,--peverificationcode
                               PEIdMembrecia,--peid_tipo_membresia
                               null,--peid_emisor
                               PECvv,--pecvv
                               null,--petipo_tarjeta
                               null,--peestatus_bloqueo
                               null,--pefecha_membrecia
                               null,--pefecha_creacion
                               'IUPICARD',--peusuario_modifico,
                               pscod_error ,
                               psmsg_error);

    cartcard.pkg_iupicard.ic_sp_inserta_documento(vlUsuarioID,--peidusuario
                                       1,--peidtipodocto
                                       'Identificacion Oficial',--penombre
                                       null,--pedocumento
                                       0,--peestatus
                                       'Documento Tienda',--pecomentario
                                       'IUPICARD',--peusuario
                                       NULL,--petipoarchivo
                                       pscod_error);

    cartcard.pkg_iupicard.ic_sp_inserta_documento(vlUsuarioID,--peidusuario
                                       2,--peidtipodocto
                                       'Comprobante de Domicilio',--penombre
                                       null,--pedocumento
                                       0,--peestatus
                                       'Documento Tienda',--pecomentario
                                       'IUPICARD',--peusuario
                                       NULL,--petipoarchivo
                                       pscod_error);

    commit;
    PSCod_Error:=1;
EXCEPTION
   WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENumTarjeta||' ya esta dado de alta';
  ROLLBACK;
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_DATOS.AgregaTarjetaC3  (' || SQLCODE || '  ' || SQLERRM || ')');
 END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGATARJETACORE (
   P_CARTCARDID           IN      PASARELBAZ.PCC_TARJETAS.CARTCARDID%TYPE,
   P_NUMEROTARJETA        IN      PASARELBAZ.PCC_TARJETAS.NUMEROTARJETA%TYPE,
   P_IDTIPOTARJETA        IN      PASARELBAZ.PCC_TARJETAS.IDTIPOTARJETA%TYPE,
   P_IDEMISOR             IN      PASARELBAZ.PCC_TARJETAS.IDEMISOR%TYPE,
   P_NOMBRETITULAR        IN      PASARELBAZ.PCC_TARJETAS.NOMBRETITULAR%TYPE,
   P_MESEXPIRA            IN      PASARELBAZ.PCC_TARJETAS.MESEXPIRA%TYPE,
   P_ANIOEXPIRA           IN      PASARELBAZ.PCC_TARJETAS.AÑOEXPIRA%TYPE,
   P_CODIGOSEGURIDAD      IN      PASARELBAZ.PCC_TARJETAS.CODIGOSEGURIDAD%TYPE,
   P_TOKENTARJETA         IN      PASARELBAZ.PCC_TARJETASCARDMARTE.TOKENTARJETA%TYPE,
   P_RESULTADO            OUT     INTEGER
)
IS
/* -------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGATARJETACORE                                          */
/* OBJETIVO: AGREGA LOS DATOS DE LA TARJETA DEL CLIENTE CREADO.                     */
/* AUTOR: EQUIPO IUPICARD                                                           */
/* FECHA CREACION: JUL/2010                                                         */
/* FECHA MODIFICACION:                                                              */
/* EJEMPLO EJECUCION: EXEC AGREGATARJETACORE(<<CARTCARDID>>,..,<<:P_RESULTADO>>)    */
/* -------------------------------------------------------------------------------- */
   V_EXISTE    INTEGER;
BEGIN
   P_RESULTADO := 1;
   BEGIN
      SELECT COUNT (CARTCARDID)
        INTO V_EXISTE
        FROM PASARELBAZ.PCC_TARJETAS
       WHERE CARTCARDID = P_CARTCARDID
         AND NUMEROTARJETA = P_NUMEROTARJETA;

      IF V_EXISTE = 0 THEN
            INSERT INTO PASARELBAZ.PCC_TARJETAS
                     (CARTCARDID, NUMEROTARJETA, IDTIPOTARJETA,
                      IDEMISOR, NOMBRETITULAR, MESEXPIRA,
                      AÑOEXPIRA, CODIGOSEGURIDAD, IDESTADOTARJETA,
                      FECHAREGISTRO, CODIGOVERIFICACION, CLAVEESTADOCVT
                     )
              VALUES (P_CARTCARDID, P_NUMEROTARJETA, P_IDTIPOTARJETA,
                      P_IDEMISOR, P_NOMBRETITULAR, P_MESEXPIRA,
                      P_ANIOEXPIRA, P_CODIGOSEGURIDAD, 1,
                      SYSDATE,'0',1
                     );

            IF P_IDTIPOTARJETA = 3 THEN
                  INSERT INTO PASARELBAZ.PCC_TARJETASCARDMARTE
                        (CARTCARDID, NUMEROTARJETA, TOKENTARJETA )
                  VALUES (P_CARTCARDID, P_NUMEROTARJETA, P_TOKENTARJETA );
            END IF;
      ELSE
            UPDATE PASARELBAZ.PCC_TARJETAS
               SET IDTIPOTARJETA = P_IDTIPOTARJETA,
                   IDEMISOR = P_IDEMISOR,
                   NOMBRETITULAR = P_NOMBRETITULAR,
                   MESEXPIRA = P_MESEXPIRA,
                   AÑOEXPIRA = P_ANIOEXPIRA,
                   CODIGOSEGURIDAD = P_CODIGOSEGURIDAD
             WHERE CARTCARDID = P_CARTCARDID AND NUMEROTARJETA = P_NUMEROTARJETA;

            IF P_IDTIPOTARJETA = 3 THEN
                UPDATE PASARELBAZ.PCC_TARJETASCARDMARTE
                   SET TOKENTARJETA = P_TOKENTARJETA
                 WHERE CARTCARDID = P_CARTCARDID
                   AND NUMEROTARJETA = P_NUMEROTARJETA;
            END IF;
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := 0;
      ROLLBACK;
END AGREGATARJETACORE;
/

SHOW ERRORS;


CREATE OR REPLACE procedure AgregaTarjetaIupiCard(PENumTarjeta in cartcard.ic_tarjetas.numero_tarjeta%type,
                                   PEToken         in cartcard.ic_tx_cardmarte_pcardcreation.token%type,
                                   PENombre        in cartcard.usuario.nombre%type,
                                   PEFechaExpira   in varchar2,
                                   PECvv           in cartcard.ic_tarjetas.cvv%type,
                                   PEIdMembrecia   in cartcard.card.membreciaid%type,
                                   PEPasscode      in varchar2,
                                   PECVVSE         in number,
                                   PSCartCardid    out cartcard.card.cartcardid%type,
                                   PSReferencia    out cartcard.card.referencia%type,
                                   PSSuite         out cartcard.ic_suite.id_suite%type,                                   
                                   PSCod_Error     out  number,
                                   PSMsg_Error     out  varchar2) is
 vlExiste     number; 
 vlError      Exception;                                   
 vlUsuarioID  cartcard.usuario.usuarioid%type;
 vlidPcc      CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.ID_PCC%type;
begin
 PSCod_Error:=0;
        select COUNT(1) INTO vlExiste from cartcard.IC_TARJETAS t
        where T.NUMERO_TARJETA = PENumTarjeta;
        IF vlExiste>0 THEN
           RAISE vlError;
        END IF; 
        SELECT COUNT(1) INTO vlExiste from PASARELBAZ.PCC_TARJETAS PT
        WHERE PT.NUMEROTARJETA = PENumTarjeta;
        IF vlExiste>0 THEN
           RAISE vlError;
        END IF; 

        SELECT CARTCARD.USUARIOID_SEQ.NEXTVAL INTO vlUsuarioID FROM DUAL;
        insert into CARTCARD.usuario (USUARIOID,
                             NOMBRE, MUNICIPIOID, PAISID, ESTADOID, ESTADODECUENTAID, NOMBREUSUARIO, MAIL, IDENTIFICACIONID, NUMEROIDENTIFICACION, descripcionmovimiento, FECHASYS)
                values (vlUsuarioID, PENombre, 12, 141, 9, 0, 'ANONIMO', 'ANONIMO@ANONIMO.COM', 1, '123456789011', 'Agrega Usuario IupiCard', sysdate);
         SELECT NVL (MAX (cartcardid), 413) + 1, CARTCARD.generareferencia
           INTO PSCartCardid, PSReferencia
           FROM CARTCARD.card;
         INSERT INTO CARTCARD.card
                     (cartcardid, usuarioid, fechaalta, fechavencimiento, referencia, bloqueo, fechasys, membreciaid, estadoconsultait)
              VALUES (PSCartCardid, vlUsuarioID,sysdate,sysdate,PSReferencia, 0, SYSDATE,PEIdMembrecia,0);
         
         CARTCARD.IC_MIGRAUSUARIO(vlUsuarioID);

        INSERT INTO CARTCARD.preguntasusuario
                  (usuarioid, preguntaestandar1id, respuesta1,
                   preguntaestandar2id, respuesta2, pregunta3,
                   respuesta3, pregunta4, respuesta4
                  )
           VALUES (vlUsuarioID, 1, 'x',
                   2, 'x', null,
                   null, null, null);
         
         CARTCARD.IC_NVUSUARIOCARDMARTE(vlUsuarioID,--paidusuario,
                                    '1870003700002',--papterminalcode,
                                    null,--paproductcode,
                                    null,--papid,
                                    null,--papidtype,
                                    null,--paprbservice
                                    null,--papdateofbirth
                                    penombre,--papembossedname
                                    null,--paptelephoneareacode
                                    null,--paptelephone
                                    null,--papfaxareacode
                                    null,--papfaxphone
                                    null,--papcellphone
                                    null,--papcellphoneareacode
                                    null,--papidexpiration
                                    null,--papidcountry
                                    null,--papidstate
                                    null,--paplastname
                                    null,--papmaindenname
                                    null,--papmiddlename
                                    null,--papfirstname
                                    null,--papcountry
                                    null,--papstate
                                    null,--papcity
                                    null,--papaddress
                                    null,--papzipcode
                                    null,--papemail
                                    null,--parequestid
                                    to_char(sysdate,'ddMMYYYY-HH24:MI:ss'),--pafechaejecucion
                                    null,--paoperationid
                                    null,--paresultcode
                                    null,--paresultmessage
                                    PEToken,--patoken
                                    PENumTarjeta,--pacardnumber
                                    penombre,--paemboseedname
                                    PEFechaExpira,--paexpirationdate
                                    PECvv,--paverificationcode
                                    'IUPICARD',--pusuario_modifico
                                    vlidPcc);--paidpcc OUT)
        INSERT INTO CARTCARD.IC_TARJETAS (ID_TARJETA,ID_EMISOR,ID_USUARIO,ID_STATUS_TARJETA,ID_PCC,TOKEN_TARJETA,NUMERO_TARJETA,FECHA_EXPIRACION,CVV,ESTATUS,TIPO_TARJETA,Passcode,FECHA_EMISION,USUARIO_MODIFICO,ULTIMA_MODIFICACION)
                        values (PSCartCardid,3,  --CARTMARTE
                                vlUsuarioID,0,vlidPcc,PEToken,PENumTarjeta,TO_DATE(PEFechaExpira, 'YYYYMMdd' ),PECvv,
                                3, -- POR ESTAMPAR
                                'IP', -- IUPICARD PREPAGO,
                                PEPasscode,
                                sysdate,'IUPICARD',sysdate);
         PASARELBAZ.Asignasuite(vlUsuarioID,PSCartCardid,PSSuite);
         CARTCARD.Ic_Agregasuite(vlUsuarioID,PSSuite,'IUPICARD');

         PASARELBAZ.AGREGATARJETA(PSCartCardid,
                                  PENumTarjeta,    
                                  3,
                                  3,
                                  PENombre,
                                  TO_CHAR(TO_DATE(PEFechaExpira, 'YYYYMMdd' ),'MM'),
                                  TO_CHAR(TO_DATE(PEFechaExpira, 'YYYYMMdd' ),'YYYY'),
                                  PECVVSE,
                                  PEToken,
                                  '0');
                                                                    

         PASARELBAZ.AGREGAPETICIONCARDMARTE (PSCartCardid,PENumTarjeta,
                                 null, null,1,           
                                 TO_NUMBER(TO_CHAR(TO_DATE(PEFechaExpira, 'YYYYMMdd' ),'YYYYMMdd')),
                                 null, null,
                                 PENombre,null, null,
                                 null, null, null, null,
                                 null, null, null, null,
                                 null,null, null);
    commit;
    PSCod_Error:=1;
EXCEPTION
   WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='El Numero de Tarjeta:'||PENumTarjeta||' ya esta dado de alta';
  ROLLBACK;      
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al AgregaTarjetaIupiCard  (' || SQLCODE || '  ' || SQLERRM || ')');
end AgregaTarjetaIupiCard;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGAUSUARIO (
   p_nombre                IN       VARCHAR2,
   p_apaterno              IN       VARCHAR2,
   p_amaterno              IN       VARCHAR2,
   p_calle                 IN       VARCHAR2,
   p_colonia               IN       VARCHAR2,
   p_municipioid           IN       INTEGER,
   p_ciudad                IN       VARCHAR2,
   p_codigopostal          IN       VARCHAR2,
   p_telefono              IN       VARCHAR2,
   p_celular               IN       VARCHAR2,
   p_fax                   IN       VARCHAR2,
   p_mail                  IN       VARCHAR2,
   p_paisid                IN       INTEGER,
   p_estadoid              IN       INTEGER,
   p_nombreusuario         IN       VARCHAR2,
   ppreguntaestandar1      IN       INTEGER,
   ppreguntaestandar2      IN       INTEGER,
   ppregunta1              IN       VARCHAR2,
   ppregunta2              IN       VARCHAR2,
   prespuestaestandar1     IN       VARCHAR2,
   prespuestaestandar2     IN       VARCHAR2,
   prespuesta1             IN       VARCHAR2,
   prespuesta2             IN       VARCHAR2,
   pidentificacion         IN       INTEGER,
   pnumeroidentificacion   IN       VARCHAR2,
   pcontrasenia            IN       VARCHAR,
   p_fechanacimiento       IN       VARCHAR2,
   p_newsLetters           IN      INTEGER,
   p_usuarioid             OUT      INTEGER
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAUSUARIO                                                       */
/* Objetivo: Agrega una nueva solicitud de plastico.                                       */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec AGREGAUSUARIO(<<nombre>>,..,<<fechanacimiento>>,<<:usuarioid>>) */
/* --------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      SELECT CARTCARD.usuarioid_seq.NEXTVAL
        INTO p_usuarioid
        FROM DUAL;

      INSERT INTO CARTCARD.usuario
                  (usuarioid, nombre, apaterno, amaterno, calle,
                   colonia, municipioid, ciudad, codigopostal,
                   telefono, celular, fax, mail, paisid,
                   estadoid, nombreusuario, estadodecuentaid,
                   identificacionid, numeroidentificacion, contrasenia,
                   fechasys, descripcionmovimiento,
                   fechanacimiento, identidadvalidada, news_letter
                  )
           VALUES (p_usuarioid, p_nombre, p_apaterno, p_amaterno, p_calle,
                   p_colonia, p_municipioid, p_ciudad, p_codigopostal,
                   p_telefono, p_celular, p_fax, p_mail, p_paisid,
                   p_estadoid, p_nombreusuario, 0,
                   pidentificacion, pnumeroidentificacion, pcontrasenia,
                   SYSDATE, 'Agrega Usuario',
                   TO_DATE (p_fechanacimiento, 'ddMMYYYY-HH24:MI:ss'), 0, p_newsLetters
                  );

      INSERT INTO CARTCARD.preguntasusuario
                  (usuarioid, preguntaestandar1id, respuesta1,
                   preguntaestandar2id, respuesta2, pregunta3,
                   respuesta3, pregunta4, respuesta4
                  )
           VALUES (p_usuarioid, ppreguntaestandar1, prespuestaestandar1,
                   ppreguntaestandar2, prespuestaestandar2, ppregunta1,
                   prespuesta1, ppregunta2, prespuesta2
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_usuarioid := 0;
      ROLLBACK;
END agregausuario;
/

SHOW ERRORS;


CREATE OR REPLACE procedure AGREGAUSUARIOLDAP(PEIdUsuario in cartcard.ic_usuario.id_usuario%type,
                                              PENombreUsuario in cartcard.ic_usuario.nombre_usuario%type,
                                              PENombre    in cartcard.ic_usuario.nombre%type,
                                              PEApaterno  in cartcard.ic_usuario.apaterno%type,
                                              PEAmaterno  in cartcard.ic_usuario.amaterno%type,
                                              PEContrasenia in cartcard.ic_usuario.contrasenia%type,
                                              PEMail        in cartcard.ic_usuario.correo_electronico%type,
                                              PSCodigo      out number) is
  vlExiste    number;
  vlUsuarioID  cartcard.usuario.usuarioid%type;
begin
  PSCodigo:=0;
  select count(1) into vlExiste
  from cartcard.usuario u
 where u.usuarioid = PEIdUsuario;

  if vlExiste=0 then
       -- valida correo electronico
       select count(1) into vlExiste
       from cartcard.usuario u
       where u.mail = PEMail;
       
       if vlExiste=0 then
        SELECT CARTCARD.USUARIOID_SEQ.NEXTVAL INTO vlUsuarioID FROM DUAL;

        insert into CARTCARD.usuario (USUARIOID,
                             nombreusuario,
                             NOMBRE,
                             apaterno,
                             amaterno,
                             contrasenia,
                             MUNICIPIOID,
                             PAISID,
                             ESTADOID,
                             ESTADODECUENTAID,
                             MAIL,
                             IDENTIFICACIONID,
                             descripcionmovimiento,
                             FECHASYS)
                     values (vlUsuarioID,
                             PENombreUsuario,
                             PENombre,
                             PEApaterno,
                             PEAmaterno,
                             PEContrasenia,
                             12,
                             141,
                             9,
                             1,
                             PEMail,
                             1,
                             'Agrega Usuario LDAP',
                             sysdate);
     
        insert into CARTCARD.IC_usuario (ID_USUARIO,
                             nombre_usuario,
                             NOMBRE,
                             apaterno,
                             amaterno,
                             contrasenia,
                             ID_MUNICIPIO,
                             ID_PAIS,
                             ID_ESTADO,
                             ID_STATUS_CUENTA,
                             CORREO_ELECTRONICO,
                             ID_TIPO_IDENTIFICACION,
                             FECHA_CREACION)
                     values (vlUsuarioID,
                             PENombreUsuario,
                             PENombre,
                             PEApaterno,
                             PEAmaterno,
                             PEContrasenia,
                             12,
                             141,
                             9,
                             1,
                             PEMail,
                             1,
                             sysdate);

      INSERT INTO CARTCARD.preguntasusuario
                  (usuarioid, preguntaestandar1id, respuesta1,
                   preguntaestandar2id, respuesta2, pregunta3,
                   respuesta3, pregunta4, respuesta4
                  )
           VALUES (vlUsuarioID, 1, 'EKECgg5+NesXlwCSsK3Hww==',
                   2, 'EKECgg5+NesXlwCSsK3Hww==', null,
                   null, null, null);
   else
     update CARTCARD.usuario us
     set us.contrasenia = PEContrasenia,
         us.descripcionmovimiento='Actualiza Usuario LDAP'
     where us.mail = PEMail;

     update CARTCARD.IC_usuario us          
     set us.contrasenia = PEContrasenia
     where us.correo_electronico = PEMail;     
   end if;
  else    
     update CARTCARD.usuario us
     set us.contrasenia = PEContrasenia,
         us.descripcionmovimiento='Actualiza Usuario LDAP'
     where us.usuarioid = PEIdUsuario;

     update CARTCARD.IC_usuario us          
     set us.contrasenia = PEContrasenia
     where us.id_usuario = PEIdUsuario;
  end if;
    COMMIT;
    PSCodigo:=1;
  exception
       WHEN others THEN
     PSCodigo:=0;
    ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al AGREGAUSUARIOLDAP  (' || SQLCODE || '  ' || SQLERRM || ')');    
end AGREGAUSUARIOLDAP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGAUSUARIOTEMP (
    P_IDUSUARIO    IN    CARTCARD.USUARIO_CORE.ID_USUARIO%TYPE,
    P_USUARIO      IN    CARTCARD.USUARIO_CORE.USUARIO%TYPE,
    P_CONTRASENIA  IN    CARTCARD.USUARIO_CORE.CONTRASENIA%TYPE,
    P_RESULTADO    OUT   INTEGER
)
IS
/* -------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAUSUARIOTEMP                                          */
/* OBJETIVO: AGREGA UN USUARIO DENTRO DE USUARIO CORE                               */
/* AUTOR: EQUIPO IUPICARD                                                           */
/* FECHA CREACION: JULIO/2010                                                       */
/* FECHA MODIFICACION:                                                              */
/* EJEMPLO EJECUCION: EXEC AGREGAUSUARIOTEMP(<<P_IDUSUARIO>>,..,<:P_RESULTADO>)     */
/* -------------------------------------------------------------------------------- */
BEGIN
   P_RESULTADO := 1;

    INSERT INTO CARTCARD.USUARIO_CORE USC ( USC.ID_USUARIO, USC.USUARIO, USC.CONTRASENIA)
         VALUES (P_IDUSUARIO, P_USUARIO, P_CONTRASENIA);
   
 COMMIT;

    EXCEPTION
      WHEN NO_DATA_FOUND THEN
         P_RESULTADO := 0;
         ROLLBACK;

END AGREGAUSUARIOTEMP;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGAUSUARIO_CORE (
   P_NOMBRE                IN       CARTCARD.USUARIO.NOMBRE%TYPE,
   P_APATERNO              IN       CARTCARD.USUARIO.APATERNO%TYPE,
   P_AMATERNO              IN       CARTCARD.USUARIO.AMATERNO%TYPE,
   P_CALLE                 IN       CARTCARD.USUARIO.CALLE%TYPE,
   P_COLONIA               IN       CARTCARD.USUARIO.COLONIA%TYPE,
   P_MUNICIPIOID           IN       CARTCARD.USUARIO.MUNICIPIOID%TYPE,
   P_CIUDAD                IN       CARTCARD.USUARIO.CIUDAD%TYPE,
   P_CODIGOPOSTAL          IN       CARTCARD.USUARIO.CODIGOPOSTAL%TYPE,
   P_TELEFONO              IN       CARTCARD.USUARIO.TELEFONO%TYPE,
   P_CELULAR               IN       CARTCARD.USUARIO.CELULAR%TYPE,
   P_MAIL                  IN       CARTCARD.USUARIO.MAIL%TYPE,
   P_PAISID                IN       CARTCARD.USUARIO.PAISID%TYPE,
   P_ESTADOID              IN       CARTCARD.USUARIO.ESTADOID%TYPE,
   P_NOMBREUSUARIO         IN       CARTCARD.USUARIO.NOMBREUSUARIO%TYPE,
   P_PREGUNTAESTANDAR1     IN       CARTCARD.PREGUNTASUSUARIO.PREGUNTAESTANDAR1ID%TYPE,
   P_PREGUNTAESTANDAR2     IN       CARTCARD.PREGUNTASUSUARIO.PREGUNTAESTANDAR2ID%TYPE,
   P_RESPUESTAESTANDAR1    IN       CARTCARD.PREGUNTASUSUARIO.RESPUESTA1%TYPE,
   P_RESPUESTAESTANDAR2    IN       CARTCARD.PREGUNTASUSUARIO.RESPUESTA2%TYPE,
   P_IDENTIFICACION        IN       CARTCARD.USUARIO.IDENTIFICACIONID%TYPE,
   P_NUMIDENTIFICACION     IN       CARTCARD.USUARIO.NUMEROIDENTIFICACION%TYPE,
   P_CONTRASENIA           IN       CARTCARD.USUARIO.CONTRASENIA%TYPE,
   P_FECHANACIMIENTO       IN       VARCHAR2,
   P_NEWSLETTERS           IN       CARTCARD.USUARIO.NEWS_LETTER%TYPE,
   P_USUARIOID             OUT      CARTCARD.USUARIO.USUARIOID%TYPE
)
IS
/* --------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAUSUARIO_CORE                                                      */
/* OBJETIVO: REGISTRA UN NUEVO USUARIO EN CARTCARD Y AGREGA SUS PREGUNTAS SECRETAS               */
/* AUTOR: EQUIPO IUPICARD                                                                        */
/* FECHA CREACION: JULIO/2010                                                                    */
/* FECHA MODIFICACION:                                                                           */
/* EJEMPLO EJECUCION: EXEC AGREGAUSUARIO_CORE(<P_NOMBRE>>,..,<<:P_USUARIOID>>)                   */
/* --------------------------------------------------------------------------------------------- */
BEGIN

      SELECT CARTCARD.USUARIOID_SEQ.NEXTVAL
        INTO P_USUARIOID
        FROM DUAL;

      INSERT INTO CARTCARD.USUARIO
                  (USUARIOID, NOMBRE, APATERNO, AMATERNO, CALLE,
                   COLONIA, MUNICIPIOID, CIUDAD, CODIGOPOSTAL,
                   TELEFONO, CELULAR, MAIL, PAISID,
                   ESTADOID, NOMBREUSUARIO, ESTADODECUENTAID,
                   IDENTIFICACIONID, NUMEROIDENTIFICACION, CONTRASENIA,
                   FECHASYS, DESCRIPCIONMOVIMIENTO,
                   FECHANACIMIENTO, IDENTIDADVALIDADA, NEWS_LETTER
                  )
           VALUES (P_USUARIOID, P_NOMBRE, P_APATERNO, P_AMATERNO, P_CALLE,
                   P_COLONIA, P_MUNICIPIOID, P_CIUDAD, P_CODIGOPOSTAL,
                   P_TELEFONO, P_CELULAR, P_MAIL, P_PAISID,
                   P_ESTADOID, P_NOMBREUSUARIO, 0,
                   P_IDENTIFICACION, P_NUMIDENTIFICACION, P_CONTRASENIA,
                   SYSDATE, 'AGREGA USUARIO',
                   TO_DATE (P_FECHANACIMIENTO, 'DDMMYYYY-HH24:MI:SS'), 0, P_NEWSLETTERS
                  );

  
   INSERT INTO CARTCARD.PREGUNTASUSUARIO
              (USUARIOID, PREGUNTAESTANDAR1ID, RESPUESTA1,
               PREGUNTAESTANDAR2ID, RESPUESTA2
               )
   VALUES (P_USUARIOID, P_PREGUNTAESTANDAR1, P_RESPUESTAESTANDAR1,
               P_PREGUNTAESTANDAR2, P_RESPUESTAESTANDAR2
              );

   COMMIT;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
     P_USUARIOID := 0;
  ROLLBACK;


END AGREGAUSUARIO_CORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          AGREGAVERIFICACIONVENTANILLA (
   pUsuarioId           IN         INTEGER,
   p_usuariodepositante   IN       VARCHAR2,   
   p_fechaoperacion       IN       VARCHAR2,
   p_codigoresultado      IN       VARCHAR2,
   p_mensajeresultado     IN       VARCHAR2,
   p_ip                   IN       VARCHAR2,
   p_mensajeoperacion     IN       VARCHAR2,
   p_operacionid          OUT      INTEGER,
   pCantidadDepositada	  in	   Float,
   pTipoCambio			  in	   Float,
   pCartCardId			  in	   integer
)
IS
/* ----------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: agregaVerificacionVentanilla                                               				 */
/* Objetivo: Agrega un registro como operación en ventanilla.                             				 */
/* Autor:    Equipo CartCard (Siscon)                                                  					 */
/* Fecha Creacion: Nov/2008                                                            					 */
/* Fecha Modificacion:                                                                 					 */
/* Ejemplo Ejecucion: exec agregaVerificacionVentanilla(<<referencia>>,..,<<mensajeoperacion>>,<<:operacionid>>)  */
/* ----------------------------------------------------------------------------------------------------- */
vReferencia VARCHAR2(100);
BEGIN
   BEGIN
      SELECT CARTCARD.operacionventanillaseq.NEXTVAL
        INTO p_operacionid
        FROM DUAL;
		
		select CARTCARD.card.referencia into vReferencia from CARTCARD.card where CARTCARD.card.usuarioId = pUsuarioId;
		
		INSERT INTO CARTCARD.OPERACIONVENTANILLA (
		   CARTCARD.OPERACIONVENTANILLA.OPERACIONID, CARTCARD.OPERACIONVENTANILLA.NCONSECUTIVO, CARTCARD.OPERACIONVENTANILLA.REFERENCIA, 
		   CARTCARD.OPERACIONVENTANILLA.USUARIODEPOSITANTE, CARTCARD.OPERACIONVENTANILLA.CANTIDADDEPOSITADA, CARTCARD.OPERACIONVENTANILLA.FECHAOPERACION, CARTCARD.OPERACIONVENTANILLA.CODIGORESULTADO, 
		   CARTCARD.OPERACIONVENTANILLA.MENSAJERESULTADO, CARTCARD.OPERACIONVENTANILLA.IP, CARTCARD.OPERACIONVENTANILLA.FECHASYS, 
		   CARTCARD.OPERACIONVENTANILLA.CARTCARDID, CARTCARD.OPERACIONVENTANILLA.TIPOCAMBIOUSD, CARTCARD.OPERACIONVENTANILLA.MENSAJEOPERACION) 
		VALUES (p_operacionid, 0, vReferencia, 
			    p_usuariodepositante, pCantidadDepositada ,TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                p_codigoresultado, p_mensajeresultado, p_ip, SYSDATE,
                pCartCardId,pTipoCambio,p_mensajeoperacion);
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_operacionid := 0;
      ROLLBACK;
END agregaVerificacionVentanilla;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ASIGNANUMLOTE (
    P_IDTARJETAS          IN   CARTCARD.T_P_ACTIVADAS.ID_T_P_ACTIVADAS%TYPE,
    P_NUMLOTE             IN   CARTCARD.T_P_ACTIVADAS.NUMLOTE_MATERIALES%TYPE,
    P_MENSAJERESULTADO    OUT  VARCHAR2
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ASIGNANUMLOTE                                               */
/* OBJETIVO: ASIGNA UN NUMERO DE LOTE A LAS TARJETAS PREACTIVADAS                    */
/* AUTOR: EQUIPO IUPICARD                                                            */
/* FECHA CREACION: JUL/2010                                                          */
/* FECHA MODIFICACION:                                                               */
/* EJEMPLO EJECUCION: EXEC ASIGNANUMLOTE(<P_IDTARJETAS>,...,<<P_MENSAJERESULTADO>))  */
/* --------------------------------------------------------------------------------- */
BEGIN
    
     UPDATE CARTCARD.T_P_ACTIVADAS TPA
        SET TPA.NUMLOTE_MATERIALES = P_NUMLOTE
      WHERE TPA.ID_T_P_ACTIVADAS = P_IDTARJETAS;
     
     P_MENSAJERESULTADO := '000';

     COMMIT;

 EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_MENSAJERESULTADO := '001';
      ROLLBACK;
      
   WHEN OTHERS THEN
      P_MENSAJERESULTADO := '001';
      ROLLBACK;

END ASIGNANUMLOTE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ASIGNASUITECORE (
   P_USUARIOID     IN       PASARELBAZ.PCC_SUITES.USUARIOID%TYPE,
   P_CARTCARDID    IN       PASARELBAZ.PCC_SUITES.CARTCARDID%TYPE,
   P_SUITE         IN       PASARELBAZ.PCC_SUITES.IDSUITE%TYPE,
   P_RESULTADO     OUT      INTEGER
)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: ASIGNASUITECORE                                               */
/* OBJETIVO: CREA UNA SUITE AL USUARIO RECIBIDO                                        */
/* AUTOR: EQUIPO IUPICARD                                                              */
/* FECHA CREACION: JULIO/2010                                                          */
/* FECHA MODIFICACION:                                                                 */
/* EJEMPLO EJECUCION: EXEC ASIGNASUITECORE(<<USUARIOID>>,<<CARTCARDID>>,<<SUITE>>))    */
/* ----------------------------------------------------------------------------------- */
   V_EXISTE_SUITE   INTEGER;
BEGIN
   P_RESULTADO := 1;

   SELECT COUNT (PSU.IDSUITE)
     INTO V_EXISTE_SUITE
     FROM PASARELBAZ.PCC_SUITES PSU
    WHERE PSU.IDSUITE = P_SUITE;

 IF V_EXISTE_SUITE = 0 THEN
  INSERT INTO PASARELBAZ.PCC_SUITES PSU
      (PSU.IDSUITE,
       PSU.CARTCARDID,
       PSU.USUARIOID
      )
     VALUES (P_SUITE,
       P_CARTCARDID,
       P_USUARIOID
      );
  COMMIT;
   ELSE
  P_RESULTADO := -1;   -- SUITE YA EXISTE
   END IF;


EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := 0;
      ROLLBACK;
END ASIGNASUITECORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Bloqueatarjeta (p_cartcardid IN NUMBER)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BLOQUEATARJETA                                                   */
/* Objetivo: Establece el estatus de la membrecia a bloqueada.                             */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion: Abril / 2009                                                                    */
/* Ejemplo Ejecucion: exec BLOQUEATARJETA(<<cartcardid>>)                           */
/* --------------------------------------------------------------------------------------- */
BEGIN
   UPDATE CARTCARD.CARD
      SET bloqueo = 0
    WHERE cartcardid = p_cartcardid;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END Bloqueatarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE BloqueatarjetaV2 (p_referencia IN NUMBER)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BLOQUEATARJETA                                                   */
/* Objetivo: Establece el estatus de la membrecia a bloqueada.                             */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion: Abril / 2009                                                                    */
/* Ejemplo Ejecucion: exec BLOQUEATARJETA(<<cartcardid>>)                           */
/* --------------------------------------------------------------------------------------- */
BEGIN
   UPDATE CARTCARD.ICN_TARJETA
      SET ID_STATUS_TARJETA = 0
    WHERE REFERENCIA = p_referencia;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END BloqueatarjetaV2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          BUSCAIPSUSUARIO (
   pUserName   IN       VARCHAR2,
   pIps    	   OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCAIPSUSUARIO                               					   */
/* Objetivo: Regresa las ip de un usuario.                              	   			   */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCAIPSUSUARIO(<<pUserName>>,<<:cursor>>)                 	   */
/* --------------------------------------------------------------------------------------- */
BEGIN
	 open pIps for
	    select distinct(CARTCARD.loginhst.ip) from CARTCARD.loginhst
		where CARTCARD.loginhst.alias = pUsername;
END BUSCAIPSUSUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          BUSCARPROVINCIA (
   pusuarioid   IN       INTEGER,
   pusuario     OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCARPROVINCIA                                            	   */
/* Objetivo: Busca los datos de la provincia del usuario solicitado.                       */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCARPROVINCIA(<<pusuarioid>>,<<:pusuario>>) 				   */
/* --------------------------------------------------------------------------------------- */
BEGIN
   OPEN pusuario FOR
      SELECT usuarioid, paisid, provincia
        FROM CARTCARD.provincias
       WHERE usuarioid = pusuarioid;
END buscarprovincia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE BUSCARUSUARIOPORTARJETA (
   P_NUMTARJETA       IN       PASARELBAZ.PCC_TARJETAS.NUMEROTARJETA%TYPE,
   P_RESULTADO        OUT      INTEGER,
   P_CURSOR           OUT      SYS_REFCURSOR
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCARUSUARIOPORTARJETA                                           */
/* OBJETIVO: RETORNA LOS DATOS DEL USUARIO POR LA TARJETA                                  */
/* AUTOR:    EQUIPO IUPICARD                                                               */
/* FECHA CREACION: ABRIL/2010                                                              */
/* FECHA MODIFICACION:                                                                     */
/* EJEMPLO EJECUCION: EXEC BUSCARUSUARIOPORTARJETA(<<P_NUMTARJETA>>,<<:CURSOR>>)           */
/* --------------------------------------------------------------------------------------- */
   V_ESTADOID    INTEGER;
   V_CARTCARDID  PASARELBAZ.PCC_TARJETAS.CARTCARDID%TYPE;
BEGIN
   P_RESULTADO := 1;

     SELECT NVL(PT.CARTCARDID, -1)
     INTO V_CARTCARDID
     FROM PASARELBAZ.PCC_TARJETAS PT
     WHERE PT.NUMEROTARJETA = P_NUMTARJETA;

   SELECT NVL(MAX(ESTADOID), -1)
      INTO V_ESTADOID
      FROM CARTCARD.USUARIO INNER JOIN CARTCARD.CARD ON CARTCARD.USUARIO.USUARIOID = CARTCARD.CARD.USUARIOID
      WHERE CARTCARDID = V_CARTCARDID;

   IF V_CARTCARDID != -1 THEN
       IF V_ESTADOID != 999 THEN
          OPEN P_CURSOR FOR
             SELECT CARTCARD.USUARIO.USUARIOID, NOMBRE, APATERNO, AMATERNO,
                    CALLE, COLONIA, MUNICIPIOID, CIUDAD, CODIGOPOSTAL, TELEFONO,
                    FAX, CARTCARD.USUARIO.PAISID, CARTCARD.USUARIO.ESTADOID,
                    NOMBREUSUARIO, ESTADODECUENTAID, IDENTIFICACIONID,
                    NUMEROIDENTIFICACION, CELULAR, CARTCARDID, FECHAVENCIMIENTO,
                    CLAVETELEFONICA, PAISIDCARDMARTE, ESTADOIDCARDMARTE, MAIL,
                    FECHANACIMIENTO, FECHAALTA, REFERENCIA
               FROM CARTCARD.USUARIO,
                    CARTCARD.CARD,
                    CARTCARD.PAIS,
                    CARTCARD.ESTADO
              WHERE CARTCARD.USUARIO.USUARIOID = CARTCARD.CARD.USUARIOID
                AND CARTCARD.PAIS.PAISID = CARTCARD.USUARIO.PAISID
                AND CARTCARD.ESTADO.PAISID = CARTCARD.USUARIO.PAISID
                AND CARTCARD.ESTADO.ESTADOID = CARTCARD.USUARIO.ESTADOID
                AND CARTCARD.CARD.CARTCARDID = V_CARTCARDID
                AND CARTCARD.CARD.BLOQUEO IN (0,1,4 );
       ELSE
          OPEN P_CURSOR FOR
             SELECT CARTCARD.USUARIO.USUARIOID, NOMBRE, APATERNO, AMATERNO,
                    CALLE, COLONIA, MUNICIPIOID, CIUDAD, CODIGOPOSTAL, TELEFONO,
                    FAX, CARTCARD.USUARIO.PAISID, CARTCARD.USUARIO.ESTADOID,
                    NOMBREUSUARIO, ESTADODECUENTAID, IDENTIFICACIONID,
                    NUMEROIDENTIFICACION, CELULAR, CARTCARDID, FECHAVENCIMIENTO,
                    CLAVETELEFONICA, 484 AS PAISIDCARDMARTE, REFERENCIA,
                    32 AS ESTADOIDCARDMARTE, MAIL, FECHANACIMIENTO, FECHAALTA
               FROM CARTCARD.USUARIO,
                    CARTCARD.PAIS,
                    CARTCARD.PROVINCIAS,
                    CARTCARD.CARD
              WHERE CARTCARD.USUARIO.USUARIOID = CARTCARD.CARD.USUARIOID
                AND CARTCARD.CARD.CARTCARDID = V_CARTCARDID
                AND CARTCARD.PAIS.PAISID = CARTCARD.USUARIO.PAISID
                AND CARTCARD.PROVINCIAS.PAISID = CARTCARD.USUARIO.PAISID
                AND CARTCARD.PROVINCIAS.USUARIOID = CARTCARD.USUARIO.USUARIOID;
       END IF;
    ELSE
       P_RESULTADO := 0;
    END IF;

    EXCEPTION
       WHEN NO_DATA_FOUND THEN
             P_RESULTADO := 0;
       WHEN OTHERS THEN
            P_RESULTADO := 0;

END BUSCARUSUARIOPORTARJETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Buscarusuarioportarjetav2 (
   P_NUMTARJETA       IN       CARTCARD.ICN_TARJETA.CARDNUMBER%TYPE,
   P_RESULTADO        OUT      INTEGER,
   P_CURSOR           OUT      SYS_REFCURSOR
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCARUSUARIOPORTARJETA                                           */
/* OBJETIVO: RETORNA LOS DATOS DEL USUARIO POR LA TARJETA                                  */
/* AUTOR:    EQUIPO IUPICARD                                                               */
/* FECHA CREACION: ABRIL/2010                                                              */
/* FECHA MODIFICACION:                                                                     */
/* EJEMPLO EJECUCION: EXEC BUSCARUSUARIOPORTARJETA(<<P_NUMTARJETA>>,<<:CURSOR>>)           */
/* --------------------------------------------------------------------------------------- */
V_ESTADOID    INTEGER;

BEGIN
   P_RESULTADO := 1;

   SELECT NVL(MAX(ID_ESTADO), -1)
     INTO V_ESTADOID
     FROM CARTCARD.ICN_CLIENTES U INNER JOIN CARTCARD.ICN_CONTRATO C ON U.ID_USUARIO = C.ID_USUARIO
    INNER JOIN CARTCARD.ICN_TARJETA T ON C.REFERENCIA = T.REFERENCIA
    WHERE T.CARDNUMBER = P_NUMTARJETA;

   IF V_ESTADOID != 999 THEN
      OPEN P_CURSOR FOR
         SELECT U.ID_USUARIO,
                U.NOMBRE,
                U.APATERNO,
                U.AMATERNO,
                U.CALLE,
                U.COLONIA,
                U.ID_MUNICIPIO,
                U.CIUDAD,
                U.CP,
                U.TELEFONO,
                --FAX,
                U.ID_PAIS,
                U.ID_ESTADO,
                U.NOMBRE_USUARIO,
                --ESTADODECUENTAID,
                U.ID_TIPO_IDENTIFICACION,
                U.NUMERO_IDENTIFICACION,
                U.CELULAR,
                --CARTCARDID,
                T.EXPIRATIONDATE,
                --CLAVETELEFONICA,
                --PAISIDCARDMARTE,
                --ESTADOIDCARDMARTE,
                U.CORREO_ELECTRONICO,
                U.FECHA_NACIMIENTO,
                T.FECHA_CREACION,
                T.REFERENCIA
               FROM CARTCARD.ICN_CLIENTES U
         INNER JOIN CARTCARD.ICN_CONTRATO C ON C.ID_USUARIO = U.ID_USUARIO
         INNER JOIN CARTCARD.ICN_TARJETA T ON T.REFERENCIA = C.REFERENCIA
              WHERE T.CARDNUMBER = P_NUMTARJETA
                AND T.ID_STATUS_TARJETA IN (0, 1, 4);
   ELSE
      OPEN P_CURSOR FOR
         SELECT U.ID_USUARIO,
                U.NOMBRE,
                U.APATERNO,
                U.AMATERNO,
                U.CALLE,
                U.COLONIA,
                U.ID_MUNICIPIO,
                U.CIUDAD,
                U.CP,
                U.TELEFONO,
                --FAX,
                U.ID_PAIS,
                U.ID_ESTADO,
                U.NOMBRE_USUARIO,
                --ESTADODECUENTAID,
                U.ID_TIPO_IDENTIFICACION,
                U.NUMERO_IDENTIFICACION,
                U.CELULAR,
                --CARTCARDID,
                T.EXPIRATIONDATE,
                --CLAVETELEFONICA,
                --PAISIDCARDMARTE,
                --ESTADOIDCARDMARTE,
                U.CORREO_ELECTRONICO,
                U.FECHA_NACIMIENTO,
                T.FECHA_CREACION,
                T.REFERENCIA
               FROM CARTCARD.ICN_CLIENTES U
         INNER JOIN CARTCARD.ICN_CONTRATO C ON C.ID_USUARIO = U.ID_USUARIO
         INNER JOIN CARTCARD.ICN_TARJETA T ON T.REFERENCIA = C.REFERENCIA
              WHERE T.CARDNUMBER = P_NUMTARJETA;
   END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := 0;
   WHEN OTHERS THEN
      P_RESULTADO := 0;

END Buscarusuarioportarjetav2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          BUSCASITIOSFAVORITOS (
	   pUsuarioId 	   in Integer,	   
	   pUrlFavorito	   out Sys_Refcursor   
)
IS
/* ---------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCASITIOSFAVORITOS                                         */
/* Objetivo: Busca todos los registros de la tabla cc_sitiosFavoritos por usuarioId.  */
/* Autor:    Equipo CartCard (Siscon)                                                 */
/* Fecha Creacion: Dic/2008                                                           */
/* Fecha Modificacion:                                                                */
/* Ejemplo Ejecucion: exec BUSCASITIOSFAVORITOS(<<pUsuarioId>>...<<pUrlFavorito>>)    */
/* ---------------------------------------------------------------------------------- */
BEGIN
open pUrlFavorito for
   SELECT 
   CARTCARD.CC_SITIOSFAVORITOS.NUMSITIOUSUARIO, CARTCARD.CC_SITIOSFAVORITOS.USUARIOID, 
   CARTCARD.CC_SITIOSFAVORITOS.DESCRIPCIONCORTA,CARTCARD.CC_SITIOSFAVORITOS.URLFAVORITO
   FROM CARTCARD.CC_SITIOSFAVORITOS
   where CARTCARD.CC_SITIOSFAVORITOS.USUARIOID = pUsuarioId;
END BUSCASITIOSFAVORITOS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE BUSCATARJETASUSUARIO (
   pusuarioid         IN       INTEGER,
   ptarjetasusuario   OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCATARJETASUSUARIO                                              */
/* Objetivo: Regresa el cartcardid del usuarioid solicitado.                       		   */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCATARJETASUSUARIO(<<pusuarioid>>,<<:ptarjetasusuario>>)      */
/* --------------------------------------------------------------------------------------- */
BEGIN
   OPEN ptarjetasusuario FOR
      SELECT cartcardid
        FROM CARTCARD.card
       WHERE usuarioid = pusuarioid
         AND bloqueo IN (0,1,4);
END buscatarjetasusuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          BUSCAUSUARIONICK (
   pnombreusuario   IN       VARCHAR2,
   mensaje          OUT      VARCHAR2
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCAUSUARIONICK                                                  */
/* Objetivo: Identifica sí existe o no el usuario solicitado.                              */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCAUSUARIONICK(<<pnombreusuario>>,<<:mensaje>>)               */
/* --------------------------------------------------------------------------------------- */
   p_nombre   INTEGER := 0;
BEGIN
   SELECT COUNT (nombreusuario)
     INTO p_nombre
     FROM CARTCARD.usuario
    WHERE LOWER (nombreusuario) = LOWER (pnombreusuario);

   IF (p_nombre > 0)
   THEN
      mensaje := 'error.usuarioNoDisponible';
   ELSE
      mensaje := 'error.usuarioDisponible';
   END IF;
END buscausuarionick;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          BUSCAUSUARIOPORID (
   pusuarioid   IN       INTEGER,
   pusuario     OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCAUSUARIOPORID                                                 */
/* Objetivo: Retorna los datos del usuarioId solicitado.                              	   */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCAUSUARIOPORID(<<pusuarioid>>,<<:pusuario>>)                 */
/* --------------------------------------------------------------------------------------- */
   vestadoid   INTEGER;
BEGIN
   SELECT estadoid
     INTO vestadoid
     FROM CARTCARD.usuario
    WHERE usuarioid = pusuarioid;

   IF vestadoid != 999
   THEN
      OPEN pusuario FOR
         SELECT usuarioid, nombre, apaterno, amaterno, calle, colonia,
                us.municipioid, ciudad, codigopostal, telefono, fax,
                us.paisid, us.estadoid, nombreusuario, estadodecuentaid,
                identificacionid, numeroidentificacion, celular, mail,
                ps.nombrepais, ed.nombreestado, mu.nombremunicipio
           FROM CARTCARD.usuario us,
                CARTCARD.municipio mu,
                CARTCARD.pais ps,
                CARTCARD.estado ed
          WHERE usuarioid = pusuarioid
            AND ps.paisid = us.paisid
            AND ed.paisid = us.paisid
            AND ed.estadoid = us.estadoid
            AND mu.paisid = us.paisid
            AND mu.estadoid = us.estadoid
            AND mu.municipioid = us.municipioid;
   ELSE
      OPEN pusuario FOR
         SELECT us.usuarioid, nombre, apaterno, amaterno, calle, colonia,
                us.municipioid, ciudad, codigopostal, telefono, fax,
                us.paisid, us.estadoid, nombreusuario, estadodecuentaid,
                identificacionid, numeroidentificacion, celular, mail,
                ps.nombrepais, pr.provincia AS nombreestado,
                '' AS nombremunicipio
           FROM CARTCARD.usuario us, CARTCARD.pais ps,
                CARTCARD.provincias pr
          WHERE us.usuarioid = pusuarioid
            AND ps.paisid = us.paisid
            AND pr.paisid = us.paisid
            AND pr.usuarioid = us.usuarioid;
   END IF;
END buscausuarioporid;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE buscausuarioporidusuario (
   p_usuarioid   IN       INTEGER,
   p_cursor      OUT      sys_refcursor
)
IS
   v_estadoid   INTEGER;
BEGIN
  begin
   SELECT estadoid
     INTO v_estadoid
     FROM CARTCARD.usuario
    WHERE usuarioid = p_usuarioid;
  exception
  when no_data_found then
     OPEN p_cursor FOR
     SELECT NULL ID_USUARIO FROM CARTCARD.IC_USUARIO WHERE ID_USUARIO=-1;                       
  end;
   IF v_estadoid != 999
   THEN
      OPEN p_cursor FOR
         SELECT CARTCARD.usuario.usuarioid, nombre, apaterno, amaterno,
                calle, colonia, municipioid, ciudad, codigopostal, telefono,
                fax, usuario.paisid, usuario.estadoid, nombreusuario,
                estadodecuentaid, identificacionid, numeroidentificacion,
                celular, cartcardid, fechavencimiento, clavetelefonica,
                paisidcardmarte, estadoidcardmarte, mail, fechanacimiento,
                fechaalta, referencia
           FROM CARTCARD.usuario,
                CARTCARD.card,
                CARTCARD.pais,
                CARTCARD.estado
          WHERE CARTCARD.usuario.usuarioid = CARTCARD.card.usuarioid
            AND CARTCARD.pais.paisid = CARTCARD.usuario.paisid
            AND CARTCARD.estado.paisid = CARTCARD.usuario.paisid
            AND CARTCARD.estado.estadoid = CARTCARD.usuario.estadoid
            AND CARTCARD.usuario.usuarioid = p_usuarioid
            AND CARTCARD.card.bloqueo IN (0,1,4);
   ELSE
      OPEN p_cursor FOR
         SELECT CARTCARD.usuario.usuarioid, nombre, apaterno, amaterno,
                calle, colonia, municipioid, ciudad, codigopostal, telefono,
                fax, CARTCARD.usuario.paisid, CARTCARD.usuario.estadoid,
                nombreusuario, estadodecuentaid, identificacionid,
                numeroidentificacion, celular, cartcardid, fechavencimiento,
                clavetelefonica, 484 AS paisidcardmarte,
                32 AS estadoidcardmarte, mail, fechanacimiento, fechaalta,
                referencia
           FROM CARTCARD.usuario,
                CARTCARD.pais,
                CARTCARD.provincias,
                CARTCARD.card
          WHERE CARTCARD.usuario.usuarioid = CARTCARD.card.usuarioid
            AND CARTCARD.usuario.usuarioid = p_usuarioid
            AND CARTCARD.pais.paisid = CARTCARD.usuario.paisid
            AND CARTCARD.provincias.paisid = CARTCARD.usuario.paisid
            AND CARTCARD.provincias.usuarioid = CARTCARD.usuario.usuarioid;
   END IF;
END buscausuarioporidusuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Buscausuariopormail (
   p_mail       IN       VARCHAR2,
   pusuario     OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCAUSUARIOPORID                                                 */
/* Objetivo: Retorna los datos del usuarioId solicitado.                                     */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCAUSUARIOPORID(<<pusuarioid>>,<<:pusuario>>)                 */
/* --------------------------------------------------------------------------------------- */

BEGIN
    OPEN pusuario FOR
    SELECT usuarioid, nombreusuario
    FROM cartcard.USUARIO
    WHERE mail = p_mail;
END Buscausuariopormail;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Buscausuarioporreferencia (
   p_referencia   IN       VARCHAR2,
   p_cursor       OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCAUSUARIOPORREFERENCIA                                         */
/* Objetivo: Retorna los datos de la referencia solicitada.                                */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCAUSUARIOPORREFERENCIA(<<referencia>>,<<:cursor>>)           */
/* --------------------------------------------------------------------------------------- */
   v_estadoid   INTEGER;
BEGIN
   SELECT NVL(MAX(estadoid), -1)
     INTO v_estadoid
     FROM CARTCARD.USUARIO INNER JOIN CARTCARD.CARD ON CARTCARD.USUARIO.usuarioid =
                                                         CARTCARD.CARD.usuarioid
    WHERE referencia = p_referencia;

   IF v_estadoid != 999
   THEN
      OPEN p_cursor FOR
         SELECT CARTCARD.USUARIO.usuarioid, nombre, apaterno, amaterno,
                calle, colonia, municipioid, ciudad, codigopostal, telefono,
                fax, CARTCARD.USUARIO.paisid, CARTCARD.USUARIO.estadoid,
                nombreusuario, estadodecuentaid, identificacionid,
                numeroidentificacion, celular, cartcardid, fechavencimiento,
                clavetelefonica, paisidcardmarte, estadoidcardmarte, mail,
                fechanacimiento, fechaalta
           FROM CARTCARD.USUARIO,
                CARTCARD.CARD,
                CARTCARD.PAIS,
                CARTCARD.ESTADO
          WHERE CARTCARD.USUARIO.usuarioid = CARTCARD.CARD.usuarioid
            AND CARTCARD.PAIS.paisid = CARTCARD.USUARIO.paisid
            AND CARTCARD.ESTADO.paisid = CARTCARD.USUARIO.paisid
            AND CARTCARD.ESTADO.estadoid = CARTCARD.USUARIO.estadoid
            AND referencia = p_referencia
            AND CARTCARD.CARD.bloqueo IN (0,1,4);
   ELSE
      OPEN p_cursor FOR
         SELECT CARTCARD.USUARIO.usuarioid, nombre, apaterno, amaterno,
                calle, colonia, municipioid, ciudad, codigopostal, telefono,
                fax, CARTCARD.USUARIO.paisid, CARTCARD.USUARIO.estadoid,
                nombreusuario, estadodecuentaid, identificacionid,
                numeroidentificacion, celular, cartcardid, fechavencimiento,
                clavetelefonica, 484 AS paisidcardmarte,
                32 AS estadoidcardmarte, mail, fechanacimiento, fechaalta
           FROM CARTCARD.USUARIO,
                CARTCARD.PAIS,
                CARTCARD.PROVINCIAS,
                CARTCARD.CARD
          WHERE CARTCARD.USUARIO.usuarioid = CARTCARD.CARD.usuarioid
            AND CARTCARD.CARD.referencia = p_referencia
            AND CARTCARD.PAIS.paisid = CARTCARD.USUARIO.paisid
            AND CARTCARD.PROVINCIAS.paisid = CARTCARD.USUARIO.paisid
            AND CARTCARD.PROVINCIAS.usuarioid = CARTCARD.USUARIO.usuarioid;
   END IF;
END Buscausuarioporreferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE BUSCAUSUARIOPORREFERENCIAGASU (
   p_referencia   IN       INTEGER,
   pnombre        OUT      VARCHAR2
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCAUSUARIOPORREFERENCIAGASU                                     */
/* Objetivo: Retorna el nombre completo de la referencia solicitada.                       */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Sep/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCAUSUARIOPORREFERENCIAGASU(<<referencia>>,<<:nombre>>)       */
/* --------------------------------------------------------------------------------------- */
BEGIN
   SELECT nombre || ' ' || apaterno || ' ' || amaterno AS nomb
     INTO pnombre
     FROM CARTCARD.usuario, CARTCARD.card
    WHERE CARTCARD.usuario.usuarioid = CARTCARD.card.usuarioid
      AND referencia = p_referencia
      AND CARTCARD.card.bloqueo IN (0,1,4);
END buscausuarioporreferenciagasu;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Buscausuarioporreferenciav2 (
   p_referencia   IN       VARCHAR2,
   p_cursor       OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSCAUSUARIOPORREFERENCIA                                         */
/* Objetivo: Retorna los datos de la referencia solicitada.                                */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec BUSCAUSUARIOPORREFERENCIA(<<referencia>>,<<:cursor>>)           */
/* --------------------------------------------------------------------------------------- */
   v_estadoid   INTEGER;
BEGIN
   SELECT NVL(MAX(ID_ESTADO), -1)
     INTO v_estadoid
     FROM CARTCARD.ICN_CLIENTES U
    INNER JOIN CARTCARD.ICN_CONTRATO C ON U.ID_USUARIO = C.ID_USUARIO
    WHERE C.REFERENCIA = p_referencia;

   IF v_estadoid != 999
   THEN
      OPEN p_cursor FOR
         SELECT U.ID_USUARIO AS USUARIOID, 
                U.NOMBRE, 
                U.APATERNO,
                U.AMATERNO,
                U.CALLE,
                U.COLONIA,
                U.ID_MUNICIPIO AS MUNICIPIOID,
                U.CIUDAD,
                U.CP AS CODIGOPOSTAL,
                U.TELEFONO,
                '' AS FAX,
                U.ID_PAIS AS PAISID,
                U.ID_ESTADO AS ESTADOID,
                U.NOMBRE_USUARIO AS NOMBREUSUARIO,
                0 AS ESTADODECUENTAID,
                U.ID_TIPO_IDENTIFICACION AS IDENTIFICACIONID,
                U.NUMERO_IDENTIFICACION AS NUMEROIDENTIFICACION,
                '' AS CELULAR,
                0 AS CARTCARDID,
                T.EXPIRATIONDATE AS FECHAVENCIMIENTO,
                '' AS CLAVETELEFONICA,
                0 AS PAISIDCARDMARTE,
                0 AS ESTADOIDCARDMARTE,
                U.CORREO_ELECTRONICO AS MAIL,
                U.FECHA_NACIMIENTO AS FECHANACIMIENTO,
                FECHA_CREACION AS FECHAALTA,
                u.Telefono_Oficina,
                U.EXTENSION
           FROM CARTCARD.ICN_CLIENTES U
     INNER JOIN ICN_CONTRATO C ON U.ID_USUARIO = C.ID_USUARIO
     INNER JOIN ICN_TARJETA T ON C.REFERENCIA = T.REFERENCIA
          WHERE T.REFERENCIA = p_referencia
            AND T.ID_STATUS_TARJETA IN (0,1,4);
   ELSE
      OPEN p_cursor FOR
         SELECT U.ID_USUARIO AS USUARIOID,
                U.NOMBRE,
                U.APATERNO,
                U.AMATERNO,
                U.CALLE,
                U.COLONIA,
                U.ID_MUNICIPIO AS MUNICIPIOID,
                U.CIUDAD,
                U.CP AS CODIGOPOSTAL,
                U.TELEFONO,
                '' AS FAX,
                U.ID_PAIS AS PAISID,
                U.ID_ESTADO AS ESTADOID,
                U.NOMBRE_USUARIO AS NOMBREUSUARIO,
                0 AS ESTADODECUENTAID,
                U.ID_TIPO_IDENTIFICACION AS IDENTIFICACIONID,
                U.NUMERO_IDENTIFICACION AS NUMEROIDENTIFICACION,
                '' AS CELULAR,
                0 AS CARTCARDID,
                T.EXPIRATIONDATE AS FECHAVENCIMIENTO,
                '' AS CLAVETELEFONICA,
                484 AS PAISIDCARDMARTE,
                32 AS ESTADOIDCARDMARTE,
                U.CORREO_ELECTRONICO AS MAIL,
                U.FECHA_NACIMIENTO AS FECHANACIMIENTO,
                FECHA_CREACION AS FECHAALTA,
                U.TELEFONO_OFICINA,
                U.EXTENSION
           FROM CARTCARD.ICN_CLIENTES U
     INNER JOIN ICN_CONTRATO C ON U.ID_USUARIO = C.ID_USUARIO
     INNER JOIN ICN_TARJETA T ON C.REFERENCIA = T.REFERENCIA
          WHERE T.REFERENCIA = p_referencia;
   END IF;
END Buscausuarioporreferenciav2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          BUSQUEDA_MEMBRECIAS (
          p_duracion  IN varchar2, 
          p_descripcion IN varchar2, 
          p_cursor        OUT      sys_refcursor)
is
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSQUEDA_MEMBRECIAS                                             */
/* Objetivo: Obtiene los tipos de membrecia, segun el criterio de busqueda.              */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: BUSQUEDA_MEMBRECIAS <Duracion>,<Descripcion>,:<Cursor>)	         */
/* ------------------------------------------------------------------------------------- */

BEGIN       
OPEN       p_cursor FOR 
select membreciaid, duracion, M.descripcion descripcion, Mon.descripcion moneda, costo from CARTCARD.membrecia M
   inner join CARTCARD.moneda Mon on M.tipomoneda = Mon.tipomoneda
   where duracion = to_number(coalesce(p_duracion, '' ||duracion)) and
   M.descripcion like '%' || p_descripcion || '%';
   
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL; 
	  
	  
end BUSQUEDA_MEMBRECIAS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          BUSQUEDA_MEMBRECIA_ID (
          p_id  IN int, 
          p_cursor        OUT      sys_refcursor)
is
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: BUSQUEDA_MEMBRECIA_ID                                           */
/* Objetivo: Obtiene los tipos de membrecia, segun el criterio de busqueda.              */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: BUSQUEDA_MEMBRECIA_ID <Id>	                                     */
/* ------------------------------------------------------------------------------------- */
BEGIN       
OPEN       p_cursor FOR
select membreciaid, duracion, M.descripcion descripcion, Mon.descripcion moneda, M.tipomoneda tipomoneda, costo from CARTCARD.membrecia M
   inner join CARTCARD.moneda Mon on M.tipomoneda = Mon.tipomoneda
   where membreciaid = p_id;
   
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL; 
	  
	  
end BUSQUEDA_MEMBRECIA_ID;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CambioStatusBloqueo(pCardNumber IN cartcard.icn_tarjeta.cardnumber%type,
                           pStatusBloqueo in cartcard.icn_tarjeta.estatus_bloqueo%type,
                           pResultado out NUMBER,
                           pResultadoMsg out VARCHAR2) IS
BEGIN
     UPDATE cartcard.icn_tarjeta t
       SET t.estatus_bloqueo = NVL(pStatusBloqueo,t.estatus_bloqueo)
       WHERE t.cardnumber = pCardNumber;
  pResultado:=1;
  pResultadoMsg := 'OK';
    COMMIT;

EXCEPTION
  WHEN OTHERS THEN
     pResultado:=0;
     pResultadoMsg:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_DATOS.CambioStatusBloqueo  (' || SQLCODE || '  ' || SQLERRM || ')');
end;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CambioStatusTarjeta(pCardNumber IN cartcard.icn_tarjeta.cardnumber%type,
                           pStatusBloqueo in cartcard.icn_tarjeta.estatus_bloqueo%type,
                           pResultado out NUMBER,
                           pResultadoMsg out VARCHAR2) IS
BEGIN
     UPDATE cartcard.icn_tarjeta t
       SET t.estatus_bloqueo = NVL(pStatusBloqueo,t.estatus_bloqueo)
       WHERE t.cardnumber = pCardNumber;
  pResultado:=1;
  pResultadoMsg := 'OK';
    COMMIT;
 EXCEPTION
  WHEN OTHERS THEN
  pResultado:=0;
  pResultadoMsg:=SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizar el estatus  (' || SQLCODE || '  ' || SQLERRM || ')');
 END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_APLICACION (pIdAplicacion   IN   cartcard.icn_aplic.idaplicacion%TYPE,
                               p_descripcion      IN   cartcard.icn_aplic.DESCRIPCION%TYPE,
                               p_status IN cartcard.icn_aplic.status%TYPE,
                               p_usuario_modifico IN   cartcard.icn_aplic.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_aplic a
  where a.idaplicacion = pIdAplicacion ;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO CARTCARD.icn_aplic
        (idaplicacion, descripcion, status,usuario_modifico, ultima_modificacion)
         VALUES ((select (nvl(max(idaplicacion), 0)) + 1 from cartcard.icn_aplic), p_descripcion, p_status, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Aplicacion';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_aplic a
          SET a.descripcion = nvl(p_descripcion, a.descripcion),
              a.status = nvl(p_status, a.status),
             a.ultima_modificacion = SYSDATE,
             a.usuario_modifico = p_usuario_modifico
          WHERE a.idaplicacion = pIdAplicacion;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Aplicacion';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_aplic 
        where idaplicacion = pIdAplicacion;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Aplicacion';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.CAT_APLICACION(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_BANCO (pCodigo   IN   cartcard.icn_cat_banco.codigo%TYPE,
                               pCodigoNew   IN   cartcard.icn_cat_banco.codigo%TYPE,
                               p_nombre          IN   cartcard.icn_cat_banco.nombre%TYPE,
                               p_claveBanxico    IN  cartcard.icn_cat_banco.clave_banxico%TYPE,
                               p_usuarioModifico IN cartcard.icn_cat_banco.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_cat_banco b
  where b.codigo = pCodigo;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_cat_banco
        (codigo, nombre, clave_Banxico, usuario_modifico, ultima_modificacion)
         VALUES (pCodigo, p_nombre, p_claveBanxico, p_usuarioModifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Banco';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_cat_banco b
          SET b.codigo = nvl(pCodigoNew, b.codigo),
          b.nombre = nvl(p_nombre, b.nombre),
          b.clave_banxico = nvl(p_claveBanxico, b.clave_banxico),
          b.usuario_modifico = p_usuarioModifico,
          b.ultima_modificacion = SYSDATE
          WHERE b.codigo = pCodigo;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Banco';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        DELETE from cartcard.icn_cat_banco b
        WHERE b.codigo = pCodigo;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Banco';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.CAT_BANCO(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_CANAL (pIdCanal   IN   cartcard.ic_cat_canal.ID_CANAL%TYPE,
                               p_descripcion      IN   cartcard.ic_cat_canal.DESCRIPCION%TYPE,
                               p_usuario_modifico IN   cartcard.ic_cat_canal.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.ic_cat_canal c
  where c.id_canal = pIdCanal ;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO CARTCARD.IC_CAT_CANAL
        (id_canal, descripcion, usuario_modifico, ultima_modificacion)
         VALUES ((select max(ID_CANAL) + 1 from CARTCARD.ic_cat_canal), p_descripcion, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Canal';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.ic_cat_canal tm
          SET tm.descripcion = p_descripcion,
             tm.ultima_modificacion = SYSDATE,
             tm.usuario_modifico = p_usuario_modifico
          WHERE tm.ID_CANAL = pIdCanal;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Canal';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from CARTCARD.ic_cat_canal 
        where ID_CANAL = pIdCanal;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Canal';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CARTCARD.CAT_CANAL(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE cat_documento (pIdDocumento   IN   cartcard.ic_cat_documento.id_tipo_documento%TYPE,
                               p_descripcion      IN   cartcard.ic_cat_documento.DESCRIPCION%TYPE,
                               p_usuario_modifico IN   cartcard.ic_cat_documento.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS

v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.ic_cat_documento d
  where d.id_tipo_documento = pIdDocumento ;

    IF p_accion = 1 and v_existe = 0  THEN
         INSERT INTO cartcard.ic_cat_documento
         (id_tipo_documento, descripcion, usuario_modifico, fecha_modificacion)
         values((select max(id_tipo_documento) + 1 from cartcard.ic_cat_documento),p_descripcion, p_usuario_modifico,SYSDATE);
         resultado := 1;
         resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Documento';

    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE cartcard.ic_cat_documento td
          SET td.descripcion = p_descripcion,
             td.fecha_modificacion = SYSDATE,
             td.usuario_modifico = p_usuario_modifico
          WHERE td.id_tipo_documento = pIdDocumento;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Documento';

    ELSIF  p_accion =3 and v_existe != 0 THEN
        delete from cartcard.ic_cat_documento
        where id_tipo_documento = pIdDocumento;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Documento';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo ninguna accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex :=SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.cat_documento(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_GRUPO (pIdGrupo   IN    cartcard.icn_grupo.idgrupo%TYPE,
                               p_descripcion      IN   cartcard.icn_grupo.descripcion%TYPE,
                               p_status IN cartcard.icn_grupo.status%TYPE,
                               p_usuario_modifico IN  cartcard.icn_grupo.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT NUMBER,
                               resultadotex out VARCHAR2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_grupo g
  where g.idgrupo = pIdGrupo;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO CARTCARD.ICN_GRUPO
        (idgrupo, descripcion, status,usuario_modifico, ultima_modificacion)
         VALUES ((select (nvl(max(idgrupo), 0)) + 1 from cartcard.icn_grupo), p_descripcion, p_status, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Grupo';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE CARTCARD.ICN_GRUPO g
             SET g.descripcion         = nvl(p_descripcion, g.descripcion),
                 g.status              = nvl(p_status, g.status),
                 g.ultima_modificacion = SYSDATE,
                 g.usuario_modifico    = p_usuario_modifico
           WHERE g.idgrupo = pIdGrupo;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Grupo';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from CARTCARD.ICN_GRUPO g 
        where g.idgrupo = pIdGrupo;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Grupo';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.CAT_GRUPOS(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_GRUPOROLES (pIdgporol   IN   cartcard.ic_cat_grupo_roles.id%TYPE,
                               p_nombre      IN   cartcard.ic_cat_grupo_roles.nombre_grup_rol%TYPE,
                               p_usuario_modifico IN   cartcard.ic_cat_grupo_roles.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(r.id)
  into v_existe
  from cartcard.ic_cat_grupo_roles r
  where r.id = pIdgporol;

     IF p_accion =1 and v_existe = 0  THEN
         INSERT INTO cartcard.ic_cat_grupo_roles
         (id, nombre_grup_rol, usuario_modifico, ultima_modificacion)
      values((select max(id) + 1 from cartcard.ic_cat_grupo_roles),p_nombre,p_usuario_modifico,SYSDATE);
         resultado := 1;
         resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Grupo de Roles';

    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE cartcard.ic_cat_grupo_roles tgr
          SET tgr.nombre_grup_rol = NVL(p_nombre, tgr.nombre_grup_rol),
              tgr.usuario_modifico = NVL (p_usuario_modifico,tgr.usuario_modifico),
              tgr.ultima_modificacion = SYSDATE
          WHERE tgr.id = pIdgporol;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Grupo de Roles';

    ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from cartcard.ic_cat_grupo_roles tgr
      WHERE tgr.id = pIdgporol;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Grupo de Roles' ;
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex  := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_GRUPOROLES(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_MUNICIPIO (pIdMunicipio   IN   cartcard.ic_municipio.id_municipio%TYPE,
                               pIdEstado   IN   cartcard.ic_municipio.id_estado%TYPE,
                               pIdPais   IN   cartcard.ic_municipio.id_pais%TYPE,
                               p_nombre      IN   cartcard.ic_municipio.nombre_municipio%TYPE,
                               p_usuario_modifico IN   cartcard.ic_municipio.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS

v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.ic_municipio m
  where m.id_municipio = pIdMunicipio and m.id_estado = pIdEstado and m.id_pais = pIdPais;

      IF p_accion = 1 and v_existe = 0  THEN
         INSERT INTO cartcard.ic_municipio
         (id_municipio, id_estado, id_pais, nombre_municipio, usuario_modifico, ultima_modificacion)
         values(pIdMunicipio,pIdEstado, pIdPais, p_nombre, p_usuario_modifico,SYSDATE);
         resultado := 1;
         resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Municipio';

     ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE cartcard.ic_municipio m
          SET m.id_municipio = NVL(pIdMunicipio, m.id_municipio), 
           m.id_pais = NVL(pIdPais, m.id_pais),
           m.id_estado = NVL(pIdEstado, m.id_estado),
           m.nombre_municipio = NVL(p_nombre, m.nombre_municipio),
           m.usuario_modifico = NVL (p_usuario_modifico,m.usuario_modifico),
           m.ultima_modificacion = SYSDATE
          where m.id_municipio = pIdMunicipio and m.id_estado = pIdEstado and m.id_pais = pIdPais;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Municipio';

    ELSIF p_accion = 3 and v_existe != 0 THEN
        delete from cartcard.ic_municipio m
        where m.id_municipio = pIdMunicipio and m.id_estado = pIdEstado and m.id_pais = pIdPais;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Municipio';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_MUNICIPIO(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE procedure CAT_OPERACION(pCodigo IN   cartcard.icn_cat_operacion.codigooperacion%TYPE,
                               pCodigoNew   IN   cartcard.icn_cat_operacion.codigooperacion%TYPE,
                               p_descripcion          IN   cartcard.icn_cat_operacion.descripcion%TYPE,
                               p_usuarioModifico IN cartcard.icn_cat_operacion.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_cat_operacion o
  where o.codigooperacion = pCodigo;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_cat_operacion
        (codigooperacion, descripcion, usuario_modifico, ultima_modificacion)
         VALUES (pCodigo, p_descripcion, p_usuarioModifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Operacion';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_cat_operacion o
          SET o.codigooperacion = nvl(pCodigoNew, o.codigooperacion),
          o.descripcion = nvl(p_descripcion, o.descripcion),
          o.usuario_modifico = p_usuarioModifico,
          o.ultima_modificacion = SYSDATE
          WHERE o.codigooperacion = pCodigo;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Operacion';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        DELETE from cartcard.icn_cat_operacion o
         WHERE o.codigooperacion = pCodigo;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Operacion';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.CAT_OPERACION(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_PAIS (pIdPais   IN   cartcard.ic_pais.id_pais%TYPE,
                               p_nombre      IN   cartcard.ic_pais.nombre_pais%TYPE,
                               p_clavetel      IN   cartcard.ic_pais.clave_tel%TYPE,
                               p_usuario_modifico IN   cartcard.ic_pais.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from CARTCARD.ic_pais p
  where p.id_pais = pIdPais;

     IF p_accion =1 and v_existe = 0  THEN
         INSERT INTO cartcard.ic_pais
         (id_pais, nombre_pais, clave_tel, usuario_modifico, ultima_modificacion)
          values(pIdPais, p_nombre, p_clavetel, p_usuario_modifico,SYSDATE);
         resultado := 1;
         resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Pais';

    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE CARTCARD.ic_pais p
          SET p.nombre_pais = NVL(p_nombre, p.nombre_pais),
              p.clave_tel =   NVL(p_clavetel, p.clave_tel),
              p.usuario_modifico = NVL (p_usuario_modifico,p.usuario_modifico),
              p.ultima_modificacion = SYSDATE
          where p.id_pais = pIdPais;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Pais';

    ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from CARTCARD.ic_pais p
        where p.id_pais = pIdPais;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Pais';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex :=SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_PAIS(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_PERFIL (pIdperfil   IN    cartcard.icn_perfil.idperfil%TYPE,
                               p_descripcion      IN   cartcard.icn_perfil.descripcion%TYPE,
                               p_status IN cartcard.icn_perfil.status%TYPE,
                               p_usuario_modifico IN  cartcard.icn_perfil.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT NUMBER,
                               resultadotex out VARCHAR2) IS
v_existe number;
--select p.idperfil, p.descripcion, p.status, p.ultima_modificacion from cartcard.icn_perfil p;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_perfil p
  where p.idperfil = pIdperfil;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_perfil
        (idperfil, descripcion, status,usuario_modifico, ultima_modificacion)
         VALUES ((select (nvl(max(idperfil), 0)) + 1 from cartcard.icn_perfil), p_descripcion, p_status, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Perfil';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_perfil p
             SET p.descripcion         = nvl(p_descripcion, p.descripcion),
                 p.status              = nvl(p_status, p.status),
                 p.ultima_modificacion = SYSDATE,
                 p.usuario_modifico    = p_usuario_modifico
            where p.idperfil = pIdperfil;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Perfil';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_perfil p 
          where p.idperfil = pIdperfil;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Perfil';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.CAT_PERFIL(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_PERMISO (pIdPermiso   IN    cartcard.icn_permiso.idpermiso%TYPE,
                               p_descripcion      IN   cartcard.icn_permiso.descripcion%TYPE,
                               p_status IN cartcard.icn_permiso.status%TYPE,
                               p_usuario_modifico IN  cartcard.icn_permiso.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT NUMBER,
                               resultadotex out VARCHAR2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_permiso pe
  where pe.idpermiso = pIdPermiso;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_permiso
        (idpermiso, descripcion, status,usuario_modifico, ultima_modificacion)
         VALUES ((select (nvl(max(idpermiso), 0)) + 1 from cartcard.icn_permiso), p_descripcion, p_status, p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Permisos';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_permiso pe
             SET pe.descripcion         = nvl(p_descripcion, pe.descripcion),
                 pe.status              = nvl(p_status, pe.status),
                 pe.ultima_modificacion = SYSDATE,
                 pe.usuario_modifico    = p_usuario_modifico
           WHERE pe.idpermiso = pIdPermiso;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Permisos';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_permiso pe 
        where pe.idpermiso = pIdPermiso;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Permisos';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.CAT_PERMISOS(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_PREGUNTA (pIdPregunta   IN   cartcard.PREGUNTASESTANDAR.idpreguntaestandar%TYPE,
                               p_pregunta      IN   cartcard.PREGUNTASESTANDAR.pregunta%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.PREGUNTASESTANDAR pe
  where pe.idpreguntaestandar = pIdPregunta;

    IF p_accion =1 and v_existe = 0  THEN
         INSERT INTO cartcard.PREGUNTASESTANDAR
         (idpreguntaestandar, pregunta)
      values((select max(idpreguntaestandar) + 1 from cartcard.PREGUNTASESTANDAR),p_pregunta);
         resultado := 1;
         resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Pregunta';

    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE cartcard.PREGUNTASESTANDAR pe 
          SET pe.pregunta = p_pregunta
          where pe.idpreguntaestandar = pIdPregunta;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Pregunta';
         
    ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from cartcard.PREGUNTASESTANDAR pe 
        where pe.idpreguntaestandar = pIdPregunta;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Pregunta';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex  := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_PREGUNTA(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_ROLES (pIdroles   IN   cartcard.ic_cat_roles.id_roles%TYPE,
                               p_Idgruprol      IN   cartcard.ic_cat_roles.id_grup_rol%TYPE,
                               p_Idpermiso IN   cartcard.ic_cat_roles.id_permiso%TYPE,
                               p_Nombrerol IN   cartcard.ic_cat_roles.nombre_rol%TYPE,
                               p_usuario_modifico IN   cartcard.ic_cat_roles.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS

v_existe number;
BEGIN
  select count(r.id_roles)
  into v_existe
  from cartcard.ic_cat_roles r
  where r.id_roles = pIdroles and r.id_grup_rol = p_Idgruprol and r.id_permiso = p_Idpermiso ;

    IF p_accion =1 and v_existe = 0  THEN
         INSERT INTO cartcard.ic_cat_roles
         (id_roles, id_grup_rol, id_permiso, nombre_rol, usuario_modifico, ultima_modificacion)
         values((select max(id_roles) + 1 from cartcard.ic_cat_roles),p_Idgruprol,p_Idpermiso,p_Nombrerol, p_usuario_modifico,SYSDATE);
         resultado := 1;
         resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Roles';

    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE cartcard.ic_cat_roles tr
          SET
           tr.id_grup_rol = NVL(p_Idgruprol, tr.id_grup_rol),
           tr.id_permiso = NVL(p_Idpermiso, tr.id_permiso),
           tr.nombre_rol= NVL(p_Nombrerol, tr.nombre_rol),
           tr.usuario_modifico = NVL (p_usuario_modifico,tr.usuario_modifico),
           tr.ultima_modificacion = SYSDATE
         where tr.id_roles = pIdroles and tr.id_grup_rol = p_Idgruprol and tr.id_permiso = p_Idpermiso ;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Roles';

    ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from cartcard.ic_cat_roles tr
         where tr.id_roles = pIdroles and tr.id_grup_rol = p_Idgruprol and tr.id_permiso = p_Idpermiso ;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Roles';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex  := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_ROLES(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_STATUS_CUENTA (pIdStatusCta   IN   cartcard.ic_cat_status_cuenta.id_status_cuenta%TYPE,
                               p_codigo      IN   cartcard.ic_cat_status_cuenta.codigo%TYPE,
                               p_descripcion      IN   cartcard.ic_cat_status_cuenta.descripcion%TYPE,
                               p_usuario_modifico IN   cartcard.ic_cat_status_cuenta.usuario_modifico%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT number,
                               resultadotex out varchar2) IS                                                       
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.ic_cat_status_cuenta
  where id_status_cuenta = pIdStatusCta;

    IF p_accion = 1 and v_existe = 0  THEN
       INSERT INTO CARTCARD.IC_CAT_STATUS_CUENTA
        (id_status_cuenta, codigo, descripcion, usuario_modifico, ultima_modificacion)
      VALUES ((select max(id_status_cuenta) + 1 from cartcard.ic_cat_status_cuenta), p_codigo, p_descripcion, p_usuario_modifico, SYSDATE);

      resultado := 1; 
      resultadotex :='Exito en la Operacion se Inserto el elemento en el catalogo de Estatus de Cuenta';

    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE cartcard.ic_cat_status_cuenta tct
          SET tct.codigo = NVL(p_codigo, tct.codigo),
              tct.descripcion = NVL(p_descripcion, tct.descripcion),
              tct.usuario_modifico = p_usuario_modifico,
              tct.ultima_modificacion = SYSDATE
          WHERE tct.id_status_cuenta = pIdStatusCta;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Estatus de Cuenta';
         
    ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from cartcard.ic_cat_status_cuenta tct
      WHERE tct.id_status_cuenta = pIdStatusCta;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Estatus de Cuenta';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_STATUS_CUENTA(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_TIPOIDENTIFICACION (p_IdIdentificacion   IN   cartcard.ic_cat_tipo_identificacion.id_tipo_identificacion%TYPE,
                               p_descripcion      IN   cartcard.ic_cat_tipo_identificacion.descripcion%TYPE,
                               p_usuario_modifico IN   cartcard.ic_cat_tipo_identificacion.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS

v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.ic_cat_tipo_identificacion ti
  where ti.id_tipo_identificacion = p_IdIdentificacion;

    IF p_accion =1 and v_existe = 0  THEN
         INSERT INTO cartcard.ic_cat_tipo_identificacion ti
         (id_tipo_identificacion, descripcion, usuario_modifico, ultima_modificacion)
      values((select max(id_tipo_identificacion) + 1 from cartcard.ic_cat_tipo_identificacion),p_descripcion,p_usuario_modifico,SYSDATE);
         resultado := 1;
         resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Tipo de Identificacion';

   ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE cartcard.ic_cat_tipo_identificacion ti
          SET ti.descripcion = p_descripcion,
              ti.usuario_modifico = p_usuario_modifico,
              ti.ultima_modificacion = SYSDATE
          where ti.id_tipo_identificacion = p_IdIdentificacion;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Tipo de Identificacion ';

   ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from cartcard.ic_cat_tipo_identificacion ti
    where ti.id_tipo_identificacion = p_IdIdentificacion;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Tipo de Identificacion';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_TIPOIDENTIFICACION(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_TIPOPAGO (pIdTipoPago   IN   cartcard.ic_cat_tipo_pago.id_tipo_pago%TYPE,
                               p_descripcion      IN   cartcard.ic_cat_tipo_pago.descripcion%TYPE,
                               p_usuario_modifico IN   cartcard.ic_cat_tipo_pago.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS

v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.ic_cat_tipo_pago tp
  where tp.id_tipo_pago = pIdTipoPago;

    IF p_accion =1 and v_existe = 0  THEN
     INSERT INTO CARTCARD.IC_CAT_TIPO_PAGO
        (id_tipo_pago, descripcion, usuario_modifico, ultima_modificacion)
      VALUES ((select max(id_tipo_pago) + 1 from cartcard.ic_cat_tipo_pago), p_descripcion, p_usuario_modifico, SYSDATE);

      resultado := 1;
      resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Tipo de Pago';
       
    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE cartcard.ic_cat_tipo_pago tp
          SET tp.descripcion = p_descripcion,
              tp.usuario_modifico = p_usuario_modifico,
              tp.ultima_modificacion = SYSDATE
          where tp.id_tipo_pago = pIdTipoPago;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Tipo de Pago';

    ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from cartcard.ic_cat_tipo_pago tp
        where tp.id_tipo_pago = pIdTipoPago;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Tipo de Pago';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_TIPOPAGO(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_TIPOSERVICIO (pIdTipoServicio   IN   cartcard.ic_cat_tipo_servicio.id_tipo_servicio%TYPE,
                               p_descripcion      IN   cartcard.ic_cat_tipo_pago.descripcion%TYPE,
                               p_usuario_modifico IN   cartcard.ic_cat_tipo_pago.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from ic_cat_tipo_servicio ts
  where ts.id_tipo_servicio = pIdTipoServicio;

     IF p_accion =1 and v_existe = 0  THEN
       INSERT INTO CARTCARD.IC_CAT_TIPO_SERVICIO
        (id_tipo_servicio, descripcion, usuario_modifico, ultima_modificacion)
        VALUES ((select max(id_tipo_servicio) + 1 from cartcard.ic_cat_tipo_servicio), p_descripcion, p_usuario_modifico, SYSDATE);

      resultado := 1;
      resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Tipo Servicio';

    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE ic_cat_tipo_servicio ts
          SET ts.descripcion = p_descripcion,
              ts.usuario_modifico = p_usuario_modifico,
              ts.ultima_modificacion = SYSDATE
           where ts.id_tipo_servicio = pIdTipoServicio;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Servicio';

    ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from ic_cat_tipo_servicio ts
  where ts.id_tipo_servicio = pIdTipoServicio;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Servicio';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_TIPOSERVICIO(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE procedure CAT_TIPO_BLOQUEO(pEstatusBloqueo IN   cartcard.icn_cat_tipo_bloqueo.estatus_bloqueo%TYPE,
                               pEstatusBloqueNew   IN   cartcard.icn_cat_tipo_bloqueo.estatus_bloqueo%TYPE,
                               p_descripcion          IN   cartcard.icn_cat_tipo_bloqueo.descripcion%TYPE,
                               p_usuarioModifico IN cartcard.icn_cat_banco.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER, 
                               resultado OUT number,
                               resultadotex out varchar2) IS
-- b.estatus_bloqueo, b.descripcion, b.usuario_modifico, b.ultima_modificacion from ICN_CAT_TIPO_BLOQUEO b
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_cat_tipo_bloqueo b
  where b.estatus_bloqueo = pEstatusBloqueo;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO icn_cat_tipo_bloqueo
        (estatus_bloqueo, descripcion, usuario_modifico, ultima_modificacion)
         VALUES (pEstatusBloqueo, p_descripcion, p_usuarioModifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en el catalogo de Tipo Bloqueo';
         
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_cat_tipo_bloqueo b
          SET b.estatus_bloqueo = nvl(pEstatusBloqueNew, b.estatus_bloqueo),
          b.descripcion = nvl(p_descripcion, b.descripcion),
          b.usuario_modifico = p_usuarioModifico,
          b.ultima_modificacion = SYSDATE
          WHERE b.estatus_bloqueo = pEstatusBloqueo;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Tipo Bloqueo';
         
    ELSIF  p_accion = 3 and v_existe != 0  THEN
        DELETE from cartcard.icn_cat_tipo_bloqueo b
        WHERE b.estatus_bloqueo = pEstatusBloqueo;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Tipo Bloqueo';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.CAT_TIPO_BLOQUEO(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_TIPO_MEMBRESIA2 (p_id_tipo_membresia   IN   cartcard.ic_cat_tipo_membresia.id_tipo_membresia%TYPE,
                               p_costo               IN   cartcard.ic_cat_tipo_membresia.costo%TYPE,
                               p_descripcion         IN   cartcard.ic_cat_tipo_membresia.descripcion%TYPE,
                               p_usuario_modifico    IN   cartcard.ic_cat_tipo_membresia.usuario_modifico%TYPE,
                               p_duracion            IN   cartcard.ic_cat_tipo_membresia.duracion%TYPE,
                               p_accion              IN NUMBER, 
                               resultado             OUT NUMBER,
                               resultadotex          OUT VARCHAR2) IS
   v_existe   NUMBER;
BEGIN
   SELECT COUNT (1)
     INTO v_existe
     FROM cartcard.ic_cat_tipo_membresia tm
    WHERE tm.id_tipo_membresia = p_id_tipo_membresia;

   IF p_accion =1 and v_existe = 0  THEN
     
      INSERT INTO cartcard.ic_cat_tipo_membresia
         (id_tipo_membresia, descripcion, costo, usuario_modifico, ultima_modificacion, duracion)
      values((select max(id_tipo_membresia) + 1 from CARTCARD.ic_cat_tipo_membresia),p_descripcion,p_costo, p_usuario_modifico,SYSDATE,p_duracion);
     resultado := 1;
     resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Tipo Membresia';
  
 ELSIF p_accion = 2 and v_existe != 0 THEN
      UPDATE cartcard.ic_cat_tipo_membresia tm
         SET tm.duracion = p_duracion,
             tm.descripcion = p_descripcion,
             tm.costo = p_costo,
             tm.ultima_modificacion = SYSDATE,
             tm.usuario_modifico = p_usuario_modifico
       WHERE tm.id_tipo_membresia = p_id_tipo_membresia;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Tipo Membresia';

 ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from cartcard.ic_cat_tipo_membresia tm
        WHERE tm.id_tipo_membresia = p_id_tipo_membresia;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Tipo Membresia';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion'; 

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex :=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_TIPO_MEMBRESIA(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CAT_USUARIOROL (pIdUsuarioRol   IN   cartcard.IC_TA_USUARIO_ROL.id_usuario_rol%TYPE,
                               p_IdRol      IN   cartcard.IC_TA_USUARIO_ROL.id_rol%TYPE,
                               p_IdUsuario      IN   cartcard.IC_TA_USUARIO_ROL.id_usuario%TYPE,
                               p_usuario_modifico IN   cartcard.IC_TA_USUARIO_ROL.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT number,
                               resultadotex out varchar2) IS
v_existe number;
BEGIN
  select count(t.id_usuario_rol)
  into v_existe
  from CARTCARD.IC_TA_USUARIO_ROL t
  where t.id_usuario_rol = pIdUsuarioRol and t.id_rol = p_IdRol and t.id_usuario_rol = p_IdUsuario;

     IF p_accion =1 and v_existe = 0  THEN
         INSERT INTO CARTCARD.IC_TA_USUARIO_ROL
         (id_usuario_rol, id_rol, id_usuario, usuario_modifico, ultima_modificacion)
      values((select max(id_usuario_rol) + 1 from CARTCARD.IC_TA_USUARIO_ROL), p_IdRol, p_IdUsuario, p_usuario_modifico,SYSDATE);
         resultado := 1;
         resultadotex := 'Exito en la operacion se Inserto el elemento en el catalogo de Usuario Rol';

    ELSIF p_accion = 2 and v_existe != 0 THEN
          UPDATE CARTCARD.IC_TA_USUARIO_ROL t
          SET t.id_rol = NVL(p_IdRol, t.id_rol),
              t.id_usuario =   NVL(p_IdUsuario, t.id_usuario),
              t.usuario_modifico = NVL (p_usuario_modifico,t.usuario_modifico),
              t.ultima_modificacion = SYSDATE
         where t.id_usuario_rol = pIdUsuarioRol and t.id_rol = p_IdRol and t.id_usuario_rol = p_IdUsuario;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en el catalogo de Usuario Rol';

    ELSIF  p_accion = 3 and v_existe != 0 THEN
        delete from CARTCARD.IC_TA_USUARIO_ROL t
        where t.id_usuario_rol = pIdUsuarioRol and t.id_rol = p_IdRol and t.id_usuario_rol = p_IdUsuario;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en el catalogo de Usuario Rol';
    ELSE
        resultado := 4;
        resultadotex :=  'No se efectuo la accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CAT_USUARIOROL(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONSTANTESMES (p_cursor OUT sys_refcursor)
IS
/* ------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSTANTESMES                     */
/* Objetivo: Retorna los meses del año.                    */
/* Autor:    Equipo CartCard (Siscon)                      */
/* Fecha Creacion: Sep/2008                                */
/* Fecha Modificacion:                                     */
/* Ejemplo Ejecucion: exec CONSTANTESMES(<<:cursor>>)      */
/* ------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT   valor_caracter
          FROM CARTCARD.constantes
         WHERE ID_CONSTANTES LIKE ('MESVENCETDC%')
      ORDER BY ID_CONSTANTES ASC;
END constantesmes;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONSULTABLOQUEOREFERENCIA (
   preferencia   IN       VARCHAR,
   pbloqueo      OUT      INTEGER
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTABLOQUEOREFERENCIA                                	 */
/* Objetivo: Retorna el estatus de la membrecía de la referencia solicitada.         */
/* Autor:    Equipo CartCard (Siscon)                                          		 */
/* Fecha Creacion: Sep/2008                                                    		 */
/* Fecha Modificacion:                                                         		 */
/* Ejemplo Ejecucion: exec CONSULTABLOQUEOREFERENCIA(<<preferencia>>,<<:pbloqueo>>)  */
/* --------------------------------------------------------------------------------- */
BEGIN
   SELECT bloqueo
     INTO pbloqueo
     FROM CARTCARD.card
    WHERE referencia = preferencia;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      pbloqueo := -1;
END consultabloqueoreferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CONSULTADATOSUSUARIO (
   p_idusuario   IN       INTEGER,
   p_cursor      OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTADATOSUSUARIO                                        */
/* Objetivo: Retorna los datos del usuarioId solicitado.                             */
/* Autor:    Equipo CartCard (Siscon)                                                */
/* Fecha Creacion: Sep/2008                                                          */
/* Fecha Modificacion:                                                               */
/* Ejemplo Ejecucion: exec CONSULTADATOSUSUARIO(<<idusuario>>,<<:cursor>>)           */
/* --------------------------------------------------------------------------------- */
   v_estadoid   INTEGER;
BEGIN
   SELECT CARTCARD.usuario.estadoid
     INTO v_estadoid
     FROM CARTCARD.usuario
    WHERE usuarioid = p_idusuario;

   IF v_estadoid != 999
   THEN
      OPEN p_cursor FOR
         SELECT CARTCARD.usuario.nombre, CARTCARD.usuario.apaterno, CARTCARD.usuario.amaterno, 
                CARTCARD.usuario.calle, CARTCARD.usuario.colonia, CARTCARD.municipio.nombremunicipio,
                CARTCARD.usuario.ciudad, CARTCARD.usuario.codigopostal, CARTCARD.pais.nombrepais, 
                CARTCARD.estado.nombreestado, CARTCARD.usuario.mail
           FROM CARTCARD.usuario,
                CARTCARD.pais,
                CARTCARD.estado,
                CARTCARD.municipio
          WHERE CARTCARD.pais.paisid           = CARTCARD.usuario.paisid
            AND CARTCARD.estado.paisid         = CARTCARD.usuario.paisid
            AND CARTCARD.estado.estadoid       = CARTCARD.usuario.estadoid
            AND CARTCARD.municipio.municipioid = CARTCARD.usuario.municipioid
            AND CARTCARD.municipio.estadoid    = CARTCARD.usuario.estadoid
            AND CARTCARD.usuario.usuarioid     = p_idusuario;
   ELSE
      OPEN p_cursor FOR
         SELECT CARTCARD.usuario.nombre, CARTCARD.usuario.apaterno, CARTCARD.usuario.amaterno, 
                CARTCARD.usuario.calle, CARTCARD.usuario.colonia,
                '' AS nombremunicipio, CARTCARD.usuario.ciudad, CARTCARD.usuario.codigopostal, CARTCARD.pais.nombrepais,
                provincia AS nombreestado, CARTCARD.usuario.mail
           FROM CARTCARD.usuario, CARTCARD.pais, CARTCARD.provincias
          WHERE CARTCARD.pais.paisid = CARTCARD.usuario.paisid
            AND CARTCARD.provincias.paisid = CARTCARD.usuario.paisid
            AND CARTCARD.provincias.usuarioid = CARTCARD.usuario.usuarioid
            AND CARTCARD.usuario.usuarioid = p_idusuario;
   END IF;
END consultadatosusuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONSULTAEROR (
   p_numerosucursal       IN       INTEGER,
   p_numerooperador       IN       INTEGER,
   p_fechaoperacion       IN       VARCHAR2,
   p_codigoresultado      IN       VARCHAR2,
   p_mensajeresultado     IN       VARCHAR2,
   p_cantidaddepositada   IN       FLOAT,
   p_usuariodepositante   IN       VARCHAR2,
   p_numeroreferencia     IN       VARCHAR2,
   p_cartcardid           IN       INTEGER,
   p_mensajeoperacion     IN       VARCHAR2,
   p_ip                   IN       VARCHAR2,
   p_operacionid          OUT      INTEGER
)
IS
/* ----------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTAEROR                                             	   */
/* Objetivo: Agrega un registro de error.                                      		   */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Oct/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec CONSULTAEROR(<<numerosucursal>>,..,<<ip>>,<<:operacionid>>) */
/* ----------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      SELECT CARTCARD.operacionventanillaseq.NEXTVAL
        INTO p_operacionid
        FROM DUAL;

      INSERT INTO CARTCARD.operacionventanilla
                  (operacionid, sucursalid, operadorid,
                   fechaoperacion,
                   codigoresultado, mensajeresultado,
                   cantidaddepositada, usuariodepositante,
                   referencia, cartcardid, mensajeoperacion,
                   ip, fechasys
                  )
           VALUES (p_operacionid, p_numerosucursal, p_numerooperador,
                   TO_DATE (p_fechaoperacion, 'mmddyyyy-hh24:mi:ss'),
                   p_codigoresultado, p_mensajeresultado,
                   p_cantidaddepositada, p_usuariodepositante,
                   p_numeroreferencia, p_cartcardid, p_mensajeoperacion,
                   p_ip, SYSDATE
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_operacionid := 0;
      ROLLBACK;
END consultaeror;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CONSULTAESTADOCUENTA (
   p_nombreusuario   IN       VARCHAR2,
   p_estadocuenta    OUT      VARCHAR2
)
IS
/* ----------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTAESTADOCUENTA                                          */
/* Objetivo: Consulta el estado de cuenta.                                             */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Oct/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec CONSULTAESTADOCUENTA(<<nombreusuario>>,<<:estadocuenta>>)   */
/* ----------------------------------------------------------------------------------- */
   v_fecha_login   DATE;
BEGIN
   BEGIN
      SELECT NVL (MAX (fecha_login), SYSDATE)
        INTO v_fecha_login
        FROM CARTCARD.login_users
       WHERE usuarioid = (SELECT usuarioid
                            FROM CARTCARD.usuario
                           WHERE nombreusuario = p_nombreusuario);

      IF TO_DATE (v_fecha_login) < TO_DATE (SYSDATE)
      THEN
         CARTCARD.restableceadesbloqueado (p_nombreusuario);
      END IF;

      SELECT estadodecuentaid
        INTO p_estadocuenta
        FROM CARTCARD.usuario
       WHERE nombreusuario = p_nombreusuario;
   END;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_estadocuenta := 'usuario no existe';
END consultaestadocuenta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Consultaestadotarjeta (
   p_usuarioid   IN       NUMBER,
   p_bloqueo     OUT      INTEGER
)
IS
/* ----------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTAESTADOTARJETA                                         */
/* Objetivo: Consulta el estado de la tarjeta.                                         */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Oct/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec CONSULTAESTADOTARJETA(<<usuarioid>>,<<:bloqueo>>)           */
/* ----------------------------------------------------------------------------------- */
BEGIN
   SELECT bloqueo
     INTO p_bloqueo
     FROM CARTCARD.CARD
    WHERE usuarioid = p_usuarioid
      AND bloqueo IN (0,1,4);
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_bloqueo := -1;
END Consultaestadotarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CONSULTAESTADOTARJETACANCELADO (
   pusuarioid   IN       INTEGER,
   pbloqueo     OUT      INTEGER
)
IS
/* ------------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: CONSULTAESTADOTARJETACANCELADO                                 */
/* Objetivo: Consulta el estado de la tarjeta.                                         	*/
/* Autor:    Equipo CartCard (Siscon)                                                  	*/
/* Fecha Creacion: Oct/2008                                                            	*/
/* Fecha Modificacion:                                                                 	*/
/* Ejemplo Ejecucion: exec CONSULTAESTADOTARJETACANCELADO(<<pusuarioid>>,<<:pbloqueo>>) */
/* ------------------------------------------------------------------------------------ */
BEGIN
   /*SELECT count(estadodecuentaid)
     INTO pBloqueo
     FROM cc_cancelaciones
    WHERE usuarioid = pUsuarioid
      AND estadodecuentaid=5;*/
/*   SELECT ESTADODECUENTAID
     into pBloqueo
     from cc_cancelaciones
     where idregistro=(select max(idregistro) from cc_cancelaciones
                  where usuarioid=pUsuarioId);

     if (pBloqueo=5 or pBloqueo=6) then
       pBloqueo:=1;
     else
        pBloqueo:=0;
     end if;*/
   SELECT bloqueo
     INTO pbloqueo
     FROM CARTCARD.card
    WHERE cartcardid = (SELECT MAX (cartcardid)
                          FROM CARTCARD.card
                         WHERE usuarioid = pusuarioid);

   IF (pbloqueo = 5 OR pbloqueo = 6)
   THEN
      pbloqueo := 1;
   ELSE
      pbloqueo := 0;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      pbloqueo := -1;
END consultaestadotarjetacancelado;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONSULTAESTADOTARJETAREF (
   p_referencia   IN       VARCHAR2,
   p_bloqueo      OUT      INTEGER
)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: consultaestadotarjetaref                  			  */
/* Objetivo: Obtieneel estado de una tarjeta por referencia	  				  */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec consultaestadotarjetaref(<<Referencia>>,<<:Bloqueo>>))    */
/* -------------------------------------------------------------------------- */
BEGIN
   SELECT bloqueo
     INTO p_bloqueo
     FROM CARTCARD.card
    WHERE referencia = p_referencia;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_bloqueo := -1;
END consultaestadotarjetaref;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONSULTAFECHA (p_valor_entero OUT INTEGER)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: consultafecha                  					  */
/* Objetivo: Obtiene el año actual de la tabla constantes						  */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec consultafecha(<<FechaOperacion>>...<<:NombreTitular>>))    */
/* -------------------------------------------------------------------------- */
BEGIN
   SELECT valor_entero
     INTO p_valor_entero
     FROM CARTCARD.constantes
    WHERE ID_CONSTANTES = 'AÑOACTUALTDC';
END consultafecha;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CONSULTAFECHAVENCIMIENTO (
   pUsuarioid   IN       INTEGER,
   pFechaVencimiento    OUT      DATE
)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: consultafechaVencimiento                  			  */
/* Objetivo: Obtiene la fecha de vencimiento de membrecia de un usuario		  */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec consultafechaVencimiento(<<UsuarioId>>,<<:Referencia>>,<<:CostoMemebrecia>>))    */
/* -------------------------------------------------------------------------- */
BEGIN
   SELECT NVL(fechavencimiento,'')
     INTO pFechaVencimiento
     FROM CARTCARD.card
    WHERE usuarioid = pUsuarioid
      AND bloqueo=1;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      pFechaVencimiento:=NULL;
END consultafechaVencimiento;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONSULTAOPERACIONID (
   p_operacionid   IN       NUMBER,
   p_cursor        OUT      sys_refcursor
)
IS
/* -------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTAOPERACIONID                                              */
/* Objetivo: Extrae el los datos referentes al registro correspondiente a la operacionID. */
/* Autor:    Equipo CartCard (Siscon)                                                 	  */
/* Fecha Creacion: Feb/2009                                                           	  */
/* Fecha Modificacion:                                                                	  */
/* Ejemplo Ejecucion: exec CONSULTAOPERACIONID(<<operacionid>>,..,<<:cursor>>)       	  */
/* -------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT nconsecutivo, referencia, cartcardid
        FROM CARTCARD.operacionventanilla
       WHERE operacionid = p_operacionid;
END consultaoperacionid;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CONSULTAREFERENCIA (
   pfechaoperacion     IN       VARCHAR2,
   pnooperador         IN       VARCHAR2,
   pnosucursal         IN       VARCHAR2,
   pnoreferencia       IN       VARCHAR2,
   pmensajeoperacion   IN       VARCHAR2,
   pip                 IN       VARCHAR2,
   poperacionid        OUT      INTEGER,
   pmontominimo        OUT      FLOAT,
   pcodigoresultado    OUT      VARCHAR2,
   pmensajeresultado   OUT      VARCHAR2,
   pnombretitular      OUT      VARCHAR2
)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: consultareferencia                  		  */
/* Objetivo: Obtiene los datos de una referencia dada 						  */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec consultareferencia(<<FechaOperacion>>...<<:NombreTitular>>))    */
/* -------------------------------------------------------------------------- */

   vbandera         INTEGER := 0;
   vcartcardid      INTEGER := 0;
   v_nconsecutivo   INTEGER := 0;
   v_bloqueo        INTEGER;
BEGIN
   BEGIN
      SELECT tarjeta.cartcardid, costo,
             usu.nombre || ' ' || usu.apaterno || ' ' || usu.amaterno
                                                             AS nombretitular,
             bloqueo
        INTO vcartcardid, pmontominimo,
             pnombretitular,
             v_bloqueo
        FROM CARTCARD.card tarjeta, CARTCARD.usuario usu, CARTCARD.membrecia
       WHERE tarjeta.referencia = pnoreferencia
         AND usu.usuarioid = tarjeta.usuarioid
         AND CARTCARD.membrecia.membreciaid = tarjeta.membreciaid
         AND tarjeta.bloqueo IN (0,1,4);
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         vbandera := 1;
   END;

   BEGIN
      IF (vbandera = 1)
      THEN
         pcodigoresultado := '001';
         pmensajeresultado := 'Referencia Inválida';

         SELECT operacionventanillaseq.NEXTVAL
           INTO poperacionid
           FROM DUAL;

         INSERT INTO CARTCARD.operacionventanilla
                     (operacionid, nconsecutivo, referencia, sucursalid,
                      operadorid,
                      fechaoperacion,
                      codigoresultado, mensajeresultado, mensajeoperacion,
                      ip, fechasys
                     )
              VALUES (poperacionid, 0, pnoreferencia, pnosucursal,
                      pnooperador,
                      TO_DATE (pfechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                      pcodigoresultado, pmensajeresultado, pmensajeoperacion,
                      pip, SYSDATE
                     );
      ELSE
         pcodigoresultado := '000';
         pmensajeresultado := 'Exito en la operación';

         IF v_bloqueo != 0
         THEN
            pmontominimo := 0;
         END IF;

         SELECT NVL (MAX (nconsecutivo), 0) + 1
           INTO v_nconsecutivo
           FROM CARTCARD.operacionventanilla
          WHERE cartcardid = vcartcardid;

         SELECT operacionventanillaseq.NEXTVAL
           INTO poperacionid
           FROM DUAL;

         INSERT INTO CARTCARD.operacionventanilla
                     (operacionid, nconsecutivo, sucursalid, operadorid,
                      fechaoperacion,
                      codigoresultado, mensajeresultado, referencia,
                      cartcardid, mensajeoperacion, ip, fechasys
                     )
              VALUES (poperacionid, v_nconsecutivo, pnosucursal, pnooperador,
                      TO_DATE (pfechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                      pcodigoresultado, pmensajeresultado, pnoreferencia,
                      vcartcardid, pmensajeoperacion, pip, SYSDATE
                     );
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END consultareferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE CONSULTAREFERENCIACARTCARD (
   p_usuarioid        IN       INTEGER,
   p_referencia       OUT      VARCHAR2,
   p_costomembresia   OUT      FLOAT
)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: consultareferenciacartcard                  			  */
/* Objetivo: Obtiene los datos de una referencia dada 					  */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec consultareferenciacartcard(<<UsuarioId>>,<<:Referencia>>,<<:CostoMemebrecia>>))    */
/* -------------------------------------------------------------------------- */
BEGIN
   SELECT referencia, costo
     INTO p_referencia, p_costomembresia
     FROM CARTCARD.card INNER JOIN CARTCARD.membrecia ON CARTCARD.card.membreciaid = CARTCARD.membrecia.membreciaid
    WHERE usuarioid = p_usuarioid AND bloqueo IN (0,1,4);
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_referencia := 'El usuario no existe.';
END consultareferenciacartcard;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONSULTARESPUESTAACLARACION (
   p_claveconsulta   IN       INTEGER,
   p_fechaincial     IN       VARCHAR2,
   p_fechafinal      IN       VARCHAR2,
   p_usuarioid       IN       INTEGER,
   p_cursor          OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTARESPUESTAACLARACION                                                     */
/* Objetivo: Obtiene las respuestas de aclaracion segun el criterio solicitado.                          */
/* Autor:    Equipo CartCard (Siscon)                                                                    */
/* Fecha Creacion: Dic/2008                                                                              */
/* Fecha Modificacion:                                                                                   */
/* Ejemplo Ejecucion: exec CONSULTARESPUESTAACLARACION(<<claveconsulta>,..,<<usuarioid>>,<<:cursor>>)    */
/* ----------------------------------------------------------------------------------------------------- */
BEGIN
   IF p_claveconsulta = 0                                    -- obtiene todas
   THEN
      OPEN p_cursor FOR
         SELECT CARTCARD.cc_rspaclaracion.numerorespuesta, CARTCARD.cc_rspaclaracion.numeroaclaracion, 
                CARTCARD.cc_rspaclaracion.usuarioid, CARTCARD.cc_rspaclaracion.fecharespuesta,
                CARTCARD.cc_rspaclaracion.asunto, CARTCARD.cc_rspaclaracion.respuesta, 
                CARTCARD.cc_rspaclaracion.numeroregistro
           FROM CARTCARD.cc_rspaclaracion;
   ELSE
      IF p_claveconsulta = 1
      THEN
         OPEN p_cursor FOR                                -- filtra por fecha
            SELECT CARTCARD.cc_rspaclaracion.numerorespuesta, CARTCARD.cc_rspaclaracion.numeroaclaracion, 
                   CARTCARD.cc_rspaclaracion.usuarioid, CARTCARD.cc_rspaclaracion.fecharespuesta, 
                   CARTCARD.cc_rspaclaracion.asunto, CARTCARD.cc_rspaclaracion.respuesta, 
                   CARTCARD.cc_rspaclaracion.numeroregistro
              FROM CARTCARD.cc_rspaclaracion
             WHERE TO_DATE (CARTCARD.cc_rspaclaracion.fecharespuesta) >= TO_DATE (p_fechaincial, 'DDmmYYYY')
               AND TO_DATE (CARTCARD.cc_rspaclaracion.fecharespuesta) <= TO_DATE (p_fechafinal, 'DDmmYYYY');
      ELSE
         IF p_claveconsulta = 2                         -- filtra por usuario
         THEN
            OPEN p_cursor FOR
               SELECT CARTCARD.cc_rspaclaracion.numerorespuesta, CARTCARD.cc_rspaclaracion.numeroaclaracion, 
                      CARTCARD.cc_rspaclaracion.usuarioid, CARTCARD.cc_rspaclaracion.fecharespuesta, 
                      CARTCARD.cc_rspaclaracion.asunto, CARTCARD.cc_rspaclaracion.respuesta, 
                      CARTCARD.cc_rspaclaracion.numeroregistro
                 FROM CARTCARD.cc_rspaclaracion
                WHERE usuarioid = p_usuarioid;
         END IF;
      END IF;
   END IF;
END consultarespuestaaclaracion;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONSULTASOLICITUDACLARACION (
   p_claveconsulta   IN       INTEGER,
   p_fechaincial     IN       VARCHAR2,
   p_fechafinal      IN       VARCHAR2,
   p_usuarioid       IN       INTEGER,
   p_cursor          OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTASOLICITUDACLARACION                                                     */
/* Objetivo: Obtiene las solicitudes de aclaracion segun el criterio indicado. 							 */
/* Autor:    Equipo CartCard (Siscon)                                                                    */
/* Fecha Creacion: Dic/2008                                                                              */
/* Fecha Modificacion:                                                                                   */
/* Ejemplo Ejecucion: exec CONSULTASOLICITUDACLARACION(<<claveconsulta>,..,<<usuarioid>>,<<:cursor>>)    */
/* ----------------------------------------------------------------------------------------------------- */
BEGIN
   IF p_claveconsulta = 0                                    -- obtiene todas
   THEN
      OPEN p_cursor FOR
         SELECT CARTCARD.cc_slcaclaracion.numeroaclaracion, CARTCARD.cc_slcaclaracion.usuarioid, 
                CARTCARD.cc_slcaclaracion.fechasolicitud, CARTCARD.cc_slcaclaracion.asunto,
                CARTCARD.cc_slcaclaracion.comentario, CARTCARD.cc_slcaclaracion.estatusaclaracion, 
                CARTCARD.cc_slcaclaracion.numeroregistro
           FROM CARTCARD.cc_slcaclaracion;
   ELSE
      IF p_claveconsulta = 1
      THEN
         OPEN p_cursor FOR                                -- filtra por fecha
            SELECT CARTCARD.cc_slcaclaracion.numeroaclaracion, CARTCARD.cc_slcaclaracion.usuarioid, 
                   CARTCARD.cc_slcaclaracion.fechasolicitud, CARTCARD.cc_slcaclaracion.asunto,
                   CARTCARD.cc_slcaclaracion.comentario, CARTCARD.cc_slcaclaracion.estatusaclaracion, 
                   CARTCARD.cc_slcaclaracion.numeroregistro
              FROM CARTCARD.cc_slcaclaracion
             WHERE TO_DATE (CARTCARD.cc_slcaclaracion.fechasolicitud) >= TO_DATE (p_fechaincial, 'DDmmYYYY')
               AND TO_DATE (CARTCARD.cc_slcaclaracion.fechasolicitud) <= TO_DATE (p_fechafinal, 'DDmmYYYY');
      ELSE
         IF p_claveconsulta = 2                         -- filtra por usuario
         THEN
            OPEN p_cursor FOR
               SELECT CARTCARD.cc_slcaclaracion.numeroaclaracion, CARTCARD.cc_slcaclaracion.usuarioid, 
                      CARTCARD.cc_slcaclaracion.fechasolicitud, CARTCARD.cc_slcaclaracion.asunto,
                      CARTCARD.cc_slcaclaracion.comentario, CARTCARD.cc_slcaclaracion.estatusaclaracion, 
                      CARTCARD.cc_slcaclaracion.numeroregistro
                 FROM CARTCARD.cc_slcaclaracion
                WHERE CARTCARD.cc_slcaclaracion.usuarioid = p_usuarioid;
         END IF;
      END IF;
   END IF;
END consultasolicitudaclaracion;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          CONTABILIZAESTADOCUENTA (
   p_nombreusuario   IN       VARCHAR2,
   p_ip              IN       VARCHAR2,
   p_estadocuenta    OUT      VARCHAR2
)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: contabilizaestadocuenta                  			  */
/* Objetivo: Actualiza el estado de cuenta de un usuario. 					  */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec contabilizaestadocuenta(<<NombreUsuario>>,<<Ip>>,<<:EstadoCuenta>>))    */
/* -------------------------------------------------------------------------- */
   v_existeusuario   INTEGER;
   v_usuarioid       INTEGER;
   v_intentos        INTEGER;
   v_hoy             DATE;
   v_fecha_login     DATE;
BEGIN
   BEGIN
      SELECT usuarioid, SYSDATE
        INTO v_usuarioid, v_hoy
        FROM CARTCARD.usuario
       WHERE p_nombreusuario = nombreusuario;

      SELECT COUNT (usuarioid), NVL (MAX (fecha_login), v_hoy)
        INTO v_existeusuario, v_fecha_login
        FROM CARTCARD.login_users
       WHERE usuarioid = v_usuarioid;

      IF v_existeusuario = 0
      THEN
         INSERT INTO CARTCARD.login_users
                     (usuarioid, intentos, fecha_login
                     )
              VALUES (v_usuarioid, 0, v_hoy
                     );
      END IF;

      IF TO_DATE (v_fecha_login) < TO_DATE (v_hoy)
      THEN
         restableceadesbloqueado (p_nombreusuario);
      END IF;

      SELECT CASE intentos
                WHEN 3
                   THEN intentos
                ELSE intentos + 1
             END
        INTO v_intentos
        FROM CARTCARD.login_users
       WHERE usuarioid = v_usuarioid;

      UPDATE CARTCARD.login_users
         SET intentos = v_intentos,
             fecha_login = v_hoy
       WHERE usuarioid = v_usuarioid;

      INSERT INTO CARTCARD.loginhst
                  (ID, usuarioid, fecha_login,
                   alias, intento, ip
                  )
           VALUES ((SELECT NVL (MAX (ID), 0) + 1
                      FROM CARTCARD.loginhst), v_usuarioid, v_hoy,
                   p_nombreusuario, v_intentos, p_ip
                  );

      IF v_intentos = 3
      THEN
         actualizaestadocuenta (p_nombreusuario, 2);
      END IF;

      SELECT estadodecuentaid
        INTO p_estadocuenta
        FROM CARTCARD.usuario
       WHERE nombreusuario = p_nombreusuario;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_estadocuenta := 'usuario no existe';
      ROLLBACK;
END contabilizaestadocuenta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          COSTOMEMBRECIAPORREFERENCIA (
   p_referencia       IN       VARCHAR2,
   p_costomembresia   OUT      FLOAT
)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: costomembreciaporreferencia                          */
/* Objetivo: Obtiene el costo de una mambrecia por referencia de una tarjeta. */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec costomembreciaporreferencia(<<referencia>>,<<:CostoMembrecia>>))    */
/* -------------------------------------------------------------------------- */
BEGIN
   BEGIN
      SELECT costo
        INTO p_costomembresia
        FROM CARTCARD.membrecia INNER JOIN CARTCARD.card ON CARTCARD.membrecia.membreciaid =
                                                              CARTCARD.card.membreciaid
       WHERE referencia = p_referencia;
   END;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_costomembresia := 0.0;
END costomembreciaporreferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE DATOSGENERAL (PSReferencia in CARTCARD.ICN_CONTRATO.REFERENCIA%TYPE,
                        p_cursor      OUT    sys_refcursor,
                        estatusvalido    OUT    NUMBER,
                        estadomembresia   OUT    NUMBER) IS
  documento_existe  NUMBER;
  vestatus NUMBER;
  vfecha date;

 BEGIN
 OPEN p_cursor FOR
select cl.id_usuario, cl.nombre, cl.apaterno,
         cl.amaterno, cl.calle, cl.num_ext,
         cl.num_int, cl.colonia, cl.id_municipio,
         cl.ciudad, cl.cp, cl.telefono,cl.contrasenia,
         SUBSTR (to_char(t.expirationdate, 'YYYYmmdd'), 5, 2) mesexpira, 
         SUBSTR (to_char(t.expirationdate, 'YYYYmmdd'),0, 4)anoexpira,
         cl.correo_electronico, cl.id_pais, cl.id_estado,
         cl.nombre_usuario, cl.estatus, cl.numero_identificacion,cl.id_tipo_identificacion,
         cl.fecha_creacion as fechacreacioncliente, cl.celular,
         cl.fecha_nacimiento, cl.usuario_modifico,
         cl.ultima_modificacion, t.CARDNUMBER, t.TOKEN, t.ID_TIPO_MEMBRESIA,t.FECHA_MEMBRECIA,t.ID_STATUS_TARJETA,
         t.FECHA_CREACION, t.USUARIO_MODIFICO,t.PTERMINALCODE, CO.SUITE, ES.NOMBRE_ESTADO, MUN.NOMBRE_MUNICIPIO,
         mem.costo, mem.duracion, mem.id_tipo_membresia, cl.telefono_oficina, cl.extension
FROM cartcard.icn_clientes cl
     INNER JOIN cartcard.ic_municipio mun ON cl.id_municipio = mun.id_municipio and cl.id_estado = mun.id_estado and cl.id_pais = mun.id_pais
     INNER JOIN cartcard.ic_estado es ON mun.id_estado = es.id_estado and mun.id_estado = cl.id_estado
     INNER JOIN cartcard.ic_pais p ON p.id_pais = es.id_pais and p.id_pais = cl.id_pais
     INNER JOIN cartcard.icn_contrato co ON co.id_usuario = cl.id_usuario
     INNER JOIN cartcard.icn_tarjeta t ON t.referencia = co.referencia
     INNER JOIN cartcard.ic_cat_tipo_membresia mem on mem.id_tipo_membresia = t.id_tipo_membresia
WHERE t.referencia = PSReferencia ;

  select t.fecha_membrecia
  into vfecha
  from cartcard.icn_tarjeta t
  where t.referencia = PSReferencia;   


    IF vfecha <= TO_DATE (SYSDATE) THEN
     estadomembresia := 1;
    ELSE  estadomembresia := 0;
    END IF;
    

    select count (co.id_usuario)
    into documento_existe
    from icn_contrato co, ic_documento d
    where co.id_usuario = d.usuarioid and co.referencia=PSReferencia;

    IF documento_existe > 0 THEN
      
        select count (d.estatus)
        into vestatus
        from ic_documento d, icn_contrato co
        where  co.id_usuario = d.usuarioid and  co.referencia=PSReferencia and d.estatus = 1;

             IF vestatus > 1 then
                   estatusvalido := 1;
             ELSE
                    estatusvalido := 0;
             END IF;
    ELSE
         estatusvalido := 1;
    END IF;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          DesBloqueatarjeta (p_cartcardid IN NUMBER)
IS
BEGIN
   UPDATE CARTCARD.CARD
      SET bloqueo = 1
    WHERE cartcardid = p_cartcardid;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      ROLLBACK;
END DesBloqueatarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          DOCUMENTOSPORUSUARIO (
   p_nombre            IN       VARCHAR2,
   p_apellidopaterno   IN       VARCHAR2,
   p_apellidomaterno   IN       VARCHAR2,
   p_cursor            OUT      sys_refcursor
)
IS
/* ------------------------------------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: DOCUMENTOSPORUSUARIO                                                               	*/
/* Objetivo: Obtiene una lista de los documentos de usuarios con identidad especificada.                    	*/
/* Autor:    Equipo CartCard (Siscon)                                                                          	*/
/* Fecha Creacion: Oct/2008                                                                                    	*/
/* Fecha Modificacion:                                                                                         	*/
/* Ejemplo Ejecucion: exec DOCUMENTOSPORUSUARIO(<<nombre>>,<<apellidopaterno>>,<<apellidomaterno>>,<<:cursor>>) */
/* ------------------------------------------------------------------------------------------------------------ */
BEGIN
   OPEN p_cursor FOR
      SELECT   iddocumento, CARTCARD.usuario.usuarioid,
               nombre || ' ' || apaterno || ' ' || amaterno
                                                           AS nombrecompleto,
               nombredocumento, documento, idtipodocumento,
               (SELECT descripcion
                  FROM CARTCARD.cc_tipodocumento td
                 WHERE CARTCARD.cc_documentosusr.idtipodocumento =
                                          td.idtipodocumento)
                                                            AS tipodocumento,
               identidadvalidada AS idestatusidentidad,
               (SELECT descripcion
                  FROM CARTCARD.cc_estatusidentidad ei
                 WHERE CARTCARD.usuario.identidadvalidada =
                                     ei.identidadvalidada)
                                                         AS estatusidentidad,
               docaceptado AS idestatusdocumento,
               (SELECT descripcion
                  FROM CARTCARD.cc_estatusdocumento ed
                 WHERE CARTCARD.cc_documentosusr.docaceptado =
                                           ed.docaceptado)
                                                         AS estatusdocumento
          FROM CARTCARD.usuario INNER JOIN CARTCARD.cc_documentosusr ON CARTCARD.usuario.usuarioid =
                                                        CARTCARD.cc_documentosusr.usuarioid
         WHERE UPPER (CARTCARD.usuario.nombre) = UPPER (p_nombre)
           AND UPPER (CARTCARD.usuario.apaterno) = UPPER (p_apellidopaterno)
           AND UPPER (CARTCARD.usuario.amaterno) = UPPER (p_apellidomaterno)
      ORDER BY CARTCARD.usuario.usuarioid;
END documentosporusuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ELIMINACLIENTE (p_correo IN cartcard.icn_clientes.correo_electronico%type,
                                            p_nombreUsuario IN cartcard.icn_clientes.nombre_usuario%type,
                                            PSCod_Error  out  number,
                                            PSMsg_Error     out  varchar2) IS 
    v_existe number;
    v_idUsuario cartcard.icn_clientes.id_usuario%type;
    v_referencia cartcard.icn_tarjeta.referencia%type;

BEGIN
 select count(1), cl.id_usuario, t.referencia
   into v_existe, v_idUsuario, v_referencia
   from icn_clientes cl, icn_contrato co, icn_tarjeta t
  where cl.id_usuario = co.id_usuario(+)
    and co.referencia = t.referencia(+)
    and t.cardnumber IS NULL
    and cl.correo_electronico = p_correo
    and cl.nombre_usuario = p_nombreUsuario
  group by cl.id_usuario, t.referencia;

IF v_existe IS NOT NULL  THEN
 DELETE FROM CARTCARD.ICN_TARJETA_COMPLEMENTO CL
      WHERE CL.REFERENCIA = v_referencia;            
     
 DELETE FROM CARTCARD.icn_Tarjeta t
      WHERE t.referencia = v_referencia;
        
      DELETE FROM CARTCARD.icn_Contrato co
      WHERE co.id_usuario = v_idUsuario;
     
      DELETE FROM cartcard.icn_clientes cl
      where cl.correo_electronico = p_correo;

      DELETE FROM CARTCARD.Preguntasusuario p
      WHERE p.usuarioid = v_idUsuario;

      DELETE FROM CARTCARD.ic_documento d
      WHERE d.usuarioid = v_idUsuario;

  COMMIT;
           PSCod_Error:= 1;
           PSMsg_Error := 'Usuario Eliminado';
   

 ELSE
         PSCod_Error:= 2;
         PSMsg_Error := 'No existe el usuario';
 END IF;
   
    COMMIT;

EXCEPTION
    WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ELIMINACLIENTE2 (p_correo IN cartcard.icn_clientes.correo_electronico%type,
                          p_idUsuario IN cartcard.icn_clientes.id_usuario%type,
                          p_accion           IN NUMBER,
                          PSCod_Error  out  number,
                          PSMsg_Error     out  varchar2) IS  
    v_existe number;
    v_existe2 number;
    v_IdUsuario cartcard.icn_clientes.id_usuario%type;
    v_referencia cartcard.icn_tarjeta.referencia%type;
    v_referencia2 cartcard.icn_tarjeta.referencia%type;


BEGIN
     
 select count(1), cl.id_usuario ,t.referencia
 into v_existe, v_idUsuario, v_referencia
 from icn_clientes cl , icn_contrato co , icn_tarjeta t 
 where cl.id_usuario = co.id_usuario(+)
   and co.referencia = t.referencia(+)
   and cl.correo_electronico = p_correo
  -- and t.cardnumber IS NULL
   group by cl.id_usuario ,t.referencia;
     
   select count(1) ,t.referencia
   into v_existe2, v_referencia2
   from icn_clientes cl , icn_contrato co , icn_tarjeta t 
   where cl.id_usuario = co.id_usuario(+)
   and co.referencia = t.referencia(+)
   and cl.id_usuario = p_idUsuario
   --and t.cardnumber IS NULL
   group by cl.id_usuario ,t.referencia;
   

IF v_existe = 1 THEN
      DELETE FROM CARTCARD.icn_Tarjeta t
      WHERE t.referencia = v_referencia;
        
      DELETE FROM CARTCARD.icn_Contrato co
      WHERE co.id_usuario = v_IdUsuario;
      
      DELETE FROM cartcard.icn_clientes cl
      where cl.correo_electronico = p_correo;

      DELETE FROM CARTCARD.Preguntasusuario p
      WHERE p.usuarioid = v_IdUsuario;

      DELETE FROM CARTCARD.ic_documento d
      WHERE d.usuarioid = v_IdUsuario;

  COMMIT;
           PSCod_Error:= 1;
           PSMsg_Error := 'Usuario Eliminado';
   

 ELSIF p_accion = 1 and v_existe = 0 THEN
      DELETE FROM CARTCARD.icn_Tarjeta t
      WHERE t.referencia = v_referencia2;
      COMMIT; 
      PSCod_Error:= 2;
      PSMsg_Error := 'Elimino tarjeta';
      
 ELSIF p_accion = 2 and v_existe = 0 THEN    
      DELETE FROM CARTCARD.icn_Contrato co
      WHERE co.id_usuario = p_idUsuario;
    COMMIT; 
    PSCod_Error:= 2;
    PSMsg_Error := 'Eliminado Contrato';
      
 ELSIF p_accion = 3 and v_existe = 0 THEN        
      DELETE FROM cartcard.icn_clientes cl
      where cl.id_usuario =  p_idUsuario;
      PSCod_Error:= 3;
      PSMsg_Error := 'Usuario Eliminado';
      
  COMMIT; 
 ELSIF p_accion = 4 and v_existe = 0 THEN    
      DELETE FROM CARTCARD.Preguntasusuario p
      WHERE p.usuarioid =  p_idUsuario;
      COMMIT; 
      PSCod_Error:= 4;
      PSMsg_Error := 'Preguntas Eliminadas';

 ELSIF p_accion = 5 and v_existe = 0 THEN    
      DELETE FROM CARTCARD.ic_documento d
      WHERE d.usuarioid =  p_idUsuario;
      COMMIT; 
      PSCod_Error:= 5;
      PSMsg_Error := 'Documentos Eliminados';
 ELSE
         PSCod_Error:= 0;
         PSMsg_Error := 'No existe el usuario';
 END IF;
   
    COMMIT;

EXCEPTION
    WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_DATOS.ELIMINACLIENTE  (' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ELIMINACLIENTE3 (p_correo IN cartcard.icn_clientes.correo_electronico%type,
                          p_nombreUsuario IN cartcard.icn_clientes.nombre_usuario%type,
                          PSCod_Error  OUT  number,
                          PSMsg_Error  OUT  varchar2) IS  
    v_existe number;
    v_existeC number;
    v_existeN number;
    vlError      Exception;
    v_IdUsuario cartcard.icn_clientes.id_usuario%type;
    v_referencia cartcard.icn_tarjeta.referencia%type;

BEGIN
  
select count(1)
   into v_existeC
   from icn_clientes cl, icn_contrato co, icn_tarjeta t
  where  cl.correo_electronico = p_correo;
    
 select count(1)
   into v_existeN
   from icn_clientes cl
  where cl.nombre_usuario = p_nombreUsuario;
  
IF v_existeC=1 and v_existeN=1 THEN
  
select count(1), cl.id_usuario, t.referencia
   into v_existe, v_idUsuario, v_referencia
   from icn_clientes cl, icn_contrato co, icn_tarjeta t
  where cl.id_usuario = co.id_usuario(+)
    and co.referencia = t.referencia(+)
    and cl.correo_electronico = p_correo
    and cl.nombre_usuario = p_nombreUsuario
    and t.cardnumber IS NOT NULL
  group by cl.id_usuario, t.referencia;

IF v_existe = 1 THEN
     
      DELETE FROM CARTCARD.ICN_TARJETA_COMPLEMENTO CL
      WHERE CL.REFERENCIA = v_referencia;            
     
      DELETE FROM CARTCARD.icn_Tarjeta t
      WHERE t.referencia = v_referencia;
        
      DELETE FROM CARTCARD.icn_Contrato co
      WHERE co.id_usuario = v_IdUsuario;
     
      DELETE FROM cartcard.icn_clientes cl
      where cl.id_usuario = v_IdUsuario;

      DELETE FROM CARTCARD.Preguntasusuario p
      WHERE p.usuarioid = v_IdUsuario;

      DELETE FROM CARTCARD.ic_documento d
      WHERE d.usuarioid = v_IdUsuario;

  COMMIT;
           PSCod_Error:= 1;
           PSMsg_Error := 'Usuario Eliminado';
   

 ELSE
         PSCod_Error:= 0;
         PSMsg_Error := 'No existe el usuario con el correo o nombre de usuario indicado';
 END IF;
   
    COMMIT;


  
  ELSE
     PSCod_Error:= 0;
         PSMsg_Error := 'Falta ingresar el correo o nombre de usuario';
    END IF;
    



 

EXCEPTION
    WHEN others THEN
     PSCod_Error:=2;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al PKG_ICN_DATOS.ELIMINACLIENTE  (' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ELIMINACONSTANTE (
	   pId 		       in Varchar2	      
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: eliminaConstante                                              */
/* Objetivo: Elimina un registro en la tabla constantes.                       		   */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec eliminaConstante(<<id>>)      */
/* --------------------------------------------------------------------------------------- */
BEGIN

BEGIN
	 Delete from CARTCARD.constantes where ID_CONSTANTES =pId;
END;
COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;	
END eliminaConstante;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ELIMINAMEMBRESIA (
   p_usuarioid   IN       INTEGER,
   p_respuesta   OUT      VARCHAR2
)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ELIMINAMEMBRESIA                                     */
/* Objetivo: Elimina la membresia del usuarioid especificado.                 */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec ELIMINAMEMBRESIA(<<usuarioid>>,<<:respuesta>>))    */
/* -------------------------------------------------------------------------- */
   v_existe   INTEGER;
BEGIN
   BEGIN
      SELECT COUNT (usuarioid)
        INTO v_existe
        FROM CARTCARD.card
       WHERE usuarioid = p_usuarioid 
	   AND bloqueo IN (0,1,4);

      IF v_existe > 0
      THEN
         DELETE FROM CARTCARD.card
               WHERE usuarioid = p_usuarioid 
			   AND bloqueo IN (0,1,4);

         p_respuesta := 'Exito al eliminar: ' || p_usuarioid;
      ELSE
         p_respuesta :=
            'El usuario: ' || p_usuarioid
            || ', no existe ó ha sido eliminado';
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_respuesta := 'Excepcion no elimino';
      ROLLBACK;
END eliminamembresia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE EliminamembresiaV2 (
   p_usuarioid   IN       INTEGER,
   p_respuesta   OUT      VARCHAR2
)
IS
/* -------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ELIMINAMEMBRESIA                                     */
/* Objetivo: Elimina la membresia del usuarioid especificado.                 */
/* Autor:    Equipo CartCard (Siscon)                                         */
/* Fecha Creacion: Oct/2008                                                   */
/* Fecha Modificacion:                                                        */
/* Ejemplo Ejecucion: exec ELIMINAMEMBRESIA(<<usuarioid>>,<<:respuesta>>))    */
/* -------------------------------------------------------------------------- */
BEGIN
   DELETE FROM CARTCARD.ICN_TARJETA
         WHERE REFERENCIA IN (
                  SELECT A.REFERENCIA
                    FROM CARTCARD.ICN_TARJETA A
              INNER JOIN CARTCARD.ICN_CONTRATO B ON A.REFERENCIA =  B.REFERENCIA
                   WHERE B.ID_USUARIO = p_usuarioid
                     AND A.ID_STATUS_TARJETA IN (0, 1, 4));
         p_respuesta := 'Exito al eliminar: ' || p_usuarioid;

   COMMIT;
END EliminamembresiaV2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ELIMINAOPERACIONVENTANILLA (
   p_operacionid   IN   INTEGER
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: eliminaoperacionventanilla                         */
/* Objetivo: Elimina un registro en operacionVentanilla.               */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Oct/2008                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec eliminaoperacionventanilla(..)                   */
/* ----------------------------------------------------------------------- */
BEGIN
   BEGIN
      DELETE FROM CARTCARD.operacionventanilla
            WHERE operacionid = p_operacionid;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END eliminaoperacionventanilla;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ELIMINARTPACTIVADA(
    P_REFERENCIA         IN    CARTCARD.T_P_ACTIVADAS.REFERENCIA%TYPE,
    P_RESULTADO          OUT   INTEGER
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ELIMINARTPACTIVADA                                                */
/* OBJETIVO: ELIMINA LA TARJETA PREACTIVADA DE LA TABLA DE TARJETAS PREACTIVADAS           */
/* AUTOR: EQUIPO IUPICARD                                                                  */
/* FECHA CREACION: JUN/2010                                                                */
/* FECHA MODIFICACION:                                                                     */
/* EJEMPLO EJECUCION: EXEC ELIMINARTPACTIVADA(<<P_REFERENCIA>>,<<P_RESULTADO>>);           */
/* --------------------------------------------------------------------------------------- */
BEGIN
      P_RESULTADO := 1;

      DELETE FROM CARTCARD.T_P_ACTIVADAS TPA
      WHERE TPA.REFERENCIA = P_REFERENCIA;

      COMMIT;

   EXCEPTION
      WHEN NO_DATA_FOUND THEN
           P_RESULTADO := 0;
           ROLLBACK;

END ELIMINARTPACTIVADA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ELIMINAR_MEMBRECIA (
          p_id  IN int)
is
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ELIMINAR_MEMBRECIA                                              */
/* Objetivo: Elimina la membrecia, segun el criterio de busqueda.                        */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: ELIMINAR_MEMBRECIA     <Id>	                                     */
/* ------------------------------------------------------------------------------------- */
BEGIN       
delete from CARTCARD.membrecia M
   where membreciaid = p_id;
   
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL; 
	  
	  
end ELIMINAR_MEMBRECIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ELIMINAR_MEMBRESIA (
          p_id  IN CARTCARD.IC_CAT_TIPO_MEMBRESIA.ID_TIPO_MEMBRESIA%TYPE)is
BEGIN
delete from CARTCARD.IC_CAT_TIPO_MEMBRESIA M
   where id_tipo_membresia = p_id;

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_DATOS.ELIMINAR_MEMBRESIA  (' || SQLCODE || '  ' || SQLERRM || ')');


end ELIMINAR_MEMBRESIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ELIMINAUSUARIO (p_usuarioid IN INTEGER)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: eliminausuario                      */
/* Objetivo: Elimina los registros de un usuario      */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2008                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: exec eliminausuario(<<UsuarioId>>)       */
/* ------------------------------------------------------ */
BEGIN
   BEGIN
      DELETE FROM CARTCARD.preguntasusuario
            WHERE usuarioid = p_usuarioid;

      DELETE FROM CARTCARD.usuario
            WHERE usuarioid = p_usuarioid;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END eliminausuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ELIMINAUSUARIOCORE(
    P_ID_USUARIO  IN    CARTCARD.USUARIO_CORE.ID_USUARIO%TYPE,
    P_RESULTADO   OUT   INTEGER
)
IS
/* ------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: ELIMINAUSUARIOCORE                                       */
/* OBJETIVO: ELIMINAR EL USUARIO TEMPORAL DE ACCESO CREADO POR EL CORE DE IUPI    */
/* AUTOR: EQUIPO IUPICARD                                                         */
/* FECHA CREACION: JULIO/2010                                                     */
/* FECHA MODIFICACION:                                                            */
/* EJEMPLO EJECUCION: EXEC ELIMINAUSUARIOCORE(<<P_USUARIOID>>,<<:P_RESULTADO>>)   */
/* ------------------------------------------------------------------------------ */

BEGIN
   P_RESULTADO := 1;

   DELETE FROM CARTCARD.USUARIO_CORE USC
   WHERE USC.ID_USUARIO = P_ID_USUARIO;

   COMMIT;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := 0;
      ROLLBACK;

END ELIMINAUSUARIOCORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ELIMINA_CLIENTE (p_correo IN cartcard.icn_clientes.correo_electronico%type,
                                            p_nombreUsuario IN cartcard.icn_clientes.nombre_usuario%type,
                                            PSCod_Error  out  number,
                                            PSMsg_Error     out  varchar2) IS 
    v_existe number;
    v_idUsuario cartcard.icn_clientes.id_usuario%type;
    v_referencia cartcard.icn_tarjeta.referencia%type;

BEGIN
 select count(1), cl.id_usuario, t.referencia
   into v_existe, v_idUsuario, v_referencia
   from icn_clientes cl, icn_contrato co, icn_tarjeta t
  where cl.id_usuario = co.id_usuario(+)
    and co.referencia = t.referencia(+)
    and t.cardnumber IS NULL
    and cl.correo_electronico = p_correo
    and cl.nombre_usuario = p_nombreUsuario
  group by cl.id_usuario, t.referencia;

IF v_existe IS NOT NULL  THEN
 DELETE FROM CARTCARD.ICN_TARJETA_COMPLEMENTO CL
      WHERE CL.REFERENCIA = v_referencia;            
     
 DELETE FROM CARTCARD.icn_Tarjeta t
      WHERE t.referencia = v_referencia;
        
      DELETE FROM CARTCARD.icn_Contrato co
      WHERE co.id_usuario = v_idUsuario;
     
      DELETE FROM cartcard.icn_clientes cl
      where cl.correo_electronico = p_correo;

      DELETE FROM CARTCARD.Preguntasusuario p
      WHERE p.usuarioid = v_idUsuario;

      DELETE FROM CARTCARD.ic_documento d
      WHERE d.usuarioid = v_idUsuario;

  COMMIT;
           PSCod_Error:= 1;
           PSMsg_Error := 'Usuario Eliminado';
   

 ELSE
         PSCod_Error:= 2;
         PSMsg_Error := 'No existe el usuario';
 END IF;
   
    COMMIT;

EXCEPTION
    WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20131, 'Error ocurrido al agregar PKG_ICN_SERVICIO.ADD_CAT_STATUS_CUENTA (' || SQLCODE || '  ' || SQLERRM || ')');
     
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ESTABLECEESTATUSDOCUMENTO (
   p_iddocumento   IN   INTEGER,
   p_usuarioid     IN   INTEGER,
   p_docaceptado   IN   INTEGER
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ESTABLECEESTATUSDOCUMENTO                         */
/* Objetivo: Establece el estatus a un documento especifico.               */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Oct/2008                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec ESTABLECEESTATUSDOCUMENTO(..)                   */
/* ----------------------------------------------------------------------- */
   v_docminvaliden   INTEGER;
   v_docsaceptados   INTEGER;
BEGIN
   BEGIN
      UPDATE CARTCARD.cc_documentosusr
         SET docaceptado = p_docaceptado
       WHERE usuarioid = p_usuarioid AND iddocumento = p_iddocumento;

      SELECT valor_entero
        INTO v_docminvaliden
        FROM CARTCARD.constantes
       WHERE ID_CONSTANTES = 'DOCMINVALIDEN';

      SELECT COUNT (iddocumento)
        INTO v_docsaceptados
        FROM CARTCARD.cc_documentosusr
       WHERE usuarioid = p_usuarioid AND docaceptado = 1;

      IF v_docminvaliden = v_docsaceptados
      THEN
         UPDATE CARTCARD.usuario
            SET identidadvalidada = 1
          WHERE usuarioid = p_usuarioid;
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END estableceestatusdocumento;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Estados (
   pestados   OUT      sys_refcursor,
   ppais      IN       INTEGER
)
AS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: estados                      */
/* Objetivo: Obtiene los estados del catálogo.      */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2008                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: exec estados(<<:cursor>>)       */
/* ------------------------------------------------------ */
BEGIN
   OPEN pestados FOR
      SELECT  /*+ index (edo XIF2ESTADO) */
              edo.estadoid, edo.nombreestado, edo.paisid
          FROM CARTCARD.ESTADO edo
         WHERE edo.paisid = ppais
      ORDER BY nombreestado;
END Estados;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ESTADOS2 (pestados OUT sys_refcursor)
AS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: estados2                      */
/* Objetivo: Obtiene los estados del catálogo.      */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2008                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: exec estados2(<<:cursor>>)       */
/* ------------------------------------------------------ */
BEGIN
   OPEN pestados FOR
      SELECT /*+ index(edo XIF2ESTADO) */
          edo.estadoid, edo.nombreestado, edo.paisid
          FROM CARTCARD.estado edo
      ORDER BY paisid;
END estados2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE EXISTEFOLIO (
   p_folio    IN       VARCHAR2,
   p_existe   OUT      INTEGER
)
IS
/* --------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: EXISTEFOLIO                                     */
/* Objetivo: Valida si el folio se encuentra o no resgistrado.           */
/* Autor:    Equipo CartCard (Siscon)                                    */
/* Fecha Creacion: Ene/2009                                              */
/* Fecha Modificacion:                                                   */
/* Ejemplo Ejecucion: exec EXISTEFOLIO(<<folio>><<:existe>>)          	 */
/* --------------------------------------------------------------------- */
BEGIN
   SELECT COUNT (numerofolio)
     INTO p_existe
     FROM PASARELBAZ.pcc_pedidos
    WHERE numerofolio = p_folio;
END existefolio;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          EXISTEIDENTIFICACION (
   p_identificacion   IN       VARCHAR2,
   p_existe           OUT      INTEGER
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: EXISTEIDENTIFICACION                                        */
/* Objetivo: Verifica sí existe o no la identificación registrada.                   */
/* Autor:    Equipo CartCard (Siscon)                                                */
/* Fecha Creacion: Dic/2008                                                          */
/* Fecha Modificacion:                                                               */
/* Ejemplo Ejecucion: exec EXISTEIDENTIFICACION(<<identificacion>>,<<:existe>>)      */
/* --------------------------------------------------------------------------------- */
BEGIN
   SELECT COUNT (numeroidentificacion)
     INTO p_existe
     FROM usuario
    WHERE numeroidentificacion = p_identificacion;
END existeidentificacion;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          EXISTEMAIL (
   p_mail     IN       VARCHAR2,
   p_existe   OUT      INTEGER
)
IS
/* ------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: EXISTEMAIL                                   */
/* Objetivo: Verifica si se encuentra o no el mail registrado.        */
/* Autor:    Equipo CartCard (Siscon)                                 */
/* Fecha Creacion: Dic/2008                                           */
/* Fecha Modificacion:                                                */
/* Ejemplo Ejecucion: exec EXISTEMAIL(<<mail>>,<<existe>>)            */
/* ------------------------------------------------------------------ */
BEGIN
   SELECT COUNT (CARTCARD.usuario.mail)
     INTO p_existe
     FROM CARTCARD.usuario
    WHERE CARTCARD.usuario.mail = p_mail;
END existemail;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE FECHAEXPIRATARJETA (
   p_cartcardid        IN       INTEGER,
   p_fechaexpiracion   OUT      VARCHAR2
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: FECHAEXPIRATARJETA                                              */
/* Objetivo: Obtiene la fecha de expiración del cartcardid correspondiente.              */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Oct/2008                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: exec FECHAEXPIRATARJETA(<<cartcardid>>,<<:fechaexpiracion>>)       */
/* ------------------------------------------------------------------------------------- */
BEGIN
   SELECT TO_CHAR (fechaexpiracion, 'DD/mm/YY')
     INTO p_fechaexpiracion
     FROM PASBAZDES.pcc_tarjetascardmarte
    WHERE cartcardid = p_cartcardid;

END fechaexpiratarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          FLETESPORKG (p_cursor OUT sys_refcursor)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: FLETESPORKG                      */
/* Objetivo: Obtiene costos de fletes por Kilogramo.      */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2008                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: exec FLETESPORKG(<<:cursor>>)       */
/* ------------------------------------------------------ */
BEGIN
   OPEN p_cursor FOR
      SELECT   pesokg, costoflete
          FROM CARTCARD.cc_costofleteporkg
      ORDER BY pesokg ASC;
END fletesporkg;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          FONDEACARTCARDID (
   p_cartcardid         IN       INTEGER,
   p_fechaoperacion     IN       VARCHAR2,
   p_ip                 IN       VARCHAR2,
   p_mensajeoperacion   IN       VARCHAR2,
   p_montoafondear      IN       FLOAT,
   p_montofondeado      OUT      FLOAT,
   p_costomembresia     OUT      FLOAT,
   p_codigoresultado    OUT      VARCHAR2,
   p_mensajeresultado   OUT      VARCHAR2,
   p_operacionid        OUT      INTEGER,
   p_tipocambiousd      IN       FLOAT
)
AS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: fondeacartcardid                                            */
/* Objetivo: Ingresa un registro de pago de membrecia en base al cart cardId.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec fondeacartcardid(<<MensajeOperacion>>...<<TipoCambioUsd>))         */
/* ----------------------------------------------------------------------------------- */
   v_duracion         INTEGER;
   v_consecutivo      INTEGER;
   v_referencia       VARCHAR (20);
   v_nombretitular    VARCHAR (50);
   v_estadodecuenta   INTEGER      := 0;
   v_bloqueo          INTEGER      := 0;
   v_salir            BOOLEAN      := FALSE;
BEGIN
   BEGIN
      p_montofondeado := p_montoafondear;

      SELECT CARTCARD.card.referencia, CARTCARD.membrecia.costo, CARTCARD.usuario.estadodecuentaid,
             CARTCARD.usuario.nombre || ' ' || CARTCARD.usuario.apaterno || ' ' || CARTCARD.usuario.amaterno AS nombretitular,
             CARTCARD.card.bloqueo, CARTCARD.membrecia.duracion
        INTO v_referencia, p_costomembresia, v_estadodecuenta,
             v_nombretitular,
             v_bloqueo, v_duracion
        FROM CARTCARD.card, CARTCARD.usuario, CARTCARD.membrecia
       WHERE CARTCARD.card.cartcardid = p_cartcardid
         AND CARTCARD.card.usuarioid = CARTCARD.usuario.usuarioid
         AND CARTCARD.membrecia.membreciaid = CARTCARD.card.membreciaid;

      SELECT NVL (MAX (CARTCARD.operacionventanilla.nconsecutivo), 0) + 1
        INTO v_consecutivo
        FROM CARTCARD.operacionventanilla
       WHERE CARTCARD.operacionventanilla.cartcardid = p_cartcardid;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_codigoresultado := '001';
         p_mensajeresultado := 'CartCardId Inválido';

         SELECT operacionventanillaseq.NEXTVAL
           INTO p_operacionid
           FROM DUAL;

         INSERT INTO CARTCARD.operacionventanilla
                     (CARTCARD.operacionventanilla.operacionid, CARTCARD.operacionventanilla.nconsecutivo, 
                      CARTCARD.operacionventanilla.referencia, CARTCARD.operacionventanilla.fechaoperacion,
                      CARTCARD.operacionventanilla.codigoresultado, CARTCARD.operacionventanilla.mensajeresultado,
                      CARTCARD.operacionventanilla.mensajeoperacion, CARTCARD.operacionventanilla.ip, 
                      CARTCARD.operacionventanilla.fechasys
                     )
              VALUES (p_operacionid, 0, v_referencia,
                      TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                      p_codigoresultado, p_mensajeresultado,
                      p_mensajeoperacion, p_ip, SYSDATE
                     );

         v_salir := TRUE;
   END;

   BEGIN
      IF NOT v_salir
      THEN
         IF v_estadodecuenta = 0
         THEN
            p_codigoresultado := '010';
            p_mensajeresultado := 'Tarjeta Bloqueada';

            SELECT operacionventanillaseq.NEXTVAL
              INTO p_operacionid
              FROM DUAL;

            INSERT INTO CARTCARD.operacionventanilla
                        (CARTCARD.operacionventanilla.operacionid, 
                         CARTCARD.operacionventanilla.nconsecutivo, 
                         CARTCARD.operacionventanilla.cartcardid,
                         CARTCARD.operacionventanilla.fechaoperacion,
                         CARTCARD.operacionventanilla.codigoresultado, 
                         CARTCARD.operacionventanilla.mensajeresultado, 
                         CARTCARD.operacionventanilla.referencia,
                         CARTCARD.operacionventanilla.mensajeoperacion, 
                         CARTCARD.operacionventanilla.ip, 
                         CARTCARD.operacionventanilla.fechasys
                        )
                 VALUES (p_operacionid, v_consecutivo, p_cartcardid,
                         TO_DATE (p_fechaoperacion, 'ddmmyyyy-hh24:mi:ss'),
                         p_codigoresultado, p_mensajeresultado, v_referencia,
                         p_mensajeoperacion, p_ip, SYSDATE
                        );
         ELSE
            p_codigoresultado := '000';
            p_mensajeresultado := 'Exito en la operación.';

            IF v_bloqueo = 0
            THEN
               SELECT operacionventanillaseq.NEXTVAL
                 INTO p_operacionid
                 FROM DUAL;

               INSERT INTO CARTCARD.operacionventanilla
                           (CARTCARD.operacionventanilla.operacionid, 
                            CARTCARD.operacionventanilla.nconsecutivo,
                            CARTCARD.operacionventanilla.fechaoperacion,
                            CARTCARD.operacionventanilla.codigoresultado, 
                            CARTCARD.operacionventanilla.mensajeresultado,
                            CARTCARD.operacionventanilla.referencia, 
                            CARTCARD.operacionventanilla.cantidaddepositada,
                            CARTCARD.operacionventanilla.usuariodepositante, 
                            CARTCARD.operacionventanilla.cartcardid,
                            CARTCARD.operacionventanilla.mensajeoperacion, 
                            CARTCARD.operacionventanilla.ip, 
                            CARTCARD.operacionventanilla.fechasys, 
                            CARTCARD.operacionventanilla.tipocambiousd
                           )
                    VALUES (p_operacionid, v_consecutivo,
                            TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                            p_codigoresultado, p_mensajeresultado,
                            v_referencia, p_costomembresia,
                            v_nombretitular, p_cartcardid,
                            'Pago de Membresia, Punto Venta', p_ip, SYSDATE, 0
                           );

               UPDATE CARTCARD.card
                  SET CARTCARD.card.bloqueo = '1',
                      CARTCARD.card.fechaalta = SYSDATE,
                      CARTCARD.card.fechavencimiento =
                         ADD_MONTHS
                            (CASE
                                WHEN TO_DATE (CARTCARD.card.fechavencimiento) > TO_DATE (SYSDATE)
                                   THEN CARTCARD.card.fechavencimiento
                                ELSE SYSDATE
                             END,
                             v_duracion
                            )
                WHERE CARTCARD.card.cartcardid = p_cartcardid;

               p_montofondeado := p_montoafondear - p_costomembresia;
               v_consecutivo := v_consecutivo + 1;

               IF p_montofondeado > 0
               THEN
                  SELECT operacionventanillaseq.NEXTVAL
                    INTO p_operacionid
                    FROM DUAL;

                  INSERT INTO CARTCARD.operacionventanilla
                              (CARTCARD.operacionventanilla.operacionid, 
                               CARTCARD.operacionventanilla.nconsecutivo,
                               CARTCARD.operacionventanilla.fechaoperacion,
                               CARTCARD.operacionventanilla.codigoresultado, 
                               CARTCARD.operacionventanilla.mensajeresultado,
                               CARTCARD.operacionventanilla.referencia, 
                               CARTCARD.operacionventanilla.cantidaddepositada,
                               CARTCARD.operacionventanilla.usuariodepositante, 
                               CARTCARD.operacionventanilla.cartcardid,
                               CARTCARD.operacionventanilla.mensajeoperacion, 
                               CARTCARD.operacionventanilla.ip, 
                               CARTCARD.operacionventanilla.fechasys,
                               CARTCARD.operacionventanilla.tipocambiousd
                              )
                       VALUES (p_operacionid, v_consecutivo,
                               TO_DATE (p_fechaoperacion,
                                        'ddMMYYYY-HH24:MI:ss'
                                       ),
                               p_codigoresultado, p_mensajeresultado,
                               v_referencia, p_montofondeado,
                               v_nombretitular, p_cartcardid,
                               p_mensajeoperacion, p_ip, SYSDATE,
                               p_tipocambiousd
                              );
               END IF;
            END IF;

            IF v_bloqueo = 1
            THEN
               SELECT operacionventanillaseq.NEXTVAL
                 INTO p_operacionid
                 FROM DUAL;

               INSERT INTO CARTCARD.operacionventanilla
                           (CARTCARD.operacionventanilla.operacionid, 
                            CARTCARD.operacionventanilla.nconsecutivo,
                            CARTCARD.operacionventanilla.fechaoperacion,
                            CARTCARD.operacionventanilla.codigoresultado, 
                            CARTCARD.operacionventanilla.mensajeresultado,
                            CARTCARD.operacionventanilla.referencia, 
                            CARTCARD.operacionventanilla.cantidaddepositada,
                            CARTCARD.operacionventanilla.usuariodepositante, 
                            CARTCARD.operacionventanilla.cartcardid,
                            CARTCARD.operacionventanilla.mensajeoperacion, 
                            CARTCARD.operacionventanilla.ip, 
                            CARTCARD.operacionventanilla.fechasys, 
                            CARTCARD.operacionventanilla.tipocambiousd
                           )
                    VALUES (p_operacionid, v_consecutivo,
                            TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                            p_codigoresultado, p_mensajeresultado,
                            v_referencia, p_montofondeado,
                            v_nombretitular, p_cartcardid,
                            p_mensajeoperacion, p_ip, SYSDATE, p_tipocambiousd
                           );

               SELECT operacionventanillaseq.NEXTVAL
                 INTO p_operacionid
                 FROM DUAL;

               v_consecutivo := v_consecutivo + 1;

               INSERT INTO CARTCARD.operacionventanilla
                           (CARTCARD.operacionventanilla.operacionid, 
                            CARTCARD.operacionventanilla.nconsecutivo,
                            CARTCARD.operacionventanilla.fechaoperacion,
                            CARTCARD.operacionventanilla.codigoresultado, 
                            CARTCARD.operacionventanilla.mensajeresultado,
                            CARTCARD.operacionventanilla.referencia,
                            CARTCARD.operacionventanilla.cantidaddepositada,
                            CARTCARD.operacionventanilla.usuariodepositante, 
                            CARTCARD.operacionventanilla.cartcardid,
                            CARTCARD.operacionventanilla.mensajeoperacion, 
                            CARTCARD.operacionventanilla.ip, 
                            CARTCARD.operacionventanilla.fechasys,
                            CARTCARD.operacionventanilla.tipocambiousd
                           )
                    VALUES (p_operacionid, v_consecutivo,
                            TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                            p_codigoresultado, p_mensajeresultado,
                            v_referencia,
                              p_montofondeado
                            * ((SELECT CARTCARD.constantes.valor_caracter
                                  FROM CARTCARD.constantes
                                 WHERE ID_CONSTANTES = 'COMISION_PORCENTAJE') / 100),
                            v_nombretitular, p_cartcardid,
                            'Comision por Pago', p_ip, SYSDATE,
                            p_tipocambiousd
                           );
            END IF;

            IF v_bloqueo = 4
            THEN
               p_codigoresultado := '016';
               p_mensajeresultado :=
                  'Tarjeta pagada, activación en proceso. Intente más tarde.';
            END IF;
         END IF;
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END fondeacartcardid;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Fondeareferencia (
   p_mensajeoperacion      IN       VARCHAR2,
   p_ip                    IN       VARCHAR2,
   p_numerooperador        IN       NUMBER,
   p_numerosucursal        IN       NUMBER,
   p_usuario_depositante   IN       VARCHAR2,
   p_numeroreferencia      IN       VARCHAR2,
   p_fechaoperacion        IN       VARCHAR2,
   p_montoafondear         IN       FLOAT,
   p_montofondeado         OUT      FLOAT,
   p_costomembresia        OUT      FLOAT,
   p_codigoresultado       OUT      VARCHAR2,
   p_mensajeresultado      OUT      VARCHAR2,
   p_operacionid           OUT      INTEGER,
   p_tipocambiousd         IN       FLOAT
)
AS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: fondeareferencia                                            */
/* Objetivo: Ingresa un registro de pago de membrecia.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec fondearenovacionreferencia(<<MensajeOperacion>>...<<TipoCambioUsd>))         */
/* ----------------------------------------------------------------------------------- */
   v_duracion              INTEGER;
   v_nombretitular         VARCHAR (50);
   v_consecutivo           INTEGER      := 0;
   v_estadodecuenta        INTEGER      := 0;
   v_cartcard              INTEGER      := 0;
   v_bloqueo               INTEGER      := 0;
   v_salir                 BOOLEAN      := FALSE;
   v_comision_ventanilla   FLOAT;
   v_constante_comision VARCHAR2(100);
BEGIN
   BEGIN
      p_montofondeado := p_montoafondear;

      SELECT CARTCARD.CARD.cartcardid, CARTCARD.MEMBRECIA.costo,
             CARTCARD.USUARIO.estadodecuentaid,
                CARTCARD.USUARIO.nombre
             || ' '
             || CARTCARD.USUARIO.apaterno
             || ' '
             || CARTCARD.USUARIO.amaterno AS nombretitular,
             CARTCARD.CARD.bloqueo, CARTCARD.MEMBRECIA.duracion
        INTO v_cartcard, p_costomembresia,
             v_estadodecuenta,
             v_nombretitular,
             v_bloqueo, v_duracion
        FROM CARTCARD.CARD, CARTCARD.USUARIO, CARTCARD.MEMBRECIA
       WHERE CARTCARD.CARD.referencia = p_numeroreferencia
         AND CARTCARD.CARD.usuarioid = CARTCARD.USUARIO.usuarioid
         AND CARTCARD.MEMBRECIA.membreciaid = CARTCARD.CARD.membreciaid;

      p_costomembresia := p_costomembresia * p_tipocambiousd;

      SELECT NVL (MAX (nconsecutivo), 0) + 1
        INTO v_consecutivo
        FROM CARTCARD.OPERACIONVENTANILLA
       WHERE CARTCARD.OPERACIONVENTANILLA.cartcardid = v_cartcard;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_codigoresultado := '001';
         p_mensajeresultado := 'Referencia Inválida';

         SELECT operacionventanillaseq.NEXTVAL
           INTO p_operacionid
           FROM DUAL;

         INSERT INTO CARTCARD.OPERACIONVENTANILLA
                     (CARTCARD.OPERACIONVENTANILLA.operacionid,
                      CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                      CARTCARD.OPERACIONVENTANILLA.referencia,
                      CARTCARD.OPERACIONVENTANILLA.sucursalid,
                      CARTCARD.OPERACIONVENTANILLA.operadorid,
                      CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                      CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                      CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                      CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                      CARTCARD.OPERACIONVENTANILLA.ip,
                      CARTCARD.OPERACIONVENTANILLA.fechasys
                     )
              VALUES (p_operacionid,
                      0,
                      p_numeroreferencia,
                      p_numerosucursal,
                      p_numerooperador,
                      TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                      p_codigoresultado,
                      p_mensajeresultado,
                      p_mensajeoperacion,
                      p_ip,
                      SYSDATE
                     );

         v_salir := TRUE;
   END;

   BEGIN
      IF NOT v_salir
      THEN
         IF v_estadodecuenta = 0
         THEN
            p_codigoresultado := '010';
            p_mensajeresultado := 'Tarjeta Bloqueada';

            SELECT operacionventanillaseq.NEXTVAL
              INTO p_operacionid
              FROM DUAL;

            INSERT INTO CARTCARD.OPERACIONVENTANILLA
                        (CARTCARD.OPERACIONVENTANILLA.operacionid,
                         CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                         CARTCARD.OPERACIONVENTANILLA.cartcardid,
                         CARTCARD.OPERACIONVENTANILLA.sucursalid,
                         CARTCARD.OPERACIONVENTANILLA.operadorid,
                         CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                         CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                         CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                         CARTCARD.OPERACIONVENTANILLA.referencia,
                         CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                         CARTCARD.OPERACIONVENTANILLA.ip,
                         CARTCARD.OPERACIONVENTANILLA.fechasys
                        )
                 VALUES (p_operacionid,
                         v_consecutivo,
                         v_cartcard,
                         p_numerosucursal,
                         p_numerooperador,
                         TO_DATE (p_fechaoperacion, 'ddmmyyyy-hh24:mi:ss'),
                         p_codigoresultado,
                         p_mensajeresultado,
                         p_numeroreferencia,
                         p_mensajeoperacion,
                         p_ip,
                         SYSDATE
                        );
         ELSE
            IF p_costomembresia > p_montoafondear AND v_bloqueo = 0
            THEN
               p_codigoresultado := '008';
               p_mensajeresultado :=
                  'El monto debe ser igual o mayor al monto minimo requerido';

               SELECT operacionventanillaseq.NEXTVAL
                 INTO p_operacionid
                 FROM DUAL;

               INSERT INTO CARTCARD.OPERACIONVENTANILLA
                           (CARTCARD.OPERACIONVENTANILLA.operacionid,
                            CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                            CARTCARD.OPERACIONVENTANILLA.cartcardid,
                            CARTCARD.OPERACIONVENTANILLA.sucursalid,
                            CARTCARD.OPERACIONVENTANILLA.operadorid,
                            CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                            CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                            CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                            CARTCARD.OPERACIONVENTANILLA.referencia,
                            CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                            CARTCARD.OPERACIONVENTANILLA.ip,
                            CARTCARD.OPERACIONVENTANILLA.fechasys
                           )
                    VALUES (p_operacionid,
                            v_consecutivo,
                            v_cartcard,
                            p_numerosucursal,
                            p_numerooperador,
                            TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                            p_codigoresultado,
                            p_mensajeresultado,
                            p_numeroreferencia,
                            p_mensajeoperacion,
                            p_ip,
                            SYSDATE
                           );
            ELSE
               p_codigoresultado := '000';
               p_mensajeresultado := 'Exito en la operación';

               IF v_bloqueo = 0
               THEN
                  SELECT operacionventanillaseq.NEXTVAL
                    INTO p_operacionid
                    FROM DUAL;

                  INSERT INTO CARTCARD.OPERACIONVENTANILLA
                              (CARTCARD.OPERACIONVENTANILLA.operacionid,
                               CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                               CARTCARD.OPERACIONVENTANILLA.sucursalid,
                               CARTCARD.OPERACIONVENTANILLA.operadorid,
                               CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                               CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                               CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                               CARTCARD.OPERACIONVENTANILLA.referencia,
                               CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                               CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                               CARTCARD.OPERACIONVENTANILLA.cartcardid,
                               CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                               CARTCARD.OPERACIONVENTANILLA.ip,
                               CARTCARD.OPERACIONVENTANILLA.fechasys,
                               CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                              )
                       VALUES (p_operacionid,
                               v_consecutivo,
                               p_numerosucursal,
                               p_numerooperador,
                               TO_DATE (p_fechaoperacion,
                                        'ddMMYYYY-HH24:MI:ss'
                                       ),
                               p_codigoresultado,
                               p_mensajeresultado,
                               p_numeroreferencia,
                               p_costomembresia,
                               p_usuario_depositante,
                               v_cartcard,
                               'Pago de Membresia',
                               p_ip,
                               SYSDATE,
                               p_tipocambiousd
                              );

                  UPDATE CARTCARD.CARD
                     SET CARTCARD.CARD.bloqueo = '1',
                         CARTCARD.CARD.fechaalta = SYSDATE,
                         CARTCARD.CARD.fechavencimiento =
                            ADD_MONTHS
                               (CASE
                                   WHEN TO_DATE
                                             (CARTCARD.CARD.fechavencimiento) >
                                                             TO_DATE (SYSDATE)
                                      THEN CARTCARD.CARD.fechavencimiento
                                   ELSE SYSDATE
                                END,
                                v_duracion
                               )
                   WHERE CARTCARD.CARD.cartcardid = v_cartcard;

                  p_montofondeado := p_montoafondear - p_costomembresia;
      IF p_montofondeado / p_tipocambiousd < 0.01
     THEN
     p_montofondeado := 0;
      END IF;

                  v_consecutivo := v_consecutivo + 1;

                  IF p_montofondeado > 0
                  THEN
                     SELECT operacionventanillaseq.NEXTVAL
                       INTO p_operacionid
                       FROM DUAL;

                     INSERT INTO CARTCARD.OPERACIONVENTANILLA
                                 (CARTCARD.OPERACIONVENTANILLA.operacionid,
                                  CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                                  CARTCARD.OPERACIONVENTANILLA.sucursalid,
                                  CARTCARD.OPERACIONVENTANILLA.operadorid,
                                  CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                                  CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                                  CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                                  CARTCARD.OPERACIONVENTANILLA.referencia,
                                  CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                                  CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                                  CARTCARD.OPERACIONVENTANILLA.cartcardid,
                                  CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                                  CARTCARD.OPERACIONVENTANILLA.ip,
                                  CARTCARD.OPERACIONVENTANILLA.fechasys,
                                  CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                                 )
                          VALUES (p_operacionid,
                                  v_consecutivo,
                                  p_numerosucursal,
                                  p_numerooperador,
                                  TO_DATE (p_fechaoperacion,
                                           'ddMMYYYY-HH24:MI:ss'
                                          ),
                                  p_codigoresultado,
                                  p_mensajeresultado,
                                  p_numeroreferencia,
                                  p_montofondeado,
                                  p_usuario_depositante,
                                  v_cartcard,
                                  p_mensajeoperacion,
                                  p_ip,
                                  SYSDATE,
                                  p_tipocambiousd
                                 );
                  END IF;
               END IF;

               IF v_bloqueo = 1
               THEN
                  SELECT operacionventanillaseq.NEXTVAL
                    INTO p_operacionid
                    FROM DUAL;

   v_constante_comision := UPPER(p_usuario_depositante);

   IF p_numerooperador = -1 AND p_numerosucursal = -1 THEN
       v_constante_comision := 'PORTALBAZ';
       ELSIF p_numerooperador = -2 AND p_numerosucursal = -2 THEN
           v_constante_comision := 'TARJETA_TPV';        
      ELSE IF v_constante_comision != 'SPEI'  AND v_constante_comision != 'SWIFT' AND v_constante_comision != 'TEF'  THEN
          v_constante_comision := 'VENTANILLA';
               END IF;
     END IF;

                  
                  SELECT TO_NUMBER(CARTCARD.CONSTANTES.valor_caracter,'9999999999.9999')
                         * p_tipocambiousd
                    INTO v_comision_ventanilla
                    FROM CARTCARD.CONSTANTES
                   WHERE CARTCARD.CONSTANTES.id_constantes =
                                                         'COMISION_' ||  v_constante_comision;

                  p_montofondeado := p_montofondeado - v_comision_ventanilla;

                  INSERT INTO CARTCARD.OPERACIONVENTANILLA
                              (CARTCARD.OPERACIONVENTANILLA.operacionid,
                               CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                               CARTCARD.OPERACIONVENTANILLA.sucursalid,
                               CARTCARD.OPERACIONVENTANILLA.operadorid,
                               CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                               CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                               CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                               CARTCARD.OPERACIONVENTANILLA.referencia,
                               CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                               CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                               CARTCARD.OPERACIONVENTANILLA.cartcardid,
                               CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                               CARTCARD.OPERACIONVENTANILLA.ip,
                               CARTCARD.OPERACIONVENTANILLA.fechasys,
                               CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                              )
                       VALUES (p_operacionid,
                               v_consecutivo,
                               p_numerosucursal,
                               p_numerooperador,
                               TO_DATE (p_fechaoperacion,
                                        'ddMMYYYY-HH24:MI:ss'
                                       ),
                               p_codigoresultado,
                               p_mensajeresultado,
                               p_numeroreferencia,
                               p_montofondeado,
                               p_usuario_depositante,
                               v_cartcard,
                               p_mensajeoperacion,
                               p_ip,
                               SYSDATE,
                               p_tipocambiousd
                              );

                  SELECT operacionventanillaseq.NEXTVAL
                    INTO p_operacionid
                    FROM DUAL;

                  v_consecutivo := v_consecutivo + 1;

                  INSERT INTO CARTCARD.OPERACIONVENTANILLA
                              (CARTCARD.OPERACIONVENTANILLA.operacionid,
                               CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                               CARTCARD.OPERACIONVENTANILLA.sucursalid,
                               CARTCARD.OPERACIONVENTANILLA.operadorid,
                               CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                               CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                               CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                               CARTCARD.OPERACIONVENTANILLA.referencia,
                               CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                               CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                               CARTCARD.OPERACIONVENTANILLA.cartcardid,
                               CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                               CARTCARD.OPERACIONVENTANILLA.ip,
                               CARTCARD.OPERACIONVENTANILLA.fechasys,
                               CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                              )
                       VALUES (p_operacionid,
                               v_consecutivo,
                               p_numerosucursal,
                               p_numerooperador,
                               TO_DATE (p_fechaoperacion,
                                        'ddMMYYYY-HH24:MI:ss'
                                       ),
                               p_codigoresultado,
                               p_mensajeresultado,
                               p_numeroreferencia,
                               v_comision_ventanilla,
                               p_usuario_depositante,
                               v_cartcard,
                               'Comision por Pago',
                               p_ip,
                               SYSDATE,
                               p_tipocambiousd
                              );
               END IF;

               IF v_bloqueo = 4
               THEN
                  p_codigoresultado := '016';
                  p_mensajeresultado :=
                     'Tarjeta pagada, activación en proceso. Intente más tarde.';
               END IF;
            END IF;
         END IF;
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END Fondeareferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Fondeareferenciaunusd (   
   p_ip                    IN       VARCHAR2,
   p_numerooperador        IN       NUMBER,
   p_numerosucursal        IN       NUMBER,
   p_usuario_depositante   IN       VARCHAR2,
   p_numeroreferencia      IN       VARCHAR2,
   p_fechaoperacion        IN       VARCHAR2,
   p_montofondeado         IN       FLOAT,
   p_tipocambiousd         IN       FLOAT
)
AS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: fondeareferenciaunusd                                            */
/* Objetivo: Ingresa un registro de pago de membrecia.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Enero2010                                                           */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec fondearenovacionreferenciaunusd(<<MensajeOperacion>>...<<TipoCambioUsd>))         */
/* ----------------------------------------------------------------------------------- */

   p_operacionid           INTEGER      := 0;
   p_codigoresultado      VARCHAR2(50);
   p_mensajeresultado      VARCHAR2(50);
   p_mensajeoperacion      VARCHAR2(50);
   v_consecutivo           INTEGER      := 0;
   v_cartcard              INTEGER      := 0;   
   v_comision_ventanilla   FLOAT;
   
   
BEGIN

      p_codigoresultado := '000';
      p_mensajeresultado := 'Exito en la operación';
   p_mensajeoperacion := 'Verificacion';
   
     SELECT CARTCARD.CARD.cartcardid
     INTO v_cartcard
     FROM CARTCARD.CARD
     WHERE CARTCARD.CARD.referencia = p_numeroreferencia;
     
     
           SELECT NVL (MAX (nconsecutivo), 0) + 1
           INTO v_consecutivo
           FROM CARTCARD.OPERACIONVENTANILLA
          WHERE CARTCARD.OPERACIONVENTANILLA.cartcardid = v_cartcard;
       
               

                  SELECT operacionventanillaseq.NEXTVAL
                    INTO p_operacionid
                    FROM DUAL;
   

       v_comision_ventanilla := 0; 

                  INSERT INTO CARTCARD.OPERACIONVENTANILLA
                              (CARTCARD.OPERACIONVENTANILLA.operacionid,
                               CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                               CARTCARD.OPERACIONVENTANILLA.sucursalid,
                               CARTCARD.OPERACIONVENTANILLA.operadorid,
                               CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                               CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                               CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                               CARTCARD.OPERACIONVENTANILLA.referencia,
                               CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                               CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                               CARTCARD.OPERACIONVENTANILLA.cartcardid,
                               CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                               CARTCARD.OPERACIONVENTANILLA.ip,
                               CARTCARD.OPERACIONVENTANILLA.fechasys,
                               CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                              )
                       VALUES (p_operacionid,
                               v_consecutivo,
                               p_numerosucursal,
                               p_numerooperador,
                               TO_DATE (p_fechaoperacion,
                                        'ddMMYYYY-HH24:MI:ss'
                                       ),
                               p_codigoresultado,
                               p_mensajeresultado,
                               p_numeroreferencia,
                               p_montofondeado,
                               p_usuario_depositante,
                               v_cartcard,
                               p_mensajeoperacion,
                               p_ip,
                               SYSDATE,
                               p_tipocambiousd
                              );
                 
   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END Fondeareferenciaunusd;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Fondeareferenciav2 (
   p_mensajeoperacion      IN       VARCHAR2,
   p_ip                    IN       VARCHAR2,
   p_numerooperador        IN       NUMBER,
   p_numerosucursal        IN       NUMBER,
   p_usuario_depositante   IN       VARCHAR2,
   p_numeroreferencia      IN       VARCHAR2,
   p_fechaoperacion        IN       VARCHAR2,
   p_montoafondear         IN       FLOAT,
   p_montofondeado         OUT      FLOAT,
   p_costomembresia        OUT      FLOAT,
   p_codigoresultado       OUT      VARCHAR2,
   p_mensajeresultado      OUT      VARCHAR2,
   p_operacionid           OUT      INTEGER,
   p_tipocambiousd         IN       FLOAT
)
AS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: fondeareferencia                                            */
/* Objetivo: Ingresa un registro de pago de membrecia.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec fondearenovacionreferencia(<<MensajeOperacion>>...<<TipoCambioUsd>))         */
/* ----------------------------------------------------------------------------------- */
   v_duracion              INTEGER;
   v_nombretitular         VARCHAR (50);
   v_consecutivo           INTEGER      := 0;
   v_estadodecuenta        INTEGER      := 0;
   v_cartcard              INTEGER      := 0;
   v_bloqueo               INTEGER      := 0;
   v_salir                 BOOLEAN      := FALSE;
   v_comision_ventanilla   FLOAT;
   v_constante_comision VARCHAR2(100);
BEGIN
   BEGIN
      p_montofondeado := p_montoafondear;

      SELECT u.nombre
             || ' '
             || u.apaterno|| ' '
             || u.amaterno,
             m.duracion,
             c.referencia,
             m.costo,
             t.id_status_tarjeta
             --, u.estatus
        INTO v_nombretitular, --nombre
             v_duracion, --duracion
             v_cartcard, --referencia
             p_costomembresia, --costo
             v_bloqueo --status tarjeta
        FROM ICN_CLIENTES u INNER JOIN ICN_CONTRATO c ON u.ID_USUARIO = c.ID_USUARIO
       INNER JOIN ICN_TARJETA t ON c.REFERENCIA = t.REFERENCIA
       INNER JOIN MEMBRECIA m ON m.membreciaid = t.id_tipo_membresia
       WHERE c.referencia = p_numeroreferencia;

      p_costomembresia := p_costomembresia * p_tipocambiousd;

      SELECT NVL (MAX (nconsecutivo), 0) + 1
        INTO v_consecutivo
        FROM CARTCARD.OPERACIONVENTANILLA
       WHERE CARTCARD.OPERACIONVENTANILLA.referencia = v_cartcard;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         p_codigoresultado := '001';
         p_mensajeresultado := 'Referencia Inválida';

         SELECT operacionventanillaseq.NEXTVAL
           INTO p_operacionid
           FROM DUAL;

         INSERT INTO CARTCARD.OPERACIONVENTANILLA
                     (CARTCARD.OPERACIONVENTANILLA.operacionid,
                      CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                      CARTCARD.OPERACIONVENTANILLA.referencia,
                      CARTCARD.OPERACIONVENTANILLA.sucursalid,
                      CARTCARD.OPERACIONVENTANILLA.operadorid,
                      CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                      CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                      CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                      CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                      CARTCARD.OPERACIONVENTANILLA.ip,
                      CARTCARD.OPERACIONVENTANILLA.fechasys
                     )
              VALUES (p_operacionid,
                      0,
                      p_numeroreferencia,
                      p_numerosucursal,
                      p_numerooperador,
                      TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                      p_codigoresultado,
                      p_mensajeresultado,
                      p_mensajeoperacion,
                      p_ip,
                      SYSDATE
                     );

         v_salir := TRUE;
   END;

   BEGIN
      IF NOT v_salir
      THEN
         IF v_estadodecuenta = 0
         THEN
            p_codigoresultado := '010';
            p_mensajeresultado := 'Tarjeta Bloqueada';

            SELECT operacionventanillaseq.NEXTVAL
              INTO p_operacionid
              FROM DUAL;

            INSERT INTO CARTCARD.OPERACIONVENTANILLA
                        (CARTCARD.OPERACIONVENTANILLA.operacionid,
                         CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                         CARTCARD.OPERACIONVENTANILLA.cartcardid,
                         CARTCARD.OPERACIONVENTANILLA.sucursalid,
                         CARTCARD.OPERACIONVENTANILLA.operadorid,
                         CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                         CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                         CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                         CARTCARD.OPERACIONVENTANILLA.referencia,
                         CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                         CARTCARD.OPERACIONVENTANILLA.ip,
                         CARTCARD.OPERACIONVENTANILLA.fechasys
                        )
                 VALUES (p_operacionid,
                         v_consecutivo,
                         0,
                         p_numerosucursal,
                         p_numerooperador,
                         TO_DATE (p_fechaoperacion, 'ddmmyyyy-hh24:mi:ss'),
                         p_codigoresultado,
                         p_mensajeresultado,
                         p_numeroreferencia,
                         p_mensajeoperacion,
                         p_ip,
                         SYSDATE
                        );
         ELSE
            IF p_costomembresia > p_montoafondear AND v_bloqueo = 0
            THEN
               p_codigoresultado := '008';
               p_mensajeresultado :=
                  'El monto debe ser igual o mayor al monto minimo requerido';

               SELECT operacionventanillaseq.NEXTVAL
                 INTO p_operacionid
                 FROM DUAL;

               INSERT INTO CARTCARD.OPERACIONVENTANILLA
                           (CARTCARD.OPERACIONVENTANILLA.operacionid,
                            CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                            CARTCARD.OPERACIONVENTANILLA.cartcardid,
                            CARTCARD.OPERACIONVENTANILLA.sucursalid,
                            CARTCARD.OPERACIONVENTANILLA.operadorid,
                            CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                            CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                            CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                            CARTCARD.OPERACIONVENTANILLA.referencia,
                            CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                            CARTCARD.OPERACIONVENTANILLA.ip,
                            CARTCARD.OPERACIONVENTANILLA.fechasys
                           )
                    VALUES (p_operacionid,
                            v_consecutivo,
                            v_cartcard,
                            p_numerosucursal,
                            p_numerooperador,
                            TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                            p_codigoresultado,
                            p_mensajeresultado,
                            p_numeroreferencia,
                            p_mensajeoperacion,
                            p_ip,
                            SYSDATE
                           );
            ELSE
               p_codigoresultado := '000';
               p_mensajeresultado := 'Exito en la operación';

               IF v_bloqueo = 0
               THEN
                  SELECT operacionventanillaseq.NEXTVAL
                    INTO p_operacionid
                    FROM DUAL;

                  INSERT INTO CARTCARD.OPERACIONVENTANILLA
                              (CARTCARD.OPERACIONVENTANILLA.operacionid,
                               CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                               CARTCARD.OPERACIONVENTANILLA.sucursalid,
                               CARTCARD.OPERACIONVENTANILLA.operadorid,
                               CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                               CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                               CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                               CARTCARD.OPERACIONVENTANILLA.referencia,
                               CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                               CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                               CARTCARD.OPERACIONVENTANILLA.cartcardid,
                               CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                               CARTCARD.OPERACIONVENTANILLA.ip,
                               CARTCARD.OPERACIONVENTANILLA.fechasys,
                               CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                              )
                       VALUES (p_operacionid,
                               v_consecutivo,
                               p_numerosucursal,
                               p_numerooperador,
                               TO_DATE (p_fechaoperacion,
                                        'ddMMYYYY-HH24:MI:ss'
                                       ),
                               p_codigoresultado,
                               p_mensajeresultado,
                               p_numeroreferencia,
                               p_costomembresia,
                               p_usuario_depositante,
                               v_cartcard,
                               'Pago de Membresia',
                               p_ip,
                               SYSDATE,
                               p_tipocambiousd
                              );

                  UPDATE CARTCARD.ICN_TARJETA
                     SET CARTCARD.ICN_TARJETA.id_status_tarjeta = '1',
                         CARTCARD.ICN_TARJETA.ultima_modificacion = SYSDATE,
                         CARTCARD.ICN_TARJETA.expirationdate =
                            ADD_MONTHS
                               (CASE
                                   WHEN TO_DATE
                                             (CARTCARD.ICN_TARJETA.expirationdate) >
                                                             TO_DATE (SYSDATE)
                                      THEN CARTCARD.ICN_TARJETA.expirationdate
                                   ELSE SYSDATE
                                END,
                                v_duracion
                               )
                   WHERE CARTCARD.ICN_TARJETA.referencia = v_cartcard;

                  p_montofondeado := p_montoafondear - p_costomembresia;
      IF p_montofondeado / p_tipocambiousd < 0.01
     THEN
     p_montofondeado := 0;
      END IF;

                  v_consecutivo := v_consecutivo + 1;

                  IF p_montofondeado > 0
                  THEN
                     SELECT operacionventanillaseq.NEXTVAL
                       INTO p_operacionid
                       FROM DUAL;

                     INSERT INTO CARTCARD.OPERACIONVENTANILLA
                                 (CARTCARD.OPERACIONVENTANILLA.operacionid,
                                  CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                                  CARTCARD.OPERACIONVENTANILLA.sucursalid,
                                  CARTCARD.OPERACIONVENTANILLA.operadorid,
                                  CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                                  CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                                  CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                                  CARTCARD.OPERACIONVENTANILLA.referencia,
                                  CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                                  CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                                  CARTCARD.OPERACIONVENTANILLA.cartcardid,
                                  CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                                  CARTCARD.OPERACIONVENTANILLA.ip,
                                  CARTCARD.OPERACIONVENTANILLA.fechasys,
                                  CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                                 )
                          VALUES (p_operacionid,
                                  v_consecutivo,
                                  p_numerosucursal,
                                  p_numerooperador,
                                  TO_DATE (p_fechaoperacion,
                                           'ddMMYYYY-HH24:MI:ss'
                                          ),
                                  p_codigoresultado,
                                  p_mensajeresultado,
                                  p_numeroreferencia,
                                  p_montofondeado,
                                  p_usuario_depositante,
                                  v_cartcard,
                                  p_mensajeoperacion,
                                  p_ip,
                                  SYSDATE,
                                  p_tipocambiousd
                                 );
                  END IF;
               END IF;

               IF v_bloqueo = 1
               THEN
                  SELECT operacionventanillaseq.NEXTVAL
                    INTO p_operacionid
                    FROM DUAL;

   v_constante_comision := UPPER(p_usuario_depositante);

   IF p_numerooperador = -1 AND p_numerosucursal = -1 THEN
       v_constante_comision := 'PORTALBAZ';
       ELSIF p_numerooperador = -2 AND p_numerosucursal = -2 THEN
           v_constante_comision := 'TARJETA_TPV';        
      ELSE IF v_constante_comision != 'SPEI'  AND v_constante_comision != 'SWIFT' AND v_constante_comision != 'TEF'  THEN
          v_constante_comision := 'VENTANILLA';
               END IF;
     END IF;

                  
                  SELECT TO_NUMBER(CARTCARD.CONSTANTES.valor_caracter,'9999999999.9999')
                         * p_tipocambiousd
                    INTO v_comision_ventanilla
                    FROM CARTCARD.CONSTANTES
                   WHERE CARTCARD.CONSTANTES.id_constantes =
                                                         'COMISION_' ||  v_constante_comision;

                  p_montofondeado := p_montofondeado - v_comision_ventanilla;

                  INSERT INTO CARTCARD.OPERACIONVENTANILLA
                              (CARTCARD.OPERACIONVENTANILLA.operacionid,
                               CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                               CARTCARD.OPERACIONVENTANILLA.sucursalid,
                               CARTCARD.OPERACIONVENTANILLA.operadorid,
                               CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                               CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                               CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                               CARTCARD.OPERACIONVENTANILLA.referencia,
                               CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                               CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                               CARTCARD.OPERACIONVENTANILLA.cartcardid,
                               CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                               CARTCARD.OPERACIONVENTANILLA.ip,
                               CARTCARD.OPERACIONVENTANILLA.fechasys,
                               CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                              )
                       VALUES (p_operacionid,
                               v_consecutivo,
                               p_numerosucursal,
                               p_numerooperador,
                               TO_DATE (p_fechaoperacion,
                                        'ddMMYYYY-HH24:MI:ss'
                                       ),
                               p_codigoresultado,
                               p_mensajeresultado,
                               p_numeroreferencia,
                               p_montofondeado,
                               p_usuario_depositante,
                               v_cartcard,
                               p_mensajeoperacion,
                               p_ip,
                               SYSDATE,
                               p_tipocambiousd
                              );

                  SELECT operacionventanillaseq.NEXTVAL
                    INTO p_operacionid
                    FROM DUAL;

                  v_consecutivo := v_consecutivo + 1;

                  INSERT INTO CARTCARD.OPERACIONVENTANILLA
                              (CARTCARD.OPERACIONVENTANILLA.operacionid,
                               CARTCARD.OPERACIONVENTANILLA.nconsecutivo,
                               CARTCARD.OPERACIONVENTANILLA.sucursalid,
                               CARTCARD.OPERACIONVENTANILLA.operadorid,
                               CARTCARD.OPERACIONVENTANILLA.fechaoperacion,
                               CARTCARD.OPERACIONVENTANILLA.codigoresultado,
                               CARTCARD.OPERACIONVENTANILLA.mensajeresultado,
                               CARTCARD.OPERACIONVENTANILLA.referencia,
                               CARTCARD.OPERACIONVENTANILLA.cantidaddepositada,
                               CARTCARD.OPERACIONVENTANILLA.usuariodepositante,
                               CARTCARD.OPERACIONVENTANILLA.cartcardid,
                               CARTCARD.OPERACIONVENTANILLA.mensajeoperacion,
                               CARTCARD.OPERACIONVENTANILLA.ip,
                               CARTCARD.OPERACIONVENTANILLA.fechasys,
                               CARTCARD.OPERACIONVENTANILLA.tipocambiousd
                              )
                       VALUES (p_operacionid,
                               v_consecutivo,
                               p_numerosucursal,
                               p_numerooperador,
                               TO_DATE (p_fechaoperacion,
                                        'ddMMYYYY-HH24:MI:ss'
                                       ),
                               p_codigoresultado,
                               p_mensajeresultado,
                               p_numeroreferencia,
                               v_comision_ventanilla,
                               p_usuario_depositante,
                               v_cartcard,
                               'Comision por Pago',
                               p_ip,
                               SYSDATE,
                               p_tipocambiousd
                              );
               END IF;

               IF v_bloqueo = 4
               THEN
                  p_codigoresultado := '016';
                  p_mensajeresultado :=
                     'Tarjeta pagada, activación en proceso. Intente más tarde.';
               END IF;
            END IF;
         END IF;
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END Fondeareferenciav2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          FONDEARENOVACIONREFERENCIA (
   p_mensajeoperacion      IN       VARCHAR2,
   p_ip                    IN       VARCHAR2,
   p_numerooperador        IN       VARCHAR2,
   p_numerosucursal        IN       VARCHAR2,
   p_usuario_depositante   IN       VARCHAR2,
   p_numeroreferencia      IN       VARCHAR2,
   p_fechaoperacion        IN       VARCHAR2,
   p_montoafondear         IN       FLOAT,
   p_montofondeado         OUT      FLOAT,
   p_costomembresia        OUT      FLOAT,
   p_codigoresultado       OUT      VARCHAR2,
   p_mensajeresultado      OUT      VARCHAR2,
   p_operacionid           OUT      INTEGER,
   p_tipocambiousd         IN       FLOAT
)
AS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: fondearenovacionreferencia                                            */
/* Objetivo: Ingresa un registro de pago de renovación.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec fondearenovacionreferencia(<<MensajeOperacion>>...<<TipoCambioUsd>))         */
/* ----------------------------------------------------------------------------------- */
   v_duracion           INTEGER;
   v_consecutivo        INTEGER := 0;
   v_cartcard           INTEGER := 0;
   v_diasanticipacion   INTEGER;
BEGIN
   BEGIN
      p_montofondeado := p_montoafondear;

      SELECT cartcardid, costo, duracion
        INTO v_cartcard, p_costomembresia, v_duracion
        FROM CARTCARD.card, CARTCARD.membrecia
       WHERE referencia = p_numeroreferencia
         AND CARTCARD.membrecia.membreciaid = CARTCARD.card.membreciaid;

      SELECT NVL (MAX (nconsecutivo), 0) + 1
        INTO v_consecutivo
        FROM CARTCARD.operacionventanilla
       WHERE cartcardid = v_cartcard;

      IF p_costomembresia > p_montoafondear
      THEN
         p_codigoresultado := '008';
         p_mensajeresultado :=
                  'El monto debe ser igual o mayor al monto minimo requerido';

         SELECT operacionventanillaseq.NEXTVAL
           INTO p_operacionid
           FROM DUAL;

         INSERT INTO CARTCARD.operacionventanilla
                     (operacionid, nconsecutivo, cartcardid,
                      sucursalid, operadorid,
                      fechaoperacion,
                      codigoresultado, mensajeresultado,
                      referencia, mensajeoperacion, ip, fechasys
                     )
              VALUES (p_operacionid, v_consecutivo, v_cartcard,
                      p_numerosucursal, p_numerooperador,
                      TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                      p_codigoresultado, p_mensajeresultado,
                      p_numeroreferencia, p_mensajeoperacion, p_ip, SYSDATE
                     );
      ELSE
         p_codigoresultado := '000';
         p_mensajeresultado := 'Exito en la operación';

         SELECT operacionventanillaseq.NEXTVAL
           INTO p_operacionid
           FROM DUAL;

         INSERT INTO CARTCARD.operacionventanilla
                     (operacionid, nconsecutivo, sucursalid,
                      operadorid,
                      fechaoperacion,
                      codigoresultado, mensajeresultado,
                      referencia, cantidaddepositada,
                      usuariodepositante, cartcardid, mensajeoperacion,
                      ip, fechasys, tipocambiousd
                     )
              VALUES (p_operacionid, v_consecutivo, p_numerosucursal,
                      p_numerooperador,
                      TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                      p_codigoresultado, p_mensajeresultado,
                      p_numeroreferencia, p_costomembresia,
                      p_usuario_depositante, v_cartcard, 'Pago de Membresia',
                      p_ip, SYSDATE, p_tipocambiousd
                     );

         SELECT CASE
                   WHEN TO_DATE (fechavencimiento) - TO_DATE (fechaalta) < 0
                      THEN 0
                   ELSE TO_DATE (fechavencimiento) - TO_DATE (fechaalta)
                END
           INTO v_diasanticipacion
           FROM CARTCARD.card
          WHERE cartcardid = v_cartcard;

         UPDATE CARTCARD.card
            SET bloqueo = '1',
                fechaalta = SYSDATE,
                fechavencimiento =
                   ADD_MONTHS
                      (CASE
                          WHEN TO_DATE (fechavencimiento) > TO_DATE (SYSDATE)
                             THEN   fechavencimiento
                                  + (  v_diasanticipacion
                                     - (  TO_DATE (fechavencimiento)
                                        - TO_DATE (SYSDATE)
                                       )
                                    )
                          ELSE SYSDATE + v_diasanticipacion
                       END,
                       v_duracion
                      )
          WHERE cartcardid = v_cartcard;

         p_montofondeado := p_montoafondear - p_costomembresia;
         v_consecutivo := v_consecutivo + 1;

         IF p_montofondeado > 0
         THEN
            SELECT operacionventanillaseq.NEXTVAL
              INTO p_operacionid
              FROM DUAL;

            INSERT INTO CARTCARD.operacionventanilla
                        (operacionid, nconsecutivo, sucursalid,
                         operadorid,
                         fechaoperacion,
                         codigoresultado, mensajeresultado,
                         referencia, cantidaddepositada,
                         usuariodepositante, cartcardid,
                         mensajeoperacion, ip, fechasys, tipocambiousd
                        )
                 VALUES (p_operacionid, v_consecutivo, p_numerosucursal,
                         p_numerooperador,
                         TO_DATE (p_fechaoperacion, 'ddMMYYYY-HH24:MI:ss'),
                         p_codigoresultado, p_mensajeresultado,
                         p_numeroreferencia, p_montofondeado,
                         p_usuario_depositante, v_cartcard,
                         p_mensajeoperacion, p_ip, SYSDATE, p_tipocambiousd
                        );
         END IF;
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END fondearenovacionreferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          FONDEOPERACIONTIENDA (
    P_NUMEROREFERENCIA       IN       CARTCARD.CARD.REFERENCIA%TYPE,
    P_MONTOAFONDEAR          IN       FLOAT,
    P_TIENDAID               IN       VARCHAR2,
    P_TIPOCAMBIOUSD          IN       FLOAT,
    P_MENSAJEOPERACION       IN       INTEGER,
    P_COMISIONUSD            IN       FLOAT,
    P_OPERACIONID            OUT      INTEGER,
    P_MONTOFONDEADO          OUT      FLOAT,
    P_COSTOMEMBRESIA         OUT      FLOAT,
    P_CODIGORESULTADO        OUT      VARCHAR2,
    P_MENSAJERESULTADO       OUT      VARCHAR2
)
AS
/* -------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: FONDEOPERACIONTIENDA                                                         */
/* OBJETIVO: INGRESA UN REGISTRO DE PAGO DE MEMBRECIA, FONDEO.                                        */
/* AUTOR: EQUIPO IUPICARD                                                                             */
/* FECHA CREACION: JUL/2010                                                                           */
/* FECHA MODIFICACION:                                                                                */
/* EJEMPLO EJECUCION: EXEC FONDEOPERACIONTIENDA(<<P_NUMEROREFERENCIA>>...<<:P_MENSAJERESULTADO>))     */
/* -------------------------------------------------------------------------------------------------- */
    V_DURACION              INTEGER;
    V_NOMBRETITULAR         VARCHAR2(50);
    V_CONSECUTIVO           INTEGER := 0;
    V_MENSAJEOPERACION      INTEGER := 0;
    V_ESTADODECUENTA        INTEGER := 0;
    V_CARTCARD              INTEGER := 0;
    V_BLOQUEO               INTEGER := 0;
    V_SALIR                 BOOLEAN := FALSE;
    V_COMISION_VENTANILLA   FLOAT;
    V_CONSTANTE_COMISION    VARCHAR2(100);
BEGIN
   BEGIN
      P_MONTOFONDEADO := P_MONTOAFONDEAR;
      V_MENSAJEOPERACION := P_MENSAJEOPERACION;

      SELECT CARTCARD.CARD.CARTCARDID, CARTCARD.MEMBRECIA.COSTO,
             CARTCARD.USUARIO.ESTADODECUENTAID,
                CARTCARD.USUARIO.NOMBRE
             || ' '
             || CARTCARD.USUARIO.APATERNO
             || ' '
             || CARTCARD.USUARIO.AMATERNO AS NOMBRETITULAR,
             CARTCARD.CARD.BLOQUEO, CARTCARD.MEMBRECIA.DURACION
        INTO V_CARTCARD, P_COSTOMEMBRESIA,
             V_ESTADODECUENTA,
             V_NOMBRETITULAR,
             V_BLOQUEO, V_DURACION
        FROM CARTCARD.CARD, CARTCARD.USUARIO, CARTCARD.MEMBRECIA
       WHERE CARTCARD.CARD.REFERENCIA = P_NUMEROREFERENCIA
         AND CARTCARD.CARD.USUARIOID = CARTCARD.USUARIO.USUARIOID
         AND CARTCARD.MEMBRECIA.MEMBRECIAID = CARTCARD.CARD.MEMBRECIAID;

      SELECT NVL (MAX (NCONSECUTIVO), 0) + 1
        INTO V_CONSECUTIVO
        FROM CARTCARD.OPERACIONTIENDA
       WHERE CARTCARD.OPERACIONTIENDA.CARTCARDID = V_CARTCARD;
   EXCEPTION
      WHEN NO_DATA_FOUND  THEN
         P_CODIGORESULTADO := '001';
         P_MENSAJERESULTADO := 'REFERENCIA INVÁLIDA';
         V_MENSAJEOPERACION := 4;

         SELECT CARTCARD.OPERACIONTIENDASEQ.NEXTVAL
           INTO P_OPERACIONID
           FROM DUAL;

         CARTCARD.INSERTAOPERTIENDA(P_OPERACIONID,
                V_CONSECUTIVO,
                P_NUMEROREFERENCIA,
                P_MONTOAFONDEAR,
                P_TIENDAID,
                P_CODIGORESULTADO,
                P_MENSAJERESULTADO,
                SYSDATE,
                V_CARTCARD,
                P_TIPOCAMBIOUSD,
                V_MENSAJEOPERACION,
                P_COMISIONUSD);

         V_SALIR := TRUE;
   END;

   BEGIN
      IF NOT V_SALIR THEN
         P_CODIGORESULTADO := '000';
         P_MENSAJERESULTADO := 'EXITO EN LA OPERACIÓN';

         IF V_BLOQUEO = 0 THEN
            SELECT CARTCARD.OPERACIONTIENDASEQ.NEXTVAL
              INTO P_OPERACIONID
              FROM DUAL;

            CARTCARD.INSERTAOPERTIENDA(
                P_OPERACIONID,
                V_CONSECUTIVO,
                P_NUMEROREFERENCIA,
                P_MONTOAFONDEAR,
                P_TIENDAID,
                P_CODIGORESULTADO,
                P_MENSAJERESULTADO,
                SYSDATE,
                V_CARTCARD,
                P_TIPOCAMBIOUSD,
                V_MENSAJEOPERACION,
                P_COMISIONUSD);

            UPDATE CARTCARD.CARD
               SET CARTCARD.CARD.BLOQUEO = '1',
                   CARTCARD.CARD.FECHAALTA = SYSDATE,
                   CARTCARD.CARD.FECHAVENCIMIENTO = ADD_MONTHS
                            ( CASE WHEN TO_DATE(CARTCARD.CARD.FECHAVENCIMIENTO)
                                                               > TO_DATE (SYSDATE) THEN
                                   CARTCARD.CARD.FECHAVENCIMIENTO
                              ELSE SYSDATE
                              END, V_DURACION )
            WHERE CARTCARD.CARD.CARTCARDID = V_CARTCARD;

            -- CALCULO DEL MONTO A FONDEAR
            P_MONTOFONDEADO := P_MONTOAFONDEAR - P_COSTOMEMBRESIA;
            V_CONSECUTIVO := V_CONSECUTIVO + 1;

            IF P_MONTOFONDEADO > 0 THEN
               SELECT OPERACIONVENTANILLASEQ.NEXTVAL
                 INTO P_OPERACIONID
                 FROM DUAL;

               V_MENSAJEOPERACION := 2;

               CARTCARD.INSERTAOPERTIENDA(P_OPERACIONID,
                    V_CONSECUTIVO,
                    P_NUMEROREFERENCIA,
                    P_MONTOAFONDEAR,
                    P_TIENDAID,
                    P_CODIGORESULTADO,
                    P_MENSAJERESULTADO,
                    SYSDATE,
                    V_CARTCARD,
                    P_TIPOCAMBIOUSD,
                    V_MENSAJEOPERACION,
                    P_COMISIONUSD);
            END IF;
         END IF;
         IF V_BLOQUEO = 1 THEN
            SELECT CARTCARD.OPERACIONTIENDASEQ.NEXTVAL
              INTO P_OPERACIONID
              FROM DUAL;

            CARTCARD.INSERTAOPERTIENDA(
                P_OPERACIONID,
                V_CONSECUTIVO,
                P_NUMEROREFERENCIA,
                P_MONTOAFONDEAR,
                P_TIENDAID,
                P_CODIGORESULTADO,
                P_MENSAJERESULTADO,
                SYSDATE,
                V_CARTCARD,
                P_TIPOCAMBIOUSD,
                V_MENSAJEOPERACION,
                P_COMISIONUSD);
         END IF;
      END IF;
   END;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_CODIGORESULTADO := '001';
      P_MENSAJERESULTADO := 'FALLO AL PROCESAR LA PETICION';
      ROLLBACK;
END FONDEOPERACIONTIENDA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icnaddtarjetaexpirada (
   p_usuarioid    IN       NUMBER,
   p_referencia   OUT      VARCHAR2
)
IS
/* --------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: addtarjetaexpirada                                                             */
/* Objetivo: Agrega una membresia expirada.                                                                       */
/* Autor:    Equipo CartCard (Siscon)                                                                                      */
/* Fecha Creacion: Marzo / 2011                                                                                               */
/* Fecha Modificacion:                                                                                                             */
/* Ejemplo Ejecucion: exec AddTarjetaExpirada(<<usuarioid>>,<<:cartcardid>>)        */
/* --------------------------------------------------------------------------------------------------------------- */
   v_referencia            VARCHAR2(11);
   v_cardnumber            VARCHAR2(70);
   v_cardname              VARCHAR2(100);
   v_status                NUMBER;
   v_fecha_creacion        DATE;
   v_ultima_modificacion   DATE;
   v_expiration_date       DATE;
   v_embossedname VARCHAR2(100);
BEGIN
   SELECT t.referencia, t.cardnumber, t.pembossedname, t.ID_STATUS_TARJETA,
          t.fecha_creacion, t.ultima_modificacion, t.expirationdate
     INTO v_referencia, v_cardnumber, v_embossedname, v_status,
          v_fecha_creacion, v_ultima_modificacion, v_expiration_date
     FROM icn_tarjeta t INNER JOIN icn_contrato co
          ON co.referencia = t.referencia
          INNER JOIN icn_clientes cl ON co.id_usuario = cl.id_usuario
    WHERE cl.id_usuario = p_usuarioid;

   SELECT NVL (referencia, '0') referencia
     INTO p_referencia
     FROM cartcard.icn_tarjeta_complemento com inner join cartcard.icn_tarjeta ta on ta.referencia = com.referencia
     inner join cartcard.icn_contrato co on co.referencia = com.referencia 
     inner join cartcard.icn_clientes cl on cl.id_usuario = co.ID_USUARIO
     WHERE co.id_usuario = p_usuarioid;

   INSERT INTO cartcard.icn_tarjeta_complemento
               (referencia, cardnumber, cardname, nombre_remesa, id_estatus,
                comentario, fecha_creacion, usuario_modifico,
                ultima_modificacion, fecha_vigencia, fecha_bloqueo
               )
        VALUES (v_referencia, v_cardnumber,v_embossedname, null, v_status,
                'TARJETAS BLOQUEADAS', v_fecha_creacion, 'IUPICARD',
                v_ultima_modificacion, v_expiration_date, SYSDATE
               );

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
      p_referencia := '0';
END icnaddtarjetaexpirada;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icnaddtarjetaexpirada2 (
     p_referencia   IN      cartcard.icn_tarjeta_complemento.referencia%type,
     p_usuarioid    IN      cartcard.icn_contrato.id_usuario%type,
     p_estatus IN cartcard.icn_tarjeta_complemento.id_estatus%type,
     p_resultado    OUT number

)
IS
   v_referencia            cartcard.icn_contrato.referencia%type;
   v_cardnumber            cartcard.icn_tarjeta.cardnumber%type;
   v_fecha_creacion        cartcard.icn_tarjeta.fecha_creacion%type;
   v_ultima_modificacion   cartcard.icn_tarjeta.ultima_modificacion%type;
   v_expiration_date       cartcard.icn_tarjeta.expirationdate%type;
   v_embossedname  cartcard.icn_tarjeta.pembossedname%type;
   v_existe number;
BEGIN

SELECT t.referencia, t.cardnumber, t.pembossedname, t.fecha_creacion, t.ultima_modificacion, t.expirationdate
     INTO v_referencia, v_cardnumber, v_embossedname, v_fecha_creacion, v_ultima_modificacion, v_expiration_date
     FROM icn_tarjeta t INNER JOIN icn_contrato co  ON co.referencia = t.referencia
          INNER JOIN icn_clientes cl ON co.id_usuario = cl.id_usuario
    WHERE cl.id_usuario = p_usuarioid;

   SELECT count(tc.referencia)
     INTO v_existe
     FROM cartcard.icn_tarjeta_complemento tc
    WHERE tc.referencia = p_referencia;

   IF v_existe = 0 then
   INSERT INTO cartcard.icn_tarjeta_complemento
               (referencia, cardnumber, cardname, nombre_remesa, id_estatus,
                comentario, fecha_creacion, usuario_modifico,
                ultima_modificacion, fecha_vigencia, fecha_bloqueo
               )
        VALUES (v_referencia, v_cardnumber,v_embossedname, null, p_estatus,
                'TARJETAS BLOQUEADAS', v_fecha_creacion, 'IUPICARD',
                v_ultima_modificacion, v_expiration_date, SYSDATE
               );
      p_resultado := 2;
  else
    update cartcard.icn_tarjeta_complemento
    set fecha_vigencia = v_expiration_date,
        fecha_bloqueo = SYSDATE,
        ultima_modificacion = SYSDATE,
        id_estatus = p_estatus
        
    where cartcard.icn_tarjeta_complemento.referencia = p_referencia;
   p_resultado := 1;
 END IF;
 COMMIT;
 
EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      p_resultado := 0;
      RAISE_APPLICATION_ERROR (-20100, 'Error '||SQLCODE||' '||substr(SQLERRM, 1, 200));
END icnaddtarjetaexpirada2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          ICNCAMBIOESTATUSUSUARIO (
   p_id_usuario         IN   CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
   p_referencia         IN   VARCHAR,
   p_estatus_tarjeta    IN   CARTCARD.ICN_TARJETA.ID_STATUS_TARJETA%TYPE,
   p_estatus_bloqueo    IN   CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%TYPE,
   p_estatus_usuario    IN   CARTCARD.ICN_CLIENTES.ESTATUS%TYPE
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: RESTABLECECARD                                   */
/* Objetivo: Restablece la card a su estatus anterior.                       */
/* Autor:    Equipo CartCard (IUPICARD)                                     */
/* Fecha Creacion: Abr/2011                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec RESTABLECECARD(<<CartCardI>>,<<FechaAlta>>,<<FechaVEncimiento>>)   */
/* ---------------------------------------------------------------------- */
BEGIN
     BEGIN
       UPDATE CARTCARD.ICN_TARJETA 
          SET  ICN_TARJETA.ID_STATUS_TARJETA=p_estatus_tarjeta,
		  ICN_TARJETA.ESTATUS_BLOQUEO =p_estatus_bloqueo
        WHERE ICN_TARJETA.REFERENCIA =  p_referencia;
    
        UPDATE CARTCARD.ICN_CLIENTES 
          SET  ICN_CLIENTES.ESTATUS=p_estatus_usuario
        WHERE ICN_CLIENTES.ID_USUARIO =  p_id_usuario;
     END;
    
        COMMIT;
    EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END ICNCAMBIOESTATUSUSUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ICNRESTABLECECARD (
   p_referencia         IN   VARCHAR,
   p_fechavencimiento   IN   VARCHAR
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: RESTABLECECARD                                   */
/* Objetivo: Restablece la card a su estatus anterior.                       */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Mar/2011                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec RESTABLECECARD(<<CartCardI>>,<<FechaAlta>>,<<FechaVEncimiento>>)   */
/* ---------------------------------------------------------------------- */
BEGIN
   UPDATE CARTCARD.ICN_TARJETA
      SET  ICN_TARJETA.FECHA_MEMBRECIA  =
                           TO_DATE (p_fechavencimiento, 'DDmmYYYY-HH24:MI:SS')
    WHERE ICN_TARJETA.REFERENCIA =  p_referencia;
    COMMIT;
END ICNRESTABLECECARD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icnrestablecestatuscardusuario (
   p_referencia        IN   cartcard.icn_tarjeta.referencia%TYPE,
   p_id_usuario        IN   cartcard.icn_clientes.id_usuario%TYPE,
   p_estatus_tarjeta   IN   cartcard.icn_tarjeta.id_status_tarjeta%TYPE,
   p_estatus_usuario   IN   cartcard.icn_clientes.estatus%TYPE
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: RESTABLECECARD                                   */
/* Objetivo: Restablece la card a su estatus anterior.                       */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Mar/2011                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec RESTABLECECARD(<<CartCardI>>,<<FechaAlta>>,<<FechaVEncimiento>>)   */
/* ---------------------------------------------------------------------- */
BEGIN
   BEGIN
      UPDATE cartcard.icn_tarjeta
         SET icn_tarjeta.id_status_tarjeta = p_estatus_tarjeta
       WHERE icn_tarjeta.referencia = p_referencia;

      UPDATE cartcard.icn_clientes
         SET icn_clientes.estatus = p_estatus_usuario
       WHERE icn_clientes.id_usuario = p_id_usuario;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END icnrestablecestatuscardusuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icn_agregausuario (
   p_nombre                IN       cartcard.icn_clientes.nombre%TYPE,
   p_apaterno              IN       cartcard.icn_clientes.apaterno%TYPE,
   p_amaterno              IN       cartcard.icn_clientes.amaterno%TYPE,
   p_calle                 IN       cartcard.icn_clientes.calle%TYPE,
   p_colonia               IN       cartcard.icn_clientes.colonia%TYPE,
   p_municipioid           IN       cartcard.icn_clientes.id_municipio%TYPE,
   p_ciudad                IN       cartcard.icn_clientes.ciudad%TYPE,
   p_codigopostal          IN       cartcard.icn_clientes.cp%TYPE,
   p_telefono              IN       cartcard.icn_clientes.telefono%TYPE,
   p_celular               IN       cartcard.icn_clientes.celular%TYPE,
   p_mail                  IN       cartcard.icn_clientes.correo_electronico%TYPE,
   p_paisid                IN       cartcard.icn_clientes.id_pais%TYPE,
   p_estadoid              IN       cartcard.icn_clientes.id_estado%TYPE,
   p_nombreusuario         IN       cartcard.icn_clientes.nombre_usuario%TYPE,
   ppreguntaestandar1      IN       CARTCARD.preguntasusuario.PREGUNTAESTANDAR1ID%TYPE,
   ppreguntaestandar2      IN       CARTCARD.preguntasusuario.PREGUNTAESTANDAR2ID%TYPE,
   ppregunta1              IN       CARTCARD.preguntasusuario.PREGUNTA3%TYPE,
   ppregunta2              IN       CARTCARD.preguntasusuario.PREGUNTA4%TYPE,
   prespuestaestandar1     IN       CARTCARD.preguntasusuario.RESPUESTA1%TYPE,
   prespuestaestandar2     IN       CARTCARD.preguntasusuario.RESPUESTA2%TYPE,
   prespuesta1             IN       CARTCARD.preguntasusuario.RESPUESTA3%TYPE,
   prespuesta2             IN       CARTCARD.preguntasusuario.RESPUESTA4%TYPE,
   pidentificacion         IN       cartcard.icn_clientes.id_tipo_identificacion%TYPE,
   pnumeroidentificacion   IN       cartcard.icn_clientes.numero_identificacion%TYPE,
   pcontrasenia            IN       cartcard.icn_clientes.contrasenia%TYPE,
   p_fechanacimiento       IN       VARCHAR2,
   p_usuario_modifico      IN       cartcard.icn_clientes.USUARIO_MODIFICO%TYPE,
   p_numint                IN       cartcard.icn_clientes.num_int%TYPE,
   p_numext                IN       cartcard.icn_clientes.num_ext%TYPE,
   p_usuarioid             OUT      INTEGER,
   p_error                 out      INTEGER     ) IS;
    pereg cartcard.Icn_Clientes%rowtype;
 BEGIN
  pereg.nombre:=p_nombre;
  pereg.apaterno:=p_apaterno;
  pereg.amaterno:=p_amaterno;
  pereg.nombre_usuario:=p_nombreusuario;
  pereg.contrasenia:=pcontrasenia;
  pereg.correo_electronico:=p_mail;
  pereg.cp:=p_codigopostal;
  pereg.ciudad:=p_ciudad;
  pereg.colonia:= p_colonia;
  pereg.id_municipio:=p_municipioid;
  pereg.id_estado:=p_estadoid;
  pereg.id_pais:=p_paisid;
  pereg.calle:=p_calle;
  pereg.num_ext:=p_numext;
  pereg.num_int:=p_numint;
  pereg.telefono:= p_telefono;
  pereg.celular:=p_celular;
  pereg.fecha_nacimiento:=  TO_DATE (p_fechanacimiento, 'ddMMYYYY-HH24:MI:ss'); 
  pereg.id_tipo_identificacion:=pidentificacion;
  pereg.numero_identificacion:=pnumeroidentificacion;
  pereg.estatus := 0;
  pereg.usuario_modifico:=p_usuario_modifico;
  CARTCARD.pkg_icn_servicio.ADD_Cliente(pereg ,p_usuarioid);

     INSERT INTO CARTCARD.preguntasusuario
                  (usuarioid, preguntaestandar1id, respuesta1,
                   preguntaestandar2id, respuesta2, pregunta3,
                   respuesta3, pregunta4, respuesta4
                  )
           VALUES (p_usuarioid, ppreguntaestandar1, prespuestaestandar1,
                   ppreguntaestandar2, prespuestaestandar2, ppregunta1,
                   prespuesta1, ppregunta2, prespuesta2
                  );
   p_error:= 1;
   COMMIT;
EXCEPTION
   WHEN OTHERS   THEN
      ROLLBACK;
      raise_application_error
                       (-20100,
                           'Error ocurrido al agregar la PKG_ICN_DATOS.AGREGAUSUARIO  ('
                        || SQLCODE
                        || '  '
                        || SQLERRM
                        || ')'
                       );
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icn_consultabloqueoreferencia (
   preferencia   IN       CARTCARD.icn_tarjeta.referencia%type,
   pbloqueo      OUT      INTEGER
);
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: CONSULTABLOQUEOREFERENCIA                                     */
/* Objetivo: Retorna el estatus de la membrecia de la referencia solicitada.         */
/* Autor:    Equipo CartCard (Siscon)                                                   */
/* Fecha Creacion: Abr/2011                                                             */
/* Fecha Modificacion:                                                                  */
/* Ejemplo Ejecucion: exec CONSULTABLOQUEOREFERENCIA(<<preferencia>>,<<:pbloqueo>>)  */
/* --------------------------------------------------------------------------------- */
BEGIN
   SELECT id_status_tarjeta AS bloqueo
     INTO pbloqueo
     FROM cartcard.icn_tarjeta
    WHERE referencia = preferencia;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      pbloqueo := -1;
END icn_consultabloqueoreferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ICN_C_FUNCION (pIdfuncion   IN    cartcard.icn_funcion.idfuncion%TYPE,
                               pIdGpoPfil   IN    cartcard.icn_funcion.idgpopfil%TYPE,
                               pIdPadre   IN    cartcard.icn_funcion.idpadre%TYPE,
                               pPosicion   IN    cartcard.icn_funcion.posicion%TYPE,
                               pIcono  IN    cartcard.icn_funcion.icono%TYPE,
                               pUrl   IN    cartcard.icn_funcion.url%TYPE,
                               pStatus IN cartcard.icn_funcion.status%TYPE,
                               pDescripcion   IN    cartcard.icn_funcion.descripcion%TYPE,
                               pUsuario_modifico IN  cartcard.icn_funcion.usuario_modifico%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT NUMBER,
                               resultadotex out VARCHAR2) IS
     
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_funcion f
  where f.idfuncion = pIdfuncion;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_funcion 
         (idfuncion,descripcion,idgpopfil,idpadre,posicion,icono,url,status,usuario_modifico,ultima_modificacion)
         VALUES ((select (nvl(max(idfuncion), 0)) + 1 from cartcard.icn_funcion),pDescripcion, pIdGpoPfil, pIdPadre, pPosicion,pIcono,pUrl,pStatus,pUsuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en Funcion';
    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_funcion f
             SET  f.descripcion = nvl(pDescripcion, f.descripcion),
       f.idgpopfil = nvl(pIdGpoPfil,f.idgpopfil),
       f.idpadre = nvl(pIdPadre,f.idpadre),
       f.posicion = nvl(pPosicion,f.posicion),
       f.icono = nvl(pIcono,f.icono),
       f.url = nvl(pUrl,f.url),
       f.status = nvl(pStatus,f.status),
       f.ultima_modificacion = SYSDATE,
       f.usuario_modifico =  pUsuario_modifico
       where f.idfuncion = pIdfuncion;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en Funcion';

    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_funcion f
        where f.idfuncion = pIdfuncion;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en Funcion';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CARTCARD.ICN_GPO_PERFIL(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ICN_C_USR_ROL(pIdusuario        IN cartcard.icn_usr_rol.idusuario%TYPE,
                                          pIdfuncion        IN cartcard.icn_usr_rol.idfuncion%TYPE,
                                          pIdfuncionNew     IN cartcard.icn_usr_rol.idfuncion%TYPE,
                                          pIdpermiso        IN cartcard.icn_usr_rol.idpermiso%TYPE,
                                          pIdpermisoNew     IN cartcard.icn_usr_rol.idpermiso%TYPE,
                                          pStatus           IN cartcard.icn_usr_rol.status%TYPE,
                                          pUsuario_modifico IN cartcard.icn_usr_rol.usuario_modifico%TYPE,
                                          p_accion          IN NUMBER,
                                          resultado         OUT NUMBER,
                                          resultadotex      out VARCHAR2) IS
  v_existe number;
BEGIN
  select count(1)
    into v_existe
    from cartcard.icn_usr_rol r
   where r.idusuario = pIdusuario
     and r.idfuncion = pIdfuncion
     and r.idpermiso = pIdpermiso;

  IF p_accion = 1 and v_existe = 0 THEN
    INSERT INTO cartcard.icn_usr_rol
      (idusuario,
       idfuncion,
       idpermiso,
       status,
       usuario_modifico,
       ultima_modificacion)
    VALUES
      ((select (nvl(max(idusuario), 0)) + 1 from cartcard.icn_usr_rol),
       pIdfuncion,
       pIdpermiso,
       pStatus,
       pUsuario_modifico,
       SYSDATE);
    resultado    := 1;
    resultadotex := 'Exito en la Operacion se Inserto el elemento en Usuario Roles';
  ELSIF p_accion = 2 and v_existe != 0 THEN
    UPDATE cartcard.icn_usr_rol r
       SET r.idfuncion           = nvl(pIdfuncionNew, r.idfuncion),
           r.idpermiso           = nvl(pIdpermisoNew, r.idpermiso),
           r.status              = nvl(pStatus, r.status),
           r.ultima_modificacion = SYSDATE,
           r.usuario_modifico    = pUsuario_modifico
     where r.idusuario = pIdusuario
       and r.idfuncion = pIdfuncion
       and r.idpermiso = pIdpermiso;
    resultado    := 2;
    resultadotex := 'Exito en la operacion se Actualizo el elemento en Usuario Roles';
  
  ELSIF p_accion = 3 and v_existe != 0 THEN
    delete from cartcard.icn_usr_rol r
     where r.idusuario = pIdusuario
       and r.idfuncion = pIdfuncion
       and r.idpermiso = pIdpermiso;
    resultado    := 3;
    resultadotex := 'Exito en la operacion se Elimino el elemento en Usuario Roles';
  ELSE
    resultado    := 4;
    resultadotex := 'No se Realizo ninguna accion';
  
  END IF;

  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    resultado    := 0;
    resultadotex := SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    raise_application_error(-20120, 'Error ocurrido en PKG_ICN_CATALOGOS.CARTCARD.ICN_USR_ROL(' ||SQLCODE || '' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icn_estado (
   pestados   OUT      sys_refcursor,
   ppais      IN       INTEGER
);
AS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: estados                      */
/* Objetivo: Obtiene los estados del catalogo.      */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2008                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: exec estados(<<:cursor>>)       */
/* ------------------------------------------------------ */
BEGIN
   OPEN pestados FOR
      SELECT   e.id_estado as estadoid, e.nombre_estado as nombreestado, e.id_pais as paisid
          FROM ic_pais p INNER JOIN ic_estado e ON p.id_pais = e.id_pais
         WHERE e.id_pais = ppais
      ORDER BY nombreestado;
END icn_estado;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ICN_GPO_PERFIL (pIdGpoPfil   IN    cartcard.icn_gpoperfil.idgpopfil%TYPE,
                               pIdAplicacion   IN    cartcard.icn_gpoperfil.idaplicacion%TYPE,
                               pIdGrupo   IN    cartcard.icn_gpoperfil.idgrupo%TYPE,
                               pIdperfil   IN    cartcard.icn_gpoperfil.idperfil%TYPE,
                               p_status IN cartcard.icn_gpoperfil.status%TYPE,
                               p_usuario_modifico IN  cartcard.icn_gpoperfil.USUARIO_MODIFICO%TYPE,
                               p_accion IN NUMBER,
                               resultado OUT NUMBER,
                               resultadotex out VARCHAR2) IS
     /*select idgpopfil,idaplicacion,idgrupo,idperfil,status,ultima_modificacion,usuario_modifico
  from cartcard.icn_grupo_perfil gf;*/
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from cartcard.icn_gpoperfil gf
  where gf.idgpopfil = pIdGpoPfil;

    IF p_accion = 1 and v_existe = 0 THEN
         INSERT INTO cartcard.icn_gpoperfil 
        (idgpopfil,idaplicacion,idgrupo,idperfil,status,usuario_modifico,ultima_modificacion)
         VALUES ((select (nvl(max(idgpopfil), 0)) + 1 from cartcard.icn_gpoperfil), pIdAplicacion, pIdGrupo, pIdperfil,p_status,p_usuario_modifico, SYSDATE);
         resultado := 1;
         resultadotex:='Exito en la Operacion se Inserto el elemento en Grupo Perfil';

    ELSIF p_accion = 2 and v_existe != 0  THEN
          UPDATE cartcard.icn_gpoperfil gf
             SET gf.idaplicacion         = nvl(pIdAplicacion, gf.idaplicacion),
                 gf.idgrupo             = nvl(pIdGrupo, gf.idgrupo),
                 gf.idperfil         = nvl(pIdperfil, gf.idperfil),
                 gf.status              = nvl(p_status, gf.status),
                 gf.ultima_modificacion = SYSDATE,
                 gf.usuario_modifico    = p_usuario_modifico
           WHERE gf.idgpopfil = pIdGpoPfil;
         resultado := 2;
         resultadotex := 'Exito en la operacion se Actualizo el elemento en Grupo Perfil';

    ELSIF  p_accion = 3 and v_existe != 0  THEN
        delete from cartcard.icn_gpoperfil gf
        where  gf.idgpopfil = pIdGpoPfil;
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento en Grupo Perfil';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.CARTCARD.ICN_GPO_PERFIL(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icn_ingresanuevo (
   p_nombre                IN       cartcard.icn_clientes.nombre%TYPE,
   p_apaterno              IN       cartcard.icn_clientes.apaterno%TYPE,
   p_amaterno              IN       cartcard.icn_clientes.amaterno%TYPE,
   p_calle                 IN       cartcard.icn_clientes.calle%TYPE,
   p_colonia               IN       cartcard.icn_clientes.colonia%TYPE,
   p_municipioid           IN       cartcard.icn_clientes.id_municipio%TYPE,
   p_ciudad                IN       cartcard.icn_clientes.ciudad%TYPE,
   p_codigopostal          IN       cartcard.icn_clientes.cp%TYPE,
   p_telefono              IN       cartcard.icn_clientes.telefono%TYPE,
   p_celular               IN       cartcard.icn_clientes.celular%TYPE,
   p_mail                  IN       cartcard.icn_clientes.correo_electronico%TYPE,
   p_paisid                IN       cartcard.icn_clientes.id_pais%TYPE,
   p_estadoid              IN       cartcard.icn_clientes.id_estado%TYPE,
   p_nombreusuario         IN       cartcard.icn_clientes.nombre_usuario%TYPE,
   ppreguntaestandar1      IN       CARTCARD.preguntasusuario.PREGUNTAESTANDAR1ID%TYPE,
   ppreguntaestandar2      IN       CARTCARD.preguntasusuario.PREGUNTAESTANDAR2ID%TYPE,
   ppregunta1              IN       CARTCARD.preguntasusuario.PREGUNTA3%TYPE,
   ppregunta2              IN       CARTCARD.preguntasusuario.PREGUNTA4%TYPE,
   prespuestaestandar1     IN       CARTCARD.preguntasusuario.RESPUESTA1%TYPE,
   prespuestaestandar2     IN       CARTCARD.preguntasusuario.RESPUESTA2%TYPE,
   prespuesta1             IN       CARTCARD.preguntasusuario.RESPUESTA3%TYPE,
   prespuesta2             IN       CARTCARD.preguntasusuario.RESPUESTA4%TYPE,
   pidentificacion         IN       cartcard.icn_clientes.id_tipo_identificacion%TYPE,
   pnumeroidentificacion   IN       cartcard.icn_clientes.numero_identificacion%TYPE,
   pcontrasenia            IN       cartcard.icn_clientes.contrasenia%TYPE,
   p_fechanacimiento       IN       VARCHAR2,
   p_usuario_modifico      IN       cartcard.icn_clientes.USUARIO_MODIFICO%TYPE,
   p_numint                IN       cartcard.icn_clientes.num_int%TYPE,
   p_numext                IN       cartcard.icn_clientes.num_ext%TYPE,
   p_tipo_cliente IN cartcard.icn_clientes.TIPO_CLIENTE%TYPE,
   p_usuarioid             OUT      INTEGER,
   p_error                 out      INTEGER     ); IS
    pereg cartcard.Icn_Clientes%rowtype;
 BEGIN
  pereg.nombre:=p_nombre;
  pereg.apaterno:=p_apaterno;
  pereg.amaterno:=p_amaterno;
  pereg.nombre_usuario:=p_nombreusuario;
  pereg.contrasenia:=pcontrasenia;
  pereg.correo_electronico:=p_mail;
  pereg.cp:=p_codigopostal;
  pereg.ciudad:=p_ciudad;
  pereg.colonia:= p_colonia;
  pereg.id_municipio:=p_municipioid;
  pereg.id_estado:=p_estadoid;
  pereg.id_pais:=p_paisid;
  pereg.calle:=p_calle;
  pereg.num_ext:=p_numext;
  pereg.num_int:=p_numint;
  pereg.telefono:= p_telefono;
  pereg.celular:=p_celular;
  pereg.fecha_nacimiento:=  TO_DATE (p_fechanacimiento, 'ddMMYYYY-HH24:MI:ss'); 
  pereg.id_tipo_identificacion:=pidentificacion;
  pereg.numero_identificacion:=pnumeroidentificacion;
  pereg.tipo_cliente:=p_tipo_cliente;
  pereg.estatus := 0;
  pereg.usuario_modifico:=p_usuario_modifico;
  CARTCARD.pkg_icn_servicio.ADD_Cliente(pereg ,p_usuarioid);

     INSERT INTO CARTCARD.preguntasusuario
                  (usuarioid, preguntaestandar1id, respuesta1,
                   preguntaestandar2id, respuesta2, pregunta3,
                   respuesta3, pregunta4, respuesta4
                  )
           VALUES (p_usuarioid, ppreguntaestandar1, prespuestaestandar1,
                   ppreguntaestandar2, prespuestaestandar2, ppregunta1,
                   prespuesta1, ppregunta2, prespuesta2
                  );
   p_error:= 1;
   COMMIT;
EXCEPTION
   WHEN OTHERS   THEN
      ROLLBACK;
      raise_application_error
                       (-20100,
                           'Error ocurrido al agregar la PKG_ICN_DATOS.AGREGAUSUARIO  ('
                        || SQLCODE
                        || '  '
                        || SQLERRM
                        || ')'
                       );
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icn_membresia_ (
   p_id_tipo_membresia   IN   cartcard.ic_cat_tipo_membresia.id_tipo_membresia%TYPE,
   p_costo               IN   cartcard.ic_cat_tipo_membresia.costo%TYPE,
   p_descripcion         IN   cartcard.ic_cat_tipo_membresia.descripcion%TYPE,
   p_usuario_modifico    IN   cartcard.ic_cat_tipo_membresia.usuario_modifico%TYPE,
   p_duracion            IN   cartcard.ic_cat_tipo_membresia.duracion%TYPE
);
IS
   v_existe   NUMBER;
BEGIN
   SELECT COUNT (tm.id_tipo_membresia) duracion
     INTO v_existe
     FROM cartcard.ic_cat_tipo_membresia tm
    WHERE tm.id_tipo_membresia = p_id_tipo_membresia;

   IF v_existe = 0
   THEN
      INSERT INTO cartcard.ic_cat_tipo_membresia
          SELECT MEMBRECIAID  AS ID_TIPO_MEMBRESIA, 
		  		 DESCRIPCION, 
				 COSTO,
				 NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
				 NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION",
                 DURACION
   		  FROM CARTCARD.MEMBRECIA;
      COMMIT;
   ELSE
      UPDATE cartcard.ic_cat_tipo_membresia tm
         SET tm.id_tipo_membresia = p_id_tipo_membresia,
             tm.duracion = p_duracion,
             tm.descripcion = p_descripcion,
             tm.costo = p_costo,
             tm.ultima_modificacion = SYSDATE,
             tm.usuario_modifico = p_usuario_modifico
       WHERE tm.id_tipo_membresia = p_id_tipo_membresia AND tm.costo = p_costo;

      COMMIT;
   END IF;


EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      raise_application_error (-20120,'Error ocurrido en PKG_ICN_DATOS.actualizamailusuario  (' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icn_municipio (
   pmunicipios   OUT      sys_refcursor,
   pestados      IN       INTEGER
);
AS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: municipios                                            */
/* Objetivo: Obtiene los municipios del catalogo.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Abr/2011                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec municipios(<<:cursor>>,<<Estados>>))         */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN pmunicipios FOR
      SELECT   m.id_municipio AS municipioid, m.id_estado AS estadoid,
               m.nombre_municipio AS nombremunicipio
          FROM ic_municipio m
         WHERE m.id_estado = pestados
      ORDER BY nombremunicipio;
END icn_municipio;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE icn_pais (
   p_cursor   OUT   sys_refcursor,
   mensaje    OUT   VARCHAR2
);
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: paises                                              */
/* Objetivo: Recupera los paises standar                                       */
/* Autor:    Equipo CartCard                                      */
/* Fecha Creacion: Abril/2011                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec paises(<<:Cursor>>, <<>:Mensaje>)               */
/* ---------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT   id_pais as paisid, nombre_pais as nombrepais, clave_tel as clavetelefonica
          FROM ic_pais
      ORDER BY nombrepais;

   mensaje := 'Mensaje de prueba';
END icn_pais;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ICN_REGISTRA_USUARIO(PELOGIN     IN CARTCARD.ICN_CLIENTES.NOMBRE_USUARIO%TYPE,
                               PECONTRASENIA  IN CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                               PENOMBRE       IN CARTCARD.ICN_CLIENTES.NOMBRE%TYPE,
                               PEAPATERNO     IN CARTCARD.ICN_CLIENTES.APATERNO%TYPE,
                               PEAMATERNO     IN CARTCARD.ICN_CLIENTES.AMATERNO%TYPE,
                               PENUMIDENTIF   IN CARTCARD.ICN_CLIENTES.NUMERO_IDENTIFICACION%TYPE,
                               PECALLE        IN CARTCARD.ICN_CLIENTES.CALLE%TYPE,
                               PECOLONIA      IN CARTCARD.ICN_CLIENTES.COLONIA%TYPE,
                               PECP           IN CARTCARD.ICN_CLIENTES.CP%TYPE,
                               PETELEFONO     IN CARTCARD.ICN_CLIENTES.TELEFONO%TYPE,
                               PECORREO       IN CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
                               PEUSUARIOMOD   IN CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE,                               
                               PSIDUSUARIO    OUT CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE) IS   
  CESTADOACTIVA    CONSTANT  CARTCARD.IC_CAT_STATUS_CUENTA.ID_STATUS_CUENTA%TYPE:='1';;
BEGIN
   SELECT CARTCARD.usuarioid_seq.NEXTVAL INTO PSIDUSUARIO FROM DUAL;
   
   insert into CARTCARD.ICN_CLIENTES (ID_USUARIO, 
                                     ESTATUS, 
                                     NOMBRE, 
                                     APATERNO, 
                                     AMATERNO, 
                                     NOMBRE_USUARIO, 
                                     CONTRASENIA, 
                                     FECHA_CREACION, 
                                     NUMERO_IDENTIFICACION,
                                     CALLE,
                                     COLONIA,
                                     CP,
                                     TELEFONO,
                                     CORREO_ELECTRONICO,                               
                                     USUARIO_MODIFICO)
                             values (PSIDUSUARIO,
                                     CESTADOACTIVA,
                                     PENOMBRE,
                                     PEAPATERNO,
                                     PEAMATERNO,
                                     PELOGIN, 
                                     PECONTRASENIA,
                                     SYSDATE,
                                     PENUMIDENTIF,
                                     PECALLE,
                                     PECOLONIA,
                                     PECP,
                                     PETELEFONO,
                                     PECORREO,
                                     PEUSUARIOMOD);
  COMMIT;
EXCEPTION
 WHEN OTHERS THEN
   ROLLBACK;
   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en ICN_REGISTRA_USUARIO (' || SQLCODE || '  ' || SQLERRM || ')');
END ICN_REGISTRA_USUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ICN_TARJETAC(
   p_usuarioid    IN       NUMBER,
   p_referencia   OUT      VARCHAR2
)
IS

   v_referencia            VARCHAR2(11);
   v_cardnumber            VARCHAR2(70);
   v_cardname              VARCHAR2(100);
   v_status                NUMBER;
   v_fecha_creacion        DATE;
   v_ultima_modificacion   DATE;
   v_expiration_date       DATE;
   v_embossedname VARCHAR2(100);
BEGIN

select count(tc.referencia)
into v_existe
from icn_tarjeta_complemento
where tc.referencia = preferencia;

if v_existe > 0 then

SELECT t.referencia, t.cardnumber, t.pembossedname, t.ID_STATUS_TARJETA,
          t.fecha_creacion, t.ultima_modificacion, t.Fecha_Membrecia
     INTO v_referencia, v_cardnumber, v_embossedname, v_status,
          v_fecha_creacion, v_ultima_modificacion, v_expiration_date
     FROM icn_tarjeta t INNER JOIN icn_contrato co ON co.referencia = t.referencia
    WHERE c.id_usuario = p_usuarioid;

 INSERT INTO cartcard.icn_tarjeta_complemento
               (referencia, cardnumber, cardname, nombre_remesa, id_estatus,
                comentario, fecha_creacion, usuario_modifico,
                ultima_modificacion, fecha_vigencia, fecha_bloqueo
               )
        VALUES (v_referencia, v_cardnumber,v_embossedname, null, v_status,
                'TARJETAS BLOQUEADAS', v_fecha_creacion, 'IUPICARD',
                v_ultima_modificacion, v_expiration_date, SYSDATE
               );
ELSE
   UPDATE ICN_TARJETA_COMPLEMENTO
   SET fecha_vigencia =  v_expiration_date,
       fecha_bloqueo = SYSDATE
   WHERE T.REFERENCIA = v_referencia;

  COMMIT;
   PScod_error:=1;
END IF; 
END ;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          icn_usuariocardestado (
   p_usuarioid     IN       INTEGER,
   p_descripcion   OUT      VARCHAR
)
IS
/* ------------------------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: usuariocardestado                                                */
/* Objetivo: Verifica el estado de cuenta de un usuario.             */
/* Autor:    Equipo CartCard (Siscon)                                                                 */
/* Fecha Creacion: Abr/2011                                                                           */
/* Fecha Modificacion:                                                                                */
/* Ejemplo Ejecucion: exec usuariocardestado(<<UsuarioId>>,<<:Descripcion>>) */
/* ------------------------------------------------------------------------------------------------ */
BEGIN
   SELECT descripcion
     INTO p_descripcion
     FROM icn_clientes cl INNER JOIN icn_contrato co
          ON cl.id_usuario = co.id_usuario
          INNER JOIN icn_tarjeta t ON t.referencia = co.referencia
          INNER JOIN ic_cat_status_cuenta sc
          ON sc.id_status_cuenta = t.id_status_tarjeta
    WHERE cl.id_usuario = p_usuarioid AND t.id_status_tarjeta IN (0, 1, 4);
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_descripcion := 'Sin estado';
END icn_usuariocardestado;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ACTUALIZACOSTOMERC (

	   p_numeroFolio    IN   CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
	   p_costo       	IN   CARTCARD.IC_MERCANCIA.COSTO%TYPE
	   
) IS
p_existe NUMBER;

BEGIN
   p_existe := 0;
   
   SELECT COUNT(MERC.ID_MERCANCIA) INTO p_existe FROM CARTCARD.IC_MERCANCIA MERC
   		  WHERE MERC.FOLIO=p_numeroFolio;
   
   IF p_existe!=0 THEN
   	  
	  UPDATE CARTCARD.IC_MERCANCIA MERC
	  		 SET MERC.COSTO = p_costo
			 WHERE MERC.FOLIO=p_numeroFolio;
			 
	 COMMIT;
	  
   END IF;
   
   
   EXCEPTION
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al Actualizar la IC_ACTUALIZAREFERENCIA  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_ACTUALIZACOSTOMERC;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          IC_ACTUALIZADATOSUSR (
   pusuarioid              IN   CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
   pnombre                 IN   CARTCARD.IC_USUARIO.NOMBRE%TYPE,
   papaterno               IN   CARTCARD.IC_USUARIO.APATERNO%TYPE,
   pamaterno               IN   CARTCARD.IC_USUARIO.AMATERNO%TYPE,
   pcalle                  IN   CARTCARD.IC_USUARIO.CALLE%TYPE,
   pcolonia                IN   CARTCARD.IC_USUARIO.COLONIA%TYPE,
   pmunicipioid            IN   CARTCARD.IC_USUARIO.ID_MUNICIPIO%TYPE,
   pciudad                 IN   CARTCARD.IC_USUARIO.CIUDAD%TYPE,
   pcodigopostal           IN   CARTCARD.IC_USUARIO.CP%TYPE,
   ptelefono               IN   CARTCARD.IC_USUARIO.TELEFONO%TYPE,
   --pfax                    IN   CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
   ppaisid                 IN   CARTCARD.IC_USUARIO.ID_PAIS%TYPE,
   pestadoid               IN   CARTCARD.IC_USUARIO.ID_ESTADO%TYPE,
   --pidentificacionid       IN   INTEGER,
   --pnumeroidentificacion   IN   VARCHAR,
   pcelular                IN   CARTCARD.IC_USUARIO.CELULAR%TYPE,
   pusuario_modifico	   IN	CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE
) IS

BEGIN
   
   UPDATE CARTCARD.IC_USUARIO A
   		  SET A.CALLE=pcalle,
		  	  A.COLONIA=pcolonia,
			  A.ID_MUNICIPIO=pmunicipioid,
			  A.CIUDAD=pciudad,
			  A.CP=pcodigopostal,
			  A.TELEFONO=ptelefono,
			  A.ID_PAIS=ppaisid,
			  A.ID_ESTADO=pestadoid,
			  A.CELULAR=pcelular,
			  A.USUARIO_MODIFICO=pusuario_modifico,
			  A.ULTIMA_MODIFICACION=SYSDATE
		  WHERE A.ID_USUARIO=pusuarioid;
   
   
   
   
--   PDATE CARTCARD.usuario
--         SET calle = pcalle,
--             colonia = pcolonia,
--             municipioid = pmunicipioid,
--             ciudad = pciudad,
--             codigopostal = pcodigopostal,
--             telefono = ptelefono,
--             fax = pfax,
--             paisid = ppaisid,
--             estadoid = pestadoid,
--             fechasys = SYSDATE,
--             descripcionmovimiento = 'Actualizacion de datos',
--             celular = pcelular
--       WHERE usuarioid = pusuarioid;
   
   		 commit;
		 
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   rollback;
    
END IC_ACTUALIZADATOSUSR;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Actualizamercanciaribesa (
   p_numerofolio         IN     CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
   p_descripcionpedido   IN     CARTCARD.IC_MERCANCIA.DESCRIPCION%TYPE,
   p_srcimagen           IN     CARTCARD.IC_MERCANCIA.SRCIMAGEN%TYPE,
   p_imagen              IN     CARTCARD.IC_MERCANCIA.IMAGEN%TYPE,
   p_estatus             IN     CARTCARD.IC_MERCANCIA.ID_STATUS_FACTURA%TYPE,
   p_pesoproducto        IN     CARTCARD.IC_MERCANCIA.PESO%TYPE,
   p_origenproducto      IN     CARTCARD.IC_MERCANCIA.PROVEEDOR%TYPE,
   p_tiemporestante      IN     CARTCARD.IC_MERCANCIA.TIEMPO_ALMACENAMIENTO%TYPE,
   p_idsuite             IN     CARTCARD.IC_MERCANCIA.ID_SUITE%TYPE,
   p_estatus_mercancia   IN     CARTCARD.IC_MERCANCIA.ID_STATUS_MERCANCIA%TYPE
) IS


p_existeMercancia   INTEGER;

BEGIN
   
   p_existeMercancia := 0;
   
   SELECT COUNT(*) INTO p_existeMercancia FROM CARTCARD.IC_MERCANCIA A
   		   WHERE A.FOLIO=p_numerofolio;
   
   IF p_existeMercancia >0 THEN
   	  
	  IF p_srcimagen !='ok' THEN
   	  UPDATE CARTCARD.IC_MERCANCIA A
	  	  SET A.SRCIMAGEN=p_srcimagen,
		  	  A.IMAGEN=p_imagen,
			  A.PROVEEDOR=p_origenproducto,
			  A.DESCRIPCION=p_descripcionpedido,
			  A.ID_SUITE=p_idsuite
		  WHERE A.FOLIO=p_numerofolio;
	   ELSE
	   	   UPDATE CARTCARD.IC_MERCANCIA A
		   	  SET A.PESO=p_pesoproducto,
			  	  A.PROVEEDOR=p_origenproducto,
				  A.DESCRIPCION=p_descripcionpedido,
				  A.ID_SUITE=p_idsuite
			  WHERE A.FOLIO=p_numerofolio;
	   END IF;
	   
	   UPDATE cartcard.IC_MERCANCIA A
	   	  SET A.TIEMPO_ALMACENAMIENTO=p_tiemporestante,
		  	  A.ID_STATUS_FACTURA=p_estatus,
			  A.ID_STATUS_MERCANCIA=p_estatus_mercancia
		  WHERE A.FOLIO=p_numerofolio;
	   
	   COMMIT;
	  
	  
   END IF;
   
   

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_ACTUALIZAMERCANCIARIBESA  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Actualizamercanciaribesa;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ACTUALIZANROIDENTIFICACION(
   p_nombreusuario      IN  CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
   p_identificacionid   IN  CARTCARD.IC_USUARIO.ID_TIPO_IDENTIFICACION%TYPE,
   p_nroidentificacion  IN  CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
   pusuario_modifico	IN	VARCHAR
   ) IS

BEGIN
   
   UPDATE CARTCARD.IC_USUARIO A 
   		  SET A.NUMERO_IDENTIFICACION=p_nroidentificacion,
   		      A.ID_TIPO_IDENTIFICACION=p_identificacionid,
			  A.USUARIO_MODIFICO=pusuario_modifico,
			  A.ULTIMA_MODIFICACION=SYSDATE
		  WHERE A.NOMBRE_USUARIO=p_nombreusuario;
   
   commit;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   rollback;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_ENVIO_ESTAFETA  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_ACTUALIZANROIDENTIFICACION;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ACTUALIZAPASSW (
    PEIdUsuario           IN   CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
    PEContrasenaOLD       IN   CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
    PEContrasena          IN   CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
    PEUsuarioModifico     IN   CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE,
    PSCOD_RESUL           OUT NUMBER,
    PSMSG_RESUL           OUT VARCHAR2) IS
    vlExiste              number;
BEGIN
    PSCOD_RESUL:=0;
        
    SELECT COUNT(1) INTO vlExiste
    from CARTCARD.IC_USUARIO c
    where c.id_usuario= PEIdUsuario
    and c.contrasenia = PEContrasenaOLD;

    IF vlExiste != 0 THEN
     UPDATE CARTCARD.IC_USUARIO USU
        SET USU.CONTRASENIA   = PEContrasena,
            USU.USUARIO_MODIFICO=PEUsuarioModifico,
            USU.ULTIMA_MODIFICACION=SYSDATE
      WHERE USU.ID_USUARIO = PEIdUsuario;
      PSCOD_RESUL:=1;
    ELSE
      PSMSG_RESUL:='Contraseña no valida';
    END IF;

   commit;
EXCEPTION
     WHEN OTHERS THEN
       PSCOD_RESUL:=0;
       rollback;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Actualizapedido (
  pNumeroFolio		IN CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
  pSrcFactura		IN CARTCARD.IC_FACTURA.SRCIMAGEN%TYPE,
  pImgFactura 		IN CARTCARD.IC_FACTURA.DOCUMENTO%TYPE,
  pUsuarioModifico  IN CARTCARD.IC_FACTURA.USUARIO_MODIFICO%TYPE
  )
IS

p_id_factura INTEGER;
p_id_mercancia INTEGER;
p_existe_mercancia   INTEGER;

BEGIN
   BEGIN

		p_id_factura :=0;
		p_id_mercancia := 0;

		SELECT COUNT(*) INTO p_existe_mercancia FROM CARTCARD.IC_MERCANCIA A WHERE A.FOLIO= pNumeroFolio;
		
		IF p_existe_mercancia >0  THEN
		   
		   SELECT CARTCARD.IC_SEQFACTURAS.NEXTVAL INTO p_id_factura FROM DUAL;

	   	   SELECT a.ID_MERCANCIA INTO p_id_mercancia
			   FROM cartcard.IC_MERCANCIA  a  WHERE a.FOLIO= pNumeroFolio;

	       INSERT INTO CARTCARD.IC_FACTURA A(A.ID_FACTURA, A.SRCIMAGEN,A.DOCUMENTO, A.ID_MERCANCIA, A.USUARIO_MODIFICO, A.FECHA_REGISTRO )
		  		 VALUES(p_id_factura, pSrcFactura,pImgFactura, p_id_mercancia, pUsuarioModifico, SYSDATE);
		   
		END IF;
		
   		
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END Ic_Actualizapedido;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Actualizareferencia(
	   p_referencia     IN      CARTCARD.IC_USUARIO.REFERENCIA%TYPE,
	   p_id_usuario     IN      CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
	   p_usuario_modifico		IN       VARCHAR
) 
IS

BEGIN

	 UPDATE CARTCARD.IC_USUARIO A 
	 		SET A.REFERENCIA =p_referencia,
				A.USUARIO_MODIFICO=p_usuario_modifico,
				A.ULTIMA_MODIFICACION=SYSDATE
			WHERE A.ID_USUARIO=p_id_usuario;

	COMMIT;
	
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al Actualizar la IC_ACTUALIZAREFERENCIA  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Actualizareferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ACTUALIZASPEI(
paIdFondeo   IN  CARTCARD.IC_SPEI.ID_FONDEO%TYPE,
pUsusarioModifico    IN       varchar
)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_ACTUALIZASPEI           */
/* Objetivo: actualiza el status del spei         */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_ACTUALIZASPEI      */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   update CARTCARD.IC_SPEI SPEI
   		  SET SPEI.STATUS_PROCESO = 1,
   		  SPEI.USUARIO_MODIFICO=pUsusarioModifico,
		  SPEI.ULTIMA_MODIFICACION=SYSDATE
   WHERE SPEI.ID_FONDEO = paIdFondeo;
   
   COMMIT;
   END;
EXCEPTION
     WHEN OTHERS THEN
     ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_ACTUALIZASPEI;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Actualizastatustarjeta (
paUsuarioId            IN  	   CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
pUsuarioModifico       IN      VARCHAR
)

IS
cartCard NUMBER;
idStatusTarjeta NUMBER;
BEGIN
   cartCard := 0;
   
   IF Ic_Existetarjeta(paUsuarioId) = 0 THEN
   
   	  SELECT MAX(A.ID_TARJETA) 
	  		 INTO cartCard 
			 FROM CARTCARD.IC_TARJETAS A 
			 WHERE A.ID_USUARIO=paUsuarioId;
	  
	  SELECT A.IDESTADOTARJETA INTO idStatusTarjeta 
	  		 FROM PASARELBAZ.PCC_TARJETAS A, 
			 	  PASARELBAZ.PCC_TARJETASCARDMARTE B, 
				  CARTCARD.CARD C
	  		 WHERE A.CARTCARDID=B.CARTCARDID AND
	  		 	   A.NUMEROTARJETA=B.NUMEROTARJETA AND
				   B.FECHAEXPIRACION IS NOT NULL AND
				   C.CARTCARDID=A.CARTCARDID AND
				   C.CARTCARDID=cartCard;
				   
      UPDATE  CARTCARD.IC_TARJETAS A 
	  		  SET A.ID_STATUS_TARJETA=idStatusTarjeta,
			  A.USUARIO_MODIFICO=pUsuarioModifico,
			  A.ULTIMA_MODIFICACION=SYSDATE
			  WHERE A.ID_TARJETA=cartCard;
	  
   END IF;
   
   COMMIT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_ENVIO_ESTAFETA  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Actualizastatustarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Actualizastatususr (
	   pusuarioid       IN       INTEGER,
	   pusuario_modifico    IN   VARCHAR
) IS

p_existe  INTEGER;

BEGIN
   p_existe :=0;
   
   SELECT COUNT(1) INTO p_existe FROM CARTCARD.IC_USUARIO A
   		  WHERE A.ID_USUARIO=pusuarioid;
   
   
   IF p_existe > 0 THEN
   	     UPDATE CARTCARD.IC_USUARIO A 
   		  SET A.ID_STATUS_CUENTA=1,
			  A.USUARIO_MODIFICO=pusuario_modifico,
			  A.ULTIMA_MODIFICACION=SYSDATE
		  WHERE A.ID_USUARIO=pusuarioid;
   
   		  COMMIT;

   END IF;
   
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       ROLLBACK;
	   -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la Ic_Actualizastatususr  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Actualizastatususr;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ACTUALIZAUSUARIO (
   pausuarioid              IN   CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
   panombre                 IN   CARTCARD.IC_USUARIO.NOMBRE%TYPE,
   paapaaterno               IN   CARTCARD.IC_USUARIO.APATERNO%TYPE,
   paamaterno               IN   CARTCARD.IC_USUARIO.AMATERNO%TYPE,
   pacalle                  IN   CARTCARD.IC_USUARIO.CALLE%TYPE,
   pacolonia                IN   CARTCARD.IC_USUARIO.COLONIA%TYPE,
   pamunicipioid            IN   CARTCARD.IC_USUARIO.ID_MUNICIPIO%TYPE,
   pacodigopostal           IN   CARTCARD.IC_USUARIO.CP%TYPE,
   patelefono               IN   CARTCARD.IC_USUARIO.TELEFONO%TYPE,
   papaisid                 IN   CARTCARD.IC_USUARIO.ID_PAIS%TYPE,
   paestadoid               IN   CARTCARD.IC_USUARIO.ID_ESTADO%TYPE,
   paidentificacionid       IN   CARTCARD.IC_USUARIO.ID_TIPO_IDENTIFICACION%TYPE,
   panumeroidentificacion   IN   CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
   pacelular                IN   CARTCARD.IC_USUARIO.CELULAR%TYPE,
   pusuariomodifico			IN	 varchar
)
IS
/* ----------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ACTUALIZADATOSUSUARIO                                   */
/* Objetivo: Actualiza el registro de los datos del usuario.                     */
/* Autor:    Equipo CartCard (Siscon)                                            */
/* Fecha Creacion: Oct/2010                                                      */
/* Fecha Modificacion:                                                           */
/* Ejemplo Ejecucion: exec ACTUALIZADATOSUSUARIO(<<usuarioid>>,..,<<celular>>)   */
/* ----------------------------------------------------------------------------- */

BEGIN
    BEGIN

 UPDATE CARTCARD.IC_USUARIO U
         SET U.CALLE  = pacalle,
             U.COLONIA  = pacolonia,
             U.ID_MUNICIPIO  = pamunicipioid,             
             U.CP  = pacodigopostal,
             U.TELEFONO  = patelefono,
             U.ID_PAIS  = papaisid,
             U.ID_ESTADO = paestadoid,
             U.FECHA_CREACION  = SYSDATE,
             U.CELULAR = pacelular,
    		 U.ID_TIPO_IDENTIFICACION = paidentificacionid,
    		 U.NUMERO_IDENTIFICACION = panumeroidentificacion,
			 U.USUARIO_MODIFICO=pusuariomodifico,
			 U.ULTIMA_MODIFICACION=SYSDATE
       WHERE U.ID_USUARIO  = pausuarioid;

	   commit;
 
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  rollback;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_ACTUALIZAUSUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ACTUALUZACONTRASE (
    PAUsuarioId          IN   CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
   PAContrasena   IN   CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
   PAUsuarioModifico     IN   VARCHAR
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: IC_ACTUALUZACONTRASE                                          */
/* OBJETIVO: Actualiza la contrasenia el usuario                          */
/* AUTOR: EQUIPO IUPICARD                                                            */
/* FECHA CREACION: Oct/2010                                                          */
/* FECHA MODIFICACION:                                                               */
/* EJEMPLO EJECUCION:                   */
/* --------------------------------------------------------------------------------- */
BEGIN
    
     UPDATE CARTCARD.IC_USUARIO USU
        SET USU.CONTRASENIA   = PAContrasena,
		USU.USUARIO_MODIFICO=PAUsuarioModifico,
		USU.ULTIMA_MODIFICACION=SYSDATE
      WHERE USU.ID_USUARIO = PAUsuarioId;
     
	 commit;
      
EXCEPTION
     WHEN OTHERS THEN
	 	  rollback;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_ACTUALUZACONTRASE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ACTUALUZACORREO (
    PA_UsuarioId          IN   CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
  PA_Correo   IN   CARTCARD.IC_USUARIO.CORREO_ELECTRONICO%TYPE,
  PA_UsuarioModifico      IN   CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: IC_ACTUALUZACORREO                                          */
/* OBJETIVO: Actualiza el correo del usuario                          */
/* AUTOR: EQUIPO IUPICARD                                                            */
/* FECHA CREACION: Oct/2010                                                          */
/* FECHA MODIFICACION:                                                               */
/* EJEMPLO EJECUCION: EXEC IC_ACTUALUZACORREO(<PA_USUARIO>))         */
/* --------------------------------------------------------------------------------- */
BEGIN

     UPDATE CARTCARD.IC_USUARIO USU
        SET USU.CORREO_ELECTRONICO  = PA_Correo,
		    USU.NOMBRE_USUARIO  = PA_Correo,
      	    USU.USUARIO_MODIFICO=PA_UsuarioModifico,
            USU.ULTIMA_MODIFICACION=SYSDATE
      WHERE USU.ID_USUARIO = PA_UsuarioId;

      commit;

EXCEPTION
     WHEN OTHERS THEN
       rollback;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_ACTUALUZACORREO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ADD_ENVIO_ESTAFETA(
        
        V_ID_MERCANCIA            CARTCARD.IC_ENVIO_ESTAFETA.ID_MERCANCIA%TYPE,
        V_ID_PAIS                 CARTCARD.IC_ENVIO_ESTAFETA.ID_PAIS%TYPE,
        V_ID_ESTADO               CARTCARD.IC_ENVIO_ESTAFETA.ID_ESTADO%TYPE,
        V_ID_MUNICIPIO            CARTCARD.IC_ENVIO_ESTAFETA.ID_MUNICIPIO%TYPE,
        V_NOMBRE_DESTINATARIO     CARTCARD.IC_ENVIO_ESTAFETA.NOMBRE_DESTINATARIO%TYPE,
        V_APELLIDOS_DESTINATARIO  CARTCARD.IC_ENVIO_ESTAFETA.APELLIDOS_DESTINATARIO%TYPE,
        V_CALLE                   CARTCARD.IC_ENVIO_ESTAFETA.CALLE%TYPE,
        V_NUMERO_EXTERIOR         CARTCARD.IC_ENVIO_ESTAFETA.NUMERO_EXTERIOR%TYPE,
        V_NUMERO_INTERIOR         CARTCARD.IC_ENVIO_ESTAFETA.NUMERO_INTERIOR%TYPE,
        V_COLONIA                 CARTCARD.IC_ENVIO_ESTAFETA.COLONIA%TYPE,
        V_CP                      CARTCARD.IC_ENVIO_ESTAFETA.CP%TYPE,
        V_TELEFONO                CARTCARD.IC_ENVIO_ESTAFETA.TELEFONO%TYPE,
        V_ACCION                  CARTCARD.IC_ENVIO_ESTAFETA.ACCION%TYPE,
        V_RESULTADO               CARTCARD.IC_ENVIO_ESTAFETA.RESULTADO%TYPE,
        V_MENSAJE                 CARTCARD.IC_ENVIO_ESTAFETA.MENSAJE%TYPE,
        V_GUIAESTAFETA            CARTCARD.IC_ENVIO_ESTAFETA.GUIAESTAFETA%TYPE,
        V_FECHA_ENVIO             CARTCARD.IC_ENVIO_ESTAFETA.FECHA_ENVIO%TYPE,
        V_USUARIO_MODIFICO        CARTCARD.IC_ENVIO_ESTAFETA.USUARIO_MODIFICO%TYPE
)
IS

        V_ID_ESTAFETA             CARTCARD.IC_ENVIO_ESTAFETA.ID_ESTAFETA%TYPE;

BEGIN    
     BEGIN
     
           SELECT CARTCARD.IC_SEQ_ENVIO_ESTAFETA.NEXTVAL INTO V_ID_ESTAFETA FROM DUAL;       
     
           INSERT INTO CARTCARD.IC_ENVIO_ESTAFETA(ID_ESTAFETA, ID_MERCANCIA, ID_PAIS, ID_ESTADO, ID_MUNICIPIO, NOMBRE_DESTINATARIO, APELLIDOS_DESTINATARIO, CALLE, NUMERO_EXTERIOR, NUMERO_INTERIOR, COLONIA, CP, TELEFONO, ACCION ,RESULTADO ,MENSAJE ,GUIAESTAFETA ,FECHA_ENVIO, ULTIMA_MODIFICACION, USUARIO_MODIFICO )
            VALUES(V_ID_ESTAFETA ,V_ID_MERCANCIA ,V_ID_PAIS ,V_ID_ESTADO ,V_ID_MUNICIPIO ,V_NOMBRE_DESTINATARIO ,V_APELLIDOS_DESTINATARIO ,V_CALLE ,V_NUMERO_EXTERIOR ,V_NUMERO_INTERIOR ,V_COLONIA ,V_CP ,V_TELEFONO, V_ACCION, V_RESULTADO ,V_MENSAJE, V_GUIAESTAFETA, V_FECHA_ENVIO, SYSDATE, V_USUARIO_MODIFICO);
			
			commit;
			
     EXCEPTION                                                                                                                                                                                     
             WHEN OTHERS THEN
			 	   rollback;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_ENVIO_ESTAFETA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END IC_ADD_ENVIO_ESTAFETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Add_Factura(

        V_ID_MERCANCIA                 CARTCARD.IC_FACTURA.ID_MERCANCIA%TYPE,        
        V_DOCUMENTO                    CARTCARD.IC_FACTURA.DOCUMENTO%TYPE,
--        V_FECHA_REGISTRO               CARTCARD.IC_FACTURA.FECHA_REGISTRO%TYPE,
        V_USUARIO_MODIFICO             CARTCARD.IC_FACTURA.USUARIO_MODIFICO%TYPE
)
IS
 
        V_ID_FACTURA                   CARTCARD.IC_FACTURA.ID_FACTURA%TYPE;

BEGIN    
     BEGIN
     
           SELECT CARTCARD.IC_SEQ_FACTURA.NEXTVAL INTO V_ID_FACTURA FROM DUAL;
     
           INSERT INTO CARTCARD.IC_FACTURA(ID_MERCANCIA, ID_FACTURA, DOCUMENTO, FECHA_REGISTRO, ULTIMA_MODIFICACION, USUARIO_MODIFICO )
            VALUES(V_ID_MERCANCIA ,V_ID_FACTURA ,V_DOCUMENTO ,SYSDATE, SYSDATE, V_USUARIO_MODIFICO );
			
			COMMIT;
			
     EXCEPTION
             WHEN OTHERS THEN
			 	   ROLLBACK;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_FACTURA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END Ic_Add_Factura;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Add_Importes_Estafeta(
        
        V_ID_TIPO_SERVICIO               CARTCARD.IC_IMPORTES_ESTAFETA.ID_TIPO_SERVICIO%TYPE,
        V_FOLIO_MERCANCIA                CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
        V_IMPORTE_MANEJO                 CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_MANEJO%TYPE,
        V_IMPORTE_SOBREPESO              CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_SOBREPESO%TYPE,
        V_IMPORTE_GDEVOLUCION            CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_GDEVOLUCION%TYPE,
        V_IMPORTE_SEGURO                 CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_SEGURO%TYPE,
        V_IMPORTE_IMPUESTOS_IMPORTAC     CARTCARD.IC_IMPORTES_ESTAFETA.IMPORTE_IMPUESTOS_IMPORTACION%TYPE,
        V_TOTAL_APAGAR                   CARTCARD.IC_IMPORTES_ESTAFETA.TOTAL_APAGAR%TYPE,
        V_USUARIO_MODIFICO               CARTCARD.IC_IMPORTES_ESTAFETA.USUARIO_MODIFICO%TYPE
)
IS
        V_ID_IMPORTE_EST                 CARTCARD.IC_IMPORTES_ESTAFETA.ID_IMPORTE_EST%TYPE;
        V_ID_MERCANCIA                   CARTCARD.IC_IMPORTES_ESTAFETA.ID_MERCANCIA%TYPE;
        V_ID_MERCANCIA_AUX               CARTCARD.IC_IMPORTES_ESTAFETA.ID_MERCANCIA%TYPE;
        
BEGIN    
     BEGIN
            BEGIN
     
                V_ID_MERCANCIA := CARTCARD.Ic_Obtenmercanciaidbyfolio(V_FOLIO_MERCANCIA); 
                IF V_ID_MERCANCIA = 0 THEN
                    SELECT A.ID_MERCANCIA INTO V_ID_MERCANCIA_AUX FROM CARTCARD.IC_MERCANCIA A WHERE A.FOLIO='0';                
                END IF;
           
            
            EXCEPTION
                WHEN OTHERS THEN
                    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al recuperar el id de mercancia para el folio: '|| V_FOLIO_MERCANCIA ||'  por lo cual no se realiza el insert(' || SQLCODE || '  ' || SQLERRM || ')');
            END;
           
     
           SELECT CARTCARD.IC_SEQ_IMPORTES_ESTAFETA.NEXTVAL INTO V_ID_IMPORTE_EST FROM DUAL;
     
           INSERT INTO CARTCARD.IC_IMPORTES_ESTAFETA(ID_IMPORTE_EST, ID_TIPO_SERVICIO, ID_MERCANCIA, IMPORTE_MANEJO, IMPORTE_SOBREPESO, IMPORTE_GDEVOLUCION, IMPORTE_SEGURO, IMPORTE_IMPUESTOS_IMPORTACION, TOTAL_APAGAR, FECHA_NOTIFICACION, USUARIO_MODIFICO )
            VALUES(V_ID_IMPORTE_EST ,V_ID_TIPO_SERVICIO ,V_ID_MERCANCIA ,V_IMPORTE_MANEJO ,V_IMPORTE_SOBREPESO ,V_IMPORTE_GDEVOLUCION ,V_IMPORTE_SEGURO ,V_IMPORTE_IMPUESTOS_IMPORTAC ,V_TOTAL_APAGAR ,SYSDATE, V_USUARIO_MODIFICO );
            
            
            CARTCARD.Ic_Add_Tracking_Mercancia(V_ID_MERCANCIA,1,SYSDATE,V_USUARIO_MODIFICO);
			
			COMMIT;
			
            
     EXCEPTION
             WHEN OTHERS THEN
			 	   ROLLBACK;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_IMPORTES_ESTAFETA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END Ic_Add_Importes_Estafeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ADD_IMPORTES_IUPICARD(

        V_ID_TIPO_SERVICIO               CARTCARD.IC_IMPORTES_IUPICARD.ID_TIPO_SERVICIO%TYPE,
        V_ID_MERCANCIA                   CARTCARD.IC_IMPORTES_IUPICARD.ID_MERCANCIA%TYPE,
        V_IMPORTE_MANEJO_IUPI            CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_MANEJO_IUPI%TYPE,
        V_IMPORTE_KG_ADICIONAL           CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_KG_ADICIONAL%TYPE,
        V_IMPORTE_ENVIO                  CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_ENVIO%TYPE,
        V_IMPORTE_SEGURO                 CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_SEGURO%TYPE,
        V_IMPORTE_ALMACENAMIENTO_EX      CARTCARD.IC_IMPORTES_IUPICARD.IMPORTE_ALMACENAMIENTO_EX%TYPE,
        V_TOTAL_PAGAR                    CARTCARD.IC_IMPORTES_IUPICARD.TOTAL_PAGAR%TYPE,
        V_FECHA_PAGO                     VARCHAR2,
        V_USUARIO_MODIFICO               CARTCARD.IC_IMPORTES_IUPICARD.USUARIO_MODIFICO%TYPE
)
IS

        V_ID_IMPORTE_IC                 CARTCARD.IC_IMPORTES_IUPICARD.ID_IMPORTE_IC%TYPE;
        
BEGIN    
     BEGIN
     
           SELECT CARTCARD.IC_SEQ_IMPORTES_IUPICARD.NEXTVAL INTO V_ID_IMPORTE_IC FROM DUAL;       
     
           INSERT INTO CARTCARD.IC_IMPORTES_IUPICARD(ID_IMPORTE_IC, ID_TIPO_SERVICIO, ID_MERCANCIA, IMPORTE_MANEJO_IUPI, IMPORTE_KG_ADICIONAL, IMPORTE_ENVIO, IMPORTE_SEGURO, IMPORTE_ALMACENAMIENTO_EX, TOTAL_PAGAR, FECHA_PAGO, ULTIMA_MODIFICACION, USUARIO_MODIFICO )
            VALUES(V_ID_IMPORTE_IC ,V_ID_TIPO_SERVICIO ,V_ID_MERCANCIA ,V_IMPORTE_MANEJO_IUPI ,
				   V_IMPORTE_KG_ADICIONAL ,V_IMPORTE_ENVIO ,V_IMPORTE_SEGURO ,V_IMPORTE_ALMACENAMIENTO_EX ,
				   V_TOTAL_PAGAR ,TO_DATE(V_FECHA_PAGO, 'ddMMYYYY-HH24:MI:ss'), SYSDATE, V_USUARIO_MODIFICO );
				   
		  commit;
		  
     EXCEPTION
             WHEN OTHERS THEN
			 	   rollback;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_IMPORTES_IUPICARD  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END IC_ADD_IMPORTES_IUPICARD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Add_Mercancia(
   
        V_FOLIO                        IN     CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
        V_NOMBRE                       IN     CARTCARD.IC_MERCANCIA.NOMBRE%TYPE,
        V_DESCRIPCION                  IN     CARTCARD.IC_MERCANCIA.DESCRIPCION%TYPE,
        V_COSTO                        IN     CARTCARD.IC_MERCANCIA.COSTO%TYPE,
        V_PESO                         IN     CARTCARD.IC_MERCANCIA.PESO%TYPE,
        V_PROVEEDOR                    IN     CARTCARD.IC_MERCANCIA.PROVEEDOR%TYPE,
        V_TIEMPO_ALMACENAMIENTO        IN     CARTCARD.IC_MERCANCIA.TIEMPO_ALMACENAMIENTO%TYPE,
        V_ID_STATUS_FACTURA            IN     CARTCARD.IC_MERCANCIA.ID_STATUS_FACTURA%TYPE,
        V_SOBREPESO                    IN     CARTCARD.IC_MERCANCIA.SOBREPESO%TYPE,
		V_IMAGEN                       IN     CARTCARD.IC_MERCANCIA.IMAGEN%TYPE,
		V_USUARIO_MODIFICO			   IN     CARTCARD.IC_MERCANCIA.USUARIO_MODIFICO%TYPE,
		V_SRCIMAGEN					   IN     CARTCARD.IC_MERCANCIA.SRCIMAGEN%TYPE,
		V_ID_SUITE					   IN     CARTCARD.IC_MERCANCIA.ID_SUITE%TYPE,
		V_ID_STATUS_MERCANCIA		   IN     CARTCARD.IC_MERCANCIA.ID_STATUS_MERCANCIA%TYPE
)
IS
        V_ID_MERCANCIA                 CARTCARD.IC_MERCANCIA.ID_MERCANCIA%TYPE;

BEGIN    
     BEGIN
     
           SELECT CARTCARD.IC_SEQ_MERCANCIA.NEXTVAL INTO V_ID_MERCANCIA FROM DUAL;
     
           INSERT INTO CARTCARD.IC_MERCANCIA(ID_MERCANCIA, FOLIO, NOMBRE, DESCRIPCION, COSTO, PESO, PROVEEDOR, TIEMPO_ALMACENAMIENTO, FECHA_REGISTRO, ID_STATUS_FACTURA, SOBREPESO, IMAGEN, USUARIO_MODIFICO, SRCIMAGEN,ID_SUITE,ID_STATUS_MERCANCIA)
            	  	   				VALUES(V_ID_MERCANCIA, V_FOLIO,V_NOMBRE,V_DESCRIPCION,V_COSTO,V_PESO,V_PROVEEDOR,V_TIEMPO_ALMACENAMIENTO,SYSDATE,V_ID_STATUS_FACTURA,V_SOBREPESO,V_IMAGEN,V_USUARIO_MODIFICO,V_SRCIMAGEN,V_ID_SUITE,V_ID_STATUS_MERCANCIA);
		   COMMIT;
		   
     EXCEPTION
             WHEN OTHERS THEN
			 	   ROLLBACK;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_MERCANCIA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END Ic_Add_Mercancia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ADD_MERCANCIAS_UNLOAD(                
        V_ID_UNLOAD                     CARTCARD.IC_MERCANCIAS_UNLOAD.ID_UNLOAD%TYPE,
        V_ID_MERCANCIA                  CARTCARD.IC_MERCANCIAS_UNLOAD.ID_MERCANCIA%TYPE,
        V_STATUS_PAGO                   CARTCARD.IC_MERCANCIAS_UNLOAD.STATUS_PAGO%TYPE,
        V_USUARIO_MODIFICO              CARTCARD.IC_MERCANCIAS_UNLOAD.USUARIO_MODIFICO%TYPE
)
IS

V_ID_MERCANCIA_UNLOAD           CARTCARD.IC_MERCANCIAS_UNLOAD.ID_MERCANCIA_UNLOAD%TYPE;

BEGIN    
     BEGIN
	 	  
		  SELECT CARTCARD.IC_SEQMERCANCIAUNLOAD.NEXTVAL INTO V_ID_MERCANCIA_UNLOAD FROM DUAL;
	 
	 
           INSERT INTO CARTCARD.IC_MERCANCIAS_UNLOAD(ID_MERCANCIA_UNLOAD, ID_UNLOAD, ID_MERCANCIA, STATUS_PAGO, ULTIMA_MODIFICACION, USUARIO_MODIFICO )
            VALUES(V_ID_MERCANCIA_UNLOAD ,V_ID_UNLOAD ,V_ID_MERCANCIA ,V_STATUS_PAGO, SYSDATE, V_USUARIO_MODIFICO );
			
			commit;
			
     EXCEPTION
             WHEN OTHERS THEN
			 	   rollback;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_MERCANCIAS_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END IC_ADD_MERCANCIAS_UNLOAD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Add_Tracking_Mercancia(

        V_ID_MERCANCIA                 CARTCARD.IC_TRACKING_MERCANCIA.ID_MERCANCIA%TYPE,
        V_ID_STATUS                    CARTCARD.IC_TRACKING_MERCANCIA.ID_STATUS%TYPE,        
        V_FECHA_ACTUALIZACION          CARTCARD.IC_TRACKING_MERCANCIA.FECHA_ACTUALIZACION%TYPE,
        V_USUARIO_MODIFICO             CARTCARD.IC_TRACKING_MERCANCIA.USUARIO_MODIFICO%TYPE
)
IS

        V_ID_TRACKING                  CARTCARD.IC_TRACKING_MERCANCIA.ID_TRACKING%TYPE;
        V_EXISTE                  INTEGER;
		
BEGIN    
     BEGIN
     
           SELECT CARTCARD.IC_SEQ_TRACKING_MERCANCIA.NEXTVAL INTO V_ID_TRACKING FROM DUAL;
		   
		   SELECT COUNT(*) INTO V_EXISTE FROM CARTCARD.IC_TRACKING_MERCANCIA MERC 
		   		  WHERE MERC.ID_MERCANCIA=V_ID_MERCANCIA AND
		   		  		MERC.ID_STATUS=V_ID_STATUS;
		   
		   IF V_EXISTE =0 THEN
		   	  
			  INSERT INTO CARTCARD.IC_TRACKING_MERCANCIA(ID_MERCANCIA, ID_STATUS, ID_TRACKING, FECHA_ACTUALIZACION, ULTIMA_MODIFICACION, USUARIO_MODIFICO )
                     VALUES(V_ID_MERCANCIA ,V_ID_STATUS ,V_ID_TRACKING ,V_FECHA_ACTUALIZACION, SYSDATE, V_USUARIO_MODIFICO );  
					 
			  UPDATE CARTCARD.IC_MERCANCIA MERCA
			  		 SET MERCA.ID_STATUS_FACTURA = V_ID_STATUS,
					 	 MERCA.ID_STATUS_MERCANCIA=V_ID_STATUS
				     WHERE MERCA.ID_MERCANCIA= V_ID_MERCANCIA;
			
			  COMMIT;
			  
		   END IF;
            
           
			
			
			
     EXCEPTION
             WHEN OTHERS THEN
			 	   ROLLBACK;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TRACKING_MERCANCIA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END Ic_Add_Tracking_Mercancia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ADD_TRAKINGBYFOLIO (
      V_FOLIO                        CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
      V_ID_STATUS                    CARTCARD.IC_TRACKING_MERCANCIA.ID_STATUS%TYPE,
      V_USUARIO_MODIFICO             CARTCARD.IC_TRACKING_MERCANCIA.USUARIO_MODIFICO%TYPE
)
IS
p_existe        NUMBER;
p_id_mercancia  INTEGER;
V_ID_TRACKING   CARTCARD.IC_TRACKING_MERCANCIA.ID_TRACKING%TYPE;

BEGIN
   p_existe := 0;
   
   SELECT COUNT(MERC.ID_MERCANCIA) INTO p_existe FROM CARTCARD.IC_MERCANCIA MERC
   		  WHERE MERC.FOLIO=V_FOLIO;
   
   IF p_existe !=0 THEN
   	  
	  SELECT MERC.ID_MERCANCIA INTO p_id_mercancia FROM CARTCARD.IC_MERCANCIA MERC
   		  WHERE MERC.FOLIO=V_FOLIO;
	 
	  SELECT CARTCARD.IC_SEQ_TRACKING_MERCANCIA.NEXTVAL INTO V_ID_TRACKING FROM DUAL;	  
	
	  INSERT INTO CARTCARD.IC_TRACKING_MERCANCIA(ID_MERCANCIA,
	  		 	  								 ID_STATUS,
												 ID_TRACKING,
												 FECHA_ACTUALIZACION,
												 USUARIO_MODIFICO,
												 ULTIMA_MODIFICACION,
												 OBSERVACION)
					VALUES( p_id_mercancia, V_ID_STATUS,V_ID_TRACKING,SYSDATE,V_USUARIO_MODIFICO,SYSDATE,' ');
	   COMMIT;
	  
   END IF;
   
   
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar IC_ADD_TRAKINGBYFOLIO  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_ADD_TRAKINGBYFOLIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ADD_TX_CARDMARTE_UNLOAD(
        V_ID_TARJETA                 CARTCARD.IC_TX_CARDMARTE_UNLOAD.ID_TARJETA%TYPE,        
        V_PTERMINALCODE              CARTCARD.IC_TX_CARDMARTE_UNLOAD.PTERMINALCODE%TYPE,
        V_PCARDNUMBER                CARTCARD.IC_TX_CARDMARTE_UNLOAD.PCARDNUMBER%TYPE,
        V_PTRANSAMOUNT               CARTCARD.IC_TX_CARDMARTE_UNLOAD.PTRANSAMOUNT%TYPE,
        V_PDETAIL                    CARTCARD.IC_TX_CARDMARTE_UNLOAD.PDETAIL%TYPE,
        V_FECHA_EJECUCION            VARCHAR2,
        V_REQUESTID                  CARTCARD.IC_TX_CARDMARTE_UNLOAD.REQUESTID%TYPE,
        V_OPERATIONID                CARTCARD.IC_TX_CARDMARTE_UNLOAD.OPERATIONID%TYPE,
        V_RESULTCODE                 CARTCARD.IC_TX_CARDMARTE_UNLOAD.RESULTCODE%TYPE,
        V_RESULTMESSAGE              CARTCARD.IC_TX_CARDMARTE_UNLOAD.RESULTMESSAGE%TYPE,
        V_TRANSACTIONNUMBER          CARTCARD.IC_TX_CARDMARTE_UNLOAD.TRANSACTIONNUMBER%TYPE,
        V_AMOUNT                     CARTCARD.IC_TX_CARDMARTE_UNLOAD.AMOUNT%TYPE,
        V_USUARIO_MODIFICO           CARTCARD.IC_TX_CARDMARTE_UNLOAD.USUARIO_MODIFICO%TYPE,
		V_ID_UNLOAD             OUT  CARTCARD.IC_TX_CARDMARTE_UNLOAD.ID_UNLOAD%TYPE
)
IS

        

BEGIN    
     BEGIN
     
           SELECT CARTCARD.IC_SEQ_TX_CARDMARTE_UNLOAD.NEXTVAL INTO V_ID_UNLOAD FROM DUAL;
     
           INSERT INTO CARTCARD.IC_TX_CARDMARTE_UNLOAD(ID_TARJETA, ID_UNLOAD, PTERMINALCODE, PCARDNUMBER, 
		   		  	   								    PTRANSAMOUNT, PDETAIL, FECHA_EJECUCION, REQUESTID, 
														OPERATIONID, RESULTCODE, RESULTMESSAGE, TRANSACTIONNUMBER, 
														AMOUNT, ULTIMA_MODIFICACION, USUARIO_MODIFICO )
            VALUES(V_ID_TARJETA ,V_ID_UNLOAD ,V_PTERMINALCODE ,V_PCARDNUMBER ,V_PTRANSAMOUNT ,V_PDETAIL ,
				   TO_DATE(V_FECHA_EJECUCION, 'ddMMYYYY-HH24:MI:ss') ,V_REQUESTID ,V_OPERATIONID ,V_RESULTCODE ,
				   V_RESULTMESSAGE ,V_TRANSACTIONNUMBER ,V_AMOUNT, SYSDATE, V_USUARIO_MODIFICO);
		   
		   commit;
		   
     EXCEPTION
             WHEN OTHERS THEN
			 	   rollback;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END IC_ADD_TX_CARDMARTE_UNLOAD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Agregadesgloce (
	   
	   p_folio	  IN	CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
	   p_costo    IN    CARTCARD.IC_MERCANCIA.COSTO%TYPE

) IS

p_existe   INTEGER;

BEGIN
   
   p_existe :=0;
   
   SELECT COUNT(1) INTO p_existe FROM CARTCARD.IC_MERCANCIA A
   		  WHERE A.FOLIO=p_folio;
   
   IF p_existe>0 THEN
   
	   UPDATE CARTCARD.IC_MERCANCIA A
	   		  SET A.COSTO=p_costo
			  WHERE A.FOLIO=p_folio;
			  
	   COMMIT;
   
   END IF;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   ROLLBACK;
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_AGREGADESGLOCE  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Agregadesgloce;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Agregasuite(
	
	p_usuario_id  IN    CARTCARD.IC_SUITE.ID_USUARIO%TYPE,
	p_suite_id    IN    CARTCARD.IC_SUITE.ID_SUITE%TYPE,
	p_usuario_modifico    IN    CARTCARD.IC_SUITE.USUARIO_MODIFICO%TYPE
	
)IS

p_existe INTEGER;

BEGIN
   
   p_existe := 0;
   
   SELECT COUNT(1) INTO p_existe FROM CARTCARD.IC_SUITE A WHERE A.ID_USUARIO= p_usuario_id;
   
   IF p_existe=0 THEN
   	  
	  INSERT INTO CARTCARD.IC_SUITE(ID_SUITE, ID_USUARIO, ID_PROVEEDOR, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
   		  VALUES (p_suite_id,p_usuario_id,1,p_usuario_modifico,SYSDATE);
		  
   	  COMMIT;
	  
   END IF;
   
   
   
   EXCEPTION
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_AGREGASUITE  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Agregasuite;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Agregausuario(
   p_id_usuario	  		   IN 	    CARTCARD.IC_USUARIO.ID_USUARIO%TYPE ,
   p_nombre                IN       CARTCARD.IC_USUARIO.NOMBRE%TYPE,
   p_apaterno              IN       CARTCARD.IC_USUARIO.APATERNO%TYPE,
   p_amaterno              IN       CARTCARD.IC_USUARIO.AMATERNO%TYPE,
   p_calle                 IN       CARTCARD.IC_USUARIO.CALLE%TYPE,
   p_colonia               IN       CARTCARD.IC_USUARIO.COLONIA%TYPE,
   p_municipioid           IN       CARTCARD.IC_USUARIO.ID_MUNICIPIO%TYPE,
   p_ciudad                IN       CARTCARD.IC_USUARIO.CIUDAD%TYPE,
   p_codigopostal          IN       CARTCARD.IC_USUARIO.CP%TYPE,
   p_telefono              IN       CARTCARD.IC_USUARIO.TELEFONO%TYPE,
   p_celular               IN       CARTCARD.IC_USUARIO.CELULAR%TYPE,
   --p_fax                   IN       CARTCARD.IC_USUARIO.ID_TIPO_IDENTIFICACION%TYPE,
   p_mail                  IN       CARTCARD.IC_USUARIO.CORREO_ELECTRONICO%TYPE,
   p_paisid                IN       CARTCARD.IC_USUARIO.ID_PAIS%TYPE,
   p_estadoid              IN       CARTCARD.IC_USUARIO.ID_ESTADO%TYPE,
   p_nombreusuario         IN       CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
   ppreguntaestandar1      IN       CARTCARD.IC_PREGUNTAS_USUARIO.ID_PREGUNTA_USUARIO%TYPE,
   ppreguntaestandar2      IN       CARTCARD.IC_PREGUNTAS_USUARIO.ID_PREGUNTA_USUARIO%TYPE,
   --ppregunta1              IN       VARCHAR2,
   --ppregunta2              IN       VARCHAR2,
   prespuestaestandar1     IN       CARTCARD.IC_PREGUNTAS_USUARIO.RESPUESTA%TYPE,
   prespuestaestandar2     IN       CARTCARD.IC_PREGUNTAS_USUARIO.RESPUESTA%TYPE,
   --prespuesta1             IN       VARCHAR2,
   --prespuesta2             IN       VARCHAR2,
   pidentificacion         IN       CARTCARD.IC_USUARIO.ID_TIPO_IDENTIFICACION%TYPE,
   pnumeroidentificacion   IN       CARTCARD.IC_USUARIO.NUMERO_IDENTIFICACION%TYPE,
   pcontrasenia            IN       CARTCARD.IC_USUARIO.CONTRASENIA%TYPE,
   p_fechanacimiento       IN       VARCHAR2,
   p_newsLetters           IN      CARTCARD.IC_USUARIO.NEWSLETTER%TYPE,
   p_usuario_modifico	   IN	   VARCHAR2
   
   
   
) IS

/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: AGREGAUSUARIO                                                 */
/* Objetivo: Agrega una nueva solicitud de plastico.                                       */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec AGREGAUSUARIO(<<nombre>>,..,<<fechanacimiento>>,<<:usuarioid>>) */
/* --------------------------------------------------------------------------------------- */
p_id_pregunta INTEGER;
BEGIN

   INSERT INTO CARTCARD.IC_USUARIO(
   		  ID_USUARIO, 
		  ID_TIPO_IDENTIFICACION, 
		  ID_STATUS_CUENTA, 
		  ID_ESTADO, 
		  ID_PAIS, 
		  ID_MUNICIPIO,
		  CIUDAD,
		  NOMBRE, 
		  APATERNO, 
		  AMATERNO, 
		  CALLE, 
		  COLONIA, 
		  CP, 
		  TELEFONO, 
		  CORREO_ELECTRONICO, 
		  NOMBRE_USUARIO, 
		  CONTRASENIA, 
		  NUMERO_IDENTIFICACION, 
		  FECHA_CREACION, 
		  CELULAR,
		  FECHA_NACIMIENTO,
		  NEWSLETTER,
		  USUARIO_MODIFICO,
		  ULTIMA_MODIFICACION
   ) VALUES(p_id_usuario,pidentificacion,0,p_estadoid,p_paisid,p_municipioid,p_ciudad,p_nombre,p_apaterno,p_amaterno,p_calle,p_colonia,p_codigopostal,p_telefono,p_mail,p_nombreusuario,pcontrasenia,pnumeroidentificacion,SYSDATE,p_celular,TO_DATE(p_fechanacimiento,'ddMMYYYY-HH24:MI:ss'),p_newsLetters,p_usuario_modifico,SYSDATE );
   
  
   
   SELECT CARTCARD.IC_PREGUNTAS.NEXTVAL INTO p_id_pregunta FROM DUAL;
   
   INSERT INTO CARTCARD.IC_PREGUNTAS_USUARIO  (ID_PREGUNTA_USUARIO, ID_USUARIO, ID_PREGUNTA_SECRETA, RESPUESTA,USUARIO_MODIFICO,ULTIMA_MODIFICACION )
   		  VALUES (p_id_pregunta,p_id_usuario,ppreguntaestandar1,prespuestaestandar1,p_usuario_modifico,SYSDATE);
   
   SELECT CARTCARD.IC_PREGUNTAS.NEXTVAL INTO p_id_pregunta FROM DUAL;
   
   INSERT INTO CARTCARD.IC_PREGUNTAS_USUARIO  (ID_PREGUNTA_USUARIO, ID_USUARIO, ID_PREGUNTA_SECRETA, RESPUESTA,USUARIO_MODIFICO,ULTIMA_MODIFICACION )
   		  VALUES (p_id_pregunta,p_id_usuario,ppreguntaestandar2,prespuestaestandar2,p_usuario_modifico,SYSDATE);
   
   COMMIT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_AGREGAUSUARIO  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Agregausuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_ALTA_USUARIO_ROL (pereg       IN CARTCARD.IC_USUARIO%ROWTYPE,
                                               p_accion      IN NUMBER, 
                                               RESULTADO     OUT NUMBER,
                                               RESULTADOTEX  OUT VARCHAR2,
                                               psIdUsuario   OUT cartcard.IC_USUARIO.id_usuario%TYPE) IS
v_existe number;
BEGIN
  select count(1)
  into v_existe
  from CARTCARD.IC_USUARIO u
  WHERE u.id_usuario = pereg.id_usuario; 

IF p_accion = 1 and v_existe = 0 THEN
      SELECT CARTCARD.USUARIOID_SEQ.NEXTVAL INTO psIdUsuario FROM DUAL;
      
      INSERT INTO CARTCARD.IC_USUARIO
        (id_usuario,id_tipo_identificacion,id_status_cuenta,id_estado,id_pais,
         id_municipio,nombre,apaterno,amaterno,calle,colonia,cp,telefono,
         correo_electronico,nombre_usuario,contrasenia,numero_identificacion,
         fecha_creacion,celular,newsletter,referencia,ciudad,fecha_nacimiento,
         usuario_modifico,ultima_modificacion)
      VALUES
        (psIdUsuario,pereg.id_tipo_identificacion,pereg.id_status_cuenta,pereg.id_estado,
         pereg.id_pais,pereg.id_municipio,pereg.nombre,pereg.apaterno,pereg.amaterno,
         pereg.calle,pereg.colonia,pereg.cp,pereg.telefono,pereg.correo_electronico,
         pereg.nombre_usuario,pereg.contrasenia,pereg.numero_identificacion,pereg.fecha_creacion,
         pereg.celular,pereg.newsletter,pereg.referencia,pereg.ciudad,pereg.fecha_nacimiento,
         pereg.usuario_modifico,SYSDATE);
         RESULTADO := 1;
         RESULTADOTEX:='Exito en la Operacion se Inserto el elemento de Alta de Usuario';
 ELSIF p_accion = 2 and v_existe != 0  THEN
 UPDATE CARTCARD.IC_USUARIO u SET
       u.id_tipo_identificacion = NVL(pereg.id_tipo_identificacion, u.id_tipo_identificacion),
       u.id_status_cuenta = NVL(pereg.id_status_cuenta, u.id_status_cuenta),
       u.id_estado= NVL(pereg.id_estado, u.id_estado),
       u.id_pais= NVL(pereg.id_pais, u.id_pais),
       u.id_municipio= NVL(pereg.id_municipio,u.id_municipio), 
       u.nombre= NVL(pereg.nombre,u.nombre),
       u.apaterno= NVL(pereg.apaterno,u.apaterno),
       u.amaterno= NVL(pereg.amaterno,u.amaterno),
       u.calle= NVL(pereg.calle,u.calle),
       u.colonia= NVL(pereg.colonia,u.colonia),
       u.cp=NVL(pereg.cp,u.cp),
       u.telefono= NVL(pereg.telefono,u.telefono),
       u.correo_electronico=NVL(pereg.correo_electronico,u.correo_electronico),
       u.nombre_usuario=NVL(pereg.nombre_usuario,u.nombre_usuario),
       u.contrasenia=NVL(pereg.contrasenia,u.contrasenia),
       u.numero_identificacion=NVL(pereg.numero_identificacion,u.numero_identificacion),
       u.fecha_creacion= NVL(pereg.fecha_creacion,u.fecha_creacion),
       u.celular=NVL(pereg.celular,u.celular),
       u.newsletter=NVL(pereg.newsletter,u.newsletter),
       u.referencia=NVL(pereg.referencia,u.referencia),
       u.ciudad=NVL(pereg.ciudad,u.ciudad),
       u.fecha_nacimiento= NVL(pereg.fecha_nacimiento,u.fecha_nacimiento),
       u.usuario_modifico= pereg.usuario_modifico,
       u.ultima_modificacion= SYSDATE
      WHERE u.id_usuario = pereg.id_usuario;  
       resultado := 2;
       resultadotex := 'Exito en la operacion se Actualizo el elemento de Alta de Usuario';

    ELSIF  p_accion = 3 and v_existe != 0  THEN
        DELETE FROM CARTCARD.IC_USUARIO U
        WHERE u.id_usuario = pereg.id_usuario;  
        resultado := 3;
        resultadotex := 'Exito en la operacion se Elimino el elemento de Alta de Usuario';
    ELSE
        resultado := 4;
        resultadotex :=  'No se Realizo ninguna accion';

    END IF;

   COMMIT;
EXCEPTION
   WHEN OTHERS THEN
     resultado := 0;
     resultadotex := SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     raise_application_error (-20120,'Error ocurrido en PKG_CATALOGOS.IC_ALTA_USUARIO_ROL(' || SQLCODE|| ''|| SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_BLOQUEACUENTA(
   p_id_tarjeta   IN    CARTCARD.IC_TARJETAS.ID_TARJETA%TYPE,
   p_usuario_modifico   IN      CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE
) IS

p_id_usuario    INTEGER;

BEGIN

	 SELECT B.ID_USUARIO INTO p_id_usuario 
	 		FROM CARTCARD.IC_TARJETAS B 
			WHERE B.ID_TARJETA=p_id_tarjeta;

	 UPDATE CARTCARD.IC_USUARIO A 
	 		SET A.ID_STATUS_CUENTA=0 
			WHERE A.ID_USUARIO=p_id_usuario;
			
	 COMMIT;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	 	  ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_BLOQUEACUENTA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Ic_Cambiaestadomercancia
(
   p_numerofolio        IN   CARTCARD.IC_MERCANCIA.FOLIO%TYPE,
   p_porcentajeseguro   IN   FLOAT,
   p_idestado           IN   CARTCARD.IC_MERCANCIA.ID_STATUS_FACTURA%TYPE,
   p_observaciones      IN   CARTCARD.IC_TRACKING_MERCANCIA.OBSERVACION%TYPE,
   p_usuario_modifico   IN   CARTCARD.IC_TRACKING_MERCANCIA.USUARIO_MODIFICO%TYPE
)
 IS
p_id_tracking   NUMBER;
p_id_mercancia  INTEGER;
p_existe        INTEGER;

BEGIN
   p_id_tracking := 0;
   p_id_mercancia:=0;
   p_existe:=0;
   
   SELECT COUNT(MERC.ID_MERCANCIA) INTO p_existe FROM CARTCARD.IC_MERCANCIA MERC
   		  WHERE MERC.FOLIO=p_numerofolio;
   
   IF p_existe!=0 THEN
   	  
	  SELECT CARTCARD.IC_SEQ_TRACKING_MERCANCIA.NEXTVAL INTO p_id_tracking 
   		  FROM DUAL;
   
	   SELECT MER.ID_MERCANCIA INTO p_id_mercancia 
	   		  FROM CARTCARD.IC_MERCANCIA MER 
			  WHERE MER.FOLIO=p_numerofolio;
   
   
	   INSERT INTO CARTCARD.IC_TRACKING_MERCANCIA A(
	   		  	   A.ID_MERCANCIA, 
				   A.ID_STATUS,
				   A.ID_TRACKING,
				   A.FECHA_ACTUALIZACION,
				   A.USUARIO_MODIFICO,
				   A.ULTIMA_MODIFICACION,
				   A.OBSERVACION  )
	   		  VALUES (p_id_mercancia,
			  		  p_idestado, 
					  p_id_tracking, 
					  SYSDATE, 
					  p_usuario_modifico,
					  SYSDATE,
					  p_observaciones);
   
   
	   UPDATE CARTCARD.IC_MERCANCIA MERC
	   		  SET MERC.ID_STATUS_MERCANCIA=p_idestado,
			  	  MERC.ID_STATUS_FACTURA=p_idestado
			  WHERE MERC.FOLIO=p_numerofolio;
	   
	   COMMIT;
   
   END IF;
   
   
   
   
   EXCEPTION
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido en IC_CAMBIAESTADOMERCANCIA   (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Cambiaestadomercancia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_DESBLOQUEACUENTA(
   p_id_tarjeta   IN    CARTCARD.IC_TARJETAS.ID_TARJETA%TYPE,
   p_usuario_modifico   IN      CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE
) IS

p_id_usuario    INTEGER;

BEGIN

   SELECT B.ID_USUARIO INTO p_id_usuario
       FROM CARTCARD.IC_TARJETAS B
      WHERE B.ID_TARJETA=p_id_tarjeta;

   UPDATE CARTCARD.IC_USUARIO A
       SET A.ID_STATUS_CUENTA=1,
           a.usuario_modifico=p_usuario_modifico,
           a.ultima_modificacion=sysdate
      WHERE A.ID_USUARIO=p_id_usuario;

   COMMIT;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizar status cuenta  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_DESBLOQUEACUENTA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Flujoinicial (
paUsuarioId CARTCARD.IC_USUARIO.ID_USUARIO%TYPE
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: IC_FLUJOINICIAL                                                */
/* Objetivo: FLUJO PARA MIGRAR USUARIO, MEMBRECIA Y TARJETA        */
/* Autor:    Equipo CartCard (Siscon)                                                   */
/* Fecha Creacion: Oct/2010                                                             */
/* Fecha Modificacion:                                                                  */
/* Ejemplo Ejecucion: exec IC_FLUJOINICIAL(<<paUsuarioId>))             */
/* ------------------------------------------------------------------------------------- */
  
BEGIN


IF CARTCARD.Ic_Existeusuario( paUsuarioId ) = 0 THEN

   CARTCARD.Ic_Migrausuario( paUsuarioId );

END IF;


IF CARTCARD.Ic_Existeusuario( paUsuarioId ) = 1 THEN

   IF CARTCARD.Ic_Existetarjeta( paUsuarioId ) = 0 THEN
    
	CARTCARD.Ic_Migratx_Creaciontarjeta(paUsuarioId);
   
   END IF;


   IF CARTCARD.Ic_Existetarjeta( paUsuarioId ) = 0 THEN
   
   	  CARTCARD.Ic_Tarjetausuarios( paUsuarioId, 'IUPICARD' );  	   	  
   
   END IF; 
   
   
   IF CARTCARD.Ic_Existesuite( paUsuarioId ) = 0 THEN
   	  
	  CARTCARD.Ic_Suiteusuario(paUsuarioId);
	  
   END IF;
   
   IF CARTCARD.Ic_Existetarjeta( paUsuarioId ) = 1 THEN
   
   	 IF CARTCARD.Ic_Existemembreciausu( paUsuarioId  ) = 0  THEN 
	 	
		CARTCARD.Ic_Membreciausuario( paUsuarioId, 'IUPICARD' );
		
	 END IF; 	   	  
   
   END IF;    

END IF;



EXCEPTION
     WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Flujoinicial;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INGRESACANALES
IS
/* ------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_INGRESACANALES          */
/* Objetivo: Inserta el catalogo de los canales de la tarjeta.           */
/* Autor:    Equipo CartCard (HB)                                           */
/* Fecha Creacion: Oct/2010                                                 */
/* Fecha Modificacion:                                                      */
/* Ejemplo Ejecucion: IC_INGRESACANALES          */
/* ------------------------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
 insert all
    into CARTCARD.IC_CAT_CANAL VALUES(1,'VENTANILLA','IUPICARD',SYSDATE)
      into CARTCARD.IC_CAT_CANAL VALUES(2,'BANCA POR INTERNET','IUPICARD',SYSDATE)
    into CARTCARD.IC_CAT_CANAL VALUES(3,'SPEI','IUPICARD',SYSDATE)
 SELECT * FROM dual;
   
   
   commit;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  rollback;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INGRESACANALES;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INGRESAESTADOSPROD IS

BEGIN
   
   INSERT INTO CARTCARD.IC_CAT_STATUS (
   	SELECT A.IDESTADO AS "ID_STATUS",
   		   A.DESCRIPCION AS "DESCRIPCION",
		   'IUPICARD' AS "USUARIO_MODIFICO",
		   SYSDATE AS "ULTIMA_MODIFICACION"
		   FROM PASARELBAZ.PCC_TIPOESTADOSPRODUCTO A
   );   
   
   COMMIT;
   
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
       RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INGRESAESTADOSPROD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INGRESASPEI(
PaIdOperacion           IN          CARTCARD.IC_SPEI.ID_OPERACION%TYPE,
PaIdFondeo              IN          CARTCARD.IC_SPEI.ID_FONDEO%TYPE,
PaReferencia            IN          CARTCARD.IC_SPEI.REFERENCIA%TYPE,

PaNumCtaCargo           IN          CARTCARD.IC_SPEI.NUM_CTA_CARGO%TYPE,
PaTitulaCtaCargo        IN          CARTCARD.IC_SPEI.TITULA_CTA_CARGO%TYPE,
PaNumCtaAbono           IN          CARTCARD.IC_SPEI.NUM_CTA_ABONO%TYPE,
PaTitulaCtaAbono        IN          CARTCARD.IC_SPEI.TITULA_CTA_ABONO%TYPE,
PaMontoMx               IN          CARTCARD.IC_SPEI.MONTO_MX%TYPE,
PaHora                  IN          CARTCARD.IC_SPEI.HORA%TYPE,

PaInstitucionEmisora    IN          CARTCARD.IC_SPEI.INSTITUCION_EMISORA%TYPE,
PaTipocambioMx          IN          CARTCARD.IC_SPEI.TIPO_CAMBIO_MX%TYPE,
PaReferenciaBaz         IN          CARTCARD.IC_SPEI.REFERENCIA_BAZ%TYPE,
PaNumingresoSpei        IN          CARTCARD.IC_SPEI.NUM_INGRESO_SPEI%TYPE,
PaCode                  IN          CARTCARD.IC_SPEI.CODE%TYPE,
PaMensaje               IN          CARTCARD.IC_SPEI.MENSAJE%TYPE,
PaStatusProceso         IN          CARTCARD.IC_SPEI.STATUS_PROCESO%TYPE,
PaUsuarioModifico       IN          CARTCARD.IC_SPEI.USUARIO_MODIFICO%TYPE
)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_INGRESASPEI                */
/* Objetivo: Inserta los spei               */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_INGRESASPEI       */
/* ------------------------------------------------------ */
   v_IdSpei          CARTCARD.IC_SPEI.ID_SPEI%TYPE;
BEGIN
   BEGIN
   
   SELECT CARTCARD.IC_SPEI_SEQ.NEXTVAL INTO v_IdSpei FROM DUAL;
   
    INSERT INTO CARTCARD.IC_SPEI SPEI
         (  SPEI.ID_SPEI,
		    SPEI.ID_OPERACION,
		    SPEI.ID_FONDEO,
		    SPEI.REFERENCIA,
		    SPEI.FECHA_OPERACION,
		    SPEI.NUM_CTA_CARGO,
		    SPEI.TITULA_CTA_CARGO,
		    SPEI.NUM_CTA_ABONO,
		    SPEI.TITULA_CTA_ABONO,
		    SPEI.MONTO_MX,
		    SPEI.HORA,
		    SPEI.FECHA_APLICACION,
		    SPEI.INSTITUCION_EMISORA,
		    SPEI.TIPO_CAMBIO_MX,
		    SPEI.REFERENCIA_BAZ,
		    SPEI.NUM_INGRESO_SPEI,
		    SPEI.CODE,
		    SPEI.MENSAJE,
		    SPEI.STATUS_PROCESO,
			SPEI.USUARIO_MODIFICO,
			SPEI.ULTIMA_MODIFICACION )
		  VALUES (
		    v_IdSpei,
		    PaIdOperacion,
		    PaIdFondeo,
		    PaReferencia,
		    sysdate,
		    PaNumCtaCargo,
		    PaTitulaCtaCargo,
		    PaNumCtaAbono,
		    PaTitulaCtaAbono,
		    PaMontoMx,
		    PaHora,
		    sysdate,
		    PaInstitucionEmisora,
		    PaTipocambioMx,
		    PaReferenciaBaz,
		    PaNumingresoSpei,
		    PaCode,
		    PaMensaje,
		    PaStatusProceso,
			PaUsuarioModifico,
			SYSDATE			
		    );
 

   COMMIT;
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INGRESASPEI;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INGRESATIPOPAGO
IS
/* ------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_INGRESATIPOPAGO         */
/* Objetivo: Inserta el catalogo de los tipos de pago de la tarjeta.           */
/* Autor:    Equipo CartCard (HB)                                           */
/* Fecha Creacion: Oct/2010                                                 */
/* Fecha Modificacion:                                                      */
/* Ejemplo Ejecucion: IC_INGRESATIPOPAGO          */
/* ------------------------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
 insert all
    into CARTCARD.IC_CAT_TIPO_PAGO VALUES(1,'MEMBRECIA','IUPICARD',SYSDATE)
      into CARTCARD.IC_CAT_TIPO_PAGO VALUES(2,'FONDEO','IUPICARD',SYSDATE)    
 SELECT * FROM dual;
   
   COMMIT;
   END;
EXCEPTION
     WHEN OTHERS THEN
	 ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INGRESATIPOPAGO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INGRESATIPOSERVICIO(
PaUsuarioModifico       IN          CARTCARD.IC_CAT_TIPO_SERVICIO.USUARIO_MODIFICO%TYPE
)
IS
/* ------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_INGRESATIPOPAGO         */
/* Objetivo: Inserta el catalogo de los tipos de pago de la tarjeta.           */
/* Autor:    Equipo CartCard (HB)                                           */
/* Fecha Creacion: Oct/2010                                                 */
/* Fecha Modificacion:                                                      */
/* Ejemplo Ejecucion: IC_INGRESATIPOPAGO          */
/* ------------------------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
 insert all
    into CARTCARD.IC_CAT_TIPO_SERVICIO VALUES(1,'DEVOLUCION',PaUsuarioModifico ,SYSDATE)
    into CARTCARD.IC_CAT_TIPO_SERVICIO VALUES(6,'IMPORTACION DIA SIGUIENTE',PaUsuarioModifico ,SYSDATE)
 into CARTCARD.IC_CAT_TIPO_SERVICIO VALUES(7,'IMPORTACION TERRESTRE',PaUsuarioModifico ,SYSDATE)    
 SELECT * FROM dual;
   
   COMMIT;
   END;
EXCEPTION
     WHEN OTHERS THEN
  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INGRESATIPOSERVICIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INGRESAVENTANILLA (
PaIdFondeo                IN          CARTCARD.IC_VENTANILLA.ID_FONDEO%TYPE,
PaNumeroSucursal          IN          CARTCARD.IC_VENTANILLA.NUMERO_SUCURSAL%TYPE,
PaNumeroOperador          IN          CARTCARD.IC_VENTANILLA.NUMERO_OPERADOR%TYPE,
PaIpAddress               IN          CARTCARD.IC_VENTANILLA.IP_ADDRESS%TYPE,
PaUsuarioModifico         IN          CARTCARD.IC_VENTANILLA.USUARIO_MODIFICO%TYPE
)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_INGRESAVENTANILLA             */
/* Objetivo: Inserta los fondeos por ventanilla        */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_INGRESAVENTANILLA       */
/* ------------------------------------------------------ */
   v_IdVentanilla          CARTCARD.IC_VENTANILLA.ID_VENTANILLA%TYPE;
BEGIN
   BEGIN
   
    SELECT CARTCARD.IC_VENTANILLA_SEQ.NEXTVAL INTO v_IdVentanilla FROM DUAL;
   
    INSERT INTO CARTCARD.IC_VENTANILLA VENT
        ( VENT.ID_VENTANILLA,
          VENT.ID_FONDEO,
		  VENT.NUMERO_SUCURSAL,
          VENT.NUMERO_OPERADOR,       
          VENT.IP_ADDRESS,
		  USUARIO_MODIFICO,
		  ULTIMA_MODIFICACION 		   		  
      ) VALUES (
          v_IdVentanilla,
		  PaIdFondeo,
		  PaNumeroOperador,          
		  PaNumeroSucursal,          
          PaIpAddress,
		  PaUsuarioModifico,
		  sysdate
		   );
		  
   COMMIT;	        
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INGRESAVENTANILLA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INSERTABXI ( 
	   ID_FONDEO 			IN			  CARTCARD.IC_BXI.ID_FONDEO%TYPE ,
	   IP_ADDRESS  			IN			  CARTCARD.IC_BXI.IP_ADDRESS%TYPE,	   
	   USUARIO_WEB			IN			  CARTCARD.IC_BXI.USUARIO_WEB%TYPE, 
	   SUCURSAL_WEB			IN			  CARTCARD.IC_BXI.SUCURSAL_WEB%TYPE,
	   USUARIO_MODIFICO		IN			  CARTCARD.IC_BXI.USUARIO_MODIFICO%TYPE
) IS
idBxi INTEGER;

BEGIN
   idBxi := 0;
   
   SELECT CARTCARD.IC_BXIS.NEXTVAL INTO idBxi FROM DUAL;
   
   INSERT INTO CARTCARD.IC_BXI(ID_BXI, IP_ADDRESS, ID_FONDEO, USUARIO_WEB, SUCURSAL_WEB,USUARIO_MODIFICO,ULTIMA_MODIFICACION ) 
   		  VALUES(idBxi,IP_ADDRESS, ID_FONDEO,USUARIO_WEB, SUCURSAL_WEB, USUARIO_MODIFICO, SYSDATE);
   
   COMMIT;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INSERTABXI;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INSERTAFONDEOSWS(
   P_ID_TIPO_PAGO   			IN       CARTCARD.IC_FONDEOS_WS.ID_TIPO_PAGO%TYPE ,
   P_ID_TARJETA					IN       CARTCARD.IC_FONDEOS_WS.ID_TARJETA%TYPE ,
   P_STATUS_FONDEO   			IN       CARTCARD.IC_FONDEOS_WS.STATUS_FONDEO%TYPE ,
   P_ID_CANAL   				IN       CARTCARD.IC_FONDEOS_WS.ID_CANAL%TYPE ,
   P_REFERENCIA   				IN       CARTCARD.IC_FONDEOS_WS.REFERENCIA%TYPE ,
   P_MONTO_RECIBIDO_DLS   		IN       CARTCARD.IC_FONDEOS_WS.MONTO_RECIBIDO_DLS%TYPE ,
   P_TIPO_CAMBIO_MX   			IN       CARTCARD.IC_FONDEOS_WS.TIPO_CAMBIO_MX%TYPE ,
   P_COMISION_OPE_DLS   		IN       CARTCARD.IC_FONDEOS_WS.COMISION_OPE_DLS%TYPE ,
   P_MONTO_RECIBIDO_MX   		IN       CARTCARD.IC_FONDEOS_WS.MONTO_RECIBIDO_DLS%TYPE ,
   P_PAGO_CARDMARTE_DLS   		IN       CARTCARD.IC_FONDEOS_WS.PAGO_CARDMARTE_DLS%TYPE ,
   P_FECHA_SOLICITUD_OPE		IN       VARCHAR2,
   P_FECHA_APLICACION_OPE		IN       VARCHAR2,
   P_USUARIO_DEPOSITANTE		IN       CARTCARD.IC_FONDEOS_WS.USUARIO_DEPOSITANTE%TYPE ,
   P_MONTO_FONDEADO_DLS			IN       CARTCARD.IC_FONDEOS_WS.MONTO_FONDEADO_DLS%TYPE,
   P_USUARIO_MODIFICO 			IN		 CARTCARD.IC_FONDEOS_WS.USUARIO_MODIFICO%TYPE, 
   P_ID_FONDEO     				OUT      CARTCARD.IC_FONDEOS_WS.ID_FONDEO%TYPE
) IS
  
  

BEGIN
   P_ID_FONDEO := 0;
   
   SELECT CARTCARD.IC_FONDEOSWS.NEXTVAL INTO P_ID_FONDEO FROM DUAL;
   
   INSERT INTO CARTCARD.IC_FONDEOS_WS VALUES(
   		  P_ID_FONDEO,
		  P_ID_TIPO_PAGO,
   		  P_ID_TARJETA,
   		  P_STATUS_FONDEO,
  		  P_ID_CANAL,
   		  P_REFERENCIA,
   		  P_MONTO_RECIBIDO_DLS,
   		  P_TIPO_CAMBIO_MX,
   		  P_COMISION_OPE_DLS,
   		  P_MONTO_RECIBIDO_MX,
   		  P_PAGO_CARDMARTE_DLS,
   		  TO_DATE(P_FECHA_SOLICITUD_OPE, 'ddMMYYYY-HH24:MI:ss' ),
   		  TO_DATE(P_FECHA_APLICACION_OPE, 'ddMMYYYY-HH24:MI:ss' ),
   		  P_USUARIO_DEPOSITANTE,
   		  P_MONTO_FONDEADO_DLS,
		  P_USUARIO_MODIFICO,
		  SYSDATE
   );
   
   COMMIT;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INSERTAFONDEOSWS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INSERTAMEM_APAGAR (
   p_costo        IN   CARTCARD.IC_CAT_TIPO_MEMBRESIA.COSTO%TYPE,
   p_usuarioid    IN   CARTCARD.IC_MEMBRECIAS_PORPAGAR.ID_USUARIO%TYPE,
   p_usuariomodifico   IN      CARTCARD.IC_MEMBRECIAS_PORPAGAR.USUARIO_MODIFICO%TYPE
)IS

p_id_tipo_membrecia integer;
p_id_membrecia integer;
p_existe integer;

BEGIN
   
   SELECT COUNT(1) INTO p_existe FROM CARTCARD.IC_MEMBRECIAS_PORPAGAR B 
          WHERE B.ID_USUARIO= p_usuarioid;
   
   IF p_existe = 0 then 
   
	   SELECT A.ID_TIPO_MEMBRESIA into p_id_tipo_membrecia 
			  		 FROM CARTCARD.IC_CAT_TIPO_MEMBRESIA A 
					 WHERE A.COSTO=p_costo;
					 
	   SELECT CARTCARD.IC_SEQMEMBRECIAAPAGAR.NEXTVAL INTO p_id_membrecia from DUAL;
	   
	   INSERT INTO CARTCARD.IC_MEMBRECIAS_PORPAGAR C (C.ID_MEMBRECIA, C.ID_TIPO_MEMBRECIA, C.ID_USUARIO,C.USUARIO_MODIFICO,C.ULTIMA_MODIFICACION )
	   		  VALUES (p_id_membrecia, p_id_tipo_membrecia, p_usuarioid,p_usuariomodifico,SYSDATE );
   
   ELSE 
   		
		SELECT A.ID_TIPO_MEMBRESIA into p_id_tipo_membrecia 
			  		 FROM CARTCARD.IC_CAT_TIPO_MEMBRESIA A 
					 WHERE A.COSTO=p_costo;
   
   		UPDATE CARTCARD.IC_MEMBRECIAS_PORPAGAR C 
			   SET C.ID_TIPO_MEMBRECIA=p_id_tipo_membrecia,
			   	   C.USUARIO_MODIFICO=p_usuariomodifico,
				   C.ULTIMA_MODIFICACION=SYSDATE
			   WHERE C.ID_USUARIO=p_usuarioid;
   
   END IF;
   
   COMMIT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	 ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_INSERTAMEM_APAGAR;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INSERTAMEM_APAGAR2 (
   p_idTipoMembrecia   IN      CARTCARD.IC_CAT_TIPO_MEMBRESIA.ID_TIPO_MEMBRESIA%TYPE,
   p_usuarioid         IN      CARTCARD.IC_MEMBRECIAS_PORPAGAR.ID_USUARIO%TYPE,
   p_usuariomodifico   IN      CARTCARD.IC_MEMBRECIAS_PORPAGAR.USUARIO_MODIFICO%TYPE)
   IS

p_id_membrecia integer;
p_existe integer;

BEGIN
   
   SELECT COUNT(1) INTO p_existe FROM CARTCARD.IC_MEMBRECIAS_PORPAGAR B 
          WHERE B.ID_USUARIO= p_usuarioid;
   
   IF p_existe = 0 then 
   
	   SELECT CARTCARD.IC_SEQMEMBRECIAAPAGAR.NEXTVAL INTO p_id_membrecia from DUAL;
	   
	   INSERT INTO CARTCARD.IC_MEMBRECIAS_PORPAGAR C (C.ID_MEMBRECIA, C.ID_TIPO_MEMBRECIA, C.ID_USUARIO,C.USUARIO_MODIFICO,C.ULTIMA_MODIFICACION )
	   		  VALUES (p_id_membrecia, p_idTipoMembrecia, p_usuarioid,p_usuariomodifico,SYSDATE );
   
   ELSE 
   		
   		UPDATE CARTCARD.IC_MEMBRECIAS_PORPAGAR C 
			   SET C.ID_TIPO_MEMBRECIA=p_idTipoMembrecia,
			   	   C.USUARIO_MODIFICO=p_usuariomodifico,
				   C.ULTIMA_MODIFICACION=SYSDATE
			   WHERE C.ID_USUARIO=p_usuarioid;
   
   END IF;
   
   COMMIT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	 ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_INSERTAMEM_APAGAR2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Insertamovimiento(
   P_ID_TIPO_PAGO          IN    CARTCARD.ICN_MOVIMIENTOS.ID_TIPO_PAGO%TYPE , --ID_TIPO_PAGO
   P_ID_TARJETA            IN    CARTCARD.ICN_MOVIMIENTOS.REFERENCIA%TYPE , --ID_TARJETA
   P_STATUS_FONDEO         IN    CARTCARD.ICN_MOVIMIENTOS.ESTATUS_ANN%TYPE , --STATUS_FONDEO
   P_ID_CANAL              IN    CARTCARD.ICN_MOVIMIENTOS.ID_CANAL%TYPE , --ID_CANAL
   P_REFERENCIA            IN    CARTCARD.ICN_MOVIMIENTOS.REFERENCIA%TYPE , --REFERENCIA
   P_MONTO_RECIBIDO_DLS    IN    CARTCARD.ICN_MOVIMIENTOS.IMPORTE_DLS%TYPE , --MONTO_RECIBIDO_DLS
   P_TIPO_CAMBIO_MX        IN    CARTCARD.ICN_MOVIMIENTOS.TIPO_CAMBIO%TYPE , --TIPO_CAMBIO_MX
   P_COMISION_OPE_DLS      IN    CARTCARD.ICN_MOVIMIENTOS.COMISION_DLS%TYPE , --COMISION_OPE_DLS
   P_MONTO_RECIBIDO_MX     IN    CARTCARD.ICN_MOVIMIENTOS.IMPORTE_MX%TYPE , --MONTO_RECIBIDO_DLS
   --P_PAGO_CARDMARTE_DLS     IN       CARTCARD.IC_FONDEOS_WS.PAGO_CARDMARTE_DLS%TYPE ,
   P_FECHA_SOLICITUD_OPE   IN    VARCHAR2, --FECHA_APLICACION
   P_FECHA_APLICACION_OPE  IN    VARCHAR2, --ULTIMA_MODIFICACION
   P_USUARIO_DEPOSITANTE   IN    CARTCARD.ICN_MOVIMIENTOS.USUARIO%TYPE , --USUARIO_DEPOSITANTE
   --P_MONTO_FONDEADO_DLS   IN       CARTCARD.IC_FONDEOS_WS.MONTO_FONDEADO_DLS%TYPE, 
   P_USUARIO_MODIFICO      IN    CARTCARD.ICN_MOVIMIENTOS.USUARIO_MODIFICO%TYPE, --USUARIO_MODIFICO
   P_ID_FONDEO             OUT   CARTCARD.ICN_MOVIMIENTOS.ID_MOVIMIENTO%TYPE --ID_FONDEO
) IS

BEGIN
   P_ID_FONDEO := 0;

   SELECT MAX(ID_MOVIMIENTO)+1 INTO P_ID_FONDEO FROM CARTCARD.ICN_MOVIMIENTOS;

   INSERT INTO CARTCARD.ICN_MOVIMIENTOS (
      ID_MOVIMIENTO,
      ID_TIPO_PAGO,
      ESTATUS_ANN,
      ID_CANAL,
      REFERENCIA,
      IMPORTE_DLS,
      TIPO_CAMBIO,
      COMISION_DLS,
      IMPORTE_MX,
      FECHA_APLICACION,
      ULTIMA_MODIFICACION,
      USUARIO,
      USUARIO_MODIFICO)
   VALUES(
      P_ID_FONDEO,
      P_ID_TIPO_PAGO,
      P_STATUS_FONDEO,
      P_ID_CANAL,
      P_REFERENCIA,
      P_MONTO_RECIBIDO_DLS,
      P_TIPO_CAMBIO_MX,
      P_COMISION_OPE_DLS,
      P_MONTO_RECIBIDO_MX,
       --P_PAGO_CARDMARTE_DLS,
      TO_DATE(P_FECHA_SOLICITUD_OPE, 'ddMMYYYY-HH24:MI:ss' ),
      TO_DATE(P_FECHA_APLICACION_OPE, 'ddMMYYYY-HH24:MI:ss' ),
      P_USUARIO_DEPOSITANTE,
       --P_MONTO_FONDEADO_DLS,
      P_USUARIO_MODIFICO
    --, SYSDATE
   );
   
   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      NULL;
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Insertamovimiento;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INSERTAREFERENCIAUSR(
	   p_referencia         OUT      CARTCARD.IC_USUARIO.REFERENCIA%TYPE,
  	   p_cartcardid         OUT      CARTCARD.CARD.CARTCARDID%TYPE,
	   p_usuariomodifico    IN       CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE
) IS


BEGIN

   
   SELECT NVL (MAX (cartcardid), 413) + 1, CARTCARD.generareferencia
           INTO p_cartcardid, p_referencia
           FROM CARTCARD.card;
   
   INSERT INTO CARTCARD.IC_USUARIO A ( A.REFERENCIA, A.USUARIO_MODIFICO, A.ULTIMA_MODIFICACION ) 
   		  VALUES(p_referencia, p_usuariomodifico, SYSDATE);
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
      RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_INSERTAREFERENCIAUSR;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_INSERTATXCMLOAD(
	   P_ID_FONDEO  			IN		CARTCARD.IC_TX_CARDMARTE_LOAD.ID_FONDEO%TYPE ,
	   P_PTERMINALCODE			IN		CARTCARD.IC_TX_CARDMARTE_LOAD.PTERMINALCODE%TYPE ,
	   P_PTRANSAMOUNT			IN		CARTCARD.IC_TX_CARDMARTE_LOAD.PTRANSAMOUNT%TYPE ,
	   P_REQUESTID				IN		CARTCARD.IC_TX_CARDMARTE_LOAD.REQUESTID%TYPE ,
	   P_FECHA_EJECUCION		IN		CARTCARD.IC_TX_CARDMARTE_LOAD.FECHA_EJECUCION%TYPE ,
	   P_RESULTCODE				IN		CARTCARD.IC_TX_CARDMARTE_LOAD.RESULTCODE%TYPE ,
	   P_RESULTMESSAGE			IN		CARTCARD.IC_TX_CARDMARTE_LOAD.RESULTMESSAGE%TYPE ,
	   P_TRANSACTIONNUMBER		IN		CARTCARD.IC_TX_CARDMARTE_LOAD.TRANSACTIONNUMBER%TYPE ,
	   P_AMOUNT					IN		CARTCARD.IC_TX_CARDMARTE_LOAD.AMOUNT%TYPE ,
	   P_PCARDNUMBER			IN		CARTCARD.IC_TX_CARDMARTE_LOAD.PCARDNUMBER%TYPE ,
	   P_OPERATIONID			IN		CARTCARD.IC_TX_CARDMARTE_LOAD.OPERATIONID%TYPE,
	   P_USUARIO_MODIFICO 		IN		CARTCARD.IC_TX_CARDMARTE_LOAD.USUARIO_MODIFICO%TYPE
) IS
idTxCardMarteLoad INTEGER;

BEGIN
   idTxCardMarteLoad := 0;
   
   SELECT CARTCARD.IC_TXCMLOAD.NEXTVAL INTO idTxCardMarteLoad FROM DUAL;
   
   INSERT INTO CARTCARD.IC_TX_CARDMARTE_LOAD A
   		        (ID_LOAD, ID_FONDEO, PTERMINALCODE, PTRANSAMOUNT, REQUESTID, FECHA_EJECUCION, 
				RESULTCODE, RESULTMESSAGE, TRANSACTIONNUMBER, AMOUNT, PCARDNUMBER, OPERATIONID,
				USUARIO_MODIFICO, ULTIMA_MODIFICACION)
   		  VALUES(idTxCardMarteLoad,
		  		 P_ID_FONDEO,
	   			 P_PTERMINALCODE,
	   			 P_PTRANSAMOUNT,
	   			 P_REQUESTID,
	   			 P_FECHA_EJECUCION,
	   			 P_RESULTCODE,
	   			 P_RESULTMESSAGE,
	   			 P_TRANSACTIONNUMBER,
	   			 P_AMOUNT,
	   			 P_PCARDNUMBER,
	   			 P_OPERATIONID,
				 P_USUARIO_MODIFICO,
				 SYSDATE
		  );
   
   COMMIT;
   EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_INSERTATXCMLOAD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Membreciausuario(
paUsuarioId IN CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
paUsuarioModifico  IN  CARTCARD.IC_USUARIO.USUARIO_MODIFICO%TYPE
)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_MEMBRECIAUSUARIO              */
/* Objetivo: Inserta los Membrecia de usuarios           */
/* Autor:    Equipo CartCard (HB)                         */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_MEMBRECIAUSUARIO             */
/* ------------------------------------------------------ */
   
   p_existe INTEGER;
   p_id_membrecia INTEGER;
BEGIN
   BEGIN
   
   SELECT COUNT(1) INTO p_existe
   	   FROM CARTCARD.CARD C, CARTCARD.IC_TARJETAS T
       WHERE C.CARTCARDID = T.ID_TARJETA AND 
       		 C.FECHAVENCIMIENTO > SYSDATE AND
  			 C.USUARIOID = T.ID_USUARIO AND
  			 T.ID_USUARIO = paUsuarioId;
   
   IF p_existe >0 THEN
   
   SELECT CARTCARD.IC_MEMBRECIAS.NEXTVAL INTO p_id_membrecia FROM DUAL;
      
   	  INSERT INTO CARTCARD.IC_MEMBRESIAS
		   SELECT p_id_membrecia AS ID_MEMBRESIA, 
		      	  CARTCARDID AS ID_TARJETA , 
		      	  MEMBRECIAID  AS ID_TIPO_MEMBRESIA,
		      	  FECHAALTA AS    FECHA_EMISION, 
		      	  FECHAVENCIMIENTO AS  FECHA_EXPIRACION,
				  NVL(NULL,paUsuarioModifico) "USUARIO_MODIFICO",
				  NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION" 
	   	   FROM CARTCARD.CARD C, CARTCARD.IC_TARJETAS T
	       WHERE C.CARTCARDID = T.ID_TARJETA AND 
	       		 C.FECHAVENCIMIENTO > SYSDATE AND
	  			 C.USUARIOID = T.ID_USUARIO AND
	  			 T.ID_USUARIO = paUsuarioId   
	       ORDER BY 2;
	
		   COMMIT;
   
   END IF;
	   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Membreciausuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_MIGRAPREGUNTAS IS


BEGIN
   insert into IC_CAT_PREGUNTA_SECRETA(
	   SELECT A.IDPREGUNTAESTANDAR AS ID_PREGUNTA_SECRETA,
	          A.PREGUNTA AS PREGUNTA,
			  NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
			  NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION"
			  FROM CARTCARD.PREGUNTASESTANDAR A
	   );
	COMMIT;
   EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_MIGRAPREGUNTAS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_MIGRASTATUSFAC IS

BEGIN

	 INSERT INTO CARTCARD.IC_CAT_STATUS_FACTURA (
	 		SELECT A.IDESTADO AS ID_STATUS,
				   A.DESCRIPCION AS DESCRIPCION
			FROM PASARELBAZ.PCC_TIPOESTADOSPRODUCTO A
	 );

	 COMMIT;
	 
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_MIGRASTATUSFAC;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Ic_Migratx_Creaciontarjeta ( p_usuarioId   IN    INTEGER) IS
p_cartcardid NUMBER;
p_id_pcc     NUMBER;
p_existe     NUMBER;
BEGIN
   p_cartcardid := 0;
   SELECT MAX(A.CARTCARDID) INTO p_cartcardid FROM CARTCARD.CARD A WHERE A.USUARIOID=p_usuarioId;
   SELECT COUNT(1) INTO p_existe
   FROM PASARELBAZ.PCC_CREACIONTARJETA A, PASARELBAZ.PCC_TARJETASCARDMARTE B
   WHERE A.CARTCARDID=p_cartcardid AND A.CARTCARDID=B.CARTCARDID AND A.NUMEROTARJETA=B.NUMEROTARJETA;
   IF 0 < p_existe THEN
      SELECT CARTCARD.IC_TXCARDMARTE.NEXTVAL INTO p_id_pcc FROM DUAL;
               INSERT INTO CARTCARD.IC_TX_CARDMARTE_PCARDCREATION(
                ID_PCC,
                ID_USUARIO,
                PTERMINALCODE,
                PRODUCTCODE,
                PID,
                PIDTYPE,
                PRBSERVICE,
                PDATEOFBIRTH,
                PEMBOSSEDNAME,
                PTELEPHONEAREACODE,
                PTELEPHONE,
                PFAXAREACODE,
                PFAXPHONE,
                PCELLPHONE,
                PCELLPHONEAREACODE,
                PIDEXPIRATION,
                PIDCOUNTRY,
                PIDSTATE,
                PLASTNAME,
                PMAINDENNAME,
                PMIDDLENAME,
                PFIRSTNAME,
                PCOUNTRY,
                PSTATE,
                PCITY,
                PADDRESS,
                PZIPCODE,
                PEMAIL,
                REQUESTID,
                FECHA_EJECUCION,
                OPERATIONID,
                RESULTCODE,
                RESULTMESSAGE,
                TOKEN,
                CARDNUMBER,
                EMBOSEEDNAME,
                EXPIRATIONDATE,
                VERIFICATIONCODE,
                USUARIO_MODIFICO,
                ULTIMA_MODIFICACION)
                         SELECT NVL(NULL, p_id_pcc) "ID_PCC",
                         NVL(NULL, p_usuarioId) "ID_USUARIO",
                          A.PTERMINALCODE AS "PTERMINALCODE",
                          A.PPRODUCTCODE AS "PRODUCTCODE",
                          A.PID AS "PID",
                          A.PIDTYPE AS "PIDTYPE",
                          TO_CHAR(A.PRBSERVICE) AS "PRBSERVICE",
                          A.PDATEOFBIRTH AS "PDATEOFBIRTH",
                          A.PEMBOSSEDNAME AS "PEMBOSSEDNAME",
                          A.PTELEPHONEAREACODE AS "PTELEPHONEAREACODE",
                          A.PTELEPHONE AS "PTELEPHONE",
                          NVL(NULL, 0) "PFAXAREACODE",
                          NVL(NULL, ' ') "PFAXPHONE",
                          NVL(NULL, ' ') "PCELLPHONE",
                          NVL(NULL, 0) "PCELLPHONEAREACODE",
                          A.PIDEXPIRATION AS "PIDEXPIRATION",
                          A.PIDCOUNTRY AS "PIDCOUNTRY",
                          A.PIDSTATE AS "PIDSTATE",
                          A.PLASTNAME AS "PLASTNAME",
                          NVL(NULL, ' ') "PMAINDENNAME",
                          NVL(NULL, ' ') "PMIDDLENAME",
                          A.PFIRSTNAME AS "PFIRSTNAME",
                          A.PCOUNTRY AS "PCOUNTRY",
                          A.PSTATE AS "PSTATE",
                          A.PCITY AS "PCITY",
                          A.PADDRESS AS "PADDRESS",
                          A.PZIPCODE AS "PZIPCODE",
                          A.PEMAIL AS "PEMAIL",
                          B.REQUESTID AS "REQUESTID",
                          NVL(NULL,SYSDATE) "FECHA_EJECUCION",
                          B.OPERATIONID AS "OPERATIONID",
                          B.RESULTCODE AS "RESULTCODE",
                          B.RESULTMESSAGE AS "RESULTMESSAGE",
                          B.TOKENTARJETA AS "TOKEN",
                          B.NUMEROTARJETA AS "CARDNUMBER",
                          B.EMBOSSEDNAME AS "EMBOSEEDNAME",
                          B.FECHAEXPIRACION AS "EXPIRATIONDATE",
                          B.CVV AS "VERIFICATIONCODE",
                          NVL(NULL, 'IUPICARD') "USUARIO_MODIFICO",
                          NVL(NULL, SYSDATE) "ULTIMA_MODIFICACION"
                    FROM PASARELBAZ.PCC_CREACIONTARJETA A, PASARELBAZ.PCC_TARJETASCARDMARTE B
                             WHERE A.CARTCARDID=p_cartcardid AND
                                    A.CARTCARDID=B.CARTCARDID AND
                                  A.NUMEROTARJETA=B.NUMEROTARJETA;
               COMMIT;
    END IF;
   EXCEPTION
     WHEN OTHERS THEN
       ROLLBACK;
  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido Ic_Migratx_Creaciontarjeta  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Migratx_Creaciontarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_MIGRAUSUARIO(
paUsuarioId IN CARTCARD.IC_USUARIO.ID_USUARIO%TYPE
)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_MIGRAUSUARIO               */
/* Objetivo: Inserta el usuario            */
/* Autor:    Equipo CartCard (HB)                         */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_MIGRAUSUARIO            */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
 INSERT INTO CARTCARD.IC_USUARIO
	  SELECT U.USUARIOID AS ID_USUARIO, 
	  		 U.IDENTIFICACIONID AS ID_TIPO_IDENTIFICACION,
	   		 U.ESTADODECUENTAID AS ID_STATUS_CUENTA, 
			 U.ESTADOID  AS ID_ESTADO, 
			 U.PAISID AS ID_PAIS, 
	   		 U.MUNICIPIOID AS ID_MUNICIPIO, 
			 U.NOMBRE, 
			 U.APATERNO, 
			 U.AMATERNO, 
			 U.CALLE, 
			 U.COLONIA , 
	   		 U.CODIGOPOSTAL  AS  CP, 
			 U.TELEFONO, 
			 U.MAIL AS CORREO_ELECTRONICO , 
	   		 U.NOMBREUSUARIO AS NOMBRE_USUARIO, 
			 U.CONTRASENIA, 
			 U.NUMEROIDENTIFICACION AS NUMERO_IDENTIFICACION,
	   		 C.FECHASYS AS FECHA_CREACION, 
			 U.CELULAR, 
			 U.NEWS_LETTER AS NEWSLETTER,
			 C.REFERENCIA,
			 U.CIUDAD,
			 U.FECHANACIMIENTO,
			 'IUPICARD',
			 SYSDATE 
	  FROM CARTCARD.USUARIO U, CARTCARD.IC_MUNICIPIO M, CARTCARD.IC_PAIS P, 
	       CARTCARD.IC_ESTADO E, CARTCARD.IC_CAT_TIPO_IDENTIFICACION IDI, 
		   CARTCARD.CARD C
	  WHERE U.PAISID = P.ID_PAIS AND U.ESTADOID = E.ID_ESTADO AND 
	   U.MUNICIPIOID = M.ID_MUNICIPIO AND E.ID_PAIS = P.ID_PAIS
	      AND M.ID_PAIS = P.ID_PAIS AND M.ID_ESTADO = E.ID_ESTADO 
	      AND IDI.ID_TIPO_IDENTIFICACION  = U.IDENTIFICACIONID  AND U.USUARIOID = paUsuarioId
		  AND C.USUARIOID = U.USUARIOID;
   
   commit;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_MIGRAUSUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          IC_NVUSUARIOCARDMARTE(
    paidusuario    IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.ID_USUARIO%TYPE,
    papterminalcode   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PTERMINALCODE%TYPE,
    paproductcode   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PRODUCTCODE%TYPE,
    papid     IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PID%TYPE,
    papidtype    IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PIDTYPE%TYPE,
    paprbservice   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PRBSERVICE%TYPE,
    papdateofbirth   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PDATEOFBIRTH%TYPE,
    papembossedname   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PEMBOSSEDNAME%TYPE,
    paptelephoneareacode IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PTELEPHONEAREACODE%TYPE,
    paptelephone   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PTELEPHONE%TYPE,
    papfaxareacode   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PFAXAREACODE%TYPE,
    papfaxphone    IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PFAXPHONE%TYPE,
    papcellphone   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PCELLPHONE%TYPE,
    papcellphoneareacode IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PCELLPHONEAREACODE%TYPE,
    papidexpiration   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PIDEXPIRATION%TYPE,
    papidcountry   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PIDCOUNTRY%TYPE,
    papidstate    IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PIDSTATE%TYPE,
    paplastname    IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PLASTNAME%TYPE,
    papmaindenname IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PMAINDENNAME%TYPE,
    papmiddlename IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PMIDDLENAME%TYPE,
    papfirstname IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PFIRSTNAME%TYPE,
    papcountry  IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PCOUNTRY%TYPE,
    papstate  IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PSTATE%TYPE,
    papcity   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PCITY%TYPE,
    papaddress  IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PADDRESS%TYPE,
    papzipcode  IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PZIPCODE%TYPE,
    papemail  IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.PEMAIL%TYPE,
    parequestid  IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.REQUESTID%TYPE,
    pafechaejecucion IN VARCHAR2,
    paoperationid IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.OPERATIONID%TYPE,
    paresultcode IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.RESULTCODE%TYPE,
    paresultmessage IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.RESULTMESSAGE%TYPE,
    patoken   IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.TOKEN%TYPE,
    pacardnumber IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.CARDNUMBER%TYPE,
    paemboseedname IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.EMBOSEEDNAME%TYPE,
    paexpirationdate IN VARCHAR2,
    paverificationcode IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.VERIFICATIONCODE%TYPE,
    pusuario_modifico  IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.USUARIO_MODIFICO%TYPE,
    paidpcc OUT CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.ID_PCC%TYPE) IS v_seq_id_pcc INTEGER;
BEGIN
    select CARTCARD.IC_TXCARDMARTE.NEXTVAL INTO v_seq_id_pcc FROM DUAL;
    
    insert into CARTCARD.IC_TX_CARDMARTE_PCARDCREATION (
      ID_PCC, ID_USUARIO, PTERMINALCODE, PRODUCTCODE, PID, PIDTYPE, PRBSERVICE, PDATEOFBIRTH, PEMBOSSEDNAME,
    PTELEPHONEAREACODE, PTELEPHONE, PFAXAREACODE, PFAXPHONE, PCELLPHONE, PCELLPHONEAREACODE, PIDEXPIRATION, PIDCOUNTRY,
    PIDSTATE, PLASTNAME, PMAINDENNAME, PMIDDLENAME, PFIRSTNAME, PCOUNTRY, PSTATE, PCITY, PADDRESS, PZIPCODE, PEMAIL,
    REQUESTID, FECHA_EJECUCION, OPERATIONID, RESULTCODE, RESULTMESSAGE,
    TOKEN, CARDNUMBER, EMBOSEEDNAME, EXPIRATIONDATE,
    VERIFICATIONCODE, USUARIO_MODIFICO, ULTIMA_MODIFICACION
    ) VALUES (
       v_seq_id_pcc, paidusuario, papterminalcode, paproductcode, papid, papidtype, paprbservice, papdateofbirth, papembossedname,
    paptelephoneareacode, paptelephone, papfaxareacode, papfaxphone, papcellphone, papcellphoneareacode, papidexpiration,
    papidcountry, papidstate, paplastname, papmaindenname, papmiddlename, papfirstname, papcountry, papstate, papcity,
    papaddress, papzipcode, papemail, parequestid, TO_DATE(pafechaejecucion, 'ddMMYYYY-HH24:MI:ss' ),
    paoperationid, paresultcode, paresultmessage,     patoken, pacardnumber, paemboseedname, TO_DATE(paexpirationdate, 'YYYYMMdd' ),
    paverificationcode, pusuario_modifico, sysdate
   );
   paidpcc:=v_seq_id_pcc;
   commit;
EXCEPTION
     WHEN OTHERS THEN
           rollback;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido IC_NVUSUARIOCARDMARTE  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_NVUSUARIOCARDMARTE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_OBTIENEDATOSUSR (
   pusuarioid       IN       INTEGER,
   pnombre          OUT      VARCHAR2,
   papellidos       OUT      VARCHAR2,
   pnombreusuario   OUT      VARCHAR2,
   pcontrasenia     OUT      VARCHAR2,
   pmail            OUT      VARCHAR2
) IS

BEGIN
   
   SELECT mail, nombre, contrasenia, nombreusuario,
             apaterno || ' ' || amaterno
        INTO pmail, pnombre, pcontrasenia, pnombreusuario,
             papellidos
        FROM CARTCARD.USUARIO
       WHERE usuarioid = pusuarioid;
   
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END IC_OBTIENEDATOSUSR;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          IC_PAGAMEMBRECIA (
   p_id_tipo_membrecia    IN   CARTCARD.IC_MEMBRESIAS.ID_MEMBRESIA%TYPE,
   p_id_tarjeta	  		  IN   CARTCARD.IC_MEMBRESIAS.ID_TARJETA%TYPE,
   p_usuario_modifico  	  IN   CARTCARD.IC_MEMBRESIAS.USUARIO_MODIFICO%TYPE
)
IS

p_id_membrecia INTEGER;
p_meses		   INTEGER;


BEGIN
   
    SELECT TO_NUMBER(REPLACE(UPPER(A.DESCRIPCION),' MESES')) INTO p_meses
		  		 FROM CARTCARD.IC_CAT_TIPO_MEMBRESIA A WHERE A.ID_TIPO_MEMBRESIA=p_id_tipo_membrecia;
   
   
   SELECT CARTCARD.IC_MEMBRECIAS.NEXTVAL INTO p_id_membrecia FROM DUAL;
   
   INSERT INTO CARTCARD.IC_MEMBRESIAS A (A.ID_MEMBRESIA,A.ID_TARJETA,A.ID_TIPO_MEMBRESIA,A.FECHA_EMISION,A.FECHA_EXPIRACION, A.USUARIO_MODIFICO,A.ULTIMA_MODIFICACION )
   		  VALUES (p_id_membrecia,p_id_tarjeta,p_id_tipo_membrecia,SYSDATE,ADD_MONTHS(SYSDATE,p_meses), p_usuario_modifico,SYSDATE);
   
   
   COMMIT;
   
  /*
  	p_existe := 0;
  
   SELECT COUNT(*) INTO p_existe 
   		  FROM CARTCARD.IC_MEMBRECIAS_PORPAGAR A 
		  WHERE A.ID_USUARIO= p_usuarioid;
		  
   IF p_existe!=0 THEN
   	  
	  SELECT A.ID_TIPO_MEMBRECIA INTO p_id_tipo_membrecia 
	  		 FROM CARTCARD.IC_MEMBRECIAS_PORPAGAR A
			 WHERE A.ID_USUARIO= p_usuarioid;
	  
	  
	  --OBTIENE EL NUMERO DE MESES DE LA DURACION DE LA MEMBRECIA 
		  SELECT to_number(replace(upper(A.DESCRIPCION),' MESES')) INTO p_meses
		  		 FROM CARTCARD.IC_CAT_TIPO_MEMBRESIA A WHERE A.ID_TIPO_MEMBRESIA=p_id_tipo_membrecia;
	  
	  --OBTIENE EL ID CONSECUTIVO DE LA MEMBRECIA.
	  SELECT CARTCARD.IC_MEMBRECIAS.NEXTVAL INTO p_id_membrecia FROM DUAL;
	  
	  INSERT INTO CARTCARD.IC_MEMBRESIAS VALUES(p_id_membrecia,
		 			 							    p_id_tarjeta, 
											 	    p_id_tipo_membrecia,
												    SYSDATE,
												    ADD_MONTHS(SYSDATE,p_meses),
													p_usuario_modifico,
													SYSDATE
												   );
												   
	  DELETE FROM CARTCARD.IC_MEMBRECIAS_PORPAGAR MEM 
	  		 WHERE MEM.ID_USUARIO=p_usuarioid;
	END IF;
  */
	  
   
   
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	    ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Pagamembrecia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_RENUEVAMEMBRECIA(
   p_tipomoneda   IN   INTEGER,
   p_costo        IN   FLOAT,
   p_fechaalta    IN   VARCHAR2,
   p_usuarioid    IN   INTEGER,
   p_id_tarjeta	  IN   INTEGER,
   p_usuario_modifico   IN    varchar
) 
IS
   p_meses integer; 
   p_existe_tarjeta integer;
   p_id_tipo_membrecia integer;
   p_id_membrecia integer;
   p_membrecia_vigente integer;
BEGIN

   --OBTIENE EL ID DE LA TARJETA
   SELECT count(A.ID_TARJETA) INTO p_existe_tarjeta 
   		  FROM CARTCARD.IC_TARJETAS A 
		  where  A.ID_USUARIO=p_usuarioid and A.ID_STATUS_TARJETA=1;
	
	 
   --VERIFICA QUE LA TARJETA SEA UNA VALIDA
   IF p_id_tarjeta !=0 THEN
   
      --OBTIENE UNA MEMBRESIA VALIDA.
   	  SELECT COUNT(*) into p_membrecia_vigente FROM (
   		  SELECT MAX(A.ID_MEMBRESIA) 
   		  		 FROM CARTCARD.IC_MEMBRESIAS A 
		  		 WHERE A.FECHA_EXPIRACION >= SYSDATE AND A.ID_TARJETA=p_id_tarjeta
   	  );
   	  
	  --COMPRUEBA SI LA TARJETA TIENE UNA MEMBRESIA PARA NO INSERTAR UNA NUEVA.
	  IF p_membrecia_vigente =0 THEN
	  	 
		  --OBTIENE EL NUMERO DE MESES DE LA DURACION DE LA MEMBRECIA 
		  SELECT to_number(replace(upper(A.DESCRIPCION),' MESES')) INTO p_meses
		  		 FROM CARTCARD.IC_CAT_TIPO_MEMBRESIA A WHERE A.COSTO=p_costo;
	   	  
		  --OBTIENE EL ID CONSECUTIVO DE LA MEMBRECIA.
		  SELECT CARTCARD.IC_MEMBRECIAS.NEXTVAL INTO p_id_membrecia FROM DUAL;
		 
		  --OBTIENE EL ID DEL TIPO DE MEMBRECIA.
		  SELECT A.ID_TIPO_MEMBRESIA into p_id_tipo_membrecia 
		  		 FROM CARTCARD.IC_CAT_TIPO_MEMBRESIA A 
				 WHERE A.COSTO=p_costo;
		 
		  --INSERTA LOS VALORES DE LA NUEVA MEMBRECIA CREADA.
		  INSERT INTO CARTCARD.IC_MEMBRESIAS VALUES(p_id_membrecia,
		 			 							    p_id_tarjeta, 
											 	    p_id_tipo_membrecia,
												    TO_DATE(p_fechaalta,'DDmmYYYY-HH24:MI:SS'),
												    ADD_MONTHS(TO_DATE(p_fechaalta,'DDmmYYYY-HH24:MI:SS'),p_meses),
													p_usuario_modifico,
													SYSDATE
												   );
		  
		  
	  END IF;
	  
   	   	 
   END IF;  

   
   COMMIT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_RENUEVAMEMBRECIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_RIBESACATALOGO IS

BEGIN
   
   INSERT INTO CARTCARD.IC_CAT_PROV_ALMACENAMIENTO (ID_PROVEEDOR, NOMBRE, USUARIO_MODIFICO,ULTIMA_MODIFICACION)
   		  VALUES(1,'RIBESA','IUPICARD',SYSDATE);
		  
   COMMIT;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
	   ROLLBACK;
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
END IC_RIBESACATALOGO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Ic_Sp_Actualizaspei(
paIdFondeo   IN  CARTCARD.IC_SPEI.ID_FONDEO%TYPE   
)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_ACTUALIZASPEI           */
/* Objetivo: actualiza el status del spei         */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_ACTUALIZASPEI      */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   UPDATE CARTCARD.IC_SPEI SPEI
   SET SPEI.STATUS_PROCESO = 1
   WHERE SPEI.ID_FONDEO = paIdFondeo;
   
   COMMIT;
   END;
EXCEPTION
     WHEN OTHERS THEN
     ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Sp_Actualizaspei;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_ACTUALIZATIPOMEMBRESIA(peTipoMem  in CARTCARD.IC_CAT_TIPO_MEMBRESIA.ID_TIPO_MEMBRESIA%type,
                             peCosto    in CARTCARD.IC_CAT_TIPO_MEMBRESIA.COSTO%type) is
/* --------------------------------------------------------------*/
/* NOMBRE PROCEDIMIENTO: IC_SP_ACTUALIZATIPOMEMBRESIA            */
/* Objetivo: ACTUALIZA los tipos de membrecia                    */
/* Autor:    CLV                                                 */
/* Fecha Creacion: Dic/2010                                      */
/* Fecha Modificacion:                                           */
/* Ejemplo Ejecucion: IC_SP_ACTUALIZATIPOMEMBRESIA(tipoMem,Costo)*/
/* --------------------------------------------------------------*/
 begin
  UPDATE CARTCARD.IC_CAT_TIPO_MEMBRESIA M
     SET M.COSTO =peCosto,
     m.ultima_modificacion =sysdate
  WHERE M.ID_TIPO_MEMBRESIA = peTipoMem;

 commit;
 exception
  when others then
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error '||SQLCODE||' '||substr(SQLERRM, 1, 200));
 END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Sp_Catalogos(

	   p_mensaje  OUT   VARCHAR2

)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_CATALOGOS                  */
/* Objetivo: Inserta los paises                           */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_CATALOGOS                     */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
    p_mensaje:='Ic_Sp_Ingresapais';
    CARTCARD.Ic_Sp_Ingresapais;
	p_mensaje:='Ic_Sp_Ingresaestado';
	CARTCARD.Ic_Sp_Ingresaestado;
	p_mensaje:='Ic_Sp_Ingresamunicipio';
	CARTCARD.Ic_Sp_Ingresamunicipio;
	p_mensaje:='Ic_Ingresacanales';
   	CARTCARD.Ic_Ingresacanales;
	p_mensaje:='Ic_Sp_Ingresaemisortarjeta';
	CARTCARD.Ic_Sp_Ingresaemisortarjeta;
	p_mensaje:='Ic_Migrapreguntas';
	CARTCARD.Ic_Migrapreguntas;
	p_mensaje:='Ic_Ribesacatalogo';
	CARTCARD.Ic_Ribesacatalogo;
	p_mensaje:='Ic_Sp_Ingresastatuscuenta';
	CARTCARD.Ic_Sp_Ingresastatuscuenta;
	p_mensaje:='Ic_Migrastatusfac';
	CARTCARD.Ic_Migrastatusfac;
	p_mensaje:='Ic_Sp_Ingresastatustarjeta';
	CARTCARD.Ic_Sp_Ingresastatustarjeta;
	p_mensaje:='Ic_Sp_Ingresatipiden';
	CARTCARD.Ic_Sp_Ingresatipiden;
	p_mensaje:='Ic_Sp_Ingresatiposmembrecia';
	CARTCARD.Ic_Sp_Ingresatiposmembrecia;
	p_mensaje:='Ic_Ingresatipopago';
	CARTCARD.Ic_Ingresatipopago;
	p_mensaje:='Ic_Ingresatiposervicio';
	CARTCARD.Ic_Ingresatiposervicio('IUPICARD');
	p_mensaje:='Ic_Ingresaestadosprod';
	CARTCARD.Ic_Ingresaestadosprod;
	p_mensaje:='Ic_Ingresaestadosprod';
	INSERT INTO CARTCARD.IC_CAT_TIPO_IDENTIFICACION (
		   		ID_TIPO_IDENTIFICACION, 
				DESCRIPCION, 
				USUARIO_MODIFICO, 
				ULTIMA_MODIFICACION
		     )VALUES(0,'NO IDENTIFICADO','IUPICARD',SYSDATE);
	COMMIT;
	p_mensaje:='EXITO';
   
   END;
EXCEPTION
     WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20001,p_mensaje||'='||SUBSTR(SQLERRM,1,512));
END Ic_Sp_Catalogos;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INGRESAEMISORTARJETA
IS
/* ------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_INGRESAEMISORTARJETA                         */
/* Objetivo: Inserta el catalogo de los emisores(provedores) de la tarjeta.	*/
/* Autor:    Equipo CartCard (HB)                                           */
/* Fecha Creacion: Oct/2010                                                 */
/* Fecha Modificacion:                                                      */
/* Ejemplo Ejecucion: IC_SP_INGRESAEMISORTARJETA    	                    */
/* ------------------------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
	INSERT INTO CARTCARD.IC_CAT_EMISOR_TARJETA 
		   (select B.IDEMISOR as ID_EMISOR, 
		   		   B.DESCRIPCION AS DESCRIPCION,
				   NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
				   NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION" 
			from pasarelbaz.pcc_emisortarjeta B);
   
   COMMIT;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESAEMISORTARJETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INGRESAESTADO
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_INGRESAESTADO              */
/* Objetivo: Inserta los estado               */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_INGRESAESTADO       */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN

 INSERT INTO CARTCARD.IC_ESTADO
	 SELECT ESTADOID AS ID_ESTADO, 
	 		PAISID AS ID_PAIS,
	 		NOMBREESTADO AS NOMBRE_ESTADO,
			NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
			NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION"
	 FROM CARTCARD.ESTADO
	 ORDER BY 2,1;
   COMMIT;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESAESTADO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INGRESAMEMUSU
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_INGRESAMEMUSU              */
/* Objetivo: Inserta los Membrecia de usuarios        */
/* Autor:    Equipo CartCard (HB)                         */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_INGRESAMEMUSU         */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
   
    INSERT INTO CARTCARD.IC_MEMBRESIAS
		  SELECT ROWNUM AS ID_MEMBRESIA, 
		      CARTCARDID AS ID_TARJETA , 
		      MEMBRECIAID  AS ID_TIPO_MEMBRESIA,
		      FECHAALTA AS    FECHA_EMISION, 
		      FECHAVENCIMIENTO AS  FECHA_EXPIRACION,
			  NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
			  NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION"
		  FROM CARTCARD.CARD C, CARTCARD.IC_TARJETAS T
		  WHERE C.CARTCARDID = T.ID_TARJETA
		  ORDER BY 2;

	COMMIT;	
	
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESAMEMUSU;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INGRESAMUNICIPIO
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_INGRESAESTADO              */
/* Objetivo: Inserta los estado               */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_INGRESAMUNICIPIO     */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
 INSERT INTO CARTCARD.IC_MUNICIPIO
	 SELECT MUNICIPIOID AS ID_MUNICIPIO, 
	 		ESTADOID  AS ID_ESTADO, 
			PAISID as ID_PAIS,    
	        NOMBREMUNICIPIO AS NOMBRE_MUNICIPIO,
			NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
			NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION"
	 FROM CARTCARD.MUNICIPIO
	 ORDER BY 1,2,3;
   
   COMMIT;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESAMUNICIPIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INGRESAPAIS
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_INGRESAPAIS                */
/* Objetivo: Inserta los paises         */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_INGRESAPAIS       */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
 INSERT INTO CARTCARD.IC_PAIS
	 SELECT PAISID AS ID_PAIS, NOMBREPAIS AS NOMBRE_PAIS, 
	        CLAVETELEFONICA AS CLAVE_TEL,
			NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
			NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION"  
	 FROM  CARTCARD.PAIS 
	 ORDER BY 1;
   
   COMMIT;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESAPAIS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INGRESASTATUSCUENTA
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_INGRESASTATUSCUENTA        */
/* Objetivo: Inserta los estados de la cuenta     */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_INGRESATIPOIDENTIF     */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
 INSERT INTO CARTCARD.IC_CAT_STATUS_CUENTA
 		SELECT (ROWNUM - 1) AS ID_STATUS_CUENTA, 
			   ESTADODECUENTAID AS CODIGO, 
			   DESCRIPCION,
			   NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
			   NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION"
 		FROM CARTCARD.ESTADODECUENTA 
 		ORDER BY 2;
   
   COMMIT;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESASTATUSCUENTA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INGRESASTATUSTARJETA
IS
/* ------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_INGRESASTATUSTARJETA                         */
/* Objetivo: Inserta el catalogo de los estados de la tarjeta.          	*/
/* Autor:    Equipo CartCard (HB)                                           */
/* Fecha Creacion: Oct/2010                                                 */
/* Fecha Modificacion:                                                      */
/* Ejemplo Ejecucion: IC_SP_INGRESASTATUSTARJETA   	                        */
/* ------------------------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
	insert all
	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(0,'-','DEFAULT','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(1,'A','ACTIVADA','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(2,'B','BLOQUEADA','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(3,'C','CANCELADA','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(4,'I','INACTIVA','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(5,'N','NO ASIGNADA','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(6,'P','PENDIENTE','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(7,'S','REQUERIDA','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(8,'V','EXPIRADA','IUPICARD',SYSDATE)
  	   into CARTCARD.IC_CAT_STATUS_TARJETA VALUES(9,'X','NO VALIDA','IUPICARD',SYSDATE)
	SELECT * FROM dual;
   
   COMMIT;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESASTATUSTARJETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INGRESATIPIDEN
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_INGRESATIPOIDENTIFICACION         */
/* Objetivo: Inserta los tipos de identificacion       */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2010                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: IC_SP_INGRESATIPOIDENTIFICACION     */
/* ------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
 INSERT INTO CARTCARD.IC_CAT_TIPO_IDENTIFICACION 
	 SELECT IDTIPODOCUMENTO  AS ID_TIPO_IDENTIFICACION, 
	        DESCRIPCION,
			NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
			NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION"
	 FROM CARTCARD.CC_TIPODOCUMENTO
	 ORDER BY 1;
   
   COMMIT;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESATIPIDEN;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          IC_SP_INGRESATIPOSMEMBRECIA
IS
   
BEGIN
   BEGIN
      
   INSERT INTO CARTCARD.IC_CAT_TIPO_MEMBRESIA
   (id_tipo_membresia, descripcion, costo, usuario_modifico, ultima_modificacion, duracion)
   		  SELECT MEMBRECIAID  AS ID_TIPO_MEMBRESIA, 
		  		 DESCRIPCION, 
				 COSTO,
				 NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
				 NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION",
                 DURACION
   		  FROM CARTCARD.MEMBRECIA;
      
   COMMIT;
		  
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_SP_INGRESATIPOSMEMBRECIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_SP_INSERTATIPOMEMBRESIA(
          peTipoMem  in CARTCARD.IC_CAT_TIPO_MEMBRESIA.ID_TIPO_MEMBRESIA%type,
          peDescric  in CARTCARD.IC_CAT_TIPO_MEMBRESIA.DESCRIPCION%type,
          peCosto    in CARTCARD.IC_CAT_TIPO_MEMBRESIA.COSTO%type,
          usuario    in CARTCARD.IC_CAT_TIPO_MEMBRESIA.USUARIO_MODIFICO%type) is
/* --------------------------------------------------------------*/
/* NOMBRE PROCEDIMIENTO: IC_SP_INSERTATIPOMEMBRESIA              */
/* Objetivo: INSERTA tipos de membrecia                          */
/* Autor:    CLV                                                 */
/* Fecha Creacion: Dic/2010                                      */
/* Fecha Modificacion:                                           */
/* Ejemplo Ejecucion: IC_SP_INSERTATIPOMEMBRESIA(?,?,?,?)      */
/* --------------------------------------------------------------*/
 begin
   insert into IC_CAT_TIPO_MEMBRESIA (ID_TIPO_MEMBRESIA, DESCRIPCION, COSTO, USUARIO_MODIFICO, ULTIMA_MODIFICACION)
   values (peTipoMem, peDescric, peCosto, usuario, SYSDATE);

 commit;
 exception
  when others then
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20101, 'Error '||SQLCODE||' '||substr(SQLERRM, 1, 200));
 END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Ic_Sp_Migratrjsusuarios IS
BEGIN
    INSERT INTO CARTCARD.IC_TARJETAS (id_tarjeta,id_emisor, id_usuario, id_status_tarjeta, id_pcc, token_tarjeta, numero_tarjeta, 
                                fecha_expiracion, cvv, fecha_emision, usuario_modifico, ultima_modificacion, estatus, tipo_tarjeta)
    (SELECT  A.CARTCARDID AS ID_TARJETA, A.IDEMISOR AS  ID_EMISOR,C.USUARIOID AS ID_USUARIO,A.IDESTADOTARJETA AS ID_STATUS_TARJETA,
        D.ID_PCC,B.TOKENTARJETA AS TOKEN_TARJETA, A.NUMEROTARJETA AS NUMERO_TARJETA, B.FECHAEXPIRACION AS FECHA_EXPIRACION,B.CVV, 
        C.FECHAALTA AS FECHA_EXPEDICION,NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION",NULL, --ESTATUS
        NULL --TIPO_TARJETA
        FROM PASARELBAZ.PCC_TARJETAS A, PASARELBAZ.PCC_TARJETASCARDMARTE B, CARTCARD.CARD C ,CARTCARD.IC_TX_CARDMARTE_PCARDCREATION D, CARTCARD.IC_USUARIO E
        WHERE A.CARTCARDID=B.CARTCARDID AND A.NUMEROTARJETA=B.NUMEROTARJETA AND B.FECHAEXPIRACION IS NOT NULL AND A.CARTCARDID = C.CARTCARDID AND 
              B.CARTCARDID=C.CARTCARDID AND C.USUARIOID=D.ID_USUARIO AND A.NUMEROTARJETA=D.CARDNUMBER AND C.USUARIOID=E.ID_USUARIO
    );
   COMMIT;
EXCEPTION
     WHEN OTHERS THEN
           ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Sp_Migratrjsusuarios;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Sp_Migratxcardmarte
IS
/* ------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_MIGRATXCARDMARTE                             */
/* Objetivo: Sirve para migrar los datos de la transaccion usada del        */
/* 			 servicio de card marte para crear la tarjeta y asignar         */
/*			 la tarjeta.          		 	   	  		  					*/
/* Autor:    Equipo CartCard (HB)                                           */
/* Fecha Creacion: Oct/2010                                                 */
/* Fecha Modificacion:                                                      */
/* Ejemplo Ejecucion: IC_SP_MIGRATXCARDMARTE                                */
/* ------------------------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   
	INSERT INTO CARTCARD.IC_TX_CARDMARTE_PCARDCREATION (
	  SELECT 
			ROWNUM AS ID_PCC, 
			  C.USUARIOID AS ID_USUARIO, 
			  B.PTERMINALCODE,
			  B.PPRODUCTCODE AS PRODUCTCODE,   
			  B.PID, 
			  B.PIDTYPE, 
			  B.PRBSERVICE,
			  B.PDATEOFBIRTH, 
			  B.PEMBOSSEDNAME, 
			  B.PTELEPHONEAREACODE, 
			  B.PTELEPHONE, 
			  NVL(NULL,0) "PFAXAREACODE",
			  NVL(NULL,0) "PFAXPHONE",
			  NVL(NULL,0) "PCELLPHONE",
			  NVL(NULL,0) "PCELLPHONEAREACODE", 
			  B.PIDEXPIRATION, 
			  B.PIDCOUNTRY, 
			  B.PIDSTATE, 
			  B.PLASTNAME, 
			  NVL(NULL,' ') "PMAINDENNAME", 
			  NVL(NULL,' ') "PMIDDLENAME", 
			  B.PFIRSTNAME, 
			  B.PCOUNTRY, 
			  B.PSTATE, 
			  B.PCITY, 
			  B.PADDRESS, 
			  B.PZIPCODE, 
			  B.PEMAIL, 
			  A.REQUESTID, 
			  SYSDATE AS FECHA_EJECUCION,
			  A.OPERATIONID, 
			  A.RESULTCODE, 
			  A.RESULTMESSAGE, 
			  A.TOKENTARJETA AS TOKEN, 
			  A.NUMEROTARJETA AS CARDNUMBER, 
			  B.PEMBOSSEDNAME AS EMBOSSEDNAME, 
			  A.FECHAEXPIRACION AS EXPIRATIONDATE,
			  A.CVV AS VERIFICATIONCODE,
			  NVL(NULL,'IUPICARD') "USUARIO_MODIFICO",
			  NVL(NULL,SYSDATE) "ULTIMA_MODIFICACION"
	FROM PASARELBAZ.PCC_TARJETASCARDMARTE A, PASARELBAZ.PCC_CREACIONTARJETA B, CARTCARD.CARD C, CARTCARD.IC_USUARIO D
	WHERE A.NUMEROTARJETA=B.NUMEROTARJETA AND A.CARTCARDID=B.CARTCARDID AND A.CARTCARDID=C.CARTCARDID AND C.USUARIOID=D.ID_USUARIO
	);

	
	COMMIT;
   
   END;
EXCEPTION
     WHEN OTHERS THEN
	 	  ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Sp_Migratxcardmarte;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Sp_Tarjeta
IS
/* ------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: IC_SP_TARJETA                        */
/* Objetivo: Sirve para migrar los datos de las tarjetas.        */
/* Autor:    Equipo CartCard (HB)                                           */
/* Fecha Creacion: Oct/2010                                                 */
/* Fecha Modificacion:                                                      */
/* Ejemplo Ejecucion: IC_SP_TARJETA                    */
/* ------------------------------------------------------------------------ */
   
BEGIN
   BEGIN
   
   -- Integra la informacion de las tarjetas a las nuevas tablas
   
   CARTCARD.Ic_Sp_Migratxcardmarte;
   
   CARTCARD.Ic_Sp_Migratrjsusuarios;
  
      
   END;
EXCEPTION
     WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Sp_Tarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Suiteusuario (
  p_usuarioId	  PASARELBAZ.PCC_SUITES.USUARIOID%TYPE
) IS

p_suiteId   PASARELBAZ.PCC_SUITES.IDSUITE%TYPE;

BEGIN
   
   SELECT IDSUITE INTO p_suiteId FROM PASARELBAZ.PCC_SUITES A 
   		  WHERE A.USUARIOID=p_usuarioId AND
		  		A.CARTCARDID=(
							  SELECT MAX(A.CARTCARDID) FROM  PASARELBAZ.PCC_SUITES A
							  		 WHERE A.USUARIOID=p_usuarioId
							  );
							  
  
   Ic_Agregasuite(p_usuarioId,p_suiteId,'IUPICARD');
   
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END Ic_Suiteusuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Ic_Tarjetausuarios( paUsuarioId IN CARTCARD.IC_USUARIO.ID_USUARIO%TYPE, paUsuarioModifico IN CARTCARD.IC_TARJETAS.USUARIO_MODIFICO%TYPE) IS
  cursor curtarjeta is
   select c.cartcardid as ID_TARJETA,c.fechaalta,c.usuarioid 
    from CARTCARD.CARD C,CARTCARD.IC_USUARIO E
   where c.usuarioid = e.id_usuario
   and e.id_usuario = paUsuarioId;

  cursor curtoken(PECardid in PASARELBAZ.PCC_TARJETAS.CARTCARDID%type) is
   select A.CARTCARDID AS ID_TARJETA, A.IDEMISOR AS  ID_EMISOR,A.IDESTADOTARJETA AS ID_STATUS_TARJETA,A.NUMEROTARJETA AS NUMERO_TARJETA,
        B.TOKENTARJETA AS TOKEN_TARJETA, B.FECHAEXPIRACION AS FECHA_EXPIRACION,B.CVV,
        d.id_pcc
   from PASARELBAZ.PCC_TARJETAS A,PASARELBAZ.PCC_TARJETASCARDMARTE B,
       CARTCARD.IC_TX_CARDMARTE_PCARDCREATION D
   where a.cartcardid  = b.cartcardid 
     and a.numerotarjeta  = b.numerotarjeta
     and d.cardnumber = b.numerotarjeta
     and d.token = b.tokentarjeta
     and d.id_usuario = paUsuarioId
     and a.cartcardid = PECardid
     and nvl(B.FECHAEXPIRACION,sysdate-1) >SYSDATE;


  vlexiste integer;
  rectarjeta  curtarjeta%rowtype;
  rectoken    curtoken%rowtype;
BEGIN

   open curtarjeta;
   fetch curtarjeta into Rectarjeta;
   if curtarjeta%NOTFOUND then
      Rectarjeta:=null;
   end if;
   close curtarjeta;

   IF Rectarjeta.ID_TARJETA IS NOT NULL THEN
   SELECT COUNT(1) INTO vlexiste 
   		  FROM CARTCARD.IC_TARJETAS T 
		  WHERE T.ID_TARJETA = Rectarjeta.ID_TARJETA;
   
     IF vlexiste=0 THEN
        open curtoken(Rectarjeta.ID_TARJETA);
        fetch curtoken into Rectoken;
        if curtoken%FOUND then
         INSERT INTO CARTCARD.IC_TARJETAS (id_tarjeta,id_emisor, id_usuario, id_status_tarjeta, id_pcc, token_tarjeta, numero_tarjeta, fecha_expiracion,
                                        cvv, fecha_emision, usuario_modifico, ultima_modificacion)
          VALUES(Rectarjeta.Id_Tarjeta,Rectoken.Id_Emisor,Rectarjeta.usuarioid,Rectoken.Id_Status_Tarjeta,
                 Rectoken.Id_Pcc,Rectoken.Token_Tarjeta,Rectoken.Numero_Tarjeta,Rectoken.Fecha_Expiracion,
                 Rectoken.Cvv,  Rectarjeta.fechaalta, NVL(NULL,paUsuarioModifico) ,NVL(NULL,SYSDATE));
        end if;
        close curtoken;

       COMMIT;
    END IF;
   END IF;
EXCEPTION
     WHEN OTHERS THEN
           ROLLBACK;
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Tarjetausuarios;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Ic_Txusuariocardmarte(
paUsuarioId       IN CARTCARD.IC_USUARIO.ID_USUARIO%TYPE,
paUsuarioModifico IN CARTCARD.IC_TX_CARDMARTE_PCARDCREATION.USUARIO_MODIFICO%TYPE
)
IS

v_seq_id_pcc INTEGER;
BEGIN
   BEGIN

  SELECT CARTCARD.IC_TXCARDMARTE.NEXTVAL INTO v_seq_id_pcc FROM DUAL;


  INSERT INTO CARTCARD.IC_TX_CARDMARTE_PCARDCREATION (
   SELECT
     v_seq_id_pcc,
     C.USUARIOID AS ID_USUARIO,
     B.PTERMINALCODE,
     B.PPRODUCTCODE AS PRODUCTCODE,
     B.PID,
     B.PIDTYPE,
     B.PRBSERVICE,
     B.PDATEOFBIRTH,
     B.PEMBOSSEDNAME,
     B.PTELEPHONEAREACODE,
     B.PTELEPHONE,
     NVL(NULL,0) "PFAXAREACODE",
     NVL(NULL,0) "PFAXPHONE",
     NVL(NULL,0) "PCELLPHONE",
     NVL(NULL,0) "PCELLPHONEAREACODE",
     B.PIDEXPIRATION,
     B.PIDCOUNTRY,
     B.PIDSTATE,
     B.PLASTNAME,
     NVL(NULL,' ') "PMAINDENNAME",
     NVL(NULL,' ') "PMIDDLENAME",
     B.PFIRSTNAME,
     B.PCOUNTRY,
     B.PSTATE,
     B.PCITY,
     B.PADDRESS,
     B.PZIPCODE,
     B.PEMAIL,
     A.REQUESTID,
     SYSDATE AS FECHA_EJECUCION,
     A.OPERATIONID,
     A.RESULTCODE,
     A.RESULTMESSAGE,
     A.TOKENTARJETA AS TOKEN,
     A.NUMEROTARJETA AS CARDNUMBER,
     B.PEMBOSSEDNAME AS EMBOSEEDNAME,
     A.FECHAEXPIRACION AS EXPIRATIONDATE,
     A.CVV AS VERIFICATIONCODE,
     paUsuarioModifico AS USUARIO_MODIFICO,
     SYSDATE AS ULTIMA_MODIFICACION
      FROM PASARELBAZ.PCC_TARJETASCARDMARTE A, PASARELBAZ.PCC_CREACIONTARJETA B, CARTCARD.CARD C, CARTCARD.IC_USUARIO D
      WHERE A.NUMEROTARJETA=B.NUMEROTARJETA AND A.CARTCARDID=B.CARTCARDID AND A.CARTCARDID=C.CARTCARDID AND C.USUARIOID=D.ID_USUARIO AND
     D.ID_USUARIO = paUsuarioId AND C.CARTCARDID > ( SELECT NVL(MAX(T.ID_TARJETA),0) FROM CARTCARD.IC_TARJETAS T WHERE T.ID_USUARIO = paUsuarioId) AND
     A.FECHAEXPIRACION >= SYSDATE
 );

   COMMIT;
   END;
EXCEPTION
     WHEN OTHERS THEN
           ROLLBACK;
         RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido  Ic_Txusuariocardmarte  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Txusuariocardmarte;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Update_Envio_Estafeta(
        
        V_ID_ESTAFETA             CARTCARD.IC_ENVIO_ESTAFETA.ID_ESTAFETA%TYPE,
        V_RESULTADO               CARTCARD.IC_ENVIO_ESTAFETA.RESULTADO%TYPE,
        V_MENSAJE                 CARTCARD.IC_ENVIO_ESTAFETA.MENSAJE%TYPE,
        V_GUIAESTAFETA            CARTCARD.IC_ENVIO_ESTAFETA.GUIAESTAFETA%TYPE,
        V_FECHA_ENVIO             CARTCARD.IC_ENVIO_ESTAFETA.FECHA_ENVIO%TYPE,
		V_USUARIOMODIFICO		  CARTCARD.IC_ENVIO_ESTAFETA.USUARIO_MODIFICO%TYPE
)
IS
BEGIN    
     BEGIN
     
        UPDATE CARTCARD.IC_ENVIO_ESTAFETA 
            SET RESULTADO=V_RESULTADO, 
			    MENSAJE = V_MENSAJE, 
				GUIAESTAFETA = V_GUIAESTAFETA, 
				FECHA_ENVIO = V_FECHA_ENVIO,
				USUARIO_MODIFICO=V_USUARIOMODIFICO,
				ULTIMA_MODIFICACION=SYSDATE
            WHERE ID_ESTAFETA = V_ID_ESTAFETA;
			
        COMMIT;  
		 
     EXCEPTION                                                                                                                                                                                     
             WHEN OTHERS THEN
			 	   ROLLBACK;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizar la IC_ENVIO_ESTAFETA  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END Ic_Update_Envio_Estafeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Ic_Update_Mercancia(
        
        V_ID_MERCANCIA                 CARTCARD.IC_MERCANCIA.ID_MERCANCIA%TYPE,        
        V_STATUS_FACTURA               CARTCARD.IC_MERCANCIA.ID_STATUS_FACTURA%TYPE,
        V_STATUS_MERCANCIA             CARTCARD.IC_MERCANCIA.ID_STATUS_MERCANCIA%TYPE,
		V_USUARIO_MODIFICO			   CARTCARD.IC_MERCANCIA.USUARIO_MODIFICO%TYPE
)
IS
BEGIN    
     BEGIN

        UPDATE CARTCARD.IC_MERCANCIA
            SET ID_STATUS_FACTURA = V_STATUS_FACTURA, 
				ID_STATUS_MERCANCIA = V_STATUS_MERCANCIA,
				USUARIO_MODIFICO=V_USUARIO_MODIFICO,
				ULTIMA_MODIFICACION=SYSDATE
            WHERE ID_MERCANCIA = V_ID_MERCANCIA;
		
		COMMIT;
           
     EXCEPTION
             WHEN OTHERS THEN
			 	  ROLLBACK;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizar la Ic_Update_Mercancia  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END Ic_Update_Mercancia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE IC_UPDATE_TX_CARDMARTE_UNLOAD(

        V_ID_UNLOAD                  CARTCARD.IC_TX_CARDMARTE_UNLOAD.ID_UNLOAD%TYPE,        
        V_OPERATIONID                 CARTCARD.IC_TX_CARDMARTE_UNLOAD.OPERATIONID%TYPE,
        V_RESULTCODE                 CARTCARD.IC_TX_CARDMARTE_UNLOAD.RESULTCODE%TYPE,
        V_RESULTMESSAGE              CARTCARD.IC_TX_CARDMARTE_UNLOAD.RESULTMESSAGE%TYPE,
        V_TRANSACTIONNUMBER          CARTCARD.IC_TX_CARDMARTE_UNLOAD.TRANSACTIONNUMBER%TYPE,
        V_AMOUNT                     CARTCARD.IC_TX_CARDMARTE_UNLOAD.AMOUNT%TYPE,
		V_USUARIOMODIFICO			 CARTCARD.IC_TX_CARDMARTE_UNLOAD.USUARIO_MODIFICO%TYPE
)
IS
BEGIN    
     BEGIN

        UPDATE CARTCARD.IC_TX_CARDMARTE_UNLOAD
            SET OPERATIONID = V_OPERATIONID, 
				RESULTCODE = V_RESULTCODE, 
				RESULTMESSAGE = V_RESULTMESSAGE, 
				TRANSACTIONNUMBER = V_TRANSACTIONNUMBER, 
				AMOUNT = V_AMOUNT,
				USUARIO_MODIFICO=V_USUARIOMODIFICO,
				ULTIMA_MODIFICACION=SYSDATE
            WHERE ID_UNLOAD = V_ID_UNLOAD;
           
		COMMIT; 
		  
     EXCEPTION
             WHEN OTHERS THEN
			 	  ROLLBACK;
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizar la IC_TX_CARDMARTE_UNLOAD  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END IC_UPDATE_TX_CARDMARTE_UNLOAD;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          INSERTAOPERTIENDA (   
    P_OPERACIONID          CARTCARD.OPERACIONTIENDA.OPERACIONID%TYPE,
    P_NCONSECUTIVO         CARTCARD.OPERACIONTIENDA.NCONSECUTIVO%TYPE,
    P_NUMEROREFERENCIA     CARTCARD.OPERACIONTIENDA.REFERENCIA%TYPE,
    P_MONTOAFONDEAR        CARTCARD.OPERACIONTIENDA.CANTIDADDEPOSITADA%TYPE,
    P_TIENDAID             CARTCARD.OPERACIONTIENDA.TIENDAID%TYPE,
    P_CODIGORESULTADO      CARTCARD.OPERACIONTIENDA.CODIGORESULTADO%TYPE,
    P_MENSAJERESULTADO     CARTCARD.OPERACIONTIENDA.MENSAJERESULTADO%TYPE,             
    P_SYSDATE              CARTCARD.OPERACIONTIENDA.FECHASYS%TYPE,
    P_CARTCARD             CARTCARD.OPERACIONTIENDA.CARTCARDID%TYPE,
    P_TIPOCAMBIOUSD        CARTCARD.OPERACIONTIENDA.TIPOCAMBIOUSD%TYPE,       
    P_MENSAJEOPERACION     CARTCARD.OPERACIONTIENDA.MENSAJEOPERACIONID%TYPE,
    P_COMISIONUSD          CARTCARD.OPERACIONTIENDA.COMISIONUSD%TYPE
)
AS
/* ---------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: INSERTAOPERTIENDA                                                  */
/* OBJETIVO: INGRESA UN REGISTRO DE LA OPERACION REALIZADA EN TIENDA.                       */
/* AUTOR: EQUIPO IUPICARD                                                                   */
/* FECHA CREACION: JUL/2010                                                                 */
/* FECHA MODIFICACION:                                                                      */
/* EJEMPLO EJECUCION: EXEC INSERTAOPERTIENDA(<<P_OPERACIONID>>,...,<<P_COMISIONUSD>))       */
/* ---------------------------------------------------------------------------------------- */
BEGIN
        INSERT INTO CARTCARD.OPERACIONTIENDA OPT
                     (OPT.OPERACIONID,
                      OPT.NCONSECUTIVO,
                      OPT.REFERENCIA,
                      OPT.CANTIDADDEPOSITADA,
                      OPT.TIENDAID,                      
                      OPT.CODIGORESULTADO,
                      OPT.MENSAJERESULTADO,                                           
                      OPT.FECHASYS,
                      OPT.CARTCARDID,
                      OPT.TIPOCAMBIOUSD,
                      OPT.MENSAJEOPERACIONID,
                      OPT.COMISIONUSD )
              VALUES (P_OPERACIONID,
                      P_NCONSECUTIVO,
                      P_NUMEROREFERENCIA,
                      P_MONTOAFONDEAR,
                      P_TIENDAID,                     
                      P_CODIGORESULTADO,
                      P_MENSAJERESULTADO,                                          
                      P_SYSDATE,
                      P_CARTCARD,
                      P_TIPOCAMBIOUSD,       
                      P_MENSAJEOPERACION,
                      P_COMISIONUSD
                     );

        COMMIT;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            ROLLBACK;
            
END INSERTAOPERTIENDA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          INSERTA_ICN_CONTRATO (  REG_CONTRATO  IN  CARTCARD.ICN_CONTRATO%ROWTYPE,
                                                             RESULTADO     OUT INTEGER)                     
IS
   v_referencia VARCHAR2(20);
   v_suite VARCHAR2(10 BYTE); 
   v_error EXCEPTION;

 
BEGIN
  
   RESULTADO := 1;
   
   v_referencia := GENERAREFERENCIA();
   v_suite := GET_SUITE(REG_CONTRATO.ID_USUARIO);
   
   IF (v_referencia <> null) and (v_suite <> null) THEN
        INSERT INTO ICN_CONTRATO
            (   
                ICN_CONTRATO.REFERENCIA, ICN_CONTRATO.ID_USUARIO, ICN_CONTRATO.ENTIDAD,ICN_CONTRATO.SUCURSAL, 
                ICN_CONTRATO.SUITE, ICN_CONTRATO.ESTATUS, ICN_CONTRATO.FECHA_ALTA, ICN_CONTRATO.USUARIO_MODIFICO, 
                ICN_CONTRATO.ULTIMA_MODIFICACION
            )
        VALUES
            (   
                v_referencia, REG_CONTRATO.ID_USUARIO, REG_CONTRATO.ENTIDAD, REG_CONTRATO.SUCURSAL, 
                v_suite, REG_CONTRATO.ESTATUS, REG_CONTRATO.FECHA_ALTA, REG_CONTRATO.USUARIO_MODIFICO, 
                REG_CONTRATO.ULTIMA_MODIFICACION
            );
        COMMIT; 
    ELSE
        RAISE v_error;
    END IF;       
      
     
     EXCEPTION
     WHEN v_error THEN
     BEGIN
        --RESULTADO := 0;
        ROLLBACK;
        RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al Insertar en ICN_CONTRATO   (' || SQLCODE || '  ' || SQLERRM || ')');
    
     END;
END INSERTA_ICN_CONTRATO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MEMBRECIAS (p_cursor OUT sys_refcursor)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: membrecias                                            */
/* Objetivo: Obtiene la descripcion de una membrecia.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec membrecias(<<:Cursor>>))         */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT   membreciaid, duracion, costo, descripcion
          FROM CARTCARD.membrecia
      ORDER BY duracion;
END membrecias;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE membresiaexpirada(p_referencia IN cartcard.icn_tarjeta_complemento.referencia%type,
                            p_estatus    IN cartcard.icn_tarjeta_complemento.id_estatus%type,
                            p_comentario IN cartcard.icn_tarjeta_complemento.comentario%type,
                            p_accion IN NUMBER,
                            p_resultado  OUT NUMBER,
                            resultadotex OUT VARCHAR2) IS
   v_referencia            cartcard.icn_contrato.referencia%type;
   v_cardnumber            cartcard.icn_tarjeta.cardnumber%type;
   v_fecha_creacion        cartcard.icn_tarjeta.fecha_creacion%type;
   v_ultima_modificacion   cartcard.icn_tarjeta.ultima_modificacion%type;
   v_expiration_date       cartcard.icn_tarjeta.expirationdate%type;
   v_embossedname          cartcard.icn_tarjeta.pembossedname%type;
   PSMsg_RESP              VARCHAR2(250);
BEGIN

    SELECT t.referencia, t.cardnumber, t.pembossedname, t.fecha_creacion, t.ultima_modificacion, t.expirationdate
     INTO v_referencia, v_cardnumber, v_embossedname, v_fecha_creacion, v_ultima_modificacion, v_expiration_date
     FROM cartcard.icn_tarjeta t INNER JOIN cartcard.icn_contrato co  ON co.referencia = t.referencia
    WHERE co.referencia = p_referencia;

    IF p_accion = 1  THEN
        cartcard.PKG_ICN_SERVICIO.ADD_TARJETA_COMPL(v_referencia,
                             v_cardnumber,
                             v_embossedname,
                             null,
                             p_estatus,
                             p_comentario,
                             v_fecha_creacion,
                             'IUPICARD',
                             v_expiration_date,
                             SYSDATE,
                             p_resultado,
                             PSMsg_RESP);
         p_resultado := 1;
         resultadotex := 'Inserto cuando Bloquea';

    ELSIF p_accion = 2 THEN
          cartcard.PKG_ICN_SERVICIO.ADD_TARJETA_COMPL(v_referencia,
                             v_cardnumber,
                             v_embossedname,
                             null,
                             p_estatus,
                             p_comentario,
                             v_fecha_creacion,
                             'IUPICARD',
                             v_expiration_date,
                             null,
                             p_resultado,
                             PSMsg_RESP);
         p_resultado := 2;
         resultadotex := 'Inserto cuando cobra la membresia';


    ELSE
         p_resultado := 3;
        resultadotex :=  'NO SE EFECTUO LA ACCION';

    END IF;

   COMMIT;

 EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
      p_resultado := 0;
      RAISE_APPLICATION_ERROR (-20100, 'Error '||SQLCODE||' '||substr(SQLERRM, 1, 200));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Membresiasaexpirar (
   p_fechavencimiento   IN       VARCHAR2,
   p_cursor             OUT      sys_refcursor
)
IS
/* ---------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MEMBRESIASAEXPIRAR                                               */
/* Objetivo: Obtiene una lista de las membresias a expirar.       */
/* Autor:    Equipo CartCard (Siscon)                                                             */
/* Fecha Creacion: Abril / 2009                                                                       */
/* Fecha Modificacion:                                                                            */
/* Ejemplo Ejecucion: exec MEMBRESIASAEXPIRAR(<<:cursor>>) */
/* ---------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT cartcardid, fechaalta, fechavencimiento, referencia,
             membreciaid, estadoconsultait, usuarioid, bloqueo, fechasys
        FROM CARTCARD.CARD
       WHERE bloqueo = 1
         AND TO_DATE (fechavencimiento) <=
                                      TO_DATE (p_fechavencimiento, 'DDmmYYYY');
END Membresiasaexpirar;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          membresiasaexpirarrango (
   p_fechainicio   IN       VARCHAR2,
   p_fechafin      IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* ---------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MEMBRESIASAEXPIRARRANGO                                               */
/* Objetivo: Obtiene una lista de las membresias a expirar.       */
/* Autor:    Equipo CartCard (Siscon)                                                             */
/* Fecha Creacion: Abril / 2009                                                                       */
/* Fecha Modificacion:                                                                            */
/* Ejemplo Ejecucion: exec MEMBRESIASAEXPIRARRANGO(<<fechaInicio>>, <<fechaFin>>, <<:cursor>>) */
/* ---------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT cartcardid, fechaalta, fechavencimiento, referencia,
             membreciaid, estadoconsultait, usuarioid, bloqueo, fechasys
        FROM CARTCARD.CARD
       WHERE bloqueo = 1
         AND TO_DATE (fechavencimiento) >= TO_DATE (p_fechainicio, 'DDmmYYYY')
         AND TO_DATE (fechavencimiento) <= TO_DATE (p_fechafin, 'DDmmYYYY');
END membresiasaexpirarrango;
/

SHOW ERRORS;


CREATE OR REPLACE procedure MigracionClientes(PEIdUsuario IN CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
                                              PEnombre    IN CARTCARD.ICN_CLIENTES.NOMBRE%TYPE,
                                              PEapaterno  IN CARTCARD.ICN_CLIENTES.APATERNO%TYPE,
                                              PEamaterno  IN CARTCARD.ICN_CLIENTES.AMATERNO%TYPE,
                                              PEnombre_usuario IN CARTCARD.ICN_CLIENTES.NOMBRE_USUARIO%TYPE,
                                              PEcontrasenia IN CARTCARD.ICN_CLIENTES.CONTRASENIA%TYPE,
                                              PEcorreo_electronico IN CARTCARD.ICN_CLIENTES.CORREO_ELECTRONICO%TYPE,
                                              PEcp        IN CARTCARD.ICN_CLIENTES.CP%TYPE,
                                              PEciudad    IN CARTCARD.ICN_CLIENTES.CIUDAD%TYPE,
                                              PEcolonia   IN CARTCARD.ICN_CLIENTES.COLONIA%TYPE,
                                              PEid_municipio IN CARTCARD.ICN_CLIENTES.ID_MUNICIPIO%TYPE,
                                              PEid_estado IN CARTCARD.ICN_CLIENTES.ID_ESTADO%TYPE,
                                              PEid_pais   IN CARTCARD.ICN_CLIENTES.ID_PAIS%TYPE,
                                              PEcalle     IN CARTCARD.ICN_CLIENTES.CALLE%TYPE,
                                              PEnum_ext   IN CARTCARD.ICN_CLIENTES.NUM_EXT%TYPE,
                                              PEnum_int   IN CARTCARD.ICN_CLIENTES.NUM_INT%TYPE,
                                              PEtelefono  IN CARTCARD.ICN_CLIENTES.TELEFONO%TYPE,
                                              PEcelular   IN CARTCARD.ICN_CLIENTES.CELULAR%TYPE,
                                              PEfecha_nacimiento IN VARCHAR2,
                                              PEid_tipo_identificacion IN CARTCARD.ICN_CLIENTES.ID_TIPO_IDENTIFICACION%TYPE,
                                              PEnumero_identificacion IN CARTCARD.ICN_CLIENTES.NUMERO_IDENTIFICACION%TYPE,
                                              PEtipo_cliente IN CARTCARD.ICN_CLIENTES.TIPO_CLIENTE%TYPE,
                                              PEestatus      IN CARTCARD.ICN_CLIENTES.ESTATUS%TYPE,
                                              PEusuario_modifico IN CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE,
                                              PEFechaAlta    IN VARCHAR2,
                                              PECanal IN CARTCARD.ICN_CLIENTES.CANAL%TYPE,
                                              PSCod_Error  OUT NUMBER,
                                              PSMsg_Error  OUT VARCHAR2) is

 cursor curTarjeta(PIdIsuario in cartcard.card.usuarioid%type) is
  SELECT r.referencia,R.FECHAALTA,R.BLOQUEO,s.id_suite
  FROM CARTCARD.card r,CARTCARD.IC_SUITE s
  where r.usuarioid = s.id_usuario(+)
  and r.usuarioid = PIdIsuario;

RecTarjeta       curTarjeta%rowtype;
vlSuite             CARTCARD.IC_SUITE.ID_SUITE%type;
 vlError      Exception;
 vlExiste     number;
begin
   PSCod_Error:=0;
   SELECT COUNT(1) INTO vlExiste from CARTCARD.icn_clientes c where c.id_usuario = PEIdUsuario;
   IF vlExiste>0 THEN
      RAISE vlError;
   END IF; 
                     
         INSERT INTO CARTCARD.ICN_CLIENTES(id_usuario, nombre, apaterno, amaterno, nombre_usuario, contrasenia, correo_electronico, 
                                  cp, ciudad, colonia, id_municipio, id_estado, id_pais, calle, num_ext, num_int, telefono, 
                                  celular, fecha_nacimiento, id_tipo_identificacion, numero_identificacion, tipo_cliente, b_ldap, 
                                  estatus, fecha_creacion, usuario_modifico, ultima_modificacion, CANAL)
         VALUES (PEIdUsuario, PEnombre,PEapaterno,PEamaterno,PEnombre_usuario,PEcontrasenia,PEcorreo_electronico,
                 PEcp,PEciudad,PEcolonia,PEid_municipio,PEid_estado,PEid_pais,              
                 PEcalle,PEnum_ext,PEnum_int,PEtelefono,PEcelular,TO_DATE(PEfecha_nacimiento, 'YYYYMMdd' ) ,PEid_tipo_identificacion,
                 PEnumero_identificacion,PEtipo_cliente,null,
                 PEestatus,TO_DATE(PEFechaAlta, 'YYYYMMdd' )  ,NVL(PEusuario_modifico,'IUPICARD'),SYSDATE,PECanal);
         COMMIT;  
           open curTarjeta(PEIdUsuario);
           fetch curTarjeta into RecTarjeta;
            if curTarjeta%NOTFOUND then
               RecTarjeta:=NULL;
            end if;
           close curTarjeta;
                      
           IF RecTarjeta.referencia IS NOT NULL THEN
              IF NVL(RecTarjeta.Id_Suite,'0')= '0' THEN
                  begin
                  SELECT PSUI.IDSUITE INTO vlSuite               
                   FROM PASARELBAZ.PCC_SUITES PSUI 
                   WHERE PSUI.USUARIOID= PEIdUsuario;
                  EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                   vlSuite:=NULL;
                   WHEN TOO_MANY_ROWS THEN
                   vlSuite:=NULL;
                   END;
              ELSE
                vlSuite:=RecTarjeta.Id_Suite;     
              END IF;
                
              INSERT INTO CARTCARD.ICN_CONTRATO(referencia,id_usuario, entidad, sucursal, 
                                             suite, estatus, fecha_alta, usuario_modifico, ultima_modificacion)
                                      VALUES(RecTarjeta.referencia,PEIdUsuario,'141',NULL,
                                             vlSuite,RecTarjeta.BLOQUEO,RecTarjeta.Fechaalta,'IUPICARD',SYSDATE);
              COMMIT;                               
           END IF;                                                                                                         
    commit;
    PSCod_Error:=1;
EXCEPTION
   WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='El Usuario:'||PEIdUsuario||' ya esta dado de alta';
  ROLLBACK;      
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:='Error Migrar idUsuaro:'||PEIdUsuario||' msg='||SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
     --RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al MigracionClientes  (' || SQLCODE || '  ' || SQLERRM || ')');
end;
/

SHOW ERRORS;


CREATE OR REPLACE procedure MigracionTarjetas(PEReferencia IN CARTCARD.ICN_TARJETA.REFERENCIA%type,
                       PEcardnumber          IN CARTCARD.ICN_TARJETA.CARDNUMBER%type, 
                       PEpterminalcode       IN CARTCARD.ICN_TARJETA.PTERMINALCODE%type,
                       PEproductcode         IN CARTCARD.ICN_TARJETA.PRODUCTCODE%type, 
                       PEpid                 IN CARTCARD.ICN_TARJETA.PID%type, 
                       PEpidtype             IN CARTCARD.ICN_TARJETA.PIDTYPE%type, 
                       PEprbservice          IN CARTCARD.ICN_TARJETA.PRBSERVICE%type, 
                       PEpdateofbirth        IN VARCHAR2, 
                       PEpembossedname       IN CARTCARD.ICN_TARJETA.PEMBOSSEDNAME%type, 
                       PEptelephoneareacode  IN CARTCARD.ICN_TARJETA.PTELEPHONEAREACODE%type, 
                       PEptelephone          IN CARTCARD.ICN_TARJETA.PTELEPHONE%type, 
                       PEpfaxareacode        IN CARTCARD.ICN_TARJETA.PFAXAREACODE%type, 
                       PEpfaxphone           IN CARTCARD.ICN_TARJETA.PFAXPHONE%type, 
                       PEpcellphone          IN CARTCARD.ICN_TARJETA.PCELLPHONE%type, 
                       PEpcellphoneareacode  IN CARTCARD.ICN_TARJETA.PCELLPHONEAREACODE%type, 
                       PEpidexpiration       IN CARTCARD.ICN_TARJETA.PIDEXPIRATION%type, 
                       PEpidcountry          IN CARTCARD.ICN_TARJETA.PIDCOUNTRY%type, 
                       PEpidstate            IN CARTCARD.ICN_TARJETA.PIDSTATE%type, 
                       PEplastname           IN CARTCARD.ICN_TARJETA.PLASTNAME%type, 
                       PEppersonaltitle      IN CARTCARD.ICN_TARJETA.PPERSONALTITLE%type, 
                       PEpmaindenname        IN CARTCARD.ICN_TARJETA.PMAINDENNAME%type, 
                       PEpmiddlename         IN CARTCARD.ICN_TARJETA.PMIDDLENAME%type, 
                       PEpfirstname          IN CARTCARD.ICN_TARJETA.PFIRSTNAME%type, 
                       PEpcountry            IN CARTCARD.ICN_TARJETA.PCOUNTRY%type, 
                       PEpstate              IN CARTCARD.ICN_TARJETA.PSTATE%type, 
                       PEpcity               IN CARTCARD.ICN_TARJETA.PCITY%type, 
                       PEpaddress            IN CARTCARD.ICN_TARJETA.PADDRESS%type, 
                       PEpzipcode            IN CARTCARD.ICN_TARJETA.PZIPCODE%type, 
                       PEpemail              IN CARTCARD.ICN_TARJETA.PEMAIL%type, 
                       PErequestid           IN CARTCARD.ICN_TARJETA.REQUESTID%type, 
                       PEoperationid         IN CARTCARD.ICN_TARJETA.OPERATIONID%type, 
                       PEtoken               IN CARTCARD.ICN_TARJETA.TOKEN%type, 
                       PEexpirationdate      IN VARCHAR2, 
                       PEverificationcode    IN CARTCARD.ICN_TARJETA.VERIFICATIONCODE%type, 
                       PEid_tipo_membresia   IN CARTCARD.ICN_TARJETA.ID_TIPO_MEMBRESIA%type, 
                       PEid_emisor           IN CARTCARD.ICN_TARJETA.ID_EMISOR%type, 
                       peEstatus             IN CARTCARD.ICN_TARJETA.ID_STATUS_TARJETA%type,
                       PEcvv                 IN CARTCARD.ICN_TARJETA.CVV%type, 
                       PEtipo_tarjeta        IN CARTCARD.ICN_TARJETA.TIPO_TARJETA%type, 
                       PEestatus_bloqueo     IN CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%type, 
                       PEfecha_membrecia     IN VARCHAR2, 
                       PEfecha_creacion      IN VARCHAR2, 
                       PEusuario_modifico    IN CARTCARD.ICN_TARJETA.USUARIO_MODIFICO%type,
                       PEfecha_vigencia     IN VARCHAR2, 
                       PEfecha_bloqueo     IN VARCHAR2,
                       PSCod_error out number,
                       PSMsg_Error out varchar2) IS
 vlError      Exception;
 vlExiste     number;
begin
   PSCod_Error:=0;
   SELECT COUNT(1) INTO vlExiste from CARTCARD.Icn_Tarjeta c where c.referencia = PEReferencia;
   IF vlExiste>0 THEN
      RAISE vlError;
   END IF; 

        INSERT INTO CARTCARD.Icn_Tarjeta(referencia,cardnumber, pterminalcode, 
        productcode, pid, pidtype, prbservice, pdateofbirth, pembossedname, ptelephoneareacode, 
        ptelephone, pfaxareacode, pfaxphone, pcellphone, pcellphoneareacode, pidexpiration, 
        pidcountry, pidstate, plastname, ppersonaltitle, pmaindenname, pmiddlename, 
        pfirstname, pcountry, pstate, pcity, paddress, pzipcode, pemail, requestid, 
        operationid, token, expirationdate, verificationcode, id_tipo_membresia, 
        id_emisor, id_status_tarjeta, cvv, tipo_tarjeta, estatus_bloqueo, 
        fecha_membrecia, fecha_creacion, usuario_modifico, ultima_modificacion)
        values(PEReferencia,PEcardnumber,PEpterminalcode,
        PEproductcode,PEpid,PEpidtype,PEprbservice,PEpdateofbirth  ,PEpembossedname,
        PEptelephoneareacode,PEptelephone,PEpfaxareacode,PEpfaxphone,PEpcellphone,PEpcellphoneareacode,PEpidexpiration,
        PEpidcountry,PEpidstate,PEplastname,PEppersonaltitle,PEpmaindenname,PEpmiddlename,
        PEpfirstname,PEpcountry,PEpstate,PEpcity,PEpaddress,PEpzipcode,PEpemail,PErequestid,
        PEoperationid,PEtoken, TO_DATE(PEexpirationdate, 'YYYYMMdd' ),PEverificationcode,PEid_tipo_membresia,
        PEid_emisor,peEstatus,PEcvv,PEtipo_tarjeta,PEestatus_bloqueo,
        TO_DATE(PEfecha_membrecia, 'ddMMYYYY' ),TO_DATE(PEfecha_creacion, 'ddMMYYYY hh24:mi:ss' ),PEusuario_modifico,SYSDATE);
        COMMIT;

        INSERT INTO CARTCARD.ICN_TARJETA_COMPLEMENTO(referencia, 
                    cardnumber, cardname, nombre_remesa, id_estatus, comentario, 
                    fecha_creacion, usuario_modifico, ultima_modificacion,
                    fecha_vigencia,fecha_bloqueo)
        VALUES(PEReferencia,pecardnumber,PEpembossedname,NULL,peEstatus,
               'MIGRACION TARJETA',TO_DATE(PEfecha_creacion, 'ddMMYYYY hh24:mi:ss' ),PEusuario_modifico,SYSDATE,
               TO_DATE(PEfecha_vigencia, 'ddMMYYYY' ),TO_DATE(PEfecha_bloqueo, 'ddMMYYYY'));
        commit;
    PSCod_Error:=1;
EXCEPTION
   WHEN vlerror then
     PSCod_Error:=0;
     PSMsg_Error:='La referencia :'||PEReferencia||' ya esta dado de alta';
  ROLLBACK;      
   WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:='Error Migrar referencia:'||PEReferencia||' msg='||SQLCODE || '  ' || SQLERRM;
  ROLLBACK;
end;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Migrar_Icn_Ope_To_Hist
(spCod_Error OUT NUMBER, spMsg_Error OUT VARCHAR)
IS
/* -------------------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MIGRAR_ICN_OPE_TO_HIST                                            */
/* Objetivo: Migrar los datos contenidos en la tabla ICN_OPERACIONES a la tabla       */ 
/*ICN_OPERACIONES_HISTORICO    	                                                                                            */
/* Autor:    Abraham Salomon Ramirez Guzman                                                                             */
/* Fecha Creacion: FEB/2011                                                                                                                */
/* Fecha Modificacion:                                                                                                                             */
/* --------------------------------------------------------------------------------------------------------------------------- */

BEGIN
 	 spCod_Error := 0;
      MERGE
			  INTO CARTCARD.ICN_OPERACIONES_HISTORICO his
			  USING CARTCARD.ICN_OPERACIONES ope
			  ON (ope.fecha <= SYSDATE AND ope.fecha = his.fecha)
			  WHEN MATCHED THEN
			  	   UPDATE SET
				   	 	  	his.terminal = NVL(ope.terminal, his.terminal), his.entidad = NVL(ope.entidad, his.entidad), 
							his.id_canal = NVL(ope.id_canal, his.id_canal), his.USUARIO = NVL(ope.USUARIO, his.USUARIO), 
							his.sucursal = NVL(ope.sucursal, his.sucursal), his.operacionid = NVL(ope.operacionid, his.operacionid), 
							his.codigooperacion = NVL(ope.codigooperacion, his.codigooperacion), 
							his.msgoperacion = NVL(ope.msgoperacion, his.msgoperacion), 
							his.codigoerror = NVL(ope.codigoerror, his.codigoerror), his.msgerror = NVL(ope.msgerror, his.msgerror), 
							his.descripcion = NVL(ope.descripcion, his.descripcion), his.entrada = NVL (ope.entrada, his.entrada), 
							his.salida = NVL(ope.salida, his.salida), his.tiempo_resp = NVL(ope.tiempo_resp, his.tiempo_resp), 
							his.referencia = NVL(ope.referencia, his.referencia), his.importe = NVL(ope.importe, his.importe) ,
							his.fechaoperacion = NVL(ope.fechaoperacion, his.fechaoperacion)
				--WHEN MATCHED THEN
							--DELETE WHERE ope.fecha <= SYSDATE
				WHEN NOT MATCHED THEN
         	  	    INSERT 
        				   (his.fecha, his.terminal, his.entidad, his.id_canal, his.USUARIO, his.sucursal,
       						his.operacionid, his.codigooperacion, 
							his.msgoperacion, his.codigoerror, his.msgerror, his.descripcion, his.entrada, 
							his.salida, his.tiempo_resp, his.referencia, his.importe, his.fechaoperacion)
        			VALUES (ope.fecha, ope.terminal, ope.entidad, ope.id_canal,  
			   				ope.USUARIO, ope.sucursal, ope.operacionid,
							ope.codigooperacion, ope.msgoperacion, ope.codigoerror, ope.msgerror,
							ope.descripcion, ope.entrada, ope.salida, ope.tiempo_resp, 
							ope.referencia, ope.importe, ope.fechaoperacion);
							
				DELETE FROM CARTCARD.ICN_OPERACIONES WHERE (fecha <= SYSDATE);
				spCod_Error := 1;
   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      spCod_Error := 0;
      ROLLBACK;
	  RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al migrar a ICN_OPERACIONES_HISTORICO  (' || SQLCODE || '  ' || SQLERRM || ')');
	WHEN OTHERS THEN
		 	spCod_Error := 0;
  			spMsg_Error := SQLERRM;
			DBMS_OUTPUT.put_line(spMsg_Error);
			ROLLBACK;
			RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al migrar a ICN_OPERACIONES_HISTORICO   (' || SQLCODE || '  ' || SQLERRM || ')');
END Migrar_Icn_Ope_To_Hist;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MIPROVINCIA (
   p_usuarioid   IN       INTEGER,
   p_paisid      IN       INTEGER,
   p_estado      IN       VARCHAR2,
   p_out         OUT      INTEGER
)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: montomaximo                                            */
/* Objetivo: Obtiene la provincia de un usuario.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec montomaximo(<<UsuarioId>>...<<:ValorProvincia>>))         */
/* ----------------------------------------------------------------------------------- */
   vusuario   INTEGER;
BEGIN
   BEGIN
      SELECT COUNT (usuarioid)
        INTO vusuario
        FROM CARTCARD.provincias
       WHERE usuarioid = p_usuarioid;

      IF (vusuario = 0)
      THEN
         p_out := 0;

         INSERT INTO CARTCARD.provincias
                     (usuarioid, paisid, provincia
                     )
              VALUES (p_usuarioid, p_paisid, p_estado
                     );
      ELSE
         p_out := vusuario;

         UPDATE CARTCARD.provincias
            SET paisid = p_paisid,
                provincia = p_estado
          WHERE usuarioid = p_usuarioid;
      END IF;
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END miprovincia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MODIFICACONSTANTE (
	   pId 		       in Varchar2,
	   pDescripcion    in Varchar2,
	   pTipoValor 	   in Char,
	   pValorEntero	   in Integer,
	   pValorDecimal   in Float,
	   pValorFecha 	   in Varchar2,
	   pValorCaracter  in Varchar2,
   	   pValorImagen    in Varchar2,
	   pUsuario 	   in Varchar2,
	   pFechaRegistro  in Varchar2
	   
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: modificaConstante                                              */
/* Objetivo: Actualiza un registro en la tabla constantes.                       		   */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec modificaConstante(<<id>>...<<FechaRegistro>>)      */
/* --------------------------------------------------------------------------------------- */
BEGIN
BEGIN
	 update CARTCARD.CONSTANTES set
	 descripcion = pDescripcion,
	 TIPO_VALOR = pTipoValor,
	 VALOR_ENTERO = pValorEntero,
	 VALOR_DECIMAL = pValorDecimal,
	 VALOR_FECHA = To_date(pValorFecha,'ddMMYYYY-HH24:MI:ss'),
	 VALOR_CARACTER = pValorCaracter,
	 USUARIO = pUsuario,
	    --VALOR_IMAGEN, = pValorImagen
	 FECHA_REGISTRO = To_date(pFechaRegistro,'ddMMYYYY-HH24:MI:ss')
	 where
	 ID_CONSTANTES = pId;
	 END;
COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END modificaConstante;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MODIFICAR_MEMBRECIA (
          p_id  IN int,
		  p_costo IN number)
is
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: ELIMINAR_MEMBRECIA                                              */
/* Objetivo: Elimina la membrecia, segun el criterio de busqueda.                        */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: ELIMINAR_MEMBRECIA     <Id>	                                     */
/* ------------------------------------------------------------------------------------- */
BEGIN       
update CARTCARD.membrecia
   set costo = p_costo
   where membreciaid = p_id;
   
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL; 
	  
	  
end MODIFICAR_MEMBRECIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE MODIFICAR_MEMBRESIA (
          p_id  IN cartcard.ic_cat_tipo_membresia.id_tipo_membresia%type,
      p_costo IN cartcard.ic_cat_tipo_membresia.costo%type)
is
BEGIN
update CARTCARD.IC_CAT_TIPO_MEMBRESIA
   set costo = p_costo
   where ID_TIPO_MEMBRESIA = p_id;

EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error '||SQLCODE||' '||substr(SQLERRM, 1, 200));


end MODIFICAR_MEMBRESIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE ModificaTarjeta2(PEReferencia IN CARTCARD.ICN_TARJETA.REFERENCIA%type,
                       PEcardnumber          IN CARTCARD.ICN_TARJETA.CARDNUMBER%type,
                       PEpterminalcode       IN CARTCARD.ICN_TARJETA.PTERMINALCODE%type,
                       PEproductcode         IN CARTCARD.ICN_TARJETA.PRODUCTCODE%type,
                       PEpid                 IN CARTCARD.ICN_TARJETA.PID%type,
                       PEpidtype             IN CARTCARD.ICN_TARJETA.PIDTYPE%type,
                       PEprbservice          IN CARTCARD.ICN_TARJETA.PRBSERVICE%type,
                       PEpdateofbirth        IN CARTCARD.ICN_TARJETA.PDATEOFBIRTH%type,
                       PEpembossedname       IN CARTCARD.ICN_TARJETA.PEMBOSSEDNAME%type,
                       PEptelephoneareacode  IN CARTCARD.ICN_TARJETA.PTELEPHONEAREACODE%type,
                       PEptelephone          IN CARTCARD.ICN_TARJETA.PTELEPHONE%type,
                       PEpfaxareacode        IN CARTCARD.ICN_TARJETA.PFAXAREACODE%type,
                       PEpfaxphone           IN CARTCARD.ICN_TARJETA.PFAXPHONE%type,
                       PEpcellphone          IN CARTCARD.ICN_TARJETA.PCELLPHONE%type,
                       PEpcellphoneareacode  IN CARTCARD.ICN_TARJETA.PCELLPHONEAREACODE%type,
                       PEpidexpiration       IN CARTCARD.ICN_TARJETA.PIDEXPIRATION%type,
                       PEpidcountry          IN CARTCARD.ICN_TARJETA.PIDCOUNTRY%type,
                       PEpidstate            IN CARTCARD.ICN_TARJETA.PIDSTATE%type,
                       PEplastname           IN CARTCARD.ICN_TARJETA.PLASTNAME%type,
                       PEppersonaltitle      IN CARTCARD.ICN_TARJETA.PPERSONALTITLE%type,
                       PEpmaindenname        IN CARTCARD.ICN_TARJETA.PMAINDENNAME%type,
                       PEpmiddlename         IN CARTCARD.ICN_TARJETA.PMIDDLENAME%type,
                       PEpfirstname          IN CARTCARD.ICN_TARJETA.PFIRSTNAME%type,
                       PEpcountry            IN CARTCARD.ICN_TARJETA.PCOUNTRY%type,
                       PEpstate              IN CARTCARD.ICN_TARJETA.PSTATE%type,
                       PEpcity               IN CARTCARD.ICN_TARJETA.PCITY%type,
                       PEpaddress            IN CARTCARD.ICN_TARJETA.PADDRESS%type,
                       PEpzipcode            IN CARTCARD.ICN_TARJETA.PZIPCODE%type,
                       PEpemail              IN CARTCARD.ICN_TARJETA.PEMAIL%type,
                       PErequestid           IN CARTCARD.ICN_TARJETA.REQUESTID%type,
                       PEoperationid         IN CARTCARD.ICN_TARJETA.OPERATIONID%type,
                       PEtoken               IN CARTCARD.ICN_TARJETA.TOKEN%type,
                       PEexpirationdate      VARCHAR,
                       PEverificationcode    IN CARTCARD.ICN_TARJETA.VERIFICATIONCODE%type,
                       PEid_emisor           IN CARTCARD.ICN_TARJETA.ID_EMISOR%type,
                       PEcvv                 IN CARTCARD.ICN_TARJETA.CVV%type,
                       PEtipo_tarjeta        IN CARTCARD.ICN_TARJETA.TIPO_TARJETA%type,
                       PEestatus_bloqueo     IN CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%type,
                       PEusuario_modifico    IN CARTCARD.ICN_TARJETA.USUARIO_MODIFICO%type,
                       PSCod_error out number,
                       PSMsg_Error out varchar2) IS

BEGIN

   PScod_error := 0;
   UPDATE CARTCARD.ICN_TARJETA t
   SET

        T.CARDNUMBER          = nvl(PEcardnumber, T.CARDNUMBER),
        T.PTERMINALCODE       = nvl(PEpterminalcode,T.PTERMINALCODE),
        T.PRODUCTCODE         = nvl(PEproductcode,T.PRODUCTCODE),
        T.PID                 = nvl(PEpid,T.PID),
        T.PIDTYPE             = nvl(PEpidtype,T.PIDTYPE),
        T.PRBSERVICE          = nvl(PEprbservice,T.PRBSERVICE),
        T.PDATEOFBIRTH        = nvl(PEpdateofbirth,T.PDATEOFBIRTH),
        T.PEMBOSSEDNAME       = nvl(PEpembossedname,T.PEMBOSSEDNAME),
        T.PTELEPHONEAREACODE  = nvl(PEptelephoneareacode,T.PTELEPHONEAREACODE),
        T.PTELEPHONE          = nvl(PEptelephone,T.PTELEPHONE),
        T.PFAXAREACODE        = nvl(PEpfaxareacode,T.PFAXAREACODE),
        T.PFAXPHONE           = nvl(PEpfaxphone,T.PFAXPHONE),
        T.PCELLPHONE          = nvl(PEpcellphone,T.PCELLPHONE),
        T.PCELLPHONEAREACODE  = nvl(PEpcellphoneareacode,T.PCELLPHONEAREACODE),
        T.PIDEXPIRATION       = nvl(PEpidexpiration,T.PIDEXPIRATION),
        T.PIDCOUNTRY          = nvl(PEpidcountry,T.PIDCOUNTRY),
        T.PIDSTATE            = nvl(PEpidstate,T.PIDSTATE),
        T.PLASTNAME           = nvl(PEplastname,T.PLASTNAME),
        T.PPERSONALTITLE      = nvl(PEppersonaltitle,T.PPERSONALTITLE),
        T.PMAINDENNAME        = nvl(PEpmaindenname,T.PMAINDENNAME),
        T.PMIDDLENAME         = nvl(PEpmiddlename,T.PMIDDLENAME),
        T.PFIRSTNAME          = nvl(PEpfirstname,T.PFIRSTNAME),
        T.PCOUNTRY            = nvl(PEpcountry,T.PCOUNTRY),
        T.PSTATE              = nvl(PEpstate,T.PSTATE),
        T.PCITY               = nvl(PEpcity,T.PCITY),
        T.PADDRESS            = nvl(PEpaddress,T.PADDRESS),
        T.PZIPCODE            = nvl(PEpzipcode,T.PZIPCODE),
        T.PEMAIL              = nvl(PEpemail,T.PEMAIL),
        T.REQUESTID           = nvl(PErequestid,T.REQUESTID),
        T.OPERATIONID         = nvl(PEoperationid,T.OPERATIONID),
        T.TOKEN               = nvl(PEtoken,T.TOKEN),
        T.EXPIRATIONDATE      = TO_DATE(PEexpirationdate, 'YYYYMMdd' ),
        T.VERIFICATIONCODE    = nvl(PEverificationcode,T.VERIFICATIONCODE),
        T.ID_EMISOR           = nvl(PEid_emisor,T.ID_EMISOR),
        T.CVV                 = nvl(PEcvv,T.CVV),
        T.TIPO_TARJETA        = nvl(PEtipo_tarjeta,T.TIPO_TARJETA),
        T.ESTATUS_BLOQUEO     = nvl(PEestatus_bloqueo,T.ESTATUS_BLOQUEO),
        T.USUARIO_MODIFICO    = nvl(PEusuario_modifico,T.USUARIO_MODIFICO),
        T.ULTIMA_MODIFICACION = sysdate
        WHERE T.REFERENCIA = PEReferencia;

  COMMIT;
   PScod_error:=1;
  EXCEPTION
  WHEN OTHERS THEN
  PScod_error:=0;
  PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_DATOS.Modifica_TARJETA  (' || SQLCODE || '  ' || SQLERRM || ')');
END ;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Modifica_TARJETA2 (PEReferencia IN CARTCARD.ICN_TARJETA.REFERENCIA%type,
                       PEcardnumber          IN CARTCARD.ICN_TARJETA.CARDNUMBER%type,
                       PEpterminalcode       IN CARTCARD.ICN_TARJETA.PTERMINALCODE%type,
                       PEproductcode         IN CARTCARD.ICN_TARJETA.PRODUCTCODE%type,
                       PEpid                 IN CARTCARD.ICN_TARJETA.PID%type,
                       PEpidtype             IN CARTCARD.ICN_TARJETA.PIDTYPE%type,
                       PEprbservice          IN CARTCARD.ICN_TARJETA.PRBSERVICE%type,
                       PEpdateofbirth        IN CARTCARD.ICN_TARJETA.PDATEOFBIRTH%type,
                       PEpembossedname       IN CARTCARD.ICN_TARJETA.PEMBOSSEDNAME%type,
                       PEptelephoneareacode  IN CARTCARD.ICN_TARJETA.PTELEPHONEAREACODE%type,
                       PEptelephone          IN CARTCARD.ICN_TARJETA.PTELEPHONE%type,
                       PEpfaxareacode        IN CARTCARD.ICN_TARJETA.PFAXAREACODE%type,
                       PEpfaxphone           IN CARTCARD.ICN_TARJETA.PFAXPHONE%type,
                       PEpcellphone          IN CARTCARD.ICN_TARJETA.PCELLPHONE%type,
                       PEpcellphoneareacode  IN CARTCARD.ICN_TARJETA.PCELLPHONEAREACODE%type,
                       PEpidexpiration       IN CARTCARD.ICN_TARJETA.PIDEXPIRATION%type,
                       PEpidcountry          IN CARTCARD.ICN_TARJETA.PIDCOUNTRY%type,
                       PEpidstate            IN CARTCARD.ICN_TARJETA.PIDSTATE%type,
                       PEplastname           IN CARTCARD.ICN_TARJETA.PLASTNAME%type,
                       PEppersonaltitle      IN CARTCARD.ICN_TARJETA.PPERSONALTITLE%type,
                       PEpmaindenname        IN CARTCARD.ICN_TARJETA.PMAINDENNAME%type,
                       PEpmiddlename         IN CARTCARD.ICN_TARJETA.PMIDDLENAME%type,
                       PEpfirstname          IN CARTCARD.ICN_TARJETA.PFIRSTNAME%type,
                       PEpcountry            IN CARTCARD.ICN_TARJETA.PCOUNTRY%type,
                       PEpstate              IN CARTCARD.ICN_TARJETA.PSTATE%type,
                       PEpcity               IN CARTCARD.ICN_TARJETA.PCITY%type,
                       PEpaddress            IN CARTCARD.ICN_TARJETA.PADDRESS%type,
                       PEpzipcode            IN CARTCARD.ICN_TARJETA.PZIPCODE%type,
                       PEpemail              IN CARTCARD.ICN_TARJETA.PEMAIL%type,
                       PErequestid           IN CARTCARD.ICN_TARJETA.REQUESTID%type,
                       PEoperationid         IN CARTCARD.ICN_TARJETA.OPERATIONID%type,
                       PEtoken               IN CARTCARD.ICN_TARJETA.TOKEN%type,
                       PEexpirationdate      IN CARTCARD.ICN_TARJETA.EXPIRATIONDATE%type,
                       PEverificationcode    IN CARTCARD.ICN_TARJETA.VERIFICATIONCODE%type,
                      -- PEid_tipo_membresia   IN CARTCARD.ICN_TARJETA.ID_TIPO_MEMBRESIA%type,
                       PEid_emisor           IN CARTCARD.ICN_TARJETA.ID_EMISOR%type,
                       PEcvv                 IN CARTCARD.ICN_TARJETA.CVV%type,
                      -- PEidStatusTarjeta     IN CARTCARD.ICN_TARJETA.ID_STATUS_TARJETA%type,
                       PEtipo_tarjeta        IN CARTCARD.ICN_TARJETA.TIPO_TARJETA%type,
                       PEestatus_bloqueo     IN CARTCARD.ICN_TARJETA.ESTATUS_BLOQUEO%type,
                       PEusuario_modifico    IN CARTCARD.ICN_TARJETA.USUARIO_MODIFICO%type,
                       PSCod_error out number,
                       PSMsg_Error out varchar2) IS

BEGIN

   PScod_error := 0;
   UPDATE CARTCARD.ICN_TARJETA t
   SET

        T.CARDNUMBER          = nvl(PEcardnumber, T.CARDNUMBER),
        T.PTERMINALCODE       = nvl(PEpterminalcode,T.PTERMINALCODE),
        T.PRODUCTCODE         = nvl(PEproductcode,T.PRODUCTCODE),
        T.PID                 = nvl(PEpid,T.PID),
        T.PIDTYPE             = nvl(PEpidtype,T.PIDTYPE),
        T.PRBSERVICE          = nvl(PEprbservice,T.PRBSERVICE),
        T.PDATEOFBIRTH        = nvl(PEpdateofbirth,T.PDATEOFBIRTH),
        T.PEMBOSSEDNAME       = nvl(PEpembossedname,T.PEMBOSSEDNAME),
        T.PTELEPHONEAREACODE  = nvl(PEptelephoneareacode,T.PTELEPHONEAREACODE),
        T.PTELEPHONE          = nvl(PEptelephone,T.PTELEPHONE),
        T.PFAXAREACODE        = nvl(PEpfaxareacode,T.PFAXAREACODE),
        T.PFAXPHONE           = nvl(PEpfaxphone,T.PFAXPHONE),
        T.PCELLPHONE          = nvl(PEpcellphone,T.PCELLPHONE),
        T.PCELLPHONEAREACODE  = nvl(PEpcellphoneareacode,T.PCELLPHONEAREACODE),
        T.PIDEXPIRATION       = nvl(PEpidexpiration,T.PIDEXPIRATION),
        T.PIDCOUNTRY          = nvl(PEpidcountry,T.PIDCOUNTRY),
        T.PIDSTATE            = nvl(PEpidstate,T.PIDSTATE),
        T.PLASTNAME           = nvl(PEplastname,T.PLASTNAME),
        T.PPERSONALTITLE      = nvl(PEppersonaltitle,T.PPERSONALTITLE),
        T.PMAINDENNAME        = nvl(PEpmaindenname,T.PMAINDENNAME),
        T.PMIDDLENAME         = nvl(PEpmiddlename,T.PMIDDLENAME),
        T.PFIRSTNAME          = nvl(PEpfirstname,T.PFIRSTNAME),
        T.PCOUNTRY            = nvl(PEpcountry,T.PCOUNTRY),
        T.PSTATE              = nvl(PEpstate,T.PSTATE),
        T.PCITY               = nvl(PEpcity,T.PCITY),
        T.PADDRESS            = nvl(PEpaddress,T.PADDRESS),
        T.PZIPCODE            = nvl(PEpzipcode,T.PZIPCODE),
        T.PEMAIL              = nvl(PEpemail,T.PEMAIL),
        T.REQUESTID           = nvl(PErequestid,T.REQUESTID),
        T.OPERATIONID         = nvl(PEoperationid,T.OPERATIONID),
        T.TOKEN               = nvl(PEtoken,T.TOKEN),
        T.EXPIRATIONDATE      = nvl(PEexpirationdate,T.EXPIRATIONDATE),
        T.VERIFICATIONCODE    = nvl(PEverificationcode,T.VERIFICATIONCODE),
        --T.ID_TIPO_MEMBRESIA   = nvl(PEid_tipo_membresia,T.ID_TIPO_MEMBRESIA),
        T.ID_EMISOR           = nvl(PEid_emisor,T.ID_EMISOR),
       -- T.ID_STATUS_TARJETA   = nvl(PEidStatusTarjeta,T.ID_STATUS_TARJETA),
        T.CVV                 = nvl(PEcvv,T.CVV),
        T.TIPO_TARJETA        = nvl(PEtipo_tarjeta,T.TIPO_TARJETA),
        T.ESTATUS_BLOQUEO     = nvl(PEestatus_bloqueo,T.ESTATUS_BLOQUEO),
        T.USUARIO_MODIFICO    = nvl(PEusuario_modifico,T.USUARIO_MODIFICO),
        T.ULTIMA_MODIFICACION = sysdate
        WHERE T.REFERENCIA = PEReferencia;

  COMMIT;
   PScod_error:=1;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
  BEGIN
  PScod_error:=0;
  PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_SERVICIO.Modifica_TARJETA  (' || SQLCODE || '  ' || SQLERRM || ')');
  END;
END ;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE MODIFICA_TARJETA_PRUEBA(PEReferencia          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.REFERENCIA%type,
                               PECardnumber          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNUMBER%type,
                               PECardname            IN CARTCARD.ICN_TARJETA_COMPLEMENTO.CARDNAME%type,
                               PENombre_remesa       IN CARTCARD.ICN_TARJETA_COMPLEMENTO.NOMBRE_REMESA%type,
                               PEId_estatus          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.ID_ESTATUS%type,
                               PEComentario          IN CARTCARD.ICN_TARJETA_COMPLEMENTO.COMENTARIO%type,
                               PEFecha_creacion      IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_CREACION%type,
                               PEUsuario_modifico    IN CARTCARD.ICN_TARJETA_COMPLEMENTO.USUARIO_MODIFICO%type,
                               PEFecha_vigencia      IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_VIGENCIA%type,
                               PEFecha_bloqueo       IN CARTCARD.ICN_TARJETA_COMPLEMENTO.FECHA_BLOQUEO%type,
                               PSCod_error           out number,
                               PSMsg_Error           out varchar2) IS
v_existe INTEGER;

BEGIN
  select count(1)
   into v_existe
   from cartcard.icn_tarjeta_complemento c 
   where  c.referencia = PEReferencia and c.ID_ESTATUS=PEId_estatus;

 IF v_existe = 0 THEN

  UPDATE CARTCARD.ICN_TARJETA_COMPLEMENTO c
    SET c.referencia  = nvl(PEReferencia, c.referencia),
        c.cardnumber  = nvl(PECardnumber, c.cardnumber),
        c.cardname  = nvl(PECardname, c.cardname),
        c.nombre_remesa  = nvl(PENombre_remesa, c.nombre_remesa),
        c.id_estatus  = nvl(PEId_estatus, c.id_estatus),
        c.comentario  = nvl(PEComentario, c.comentario),
        c.fecha_creacion  = nvl(PEFecha_creacion, c.fecha_creacion),
        c.usuario_modifico  = nvl(PEUsuario_modifico, c.usuario_modifico),
        c.ultima_modificacion  = sysdate,
        c.fecha_vigencia  = nvl( PEFecha_vigencia, c.fecha_vigencia),
        c.fecha_bloqueo  = nvl(PEFecha_bloqueo, c.fecha_bloqueo)
        WHERE c.referencia = PEReferencia and c.ID_ESTATUS=PEId_estatus;
        PScod_error := 1;
        PSMsg_Error:='OK';
     ELSE
      
     INSERT INTO CARTCARD.ICN_TARJETA_COMPLEMENTO
        (referencia,cardnumber,cardname,nombre_remesa,
        id_estatus,comentario,fecha_creacion,usuario_modifico,ultima_modificacion,
        fecha_vigencia,fecha_bloqueo)
        VALUES (PEReferencia, PECardnumber, PECardname, PENombre_remesa,
        PEId_estatus, PEComentario, NVL(PEFecha_creacion,SYSDATE), PEUsuario_modifico,sysdate,
        PEFecha_vigencia,PEFecha_bloqueo);

       PScod_error := 1;
       PSMsg_Error:='OK';
     
      END IF;
   COMMIT;
  EXCEPTION
  WHEN OTHERS THEN
  PScod_error:=0;
  PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido PKG_ICN_DATOS.ICN_TARJETA_COMPLEMENTO  (' || SQLCODE || '  ' || SQLERRM || ')');
END ;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MODIF_FONDEOS(
    PID_USUARIO       CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
    PFONDEO_DIA       CARTCARD.ICN_CLIENTES.FONDEO_DIA%TYPE,
    PFONDEO_SEMANA    CARTCARD.ICN_CLIENTES.FONDEO_SEMANA%TYPE,
    PFONDEO_MES       CARTCARD.ICN_CLIENTES.FONDEO_MES%TYPE,
    PULTIMO_FONDEO    CARTCARD.ICN_CLIENTES.ULTIMO_FONDEO%TYPE,
    PMES_ACTUAL       CARTCARD.ICN_CLIENTES.MES_ACTUAL%TYPE,
    PUSR_MOD          CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE,
    PULT_MOD          CARTCARD.ICN_CLIENTES.ULTIMA_MODIFICACION%TYPE
    )IS
BEGIN
   
   UPDATE CARTCARD.ICN_CLIENTES CLI
   SET
        CLI.FONDEO_DIA          = PFONDEO_DIA,
        CLI.FONDEO_MES          = PFONDEO_MES,
        CLI.FONDEO_SEMANA       = PFONDEO_SEMANA,
        CLI.ULTIMO_FONDEO       = PULTIMO_FONDEO,
        CLI.MES_ACTUAL          = nvl(PMES_ACTUAL ,CLI.MES_ACTUAL),
        CLI.USUARIO_MODIFICO    = nvl(PUSR_MOD,CLI.USUARIO_MODIFICO),
        CLI.ULTIMA_MODIFICACION = nvl(PULT_MOD,CLI.ULTIMA_MODIFICACION)
        WHERE CLI.ID_USUARIO    = PID_USUARIO;
  COMMIT;
   
  EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido CARTCARD.ACTUALIZA_FONDEOS (' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MOD_BAND_LOGIN (
   PID_USUARIO     CARTCARD.ICN_CLIENTES.ID_USUARIO%TYPE,
   PVALORBANDERA   CARTCARD.ICN_CLIENTES.BANDERA_LOGIN%TYPE,
   PUSR_MOD        CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE,
   PULT_MOD        CARTCARD.ICN_CLIENTES.ULTIMA_MODIFICACION%TYPE
)
IS
BEGIN
   UPDATE CARTCARD.ICN_CLIENTES CLI
      SET CLI.BANDERA_LOGIN = PVALORBANDERA,
          CLI.USUARIO_MODIFICO    = nvl(PUSR_MOD,CLI.USUARIO_MODIFICO),
          CLI.ULTIMA_MODIFICACION = nvl(PULT_MOD,CLI.ULTIMA_MODIFICACION)
    WHERE CLI.ID_USUARIO = PID_USUARIO;
    COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      BEGIN
         RAISE_APPLICATION_ERROR(-20101,'ERROR OCURRIDO EN PKG_ICN_SERVICIO.MOD_BAND_LOGIN('|| SQLCODE|| '  '|| SQLERRM||')');
      END;
   WHEN OTHERS THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20102,'ERROR OCURRIDO EN PKG_ICN_SERVICIO.MOD_BAND_LOGIN('|| SQLCODE|| '  '|| SQLERRM|| ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Lista_Cartcard (
             p_usuario  IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: mod_lista_cartcard                                              */
/* Objetivo: Obtiene las tarjetas activas.                                           	 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_BLOQUEADAS_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>, */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT
	   C.cartcardid cartcardid,
	   U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,
	   M.membreciaid membreciaid,
	   M.duracion duracion
FROM CARTCARD.CARD C
	INNER JOIN CARTCARD.USUARIO U ON C.usuarioId = U.usuarioid
	INNER JOIN CARTCARD.MEMBRECIA M ON C.membreciaid = M.membreciaid
WHERE
	(LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
    AND TO_DATE (C.fechaalta) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(C.fechaalta,'DDmmYYYY')), 'DDmmYYYY')
    AND TO_DATE (C.fechaalta) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(C.fechaalta,'DDmmYYYY')), 'DDmmYYYY')
    AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999') ;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Lista_Cartcard;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Bloqueadas (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_BLOQUEADAS                                          */
/* Objetivo: Obtiene los datos necesarios para el resumen del Rep. Tarjetas Bloqueadas   */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_BLOQUEADAS(<Usuario>,<Tarjeta>,<Fecha_Inicio>,         */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT
	   COUNT(1) totalTarjetasBloqueadas
FROM CARTCARD.CARD C
    INNER JOIN pasbazdes.pcc_tarjetascardmarte T ON C.cartcardid = T.cartcardid
	INNER JOIN CARTCARD.USUARIO U ON C.usuarioId = U.usuarioid
	LEFT JOIN pasbazdes.pcc_hstbloqueotarjetas H ON H.cartcardid = C.cartcardid
WHERE
    idestadotarjeta=2
	AND bloqueo= 2
	AND (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
    AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
    AND TO_DATE (fechasolicitud) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(fechasolicitud,'DDmmYYYY')), 'DDmmYYYY')
    AND TO_DATE (fechasolicitud) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(fechasolicitud,'DDmmYYYY')), 'DDmmYYYY')
    AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999') ;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Bloqueadas;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Bloqueadas_Detalle (
   p_usuario                   IN       VARCHAR2,
   p_numero_tarjeta            IN       VARCHAR2,
   p_fecha_inicio              IN       VARCHAR2,
   p_fecha_fin                 IN       VARCHAR2,
   p_tipo_membresia            IN       VARCHAR2,
   p_promedio_tipo_cambiario   IN       VARCHAR2,
   p_cursor                    OUT      sys_refcursor
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_BLOQUEADAS_DETALLE                                  */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Tarjetas Bloqueadas  */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_BLOQUEADAS_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>, */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)  */
/* ------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT cartcardid, m.duracion, m.membreciaid,
             m.duracion || ' meses' tipomembresia,
             u.nombre || ' ' || u.apaterno || ' ' || u.amaterno nombre,
             fechabloqueo, 'Expiro la membrecia' motivo
        FROM CARTCARD.CARD c INNER JOIN CARTCARD.USUARIO u ON c.usuarioid =
                                                                    u.usuarioid
             INNER JOIN CARTCARD.CC_TARJETASEXPIRADAS e ON c.cartcardid =
                                                                 e.cartcardid
             INNER JOIN CARTCARD.MEMBRECIA m ON m.membreciaid =
                                                                c.membreciaid
             INNER JOIN (SELECT   usuarioid,
                                  MAX (idregistrote) AS idregistrote
                             FROM CARTCARD.CC_TARJETASEXPIRADAS
                         GROUP BY usuarioid) expiradas ON expiradas.usuarioid =
                                                                  e.usuarioid
                                                     AND expiradas.idregistrote =
                                                                e.idregistrote
       WHERE bloqueo = 0
         AND (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
         AND TO_DATE (fechabloqueo) >=
                TO_DATE (COALESCE (p_fecha_inicio,
                                   '' || TO_CHAR (fechabloqueo, 'DDmmYYYY')
                                  ),
                         'DDmmYYYY'
                        )
         AND TO_DATE (fechabloqueo) <=
                TO_DATE (COALESCE (p_fecha_fin,
                                   '' || TO_CHAR (fechabloqueo, 'DDmmYYYY')
                                  ),
                         'DDmmYYYY'
                        )
         AND membreciaid =
                TO_NUMBER (COALESCE (p_tipo_membresia, '' || membreciaid),
                           '9999999999'
                          );
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
END Mod_Reporte_Bloqueadas_Detalle;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Cancelaciones (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_CANCELACIONES                                       */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Cancelaciones         */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_CANCELACIONES<Usuario>,<Tarjeta>,                      */
/*                   <Fecha_Inicio>,                                                     */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR

SELECT COUNT(1)	totalTarjetasCanceladas

FROM CARTCARD.CC_CANCELACIONES Rep
	 INNER JOIN CARTCARD.CARD C ON Rep.cartcardid = C.cartcardid
	 INNER JOIN pasbazdes.pcc_tarjetascardmarte T ON C.cartcardid = T.cartcardid
	 INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C.usuarioid

WHERE
	  	   (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
       	   AND TO_DATE (Rep.fechaAutorizaAdmin) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(Rep.fechaAutorizaAdmin,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (Rep.fechaAutorizaAdmin) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(Rep.fechaAutorizaAdmin,'DDmmYYYY')), 'DDmmYYYY')
       	   AND C.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || C.membreciaid), '9999999999');

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Cancelaciones;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Cancel_Detalle (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_CANCEL_DETALLE                                      */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Cancelaciones         */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_CANCEL_DETALLE<Usuario>,<Tarjeta>,                     */
/*                   <Fecha_Inicio>,                                                     */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR

SELECT
	C.cartcardid,
	M.duracion,
	M.membreciaid,
    M.duracion || ' meses' tipoMembresia,
	U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,
	fechaAutorizaAdmin fechaCancelacion

FROM CARTCARD.CC_CANCELACIONES Rep
	 INNER JOIN CARTCARD.CARD C ON Rep.cartcardid = C.cartcardid
	 INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C.usuarioid
     INNER JOIN CARTCARD.MEMBRECIA M ON M.membreciaid = C.membreciaid

WHERE
	 	    (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND TO_DATE (Rep.fechaAutorizaAdmin) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(Rep.fechaAutorizaAdmin,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (Rep.fechaAutorizaAdmin) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(Rep.fechaAutorizaAdmin,'DDmmYYYY')), 'DDmmYYYY')
       	   AND C.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || C.membreciaid), '9999999999');

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Cancel_Detalle;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Creadas (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_CREADAS                                             */
/* Objetivo: Obtiene los datos necesarios para el resumen del Rep. Tarjetas Creadas		 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_CREADAS(<Usuario>,<Tarjeta>,<Fecha_Inicio>,            */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT COUNT(1) tarjetasCreadasTotal,
    1 * COUNT(1) comisionXCreacion,
	1 * COUNT(1) + 0.95 * COUNT(1) + (SUM((SELECT
		CASE WHEN COUNT(1) BETWEEN 1 AND 99999 THEN 2
		WHEN COUNT(1) BETWEEN 100000 AND 999999 THEN 1
		ELSE 0.5 END
	FROM pasbazdes.pcc_tarjetas T_
        INNER JOIN CARTCARD.CARD C_ ON T_.cartcardid = C_.cartcardid
		INNER JOIN CARTCARD.CARD C ON  C.cartcardid = C_.cartcardid
        INNER JOIN CARTCARD.MEMBRECIA M_ ON M_.membreciaid = C_.membreciaid
        )
    *
	m.DURACION)) comisionesTotal,
     0.95 * COUNT(1) ofacTotal,
    SUM((SELECT
		CASE WHEN COUNT(1) BETWEEN 1 AND 99999 THEN 2
		WHEN COUNT(1) BETWEEN 100000 AND 999999 THEN 1
		ELSE 0.5 END
	FROM pasbazdes.pcc_tarjetas T_
        INNER JOIN CARTCARD.CARD C_ ON T_.cartcardid = C_.cartcardid
		INNER JOIN CARTCARD.CARD C ON  C.cartcardid = C_.cartcardid
        INNER JOIN CARTCARD.MEMBRECIA M_ ON M_.membreciaid = C_.membreciaid
        )
    *
	M.DURACION) comisionMensualTotal,
    (SELECT COUNT(1) FROM CARTCARD.CC_CANCELACIONES CC) tarjetasCanceladasTotal
FROM CARTCARD.CARD C
	 INNER JOIN pasbazdes.pcc_tarjetascardmarte T ON T.cartcardid = C.cartcardid
	 INNER JOIN CARTCARD.MEMBRECIA M ON C.membreciaid = M.membreciaid
	 INNER JOIN CARTCARD.USUARIO U ON C.usuarioid = U.usuarioid
WHERE
	  	   (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
       	   AND TO_DATE (C.fechaAlta) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (C.fechaAlta) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
       	   AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || M.membreciaid), '9999999999')
GROUP BY 1;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Creadas;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Mod_Reporte_Creadas_Detalle (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_CREADAS_DETALLE                                     */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Tarjetas Creadas		 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_CREADAS_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>,    */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT
	cartcardid,
	M.duracion,
	M.membreciaid,
    M.duracion || ' meses' tipoMembresia,
	U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,
    C.fechaAlta fechaCreacion,
    apaterno || ' ' || amaterno || ' ' || nombre nombreCliente,
    1.00 comisionXCreacion,
    0.95 comisionOfac,
	M.duracion comisionXMeses,
	(SELECT OP.TIPOCAMBIOUSD FROM CARTCARD.OPERACIONVENTANILLA OP WHERE OP.CARTCARDID = C.CARTCARDID AND ROWNUM = 1) TIPO_CAMBIO
FROM
    CARTCARD.CARD C
    INNER JOIN CARTCARD.MEMBRECIA M ON M.membreciaid = C.membreciaid
    INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C.usuarioid
WHERE
	  	  (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND C.fechaAlta BETWEEN TO_DATE(p_fecha_inicio,'dd/mm/yyyy') AND TO_DATE(p_fecha_fin,'dd/mm/yyyy')+1
		   AND M.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || M.membreciaid), '9999999999')
		   AND C.CARTCARDID NOT IN (SELECT EX.CARTCARDID FROM CARTCARD.CC_TARJETASEXPIRADAS EX);	 


EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Creadas_Detalle;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Mod_Reporte_Creadas_Detalle2 (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_CREADAS_DETALLE                                     */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Tarjetas Creadas		 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_CREADAS_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>,    */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT
	cartcardid,
	M.duracion,
	M.membreciaid,
    M.duracion || ' meses' tipoMembresia,
	U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,
    C.fechaAlta fechaCreacion,
    apaterno || ' ' || amaterno || ' ' || nombre nombreCliente,
    1.00 comisionXCreacion,
    0.95 comisionOfac,
	M.duracion comisionXMeses,
	(SELECT OP.TIPOCAMBIOUSD FROM CARTCARD.OPERACIONVENTANILLA OP WHERE OP.CARTCARDID = C.CARTCARDID AND ROWNUM = 1) TIPO_CAMBIO
FROM
    CARTCARD.CARD C
    INNER JOIN CARTCARD.MEMBRECIA M ON M.membreciaid = C.membreciaid
    INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C.usuarioid
WHERE
	  	  (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND TO_DATE (C.fechaAlta) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (C.fechaAlta) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
       	   AND M.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || M.membreciaid), '9999999999')
		   AND C.CARTCARDID NOT IN (SELECT EX.CARTCARDID FROM CARTCARD.CC_TARJETASEXPIRADAS EX);	 


EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Creadas_Detalle2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Creadas_Membresia (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_CREADAS_X_MEMBRESIA                                 */
/* Objetivo: Obtiene la relación de los tipos de membresia y el numero de tarjetas       */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_CREADAS_X_MEMBRESIA<Usuario>,<Tarjeta>,                */
/*                   <Fecha_Inicio>,                                                     */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR

SELECT duracion tipoMembresia,
 COUNT(1) numeroTarjetas,
 1.0 * COUNT(1) comisionEmision,
 0.95 * COUNT(1) comisionOfac,
     (SELECT
		CASE WHEN COUNT(1) BETWEEN 1 AND 99999 THEN 2
		WHEN COUNT(1) BETWEEN 100000 AND 999999 THEN 1
		ELSE 0.5 END
	FROM pasbazdes.pcc_tarjetas T_
        INNER JOIN CARTCARD.CARD C_ ON T_.cartcardid = C_.cartcardid
        INNER JOIN CARTCARD.MEMBRECIA M_ ON M_.membreciaid = C_.membreciaid
        WHERE M.membreciaid = M_.membreciaid) * COUNT(1) * duracion comisionMensual
FROM CARTCARD.MEMBRECIA M
    INNER JOIN CARTCARD.CARD C ON C.membreciaid = M.membreciaid
	INNER JOIN pasbazdes.pcc_tarjetascardmarte T ON T.cartcardid = C.cartcardid
	INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C.usuarioid
WHERE bloqueo IN (0,1)
   AND (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
   AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
   AND TO_DATE (C.fechaAlta) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
   AND TO_DATE (C.fechaAlta) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
   AND C.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || C.membreciaid), '9999999999')

GROUP BY duracion, M.membreciaid;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Creadas_Membresia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Fisicas (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_FISICAS                                             */
/* Objetivo: Obtiene los datos necesarios para el resumen del Rep. Tarjetas Físicas      */
/*           Emitidas.                                                             		 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_FISICAS(<Usuario>,<Tarjeta>,<Fecha_Inicio>,            */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT COUNT(1) totalTarjetasEmitidas FROM CARTCARD.CC_SOLICITUDPLASTICO SP
    INNER JOIN CARTCARD.CARD C ON C.cartcardid = SP.cartcardid
    INNER JOIN pasbazdes.pcc_tarjetascardmarte T ON C.cartcardid = T.cartcardid
	INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C.usuarioid
WHERE
	  	  (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
       	   AND TO_DATE (C.fechaAlta) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (C.fechaAlta) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
       	   AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999');

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Fisicas;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Fisicas_Detalle (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_FISICAS_DETALLE                                     */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Tarjetas Físicas      */
/*           Emitidas.                                                             		 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_FISICAS_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>,    */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT
	C.cartcardid,
	M.duracion,
	M.membreciaid,
    M.duracion || ' meses' tipoMembresia,
	U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,
	fechaSolicitud fechaEmision

FROM CARTCARD.CC_SOLICITUDPLASTICO SP
    INNER JOIN CARTCARD.CARD C ON C.cartcardid = SP.cartcardid
	INNER JOIN CARTCARD.USUARIO U ON C.usuarioid = U.usuarioid
    INNER JOIN CARTCARD.MEMBRECIA M ON M.membreciaid = C.membreciaid

WHERE
	 	  (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND TO_DATE (C.fechaAlta) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (C.fechaAlta) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
       	   AND M.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || M.membreciaid), '9999999999');

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Fisicas_Detalle;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Fondeos (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_FONDEOS                                             */
/* Objetivo: Obtiene los datos necesarios para el resumen del Rep. Fondeos				 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_FONDEOS(<Usuario>,<Tarjeta>,<Fecha_Inicio>,            */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN


OPEN       p_cursor FOR
SELECT COUNT(1) FondeosTotal,
	   COUNT(DISTINCT numeroTarjeta) TarjetasFondeadasTotal,
	   COUNT(DISTINCT numeroTarjeta) FondeosPrimeraVezTotal,
	   SUM(monto) percepcionesXFondeosTotal,
	   SUM(comisionIUPI) ComisionFondeosIupiCard,
	   SUM(comisionCardMarte)  ComisionFondeosCardMarte
FROM
--consulta inviolable...
(SELECT DISTINCT
    T.numeroTarjeta numeroTarjeta,
    Op.cantidaddepositada/Op.tipoCambioUSD monto,
    fechaoperacion,
    tipoCambioUSD tipoCambio,
    '' tipoFondeo,
    CASE Op.usuariodepositante WHEN 'SPEI' THEN '2' ELSE '1' END tipoEntrada,
    CASE Op.usuariodepositante WHEN 'SPEI' THEN 3 ELSE 4 END comisionIUPI,
    2 comisionCardMarte

        FROM pasbazdes.pcc_tarjetascardmarte T

        INNER JOIN CARTCARD.CARD C ON C.cartcardid = T.cartcardid
        INNER JOIN CARTCARD.OPERACIONVENTANILLA Op ON C.cartcardid = Op.cartcardid
		INNER JOIN CARTCARD.USUARIO U ON C.usuarioid = U.usuarioid
        WHERE (bloqueo = 0 OR bloqueo = 1)
           AND codigoresultado = '000'
           AND mensajeoperacion LIKE ('%Fondeo%')
       	   AND (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
       	   AND TO_DATE (fechaoperacion) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(fechaoperacion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (fechaoperacion) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(fechaoperacion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999')

UNION

SELECT DISTINCT
       T.numeroTarjeta numeroTarjeta,
       Mv.monto monto,
       R.fechatransaccion fechaOperacion,
       1 tipoCambio,
       '' tipoFondeo,
       '3' tipoEntrada,
       monto * 0.0485 comisionIUPI,
       2 comisionCardMarte


	   FROM pasbazdes.pcc_tarjetascardmarte T

       INNER JOIN CARTCARD.CARD C ON C.cartcardid = T.cartcardid
       INNER JOIN pasbazdes.pcc_movtospagos Mv ON C.cartcardid = Mv.cartcardid
       INNER JOIN pasbazdes.pcc_respuestapago R ON R.idoperacion = Mv.idoperacion
	   INNER JOIN CARTCARD.USUARIO U ON C.usuarioid = U.usuarioid
       WHERE (bloqueo = 0 OR bloqueo = 1)
           AND R.codigoerror = 0
		   AND Mv.idtipotransaccion = 7
       	   AND (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
       	   AND TO_DATE (R.fechatransaccion) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(R.fechaTransaccion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (R.fechatransaccion) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(R.fechaTransaccion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999')) CI;


EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Fondeos;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MOD_REPORTE_FONDEOS_ADMIN (
             p_usuario  IN varchar2, 
          p_numero_tarjeta IN varchar2, 
          p_fecha_inicio IN varchar2, 
          p_fecha_fin IN varchar2, 
          p_tipo_membresia IN varchar2, 
          p_promedio_tipo_cambiario IN varchar2,
          p_cursor        OUT      sys_refcursor)
is
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_FONDEOS                                             */
/* Objetivo: Obtiene los datos necesarios para el resumen del Rep. Fondeos				 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_FONDEOS(<Usuario>,<Tarjeta>,<Fecha_Inicio>,            */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

open p_cursor for
SELECT 
    duracion, 
    count(1) numeroTarjetas, 
	costo * count(1) comisionDolares, 
	0.95 * count(1) ofac, 
	1 * count(1) comisionEmision, 
	2 * count(1) * duracion pagoMensualidad,
	(count(1) * (costo + 0.95 + 1)) totalEntradas
	

FROM CARTCARD.membrecia M
inner join CARTCARD.card C on C.membreciaid = M.membreciaid 

group by duracion, costo;

END MOD_REPORTE_FONDEOS_ADMIN;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Fondeos_Detalle(
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_FONDEOS_DETALLE                                     */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Fondeos                 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_FONDEOS_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>,    */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)     */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT *  FROM
(
SELECT C.cartcardid,
	M.duracion,
	M.membreciaid,
    M.duracion || ' meses' tipoMembresia,
	U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,

--    T.numeroTarjeta numeroTarjeta,

	'C' || Op.operacionid operacionId,
	Op.cantidaddepositada montoPesos,
    Op.cantidaddepositada/Op.tipoCambioUSD montoDolares,
    fechaoperacion horaFondeo,
    tipoCambioUSD tipoCambio,
    '' tipoFondeo,
    CASE Op.usuariodepositante WHEN 'SPEI' THEN '2' ELSE '1' END tipoEntrada,
    CASE Op.usuariodepositante WHEN 'SPEI' THEN 3 ELSE 4 END comisionIUPICard,
    2 comisionCardMarte

    FROM CARTCARD.CARD C
        INNER JOIN CARTCARD.OPERACIONVENTANILLA Op ON C.cartcardid = Op.cartcardid
		INNER JOIN CARTCARD.USUARIO U ON C.usuarioid = U.usuarioid
		INNER JOIN CARTCARD.MEMBRECIA M ON M.membreciaid = C.membreciaid
        WHERE (bloqueo = 0 OR bloqueo = 1)
           AND codigoresultado = '000'
           AND mensajeoperacion LIKE ('%Fondeo%')
       	   AND (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND TO_DATE (fechaoperacion) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(fechaoperacion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (fechaoperacion) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(fechaoperacion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999')
);

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Fondeos_Detalle;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Fond_Admin_Detalle (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_FOND_ADMIN_DETALLE                                  */
/* Objetivo: Obtiene los datos necesarios para el resumen del Rep. Fondeos				 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_FOND_ADMIN_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>, */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN p_cursor FOR
SELECT DISTINCT * FROM
(
SELECT DISTINCT C.cartcardid,
    t.numerotarjeta tarjeta,
    nombre || ' ' || apaterno || ' ' || amaterno nombre,
	 fechaOperacion fechaFondeo,
	cantidadDepositada depositoPesos,
	membreciaid,
--	mensajeoperacion,
	tipoCambioUSD tipoCambio,
	CASE Op.usuariodepositante WHEN 'SPEI' THEN 3 ELSE 4 END comisionIupiCard,
	TRUNC((cantidadDepositada/tipoCambioUSD) - (CASE Op.usuariodepositante WHEN 'SPEI' THEN 3 ELSE 4 END),2) fondeoDlls,
	2.00 pagoCardMarte


        FROM pasbazdes.pcc_tarjetascardmarte T

        INNER JOIN CARTCARD.CARD C ON C.cartcardid = T.cartcardid
        INNER JOIN CARTCARD.OPERACIONVENTANILLA Op ON C.cartcardid = Op.cartcardid
		INNER JOIN CARTCARD.USUARIO U ON C.usuarioid = U.usuarioid
        WHERE (bloqueo = 0 OR bloqueo = 1)
           AND codigoresultado = '000'
           AND mensajeoperacion LIKE ('%Fondeo%')
       	   AND (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
       	   AND TO_DATE (fechaOperacion) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(fechaOperacion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (fechaOperacion) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(fechaOperacion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999')


UNION

SELECT DISTINCT C.cartcardid ,
	t.numerotarjeta,
    nombre || ' ' || apaterno || ' ' || amaterno nombre,
	fechaTransaccion fechaFondeo,
	monto,
	membreciaid,
--	mensajeoperacion,
	1.00,
	TRUNC(0.0485 * monto,2) comisionIUPI,
	TRUNC(monto - (0.0485 * monto),2) fondeoDlls,
	2.00 comisionCardMarte

       FROM pasbazdes.pcc_tarjetascardmarte T

       INNER JOIN CARTCARD.CARD C ON C.cartcardid = T.cartcardid
       INNER JOIN pasbazdes.pcc_movtospagos Mv ON C.cartcardid = Mv.cartcardid
       INNER JOIN pasbazdes.pcc_respuestapago R ON R.idoperacion = Mv.idoperacion
	   INNER JOIN CARTCARD.USUARIO U ON C.usuarioid = U.usuarioid
       WHERE (bloqueo = 0 OR bloqueo = 1)
           AND R.codigoerror = 0
		   AND Mv.idtipotransaccion = 7
       	   AND (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND T.numeroTarjeta = COALESCE(p_numero_tarjeta, T.numeroTarjeta)
       	   AND TO_DATE (R.fechatransaccion) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(R.fechaTransaccion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (R.fechatransaccion) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(R.fechaTransaccion,'DDmmYYYY')), 'DDmmYYYY')
       	   AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999')
);


EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Fond_Admin_Detalle;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Reactivas_Detalle (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_REACTIVADAS_DETALLE                                     */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Tarjetas Creadas		 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_REACTIVADAS_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>,    */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT
	C.cartcardid,
	M.duracion,
	M.membreciaid,
	U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,
    R.fechadesbloqueo fechaReactivacion,
    M.duracion || ' meses' tipoMembresia,
    duracion comisionXMeses
FROM CARTCARD.CARD C
	INNER JOIN CARTCARD.CC_RENOVACIONES R ON C.cartcardid = R.cartcardid
    INNER JOIN CARTCARD.MEMBRECIA M ON M.membreciaid = C.membreciaid
    INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C.usuarioid
WHERE
	  	  (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND TO_DATE (R.fechadesbloqueo) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(R.fechadesbloqueo,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (R.fechadesbloqueo) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(R.fechadesbloqueo,'DDmmYYYY')), 'DDmmYYYY')
       	   AND membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || membreciaid), '9999999999');


EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Reactivas_Detalle;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE MOD_REPORTE_RENOVADAS_DETALLE (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_CREADAS_DETALLE                                     */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Tarjetas Creadas   */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_CREADAS_DETALLE(<Usuario>,<Tarjeta>,<Fecha_Inicio>,    */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)  */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT
 cartcardid,
 M.duracion,
 M.membreciaid,
    M.duracion || ' meses' tipoMembresia,
 U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,
    C.fechaAlta fechaCreacion,
    apaterno || ' ' || amaterno || ' ' || nombre nombreCliente,
    1.00 comisionXCreacion,
    0.95 comisionOfac,
 M.duracion comisionXMeses,
 (SELECT OP.TIPOCAMBIOUSD FROM CARTCARD.OPERACIONVENTANILLA OP WHERE OP.CARTCARDID = C.CARTCARDID AND ROWNUM = 1) TIPO_CAMBIO
FROM
    CARTCARD.CARD C
    INNER JOIN CARTCARD.MEMBRECIA M ON M.membreciaid = C.membreciaid
    INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C.usuarioid
WHERE
      (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
           AND TO_DATE (C.fechaAlta) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
           AND TO_DATE (C.fechaAlta) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(C.fechaAlta,'DDmmYYYY')), 'DDmmYYYY')
           AND M.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || M.membreciaid), '9999999999')
     AND C.CARTCARDID IN (SELECT EX.CARTCARDID FROM CARTCARD.CC_TARJETASEXPIRADAS EX);  


EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END MOD_REPORTE_RENOVADAS_DETALLE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Reposiciones (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_REPOSICIONES                                        */
/* Objetivo: Obtiene los datos necesarios para el resumen del Rep. Reposiciones          */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_REPOSICIONES<Usuario>,<Tarjeta>,<Fecha_Inicio>,        */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT COUNT(1) totalTarjetasRepuestas


FROM CARTCARD.CC_REPOSICIONES Rep
	 INNER JOIN CARTCARD.CARD C1 ON Rep.cartcardidcancela = C1.cartcardid
	 INNER JOIN pasbazdes.pcc_tarjetascardmarte T1 ON C1.cartcardid = T1.cartcardid
	 INNER JOIN CARTCARD.CARD C2 ON Rep.cartcardidrepone = C2.cartcardid
	 INNER JOIN pasbazdes.pcc_tarjetascardmarte T2 ON C2.cartcardid = T2.cartcardid
	 INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C1.usuarioid
WHERE
	  	   (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND (T1.numeroTarjeta = COALESCE(p_numero_tarjeta, T1.numeroTarjeta) OR T2.numeroTarjeta = COALESCE(p_numero_tarjeta, T2.numeroTarjeta))
       	   AND TO_DATE (Rep.fechaRegistro) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(Rep.fechaRegistro,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (Rep.fechaRegistro) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(Rep.fechaRegistro,'DDmmYYYY')), 'DDmmYYYY')
       	   AND C1.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || C1.membreciaid), '9999999999');

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Reposiciones;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Mod_Reporte_Repos_Detalle (
             p_usuario  IN VARCHAR2,
          p_numero_tarjeta IN VARCHAR2,
          p_fecha_inicio IN VARCHAR2,
          p_fecha_fin IN VARCHAR2,
          p_tipo_membresia IN VARCHAR2,
          p_promedio_tipo_cambiario IN VARCHAR2,
          p_cursor        OUT      sys_refcursor)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: MOD_REPORTE_REPOSICIONES_DETALLE                                */
/* Objetivo: Obtiene los datos necesarios para el detalle del Rep. Reposiciones          */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Feb/2009                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: MOD_REPORTE_REPOSICIONES_DETALLE<Usuario>,<Tarjeta>,               */
/*                   <Fecha_Inicio>,                                                     */
/*                   <Fecha_Fin>,<Tipo_Membresia>,<Promedio_Tipo_Cambiario>,:<Cursor>)	 */
/* ------------------------------------------------------------------------------------- */
BEGIN

OPEN       p_cursor FOR
SELECT
	C1.cartcardid cartcardidAnterior,
	C2.cartcardid cartcardid,
	M.duracion,
	M.membreciaid,
    M.duracion || ' meses' tipoMembresia,
	U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombre,
	fechaRegistro,
	0 saldoRepuesto


FROM CARTCARD.CC_REPOSICIONES Rep
	 INNER JOIN CARTCARD.CARD C1 ON Rep.cartcardidcancela = C1.cartcardid
	 INNER JOIN CARTCARD.CARD C2 ON Rep.cartcardidrepone = C2.cartcardid
	 INNER JOIN CARTCARD.USUARIO U ON U.usuarioid = C1.usuarioid
	 INNER JOIN CARTCARD.MEMBRECIA M ON M.membreciaid = C1.membreciaid
WHERE
	  	   (LOWER(U.nombre || ' ' || U.apaterno || ' ' || U.amaterno || ' ' || U.nombre) LIKE LOWER('%' || p_usuario || '%') OR LOWER(U.nombreusuario) = LOWER(p_usuario))
       	   AND TO_DATE (Rep.fechaRegistro) >= TO_DATE (COALESCE(p_fecha_inicio, '' || TO_CHAR(Rep.fechaRegistro,'DDmmYYYY')), 'DDmmYYYY')
       	   AND TO_DATE (Rep.fechaRegistro) <= TO_DATE (COALESCE(p_fecha_fin, '' || TO_CHAR(Rep.fechaRegistro,'DDmmYYYY')), 'DDmmYYYY')
       	   AND C1.membreciaid = TO_NUMBER(COALESCE(p_tipo_membresia, '' || C1.membreciaid), '9999999999');

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;

END Mod_Reporte_Repos_Detalle;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MOD_REPORTE_TIPO_USUARIO (p_user IN VARCHAR2, p_cursor OUT sys_refcursor)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: membrecias                                            */
/* Objetivo: Obtiene la descripcion de una membrecia.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec membrecias(<<:Cursor>>))         */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
select 
	   case 
	   when (select valor_caracter from cartcard.constantes where id_constantes = 'REP_ADMINISTRADORES') like '%' || p_user || ';%' then 'administracion'
	   when (select valor_caracter from cartcard.constantes where id_constantes = 'REP_TESOREROS') like '%' || p_user || ';%' then 'tesoreria' 
	   when (select valor_caracter from cartcard.constantes where id_constantes = 'REP_CARDMARTE') like '%' || p_user || ';%' then 'cardmarte'
	   when (select valor_caracter from cartcard.constantes where id_constantes = 'REP_CONTABILIDAD') like '%' || p_user || ';%' then 'contabilidad'
	   else '' end tipoUsuario
from dual ;
   
   
END MOD_REPORTE_TIPO_USUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MONEDAS (
   p_cursor   OUT   sys_refcursor
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: moneda                        					  */
/* Objetivo: Recupera los monedas standar				   		  		  */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec monedas(<<:Cursor>>) 		               	  */
/* ---------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT   tipomoneda, descripcion
          FROM CARTCARD.moneda
      ORDER BY descripcion;

END monedas;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE MONTOMAXIMO (
   p_referencia    IN       VARCHAR2,
   p_fechainicio   IN       VARCHAR2,
   p_fechafin      IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: montomaximo                                            */
/* Objetivo: Obtiene el monto maximo que un usuario puede depositar por su referencia.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec montomaximo(<<Referencia>>...<<:cursor>>))         */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT cantidaddepositada, tipocambiousd
        FROM CARTCARD.operacionventanilla
       WHERE referencia = p_referencia
         AND NVL (cantidaddepositada, 0) != 0
         AND NVL (tipocambiousd, 0) != 0
 		 and mensajeoperacion like ('Fondeo%')
         AND (    fechaoperacion >
                                TO_DATE (p_fechainicio, 'ddMMYYYY-HH24:MI:ss')
              AND fechaoperacion < TO_DATE (p_fechafin, 'ddMMYYYY-HH24:MI:ss')
             );
END montomaximo;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          MONTOMAXIMOPORUSUARIOID (
   p_usuarioid     IN       INTEGER,
   p_fechainicio   IN       VARCHAR2,
   p_fechafin      IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: montomaximoporusuarioid                                            */
/* Objetivo: Obtiene el monto maximo que un usuario puede depositar.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec montomaximoporusuarioid(<<UsuaroioId>>...<<:cursor>>))         */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT cantidaddepositada, tipocambiousd
        FROM CARTCARD.operacionventanilla
       WHERE referencia = (SELECT referencia
                             FROM CARTCARD.card
                            WHERE usuarioid = p_usuarioid 
							AND (bloqueo = 0 OR bloqueo = 1 or bloqueo =4))
         AND NVL (cantidaddepositada, 0) != 0
         AND NVL (tipocambiousd, 0) != 0
 		 and mensajeoperacion like ('Fondeo%')
         AND (    fechaoperacion >
                                TO_DATE (p_fechainicio, 'ddMMYYYY-HH24:MI:ss')
              AND fechaoperacion < TO_DATE (p_fechafin, 'ddMMYYYY-HH24:MI:ss')
             );
END montomaximoporusuarioid;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE MUNICIPIOS (
   pmunicipios   OUT      sys_refcursor,
   pestados      IN       INTEGER  
)
AS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: municipios                                            */
/* Objetivo: Obtiene los municipios del catalogo.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec municipios(<<:cursor>>,<<Estados>>))         */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN pmunicipios FOR
      SELECT   mu.municipioid, mu.estadoid, mu.nombremunicipio, mu.clavelada
          FROM cartcard.municipio mu
         WHERE mu.estadoid = pestados
      ORDER BY nombremunicipio;
END municipios;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE MUNICIPIOS2 (
 pmunicipios   OUT      sys_refcursor
)
AS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: municipios2                                            */
/* Objetivo: Obtiene los municipios del catalogo.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec municipios2(<<:cursor>>))         */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN pmunicipios FOR
      SELECT   munic.municipioid, munic.estadoid, munic.nombremunicipio, munic.clavelada
          FROM CARTCARD.municipio munic
      ORDER BY munic.nombremunicipio;
END municipios2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          NUEVOREGISTRO (
   p_nombre                IN       VARCHAR2,
   p_apaterno              IN       VARCHAR2,
   p_amaterno              IN       VARCHAR2,
   p_calle                 IN       VARCHAR2,
   p_colonia               IN       VARCHAR2,
   p_municipioid           IN       VARCHAR2,
   p_ciudad                IN       VARCHAR2,
   p_codigopostal          IN       VARCHAR2,
   p_telefono              IN       VARCHAR2,
   p_fax                   IN       VARCHAR2,
   p_mail                  IN       VARCHAR2,
   p_paisid                IN       INTEGER,
   p_estadoid              IN       INTEGER,
   p_nombreusuario         IN       VARCHAR2,
   pidentificacion         IN       INTEGER,
   pnumeroidentificacion   IN       VARCHAR2,
   pcontrasenia            IN       VARCHAR,
   p_usuarioid             OUT      INTEGER,
   p_referencia            OUT      VARCHAR
)
IS
/* ----------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: nuevoregistro                                                          */
/* Objetivo: Ingresa un registro nuevo de usuario.    */
/* Autor:    Equipo CartCard (Siscon)                                                                          */
/* Fecha Creacion: Nov/2008                                                                                    */
/* Fecha Modificacion:                                                                                         */
/* Ejemplo Ejecucion: exec nuevoregistro(<<nombre>>...<<:Referencia>>)      */
/* ----------------------------------------------------------------------------------------------------------- */
BEGIN
   BEGIN
      SELECT usuarioid_seq.NEXTVAL
        INTO p_usuarioid
        FROM DUAL;

      INSERT INTO CARTCARD.usuario
                  (usuarioid, nombre, apaterno, amaterno, calle,
                   colonia, municipioid, ciudad, codigopostal,
                   telefono, fax, mail, paisid, estadoid,
                   nombreusuario, estadodecuentaid, identificacionid,
                   numeroidentificacion, contrasenia
                  )
           VALUES (p_usuarioid, p_nombre, p_apaterno, p_amaterno, p_calle,
                   p_colonia, p_municipioid, p_ciudad, p_codigopostal,
                   p_telefono, p_fax, p_mail, p_paisid, p_estadoid,
                   p_nombreusuario, 0, pidentificacion,
                   pnumeroidentificacion, pcontrasenia
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENCANCELACIONESPENDIENTES (
   p_fechaincial     IN       VARCHAR2,
   p_fechafinal      IN       VARCHAR2,
   p_cancelaciones   OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENCANCELACIONESPENDIENTES                                                          */
/* Objetivo: Obtiene un listado de las cancelaciones en estatus pendiente, en el rango de fecha solicitado.    */
/* Autor:    Equipo CartCard (Siscon)                                                                          */
/* Fecha Creacion: Nov/2008                                                                                    */
/* Fecha Modificacion:                                                                                         */
/* Ejemplo Ejecucion: exec OBTENCANCELACIONESPENDIENTES(<<fechaincial>>,<<fechafinal>>,<<cancelaciones>>)      */
/* ----------------------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cancelaciones FOR
      SELECT idregistro, cartcardid, usuarioid, fechasolicitudusr,
             estadodecuentaid, fechaautorizaadmin
        FROM CARTCARD.cc_cancelaciones
       WHERE estadodecuentaid = 5
         AND TO_DATE (fechasolicitudusr) >=
                                           TO_DATE (p_fechaincial, 'DDmmYYYY')
         AND TO_DATE (fechasolicitudusr) <= TO_DATE (p_fechafinal, 'DDmmYYYY');
END obtencancelacionespendientes;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENCARTCARDIDREF (
   p_referencia   IN       VARCHAR2,
   p_cartcardid   OUT      INTEGER
)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: OBTENCARTCARDIDREF                                            */
/* Objetivo: Obtiene el cartcardid de la referencia solicitada, sí es cero no existe.  */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec OBTENCARTCARDIDUSU(<<referencia>>,<<:cartcardid>>))         */
/* ----------------------------------------------------------------------------------- */
BEGIN
   SELECT NVL (MAX (cartcardid), 0)
     INTO p_cartcardid
     FROM CARTCARD.card
    WHERE referencia = p_referencia 
	AND bloqueo IN (0,1,4);
END obtencartcardidref;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENCARTCARDIDUSU (
   p_usuarioid    IN       INTEGER,
   p_cartcardid   OUT      INTEGER
)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: OBTENCARTCARDIDUSU                                */
/* Objetivo: Obtiene el cartcardid del usuarioid solicitado, sí es cero no existe.     */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Sep/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec OBTENCARTCARDIDUSU(<<usuarioid>>,<<:cartcardid>>))          */
/* ----------------------------------------------------------------------------------- */
BEGIN
   SELECT NVL (MAX (cartcardid), 0)
     INTO p_cartcardid
     FROM CARTCARD.card
    WHERE usuarioid = p_usuarioid 
	AND bloqueo IN (0,1,4);
END obtencartcardidusu;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENCOMISIONFONDEO (
    p_cartcardid        IN    NUMBER,
  p_consecutivo  IN    NUMBER,
 p_fecha    IN    VARCHAR2,
    p_cursor        OUT     sys_refcursor   
)
IS
BEGIN  
 
 OPEN p_cursor FOR
 SELECT  montoPesos,
   montoDolares,      
   tipoCambio   
  FROM
   (
   SELECT 
    C.cartcardid idusuario, 
    fechaoperacion horaFondeo,   
    T.numeroTarjeta numeroTarjeta,
    Op.REFERENCIA referencia, 
    U.nombre || ' ' || U.apaterno || ' ' || U.amaterno nombreTitular,
    Op.operacionid operacionId,
    Op.cantidaddepositada montoPesos,
       Op.cantidaddepositada/Op.tipoCambioUSD montoDolares,    
       tipoCambioUSD tipoCambio,
    Op.USUARIODEPOSITANTE tipoFondeo,  
    Op.SUCURSALID sucursal,
     Op.OPERADORID operador,
    Op.NCONSECUTIVO consecutivo,
     Op.MENSAJEOPERACION operacion
       FROM CARTCARD.CARD C 
     INNER JOIN CARTCARD.OPERACIONVENTANILLA Op ON C.cartcardid = Op.cartcardid
     INNER JOIN PASARELBAZ.PCC_TARJETAS T on T.CARTCARDID = C.CARTCARDID
     INNER JOIN CARTCARD.USUARIO U ON C.usuarioid = U.usuarioid  
           WHERE (bloqueo = 0 OR bloqueo = 1)
              AND codigoresultado = '000'
              AND LOWER(mensajeoperacion) LIKE ('%comision%')
        AND C.cartcardid = p_cartcardid
        AND Op.NCONSECUTIVO > p_consecutivo
         AND REPLACE(REPLACE(lower(TO_CHAR(fechaoperacion, 'DD/MM/YYYY HH:MI:SS' )), ' a.m.', '' ), ' p.m.', '' ) = p_fecha
        AND ROWNUM = 1    
        );
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN      
      ROLLBACK;
END OBTENCOMISIONFONDEO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENCONSTANTE (
   p_id               IN       VARCHAR2,
   p_valor_caracter   OUT      VARCHAR2
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: obtenconstante                                            */
/* Objetivo: Obtiene el valor Caracter de una oonstante.	 					 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Oct/2008                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: exec obtenconstante(<<IdConstante>>,<<:Valor>>) 	 			 */
/* ------------------------------------------------------------------------------------- */

BEGIN
   SELECT valor_caracter
     INTO p_valor_caracter
     FROM CARTCARD.constantes
    WHERE p_id = ID_CONSTANTES;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_valor_caracter := '';
END obtenconstante;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENCONSTANTEPORID (
   pId      IN       VARCHAR2,
   pValor   OUT      sys_refcursor
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: obtenconstantePorId                                            */
/* Objetivo: Obtiene el registro de una onstante.	 					 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Oct/2008                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: exec obtenconstantePorId(<<IdConstante>>,<<:cursor>>) 	 			 */
/* ------------------------------------------------------------------------------------- */

BEGIN
	open pValor for
	SELECT 
	ID_CONSTANTES, DESCRIPCION, TIPO_VALOR, 
	   VALOR_ENTERO, VALOR_DECIMAL, VALOR_FECHA, 
	   VALOR_CARACTER, VALOR_IMAGEN, USUARIO, 
	   FECHA_REGISTRO
	FROM CARTCARD.constantes
	WHERE LOWER(ID_CONSTANTES)= LOWER(pId);

END obtenconstantePorId;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENCONSTANTES (
   pConstantes   OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: obtenConstantes                                              */
/* Objetivo: Regresa todos los valores de la tabla constantes.                       		   */
/* Autor:    Equipo CartCard (Siscon)                                                      */
/* Fecha Creacion: Nov/2008                                                                */
/* Fecha Modificacion:                                                                     */
/* Ejemplo Ejecucion: exec obtenConstantes(<<:cursor>>)      */
/* --------------------------------------------------------------------------------------- */
BEGIN
   OPEN pConstantes FOR
      SELECT 
		ID_CONSTANTES, DESCRIPCION, TIPO_VALOR, 
		   VALOR_ENTERO, VALOR_DECIMAL, VALOR_FECHA, 
		   VALOR_CARACTER, 
		   --VALOR_IMAGEN,
		    USUARIO, 
		   FECHA_REGISTRO
		FROM CARTCARD.CONSTANTES;
END obtenConstantes;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENDATOSTARJETA (
   P_USUARIOID       IN       PASARELBAZ.PCC_SUITES.USUARIOID%TYPE,
   P_NUMEROTARJETA   OUT      PASARELBAZ.PCC_TARJETAS.NUMEROTARJETA%TYPE,
   P_IDTIPOTARJETA   OUT      PASARELBAZ.PCC_TARJETAS.IDTIPOTARJETA%TYPE,
   P_IDEMISOR        OUT      PASARELBAZ.PCC_TARJETAS.IDEMISOR%TYPE,
   P_NOMBRETITULAR   OUT      PASARELBAZ.PCC_TARJETAS.NOMBRETITULAR%TYPE,
   P_MESEXPIRA       OUT      PASARELBAZ.PCC_TARJETAS.MESEXPIRA%TYPE,
   P_ANIOEXPIRA      OUT      PASARELBAZ.PCC_TARJETAS.AÑOEXPIRA%TYPE,
   P_RESULTADO       OUT      INTEGER
)
IS
/* ---------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENDATOSTARJETA                                            */
/* OBJETIVO: OBTIENE LOS DATOS DE LA TARJETA DEL USUARIOID SOLICITADO.                */
/* AUTOR: EQUIPO IUPICARD                                                             */
/* FECHA CREACION: JULIO/2010                                                         */
/* FECHA MODIFICACION:                                                                */
/* EJEMPLO EJECUCION: EXEC OBTENDATOSTARJETA(<<P_USUARIOID>>,..,<<:P_ANIOEXPIRA>>)    */
/* -----------------------------------------------------------------------------------*/
BEGIN
   P_RESULTADO := 1;

   SELECT PCT.NUMEROTARJETA, PCT.IDTIPOTARJETA, PCT.IDEMISOR,
          PCT.NOMBRETITULAR, PCT.MESEXPIRA, PCT.AÑOEXPIRA
     INTO P_NUMEROTARJETA, P_IDTIPOTARJETA, P_IDEMISOR,
          P_NOMBRETITULAR, P_MESEXPIRA, P_ANIOEXPIRA
     FROM PASARELBAZ.PCC_TARJETAS PCT
    WHERE PCT.CARTCARDID = (SELECT CARTCARDID
                            FROM PASARELBAZ.PCC_SUITES
                            WHERE USUARIOID = P_USUARIOID)
      AND PCT.IDTIPOTARJETA = 3
      AND ROWNUM = 1;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := 0;
      P_NOMBRETITULAR := 'EL TITULAR NO EXISTE';
END OBTENDATOSTARJETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENEIDENTVALIDCORE (
   PUSUARIOID          IN      CARTCARD.USUARIO.USUARIOID%TYPE,
   PVALORIDENTIDAD     OUT     CARTCARD.USUARIO.IDENTIDADVALIDADA%TYPE
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENEIDENTVALIDCORE                                        */
/* OBJETIVO: VERIFICA SI LA IDENTIDAD DE UN USUARIO HA SIDO VALIDADA.                */
/* AUTOR: EQUIPO IUPICARD                                                            */
/* FECHA CREACION: JULIO/2010                                                        */
/* FECHA MODIFICACION:                                                               */
/* EJEMPLO EJECUCION: EXEC OBTENEIDENTVALIDCORE(<<USUARIOID>>,<<:VALORIDENTIDAD>)    */
/* --------------------------------------------------------------------------------- */
BEGIN
   SELECT USU.IDENTIDADVALIDADA
     INTO PVALORIDENTIDAD
     FROM CARTCARD.USUARIO USU
    WHERE USU.USUARIOID = PUSUARIOID;


EXCEPTION
   WHEN NO_DATA_FOUND THEN
      ROLLBACK;
END OBTENEIDENTVALIDCORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENERNOMBREUSARIO (
   p_usuarioid   IN       VARCHAR2,
   p_cursor      OUT      sys_refcursor
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENERNOMBREUSUARIO                                            */
/* Objetivo: Obtiene el nombre completo del usuarioid especificado.	 					 */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Oct/2008                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: exec OBTENERNOMBREUSUARIO(<<usuarioid>>,<<:cursor>>) 	 			 */
/* ------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT nombre, apaterno, amaterno
        FROM CARTCARD.usuario
       WHERE usuarioid = p_usuarioid;
END obtenernombreusario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENERTARJETASBLOQUEAR (
   p_cursor          OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENERTARJETASBLOQUEAR        				   */
/* Objetivo: Obtiene las tarjetas a bloquear por su próximo vencimiento.   */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Feb/2009                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec OBTENERTARJETASBLOQUEAR(<<:Cursor>>)            */
/* ----------------------------------------------------------------------- */
BEGIN



OPEN p_cursor FOR
select 
    cartcardid cartcardid,
    trunc(fechavencimiento - sysdate) diasvencimiento,
    fechavencimiento,
    nombre || ' ' || apaterno nombreUsuario, 
    mail email,
    tokentarjeta token

from CARTCARD.card C
    inner join CARTCARD.usuario U on C.usuarioid = U.usuarioid
    inner join pasbazdes.pcc_tarjetascardmarte TCM on TCM.cartcardid = C.cartcardid

where fechavencimiento < sysdate + (select valor_entero from CARTCARD.constantes where id_constantes = 'DIASBLOQUEOTV');


END OBTENERTARJETASBLOQUEAR;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENERTARJETASNOTIFICAR (
   p_cursor          OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENERTARJETASNOTIFICAR        				   */
/* Objetivo: Obtiene las tarjetas a notificar de su próximo vencimiento.   */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Feb/2009                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec OBTENERTARJETASNOTIFICAR(<<:Cursor>>)           */
/* ----------------------------------------------------------------------- */
BEGIN



OPEN p_cursor FOR
select 
    cartcardid cartcardid,
    trunc(fechavencimiento - sysdate) diasvencimiento,
    fechavencimiento,
    nombre || ' ' || apaterno nombreUsuario, 
    mail email,
    tokentarjeta token

from CARTCARD.card C
    inner join CARTCARD.usuario U on C.usuarioid = U.usuarioid
    inner join pasbazdes.pcc_tarjetascardmarte TCM on TCM.cartcardid = C.cartcardid

where fechavencimiento between sysdate and sysdate + (select valor_entero from CARTCARD.constantes where id_constantes = 'DIASAVISORM');


END OBTENERTARJETASNOTIFICAR;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENERTOKENPORCARTCARDIDCORE (
   p_cartcardid     IN       INTEGER,
   p_tokentarjeta   OUT      VARCHAR2
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENERTOKENPORUSUARIOID                                        */
/* Objetivo: Retorna el token del usuarioid solicitado.                                  */
/* Autor:    Equipo CartCard (Siscon)                                                    */
/* Fecha Creacion: Oct/2008                                                              */
/* Fecha Modificacion:                                                                   */
/* Ejemplo Ejecucion: exec OBTENERTOKENPORUSUARIOID(<<usuarioid>>,<<:tokentarjeta>>))    */
/* ------------------------------------------------------------------------------------- */
numTarjeta varchar(100);
BEGIN

	select numerotarjeta
	into numTarjeta
	from PASARELBAZ.pcc_tarjetas
	where cartcardid=p_cartcardid
	and idestadotarjeta=1
	and idtipotarjeta=3;

   SELECT tokentarjeta
     INTO p_tokentarjeta
     FROM PASARELBAZ.pcc_tarjetascardmarte
    WHERE cartcardid = p_cartcardid
	and numeroTarjeta = numTarjeta;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_tokentarjeta := 'No se encontró';
END OBTENERTOKENPORCARTCARDIDCORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENER_IDUSUARIO (
   p_nombreusuario   IN       VARCHAR2,
   p_idusuario    OUT      VARCHAR2
)
IS
/* ----------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENER_IDUSUARIO                                             */
/* Objetivo: Consulta el identificador de usuario.                                     */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Feb. 2009                                                           */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec OBTENER_IDUSUARIO(<<nombreusuario>>,<<:idusuario>>)         */
/* ----------------------------------------------------------------------------------- */
BEGIN


SELECT usuarioid into p_idusuario 
    from CARTCARD.USUARIO where nombreusuario = p_nombreusuario;
	
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_idusuario := 0;


END OBTENER_IDUSUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENESTADOCONSULTA (
   pUsuarioId         IN       INTEGER,
   pEstadoConsulta    OUT      INTEGER
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: obtenEstadoConsulta        					   */
/* Objetivo: Obtiene el estado de la consulta.						   	   */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Oct/2008                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec obtenEstadoConsulta(<<UsuarioId>>,<<:EstadoConsulta>)*/
/* ----------------------------------------------------------------------- */ 
BEGIN
   BEGIN
   		select estadoconsultait into pEstadoConsulta 
		from CARTCARD.card 
		where usuarioid=pUsuarioId
		AND bloqueo IN (0,1,4);      
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END obtenEstadoConsulta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENFONDEOS (
   P_FECHAINICIO   IN       VARCHAR2,
   P_FECHAFIN      IN       VARCHAR2,
   P_CURSOR        OUT      SYS_REFCURSOR
)
IS
/* ----------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENFONDEOS                                                              */
/* OBJETIVO: OBTIENE UNA LISTA DE LOS FONDEOS                                                      */
/* AUTOR: EQUIPO IUPICARD                                                                          */
/* FECHA CREACION: JULIO / 2010                                                                    */
/* FECHA MODIFICACION:                                                                             */
/* EJEMPLO EJECUCION: EXEC OBTENFONDEOS(<<:CURSOR>>)                                               */
/* ----------------------------------------------------------------------------------------------- */
BEGIN
   OPEN P_CURSOR FOR
         SELECT 
   IDUSUARIO,
            OPERACIONID,
            CONSECUTIVO,
            TO_CHAR(HORAFONDEO,'DD/MM/YYYY') FECHA,
            HORAFONDEO FECHAEXACTAFONDEO, 
            NUMEROTARJETA,
      TIPOFONDEO,
            MONTOPESOS,
            MONTODOLARES,
            NOMBRETITULAR,
            REFERENCIA,
            TIPOCAMBIO,
            SUCURSAL,
            OPERADOR,
            OPERACION,
			CARTCARDID
        FROM
            (
            SELECT C.CARTCARDID IDUSUARIO, 
             FECHAOPERACION HORAFONDEO,   
             T.NUMEROTARJETA NUMEROTARJETA,
             OP.REFERENCIA REFERENCIA, 
             U.NOMBRE || ' ' || U.APATERNO || ' ' || U.AMATERNO NOMBRETITULAR,
             OP.OPERACIONID OPERACIONID,
             OP.CANTIDADDEPOSITADA MONTOPESOS,
                OP.CANTIDADDEPOSITADA/OP.TIPOCAMBIOUSD MONTODOLARES,    
                TIPOCAMBIOUSD TIPOCAMBIO,
                OP.USUARIODEPOSITANTE TIPOFONDEO,  
                OP.SUCURSALID SUCURSAL,
                 OP.OPERADORID OPERADOR,
                OP.NCONSECUTIVO CONSECUTIVO,
                 OP.MENSAJEOPERACION OPERACION,
				 C.CARTCARDID
                FROM CARTCARD.CARD C 
                    INNER JOIN CARTCARD.OPERACIONVENTANILLA OP ON C.CARTCARDID = OP.CARTCARDID
              INNER JOIN PASBAZDES.PCC_TARJETAS T ON T.CARTCARDID = C.CARTCARDID
              INNER JOIN CARTCARD.USUARIO U ON C.USUARIOID = U.USUARIOID  
                    WHERE (BLOQUEO = 0 OR BLOQUEO = 1)
                       AND CODIGORESULTADO = '000'
                       AND LOWER(MENSAJEOPERACION) LIKE ('%fondeo%')   
					   AND TO_DATE (FECHAOPERACION) >= TO_DATE (COALESCE(P_FECHAINICIO, '' || TO_CHAR(FECHAOPERACION,'DD/MM/YYYY')), 'DD/MM/YYYY')
					   AND TO_DATE (FECHAOPERACION) <= TO_DATE (COALESCE(P_FECHAFIN, '' || TO_CHAR(FECHAOPERACION,'DD/MM/YYYY')), 'DD/MM/YYYY')            
                 )
         ORDER BY FECHAEXACTAFONDEO, CONSECUTIVO, OPERACIONID;     

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      ROLLBACK;
END OBTENFONDEOS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENFONDEOSCOMISION (
   P_FECHAINICIO   IN       VARCHAR2,
   P_FECHAFIN      IN       VARCHAR2,
   P_CURSOR        OUT      SYS_REFCURSOR
)
IS
/* ----------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENFONDEOSCOMISION                  */
/* OBJETIVO: OBTIENE UNA LISTA DE LAS COMISIONES DE FONDEOS    */
/* AUTOR: EQUIPO IUPICARD                                      */
/* FECHA CREACION: JULIO / 2010                                */
/* FECHA MODIFICACION:                                         */
/* EJEMPLO EJECUCION: EXEC OBTENFONDEOS(<<:CURSOR>>)           */
/* ----------------------------------------------------------- */
BEGIN
  OPEN P_CURSOR FOR
    --FONDEO POR  SPEI
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
        TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
        TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
        'FONDEO POR SPEI' AS FONDEO,                   
        COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
        OV.TIPOCAMBIOUSD, 
        OV.CANTIDADDEPOSITADA,
        ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
          FROM CARTCARD.CONSTANTES C
          WHERE C.ID_CONSTANTES = 'COMISION_SPEI') * OV.TIPOCAMBIOUSD AS COMISION,
          ( OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD ) AS DEPOSITO_DOLARES 
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo SPEI')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA
UNION
 --FONDEO POR BXI 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
                       'FONDEO POR BXI' AS FONDEO, 
                       COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA,
                       ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
                         FROM CARTCARD.CONSTANTES C
                         WHERE C.ID_CONSTANTES = 'COMISION_PORTALBAZ') * OV.TIPOCAMBIOUSD AS COMISION,                   
                       (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -1
    AND OV.SUCURSALID = -1
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'), 
                        OV.TIPOCAMBIOUSD, 
                        OV.CANTIDADDEPOSITADA                   
UNION
    --FONDEO POR TPV 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
             'FONDEO POR TPV' AS FONDEO, 
             COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA,
             ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
               FROM CARTCARD.CONSTANTES C
               WHERE C.ID_CONSTANTES = 'COMISION_TARJETA_TPV') * OV.TIPOCAMBIOUSD AS COMISION,
               (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -2
    AND OV.SUCURSALID = -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA
UNION
/* FONDEO POR VENTANILLA */
SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
         TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
         TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
                   'FONDEO POR VENTANILLA' AS FONDEO,
                   COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES, 
                   OV.TIPOCAMBIOUSD, 
                   OV.CANTIDADDEPOSITADA,
                    ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
                     FROM CARTCARD.CONSTANTES C
                     WHERE C.ID_CONSTANTES = 'COMISION_VENTANILLA') * OV.TIPOCAMBIOUSD AS COMISION,
                   (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID != -1 AND OV.OPERADORID != -2
    AND OV.SUCURSALID != -1 AND OV.SUCURSALID != -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'),   
             TO_CHAR(OV.FECHASYS, 'dd'),                                            
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA;    

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error obtener FONDEOSCOMISION (' || SQLCODE || '  ' || SQLERRM || ')');

END OBTENFONDEOSCOMISION;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENFONDEOSPORFECHA (
   P_FECHAINICIO         IN       VARCHAR2,
   P_FECHAFIN            IN       VARCHAR2,
   P_CURSOR              OUT      SYS_REFCURSOR,
   P_NUMTOTALFONDEOS     OUT      INTEGER,
   P_NUMTOTALFONPRIMVEZ  OUT      INTEGER,
   P_NUMTOTALFONSIG      OUT      INTEGER,
   P_TOTALCOMISION       OUT      FLOAT,
   P_PROM_COMISION       OUT      FLOAT,
   P_TOTALFONDEOS        OUT      FLOAT,
   P_PROM_FONDEOS        OUT      FLOAT,
   P_TOTALTIPOCAMBIO     OUT      FLOAT,
   P_PROM_TIPOCAMBIO     OUT      FLOAT
)
IS
/* ----------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENFONDEOSPORFECHA                  */
/* OBJETIVO: OBTIENE UNA LISTA DE LAS COMISIONES DE FONDEOS    */
/* AUTOR: EQUIPO IUPICARD                                      */
/* FECHA CREACION: JUL / 2010                                  */
/* FECHA MODIFICACION:                                         */
/* EJEMPLO EJECUCION: EXEC OBTENFONDEOSPORFECHA(<<:CURSOR>>)   */
/* ----------------------------------------------------------- */
BEGIN

  OPEN P_CURSOR FOR
    --FONDEO POR  SPEI
     SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
        TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
        TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
        T.NOMBRETITULAR,
        'FONDEO POR SPEI' AS FONDEO,                   
        COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
        OV.TIPOCAMBIOUSD, 
        OV.CANTIDADDEPOSITADA,
        ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
          FROM CARTCARD.CONSTANTES C
          WHERE C.ID_CONSTANTES = 'COMISION_SPEI') * OV.TIPOCAMBIOUSD AS COMISION,
          ( OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD ) AS DEPOSITO_DOLARES 
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo SPEI')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
             T.NOMBRETITULAR,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA
    UNION
    --FONDEO POR BXI 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
             T.NOMBRETITULAR,
                       'FONDEO POR BXI' AS FONDEO, 
                       COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA,
                       ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
                         FROM CARTCARD.CONSTANTES C
                         WHERE C.ID_CONSTANTES = 'COMISION_PORTALBAZ') * OV.TIPOCAMBIOUSD AS COMISION,                   
                       (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -1
    AND OV.SUCURSALID = -1
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'), 
             T.NOMBRETITULAR,
                        OV.TIPOCAMBIOUSD, 
                        OV.CANTIDADDEPOSITADA                   
    UNION
    --FONDEO POR TPV 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
             T.NOMBRETITULAR,
             'FONDEO POR TPV' AS FONDEO, 
             COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA,
             ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
               FROM CARTCARD.CONSTANTES C
               WHERE C.ID_CONSTANTES = 'COMISION_TARJETA_TPV') * OV.TIPOCAMBIOUSD AS COMISION,
               (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -2
    AND OV.SUCURSALID = -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
             T.NOMBRETITULAR,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA
    UNION
    -- FONDEO POR VENTANILLA
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
         TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
         TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
         T.NOMBRETITULAR,
                   'FONDEO POR VENTANILLA' AS FONDEO,
                   COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES, 
                   OV.TIPOCAMBIOUSD, 
                   OV.CANTIDADDEPOSITADA,
                    ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
                     FROM CARTCARD.CONSTANTES C
                     WHERE C.ID_CONSTANTES = 'COMISION_VENTANILLA') * OV.TIPOCAMBIOUSD AS COMISION,
                   (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID != -1 AND OV.OPERADORID != -2
    AND OV.SUCURSALID != -1 AND OV.SUCURSALID != -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'),   
             TO_CHAR(OV.FECHASYS, 'dd'),            
             T.NOMBRETITULAR,                                
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA; 
 
     -- TOTAL Y PROMEDIO DE COMISIONES COBRADAS POR FONDEO
     SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS TOTAL_COMISION_USD,
            (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_COMISION
       INTO P_TOTALCOMISION, P_PROM_COMISION
       FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
         ON CC.CARTCARDID = OV.CARTCARDID
      WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%COMISION%'
        AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') 
        AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
        AND OV.CODIGORESULTADO = '000'
      ORDER BY OV.FECHASYS ASC;

      -- TOTAL Y PROMEDIO DE FONDEOS 
      SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS FONDEOS_USD,
             (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_FONDEOS
        INTO P_TOTALFONDEOS, P_PROM_FONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') 
         AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
      
      -- TOTAL Y PROMEDIO DE TIPO DE CAMBIO
      SELECT SUM(OV.TIPOCAMBIOUSD) AS TOTAL_TIPOCAMBIO, 
             (SUM(OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_TIPOCAMBIO 
        INTO P_TOTALTIPOCAMBIO, P_PROM_TIPOCAMBIO
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy')
         AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
   
      -- NUMERO TOTAL DE FONDEOS 
      SELECT COUNT(OV.CANTIDADDEPOSITADA) 
        INTO P_NUMTOTALFONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
       
       -- NUMERO DE FONDEOS PRIMERA VEZ
       SELECT COUNT(OV.REFERENCIA)
        INTO P_NUMTOTALFONPRIMVEZ
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID,          
            (SELECT MIN(NCONSECUTIVO) AS MIN_CONSECUTIVO, REFERENCIA
               FROM CARTCARD.OPERACIONVENTANILLA
              WHERE UPPER(MENSAJEOPERACION) LIKE '%FONDEO%' 
              GROUP BY REFERENCIA) PRIMERA_VEZ                    
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.CODIGORESULTADO = '000'         
         AND OV.REFERENCIA = PRIMERA_VEZ.REFERENCIA
         AND OV.NCONSECUTIVO = PRIMERA_VEZ.MIN_CONSECUTIVO                  
       ORDER BY OV.FECHASYS ASC;

EXCEPTION  
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error obtener FONDEOSCOMISION (' || SQLCODE || '  ' || SQLERRM || ')');

END OBTENFONDEOSPORFECHA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENFONDEOSPORFECHA_ORIGINAL (
   P_FECHAINICIO         IN       VARCHAR2,
   P_FECHAFIN            IN       VARCHAR2,
   P_CURSOR              OUT      SYS_REFCURSOR,
   P_NUMTOTALFONDEOS     OUT      INTEGER,
   P_NUMTOTALFONPRIMVEZ  OUT      INTEGER,
   P_NUMTOTALFONSIG      OUT      INTEGER,
   P_TOTALCOMISION       OUT      FLOAT,
   P_PROM_COMISION       OUT      FLOAT,
   P_TOTALFONDEOS        OUT      FLOAT,
   P_PROM_FONDEOS        OUT      FLOAT,
   P_TOTALTIPOCAMBIO     OUT      FLOAT,
   P_PROM_TIPOCAMBIO     OUT      FLOAT
)
IS
/* ----------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENFONDEOSPORFECHA                  */
/* OBJETIVO: OBTIENE UNA LISTA DE LAS COMISIONES DE FONDEOS    */
/* AUTOR: EQUIPO IUPICARD                                      */
/* FECHA CREACION: JUL / 2010                                  */
/* FECHA MODIFICACION:                                         */
/* EJEMPLO EJECUCION: EXEC OBTENFONDEOSPORFECHA(<<:CURSOR>>)   */
/* ----------------------------------------------------------- */
BEGIN

  OPEN P_CURSOR FOR
    --FONDEO POR  SPEI
     SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
        TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
        TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
		T.NOMBRETITULAR,
        'FONDEO POR SPEI' AS FONDEO,                   
        COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
        OV.TIPOCAMBIOUSD, 
        OV.CANTIDADDEPOSITADA,
        ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
          FROM CARTCARD.CONSTANTES C
          WHERE C.ID_CONSTANTES = 'COMISION_SPEI') * OV.TIPOCAMBIOUSD AS COMISION,
          ( OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD ) AS DEPOSITO_DOLARES 
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo SPEI')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
			 T.NOMBRETITULAR,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA
    UNION
    --FONDEO POR BXI 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
			 T.NOMBRETITULAR,
                       'FONDEO POR BXI' AS FONDEO, 
                       COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA,
                       ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
                         FROM CARTCARD.CONSTANTES C
                         WHERE C.ID_CONSTANTES = 'COMISION_PORTALBAZ') * OV.TIPOCAMBIOUSD AS COMISION,                   
                       (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -1
    AND OV.SUCURSALID = -1
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'), 
			 T.NOMBRETITULAR,
                        OV.TIPOCAMBIOUSD, 
                        OV.CANTIDADDEPOSITADA                   
    UNION
    --FONDEO POR TPV 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
			 T.NOMBRETITULAR,
             'FONDEO POR TPV' AS FONDEO, 
             COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA,
             ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
               FROM CARTCARD.CONSTANTES C
               WHERE C.ID_CONSTANTES = 'COMISION_TARJETA_TPV') * OV.TIPOCAMBIOUSD AS COMISION,
               (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -2
    AND OV.SUCURSALID = -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
			 T.NOMBRETITULAR,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA
    UNION
    -- FONDEO POR VENTANILLA
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
         TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
         TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
		 T.NOMBRETITULAR,
                   'FONDEO POR VENTANILLA' AS FONDEO,
                   COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES, 
                   OV.TIPOCAMBIOUSD, 
                   OV.CANTIDADDEPOSITADA,
                    ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
                     FROM CARTCARD.CONSTANTES C
                     WHERE C.ID_CONSTANTES = 'COMISION_VENTANILLA') * OV.TIPOCAMBIOUSD AS COMISION,
                   (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID != -1 AND OV.OPERADORID != -2
    AND OV.SUCURSALID != -1 AND OV.SUCURSALID != -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'),   
             TO_CHAR(OV.FECHASYS, 'dd'),            
			 T.NOMBRETITULAR,                                
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA; 
 
     -- TOTAL Y PROMEDIO DE COMISIONES COBRADAS POR FONDEO
     SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS TOTAL_COMISION_USD,
            (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_COMISION
       INTO P_TOTALCOMISION, P_PROM_COMISION
       FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
         ON CC.CARTCARDID = OV.CARTCARDID
      WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%COMISION%'
        AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') 
        AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
        AND OV.CODIGORESULTADO = '000'
      ORDER BY OV.FECHASYS ASC;

      -- TOTAL Y PROMEDIO DE FONDEOS 
      SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS FONDEOS_USD,
             (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_FONDEOS
        INTO P_TOTALFONDEOS, P_PROM_FONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') 
         AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
      
      -- TOTAL Y PROMEDIO DE TIPO DE CAMBIO
      SELECT SUM(OV.TIPOCAMBIOUSD) AS TOTAL_TIPOCAMBIO, 
             (SUM(OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_TIPOCAMBIO 
        INTO P_TOTALTIPOCAMBIO, P_PROM_TIPOCAMBIO
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy')
         AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
   
      -- NUMERO TOTAL DE FONDEOS 
      SELECT COUNT(OV.CANTIDADDEPOSITADA) 
        INTO P_NUMTOTALFONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
       
       -- NUMERO DE FONDEOS PRIMERA VEZ
       SELECT COUNT(OV.REFERENCIA)
        INTO P_NUMTOTALFONPRIMVEZ
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID,          
            (SELECT MIN(NCONSECUTIVO) AS MIN_CONSECUTIVO, REFERENCIA
               FROM CARTCARD.OPERACIONVENTANILLA
              WHERE UPPER(MENSAJEOPERACION) LIKE '%FONDEO%' 
              GROUP BY REFERENCIA) PRIMERA_VEZ                    
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.CODIGORESULTADO = '000'         
         AND OV.REFERENCIA = PRIMERA_VEZ.REFERENCIA
         AND OV.NCONSECUTIVO = PRIMERA_VEZ.MIN_CONSECUTIVO                  
       ORDER BY OV.FECHASYS ASC;

EXCEPTION  
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error obtener FONDEOSCOMISION (' || SQLCODE || '  ' || SQLERRM || ')');

END OBTENFONDEOSPORFECHA_ORIGINAL;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENFONDEOSPORSUITE (
   P_SUITE               IN       PASARELBAZ.PCC_SUITES.IDSUITE%TYPE,
   P_FECHAINICIO         IN       VARCHAR2,
   P_FECHAFIN            IN       VARCHAR2,
   P_CURSOR              OUT      SYS_REFCURSOR,
   P_NUMTOTALFONDEOS     OUT      INTEGER,
   P_NUMTOTALFONPRIMVEZ  OUT      INTEGER,
   P_NUMTOTALFONSIG      OUT      INTEGER,
   P_TOTALCOMISION       OUT      FLOAT,
   P_PROM_COMISION       OUT      FLOAT,
   P_TOTALFONDEOS        OUT      FLOAT,
   P_PROM_FONDEOS        OUT      FLOAT,
   P_TOTALTIPOCAMBIO     OUT      FLOAT,
   P_PROM_TIPOCAMBIO     OUT      FLOAT
)
IS
/* ---------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENFONDEOSPORSUITE                                         */
/* OBJETIVO: OBTIENE UNA LISTA DE LAS COMISIONES DE FONDEOS POR EL NUMERO DE SUITE    */
/* AUTOR: EQUIPO IUPICARD                                                             */
/* FECHA CREACION: JULIO / 2010                                                       */
/* FECHA MODIFICACION:                                                                */
/* EJEMPLO EJECUCION: EXEC OBTENFONDEOS(<<:CURSOR>>)                                  */
/* ---------------------------------------------------------------------------------- */
BEGIN

  OPEN P_CURSOR FOR
    --FONDEO POR  SPEI
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
        TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
        TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
		T.NOMBRETITULAR,
        'FONDEO POR SPEI' AS FONDEO,                   
        COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
        OV.TIPOCAMBIOUSD, 
        OV.CANTIDADDEPOSITADA,
        ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
          FROM CARTCARD.CONSTANTES C
          WHERE C.ID_CONSTANTES = 'COMISION_SPEI') * OV.TIPOCAMBIOUSD AS COMISION,
          ( OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD ) AS DEPOSITO_DOLARES 
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T 
 ON OV.CARTCARDID = T.CARTCARDID 
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
 LEFT JOIN PASARELBAZ.PCC_SUITES SU ON SU.CARTCARDID = CC.CARTCARDID
    WHERE  UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo SPEI')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND SU.IDSUITE = P_SUITE
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
			 T.NOMBRETITULAR,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA
    UNION
    --FONDEO POR BXI 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
			 T.NOMBRETITULAR,
                       'FONDEO POR BXI' AS FONDEO, 
                       COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA,
                       ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
                         FROM CARTCARD.CONSTANTES C
                         WHERE C.ID_CONSTANTES = 'COMISION_PORTALBAZ') * OV.TIPOCAMBIOUSD AS COMISION,                   
                       (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
 LEFT JOIN PASARELBAZ.PCC_SUITES SU ON SU.CARTCARDID = CC.CARTCARDID
    WHERE  OV.OPERADORID = -1
    AND OV.SUCURSALID = -1
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND SU.IDSUITE = P_SUITE
 AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'), 
			 T.NOMBRETITULAR,
                        OV.TIPOCAMBIOUSD, 
                        OV.CANTIDADDEPOSITADA                   
    UNION
    --FONDEO POR TPV 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
			 T.NOMBRETITULAR,
             'FONDEO POR TPV' AS FONDEO, 
             COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA,
             ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
               FROM CARTCARD.CONSTANTES C
               WHERE C.ID_CONSTANTES = 'COMISION_TARJETA_TPV') * OV.TIPOCAMBIOUSD AS COMISION,
               (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
 LEFT JOIN PASARELBAZ.PCC_SUITES SU ON SU.CARTCARDID = CC.CARTCARDID
    WHERE  OV.OPERADORID = -2
    AND OV.SUCURSALID = -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND SU.IDSUITE = P_SUITE
 AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
			 T.NOMBRETITULAR,
                       OV.TIPOCAMBIOUSD, 
                       OV.CANTIDADDEPOSITADA
    UNION
    -- FONDEO POR VENTANILLA
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
         TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
         TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
		 T.NOMBRETITULAR,
                   'FONDEO POR VENTANILLA' AS FONDEO,
                   COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES, 
                   OV.TIPOCAMBIOUSD, 
                   OV.CANTIDADDEPOSITADA,
                    ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
                     FROM CARTCARD.CONSTANTES C
                     WHERE C.ID_CONSTANTES = 'COMISION_VENTANILLA') * OV.TIPOCAMBIOUSD AS COMISION,
                   (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
 LEFT JOIN PASARELBAZ.PCC_SUITES SU ON SU.CARTCARDID = CC.CARTCARDID
    WHERE  OV.OPERADORID != -1 AND OV.OPERADORID != -2
    AND OV.SUCURSALID != -1 AND OV.SUCURSALID != -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND SU.IDSUITE = P_SUITE
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'),   
             TO_CHAR(OV.FECHASYS, 'dd'),       
			 T.NOMBRETITULAR,                                     
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA; 

     -- TOTAL Y PROMEDIO DE COMISIONES COBRADAS POR FONDEO
     SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS TOTAL_COMISION_USD,
            (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_COMISION
       INTO P_TOTALCOMISION, P_PROM_COMISION
       FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_SUITES SU 
      ON OV.CARTCARDID = SU.CARTCARDID
      WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%COMISION%'
        AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') 
        AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
        AND SU.IDSUITE = P_SUITE
        AND OV.CODIGORESULTADO = '000'
      ORDER BY OV.FECHASYS ASC;

      -- TOTAL Y PROMEDIO DE FONDEOS POR USUARIO
      SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS FONDEOS_USD,
             (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_FONDEOS
        INTO P_TOTALFONDEOS, P_PROM_FONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_SUITES SU 
       ON OV.CARTCARDID = SU.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') 
         AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND SU.IDSUITE = P_SUITE
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
      
      -- TOTAL Y PROMEDIO DE TIPO DE CAMBIO POR USUARIO
      SELECT SUM(OV.TIPOCAMBIOUSD) AS TOTAL_TIPOCAMBIO, 
             (SUM(OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_TIPOCAMBIO 
        INTO P_TOTALTIPOCAMBIO, P_PROM_TIPOCAMBIO
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_SUITES SU 
       ON OV.CARTCARDID = SU.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy')
         AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND SU.IDSUITE = P_SUITE
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;

      -- NUMERO TOTAL DE FONDEOS 
      SELECT COUNT(OV.CANTIDADDEPOSITADA) 
        INTO P_NUMTOTALFONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_SUITES SU 
       ON OV.CARTCARDID = SU.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
      AND SU.IDSUITE = P_SUITE
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
       
       -- NUMERO TOTAL DE FONDEOS PRIMERA VEZ
       SELECT COUNT(OV.REFERENCIA)
        INTO P_NUMTOTALFONPRIMVEZ
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_SUITES SU 
       ON OV.CARTCARDID = SU.CARTCARDID,
            (SELECT MIN(NCONSECUTIVO) AS MIN_CONSECUTIVO, REFERENCIA
               FROM CARTCARD.OPERACIONVENTANILLA
              WHERE UPPER(MENSAJEOPERACION) LIKE '%FONDEO%' 
              GROUP BY REFERENCIA) PRIMERA_VEZ                    
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND SU.IDSUITE = P_SUITE
         AND OV.CODIGORESULTADO = '000'         
         AND OV.REFERENCIA = PRIMERA_VEZ.REFERENCIA
         AND OV.NCONSECUTIVO = PRIMERA_VEZ.MIN_CONSECUTIVO                  
       ORDER BY OV.FECHASYS ASC;
   
      -- NUMERO TOTAL DE FONDEOS SUBSECUENTES
      P_NUMTOTALFONSIG := P_NUMTOTALFONDEOS - P_NUMTOTALFONPRIMVEZ;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error obtener FONDEOS POR SUITE (' || SQLCODE || '  ' || SQLERRM || ')');

END OBTENFONDEOSPORSUITE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENFONDEOSREFERENCIA (
   P_REFERENCIA          IN       CARTCARD.OPERACIONVENTANILLA.REFERENCIA%TYPE,
   P_FECHAINICIO         IN       VARCHAR2,
   P_FECHAFIN            IN       VARCHAR2,
   P_CURSOR              OUT      SYS_REFCURSOR,
   P_NUMTOTALFONDEOS     OUT      INTEGER,
   P_NUMTOTALFONPRIMVEZ  OUT      INTEGER,
   P_NUMTOTALFONSIG      OUT      INTEGER,
   P_TOTALCOMISION       OUT      FLOAT,
   P_PROM_COMISION       OUT      FLOAT,
   P_TOTALFONDEOS        OUT      FLOAT,
   P_PROM_FONDEOS        OUT      FLOAT,
   P_TOTALTIPOCAMBIO     OUT      FLOAT,
   P_PROM_TIPOCAMBIO     OUT      FLOAT
)
IS
/* -------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENFONDEOSREFERENCIA                                           */
/* OBJETIVO: OBTIENE UNA LISTA DE LAS COMISIONES DE FONDEOS POR EL NUMERO DE REFERENCIA   */
/* AUTOR: EQUIPO IUPICARD                                                                 */
/* FECHA CREACION: JULIO / 2010                                                           */
/* FECHA MODIFICACION:                                                                    */
/* EJEMPLO EJECUCION: EXEC OBTENFONDEOS(<<:CURSOR>>)                                      */
/* -------------------------------------------------------------------------------------- */
BEGIN

  OPEN P_CURSOR FOR
    --FONDEO POR  SPEI
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
        TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
		T.NOMBRETITULAR,
        'FONDEO POR SPEI' AS FONDEO, COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
        OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA,
        ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
          FROM CARTCARD.CONSTANTES C
          WHERE C.ID_CONSTANTES = 'COMISION_SPEI') * OV.TIPOCAMBIOUSD AS COMISION,
          ( OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD ) AS DEPOSITO_DOLARES 
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T 
   ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo SPEI')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.REFERENCIA = P_REFERENCIA
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
          TO_CHAR(OV.FECHASYS, 'ww'), TO_CHAR(OV.FECHASYS, 'dd'),T.NOMBRETITULAR, OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA
    UNION
    --FONDEO POR BXI 
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
           TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, TO_CHAR(OV.FECHASYS, 'dd') AS DIA,T.NOMBRETITULAR,
           'FONDEO POR BXI' AS FONDEO, COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
           OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA,
           ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
             FROM CARTCARD.CONSTANTES C
             WHERE C.ID_CONSTANTES = 'COMISION_PORTALBAZ') * OV.TIPOCAMBIOUSD AS COMISION,                   
             (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -1 AND OV.SUCURSALID = -1
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.REFERENCIA = P_REFERENCIA
 AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), TO_CHAR(OV.FECHASYS, 'dd'),T.NOMBRETITULAR, OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA                   
    UNION
    --FONDEO POR TPV 
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
           TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, TO_CHAR(OV.FECHASYS, 'dd') AS DIA,T.NOMBRETITULAR,
           'FONDEO POR TPV' AS FONDEO, COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
           OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA,
           ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
             FROM CARTCARD.CONSTANTES C
             WHERE C.ID_CONSTANTES = 'COMISION_TARJETA_TPV') * OV.TIPOCAMBIOUSD AS COMISION,
             (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE OV.OPERADORID = -2 AND OV.SUCURSALID = -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.REFERENCIA = P_REFERENCIA
 AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
          TO_CHAR(OV.FECHASYS, 'ww'), TO_CHAR(OV.FECHASYS, 'dd'),T.NOMBRETITULAR, OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA
    UNION
    -- FONDEO POR VENTANILLA
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
         TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, TO_CHAR(OV.FECHASYS, 'dd') AS DIA,T.NOMBRETITULAR,
         'FONDEO POR VENTANILLA' AS FONDEO, COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES, 
         OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA,
         ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
           FROM CARTCARD.CONSTANTES C
           WHERE C.ID_CONSTANTES = 'COMISION_VENTANILLA') * OV.TIPOCAMBIOUSD AS COMISION,
          (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE OV.OPERADORID != -1 AND OV.OPERADORID != -2
    AND OV.SUCURSALID != -1 AND OV.SUCURSALID != -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND OV.REFERENCIA = P_REFERENCIA
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
          TO_CHAR(OV.FECHASYS, 'ww'), TO_CHAR(OV.FECHASYS, 'dd'), T.NOMBRETITULAR,OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA;                    
    
     -- TOTAL Y PROMEDIO DE COMISIONES COBRADAS POR FONDEO
     SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS TOTAL_COMISION_USD,
            (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_COMISION
       INTO P_TOTALCOMISION, P_PROM_COMISION
       FROM CARTCARD.OPERACIONVENTANILLA OV 
      WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%COMISION%'
        AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
        AND OV.REFERENCIA = P_REFERENCIA
        AND OV.CODIGORESULTADO = '000'
      ORDER BY OV.FECHASYS ASC;

      -- TOTAL Y PROMEDIO DE FONDEOS POR USUARIO
     SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS FONDEOS_USD,
            (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_FONDEOS
       INTO P_TOTALFONDEOS, P_PROM_FONDEOS
       FROM CARTCARD.OPERACIONVENTANILLA OV 
      WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
        AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
        AND OV.REFERENCIA = P_REFERENCIA
        AND OV.CODIGORESULTADO = '000'
      ORDER BY OV.FECHASYS ASC;
      
      -- TOTAL Y PROMEDIO DE TIPO DE CAMBIO POR USUARIO
      SELECT SUM(OV.TIPOCAMBIOUSD) AS TOTAL_TIPOCAMBIO, 
             (SUM(OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_TIPOCAMBIO 
        INTO P_TOTALTIPOCAMBIO, P_PROM_TIPOCAMBIO
        FROM CARTCARD.OPERACIONVENTANILLA OV
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.REFERENCIA = P_REFERENCIA
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;

      -- NUMERO TOTAL DE FONDEOS 
      SELECT COUNT(OV.CANTIDADDEPOSITADA) 
        INTO P_NUMTOTALFONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
      AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND OV.REFERENCIA = P_REFERENCIA
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
	   
	   -- NUMERO TOTAL DE FONDEOS PRIMERA VEZ
       SELECT COUNT(OV.REFERENCIA)
        INTO P_NUMTOTALFONPRIMVEZ
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_SUITES SU 
       ON OV.CARTCARDID = SU.CARTCARDID,
            (SELECT MIN(NCONSECUTIVO) AS MIN_CONSECUTIVO, REFERENCIA
               FROM CARTCARD.OPERACIONVENTANILLA
              WHERE UPPER(MENSAJEOPERACION) LIKE '%FONDEO%' 
			  AND REFERENCIA = P_REFERENCIA
              GROUP BY REFERENCIA) PRIMERA_VEZ                    
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.CODIGORESULTADO = '000'         
         AND OV.REFERENCIA = PRIMERA_VEZ.REFERENCIA
         AND OV.NCONSECUTIVO = PRIMERA_VEZ.MIN_CONSECUTIVO                  
       ORDER BY OV.FECHASYS ASC;
   
      -- NUMERO TOTAL DE FONDEOS SUBSECUENTES
      P_NUMTOTALFONSIG := P_NUMTOTALFONDEOS - P_NUMTOTALFONPRIMVEZ;
       
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error obtener FONDEOS REFERENCIA (' || SQLCODE || '  ' || SQLERRM || ')');

END OBTENFONDEOSREFERENCIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENFONDEOTARJETA (
   P_NUMTARJETA          IN       PASARELBAZ.PCC_TARJETAS.NUMEROTARJETA%TYPE,
   P_FECHAINICIO         IN       VARCHAR2,
   P_FECHAFIN            IN       VARCHAR2,
   P_CURSOR              OUT      SYS_REFCURSOR,
   P_NUMTOTALFONDEOS     OUT      INTEGER,
   P_NUMTOTALFONPRIMVEZ  OUT      INTEGER,
   P_NUMTOTALFONSIG      OUT      INTEGER,
   P_TOTALCOMISION       OUT      FLOAT,
   P_PROM_COMISION       OUT      FLOAT,
   P_TOTALFONDEOS        OUT      FLOAT,
   P_PROM_FONDEOS        OUT      FLOAT,
   P_TOTALTIPOCAMBIO     OUT      FLOAT,
   P_PROM_TIPOCAMBIO     OUT      FLOAT
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENFONDEOTARJETA                                          */
/* OBJETIVO: OBTIENE UNA LISTA DE TODOS LOS FONDEOS POR EL NUMERO DE TARJETA         */
/* AUTOR: EQUIPO IUPICARD                                                            */
/* FECHA CREACION: JUL / 2010                                                        */
/* FECHA MODIFICACION:                                                               */
/* EJEMPLO EJECUCION: EXEC OBTENFONDEOTARJETA(<<P_NUMTARJETA>>,...,<<:CURSOR>>)      */
/* --------------------------------------------------------------------------------- */
BEGIN
  OPEN P_CURSOR FOR
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
        TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, TO_CHAR(OV.FECHASYS, 'dd') AS DIA,T.NOMBRETITULAR,
        'FONDEO POR SPEI' AS FONDEO, COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
        OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA,
        ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
          FROM CARTCARD.CONSTANTES C
          WHERE C.ID_CONSTANTES = 'COMISION_SPEI') * OV.TIPOCAMBIOUSD AS COMISION,
          ( OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD ) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo SPEI')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND T.NUMEROTARJETA = P_NUMTARJETA
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'),
             TO_CHAR(OV.FECHASYS, 'ww'), TO_CHAR(OV.FECHASYS, 'dd'),T.NOMBRETITULAR, OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA
  UNION
    --FONDEO POR BXI 
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
           TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, TO_CHAR(OV.FECHASYS, 'dd') AS DIA, T.NOMBRETITULAR,
           'FONDEO POR BXI' AS FONDEO, COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
           OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA,
           ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
             FROM CARTCARD.CONSTANTES C
             WHERE C.ID_CONSTANTES = 'COMISION_PORTALBAZ') * OV.TIPOCAMBIOUSD AS COMISION,                   
             (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -1 AND OV.SUCURSALID = -1
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND T.NUMEROTARJETA = P_NUMTARJETA
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), TO_CHAR(OV.FECHASYS, 'dd'),T.NOMBRETITULAR, OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA              
  UNION
    --FONDEO POR TPV 
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
           TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, TO_CHAR(OV.FECHASYS, 'dd') AS DIA, T.NOMBRETITULAR,
           'FONDEO POR TPV' AS FONDEO, COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
           OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA,
           ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
             FROM CARTCARD.CONSTANTES C
             WHERE C.ID_CONSTANTES = 'COMISION_TARJETA_TPV') * OV.TIPOCAMBIOUSD AS COMISION,
            (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID = -2 AND OV.SUCURSALID = -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND T.NUMEROTARJETA = P_NUMTARJETA
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), TO_CHAR(OV.FECHASYS, 'dd'),T.NOMBRETITULAR, OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA
  UNION
   -- FONDEO POR VENTANILLA
   SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
         TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, TO_CHAR(OV.FECHASYS, 'dd') AS DIA,T.NOMBRETITULAR,
   'FONDEO POR VENTANILLA' AS FONDEO, COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES, 
         OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA,
         ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
           FROM CARTCARD.CONSTANTES C
           WHERE C.ID_CONSTANTES = 'COMISION_VENTANILLA') * OV.TIPOCAMBIOUSD AS COMISION,
          (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID
    WHERE  OV.OPERADORID != -1 AND OV.OPERADORID != -2
    AND OV.SUCURSALID != -1 AND OV.SUCURSALID != -2
    AND UPPER(OV.MENSAJEOPERACION) = 'FONDEO DE REFERENCIA'
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND T.NUMEROTARJETA = P_NUMTARJETA
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
            TO_CHAR(OV.FECHASYS, 'ww'), TO_CHAR(OV.FECHASYS, 'dd'), T.NOMBRETITULAR,OV.TIPOCAMBIOUSD, OV.CANTIDADDEPOSITADA;
               

     -- TOTAL Y PROMEDIO DE COMISIONES COBRADAS POR FONDEO
     SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS TOTAL_COMISION_USD,
            (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_COMISION
       INTO P_TOTALCOMISION, P_PROM_COMISION
       FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
      WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%COMISION%'
        AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
        AND T.NUMEROTARJETA = P_NUMTARJETA
        AND OV.CODIGORESULTADO = '000'
      ORDER BY OV.FECHASYS ASC;

      -- TOTAL Y PROMEDIO DE FONDEOS POR USUARIO
      SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS FONDEOS_USD,
             (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_FONDEOS
        INTO P_TOTALFONDEOS, P_PROM_FONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND T.NUMEROTARJETA = P_NUMTARJETA
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
      
      -- TOTAL Y PROMEDIO DE TIPO DE CAMBIO POR USUARIO
      SELECT SUM(OV.TIPOCAMBIOUSD) AS TOTAL_TIPOCAMBIO, 
             (SUM(OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_TIPOCAMBIO 
        INTO P_TOTALTIPOCAMBIO, P_PROM_TIPOCAMBIO
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND T.NUMEROTARJETA = P_NUMTARJETA
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;

      -- NUMERO TOTAL DE FONDEOS 
      SELECT COUNT(OV.CANTIDADDEPOSITADA) 
        INTO P_NUMTOTALFONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
      AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND T.NUMEROTARJETA = P_NUMTARJETA
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
	   
	   -- NUMERO TOTAL DE FONDEOS PRIMERA VEZ
       SELECT COUNT(OV.REFERENCIA)
        INTO P_NUMTOTALFONPRIMVEZ
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID,
            (SELECT MIN(NCONSECUTIVO) AS MIN_CONSECUTIVO, REFERENCIA
               FROM CARTCARD.OPERACIONVENTANILLA
              WHERE UPPER(MENSAJEOPERACION) LIKE '%FONDEO%' 
              GROUP BY REFERENCIA) PRIMERA_VEZ                    
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND T.NUMEROTARJETA = P_NUMTARJETA
         AND OV.CODIGORESULTADO = '000'         
         AND OV.REFERENCIA = PRIMERA_VEZ.REFERENCIA
         AND OV.NCONSECUTIVO = PRIMERA_VEZ.MIN_CONSECUTIVO                  
       ORDER BY OV.FECHASYS ASC;
   
      -- NUMERO TOTAL DE FONDEOS SUBSECUENTES
      P_NUMTOTALFONSIG := P_NUMTOTALFONDEOS - P_NUMTOTALFONPRIMVEZ;
       
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error al obtener FONDEOS POR TARJETA (' || SQLCODE || '  ' || SQLERRM || ')');
END OBTENFONDEOTARJETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENFONDEOUSUARIO (
   P_NOMUSUARIO          IN       VARCHAR2,
   P_FECHAINICIO         IN       VARCHAR2,
   P_FECHAFIN            IN       VARCHAR2,
   P_CURSOR              OUT      SYS_REFCURSOR,
   P_NUMTOTALFONDEOS     OUT      INTEGER,
   P_NUMTOTALFONPRIMVEZ  OUT      INTEGER,
   P_NUMTOTALFONSIG      OUT      INTEGER,
   P_TOTALCOMISION       OUT      FLOAT,
   P_PROM_COMISION       OUT      FLOAT,
   P_TOTALFONDEOS        OUT      FLOAT,
   P_PROM_FONDEOS        OUT      FLOAT,
   P_TOTALTIPOCAMBIO     OUT      FLOAT,
   P_PROM_TIPOCAMBIO     OUT      FLOAT
)
IS
/* --------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENFONDEOUSUARIO                                          */
/* OBJETIVO: OBTIENE UNA LISTA DE TODOS LOS FONDEOS POR EL NOMBRE DE USUARIO         */
/* AUTOR: EQUIPO IUPICARD                                                            */
/* FECHA CREACION: JUL / 2010                                                        */
/* FECHA MODIFICACION:                                                               */
/* EJEMPLO EJECUCION: EXEC OBTENFONDEOUSUARIO(<<P_NOMUSUARIO>>,...,<<:CURSOR>>)      */
/* --------------------------------------------------------------------------------- */
BEGIN
  OPEN P_CURSOR FOR
    SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, 
        TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
        TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
        TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
		T.NOMBRETITULAR,
        'FONDEO POR SPEI' AS FONDEO,                   
        COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
        OV.TIPOCAMBIOUSD, 
        OV.CANTIDADDEPOSITADA,
        ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
          FROM CARTCARD.CONSTANTES C
          WHERE C.ID_CONSTANTES = 'COMISION_SPEI') * OV.TIPOCAMBIOUSD AS COMISION,
          ( OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD ) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID, CARTCARD.USUARIO U
    WHERE UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo SPEI')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND U.USUARIOID = CC.USUARIOID
    AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'),
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
			 T.NOMBRETITULAR,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA
  UNION
    --FONDEO POR BXI 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA, 
			 T.NOMBRETITULAR,
             'FONDEO POR BXI' AS FONDEO, 
             COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA,
             ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
               FROM CARTCARD.CONSTANTES C
               WHERE C.ID_CONSTANTES = 'COMISION_PORTALBAZ') * OV.TIPOCAMBIOUSD AS COMISION,                   
               (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID, CARTCARD.USUARIO U
    WHERE  OV.OPERADORID = -1
    AND OV.SUCURSALID = -1
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND U.USUARIOID = CC.USUARIOID
    AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'), 
			 T.NOMBRETITULAR,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA              
  UNION
    --FONDEO POR TPV 
    SELECT   OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
             TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
             TO_CHAR(OV.FECHASYS, 'dd') AS DIA, 
			 T.NOMBRETITULAR,
             'FONDEO POR TPV' AS FONDEO, 
             COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA,
             ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
               FROM CARTCARD.CONSTANTES C
               WHERE C.ID_CONSTANTES = 'COMISION_TARJETA_TPV') * OV.TIPOCAMBIOUSD AS COMISION,
               (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID, CARTCARD.USUARIO U
    WHERE  OV.OPERADORID = -2
    AND OV.SUCURSALID = -2
    AND UPPER(OV.MENSAJEOPERACION) = UPPER('Fondeo de Referencia')
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND U.USUARIOID = CC.USUARIOID
    AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
             TO_CHAR(OV.FECHASYS, 'ww'), 
             TO_CHAR(OV.FECHASYS, 'dd'),
			 T.NOMBRETITULAR,
             OV.TIPOCAMBIOUSD, 
             OV.CANTIDADDEPOSITADA
  UNION
   -- FONDEO POR VENTANILLA
   SELECT OV.FECHASYS AS FECHA, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy') as ANIO,
         TO_CHAR(OV.FECHASYS, 'ww') AS SEMANA, 
         TO_CHAR(OV.FECHASYS, 'dd') AS DIA,
		 T.NOMBRETITULAR,
         'FONDEO POR VENTANILLA' AS FONDEO,
         COUNT(OV.OPERACIONID) AS NUMERO_TRANSACCIONES, 
         OV.TIPOCAMBIOUSD, 
         OV.CANTIDADDEPOSITADA,
         ( SELECT TO_NUMBER(C.VALOR_CARACTER,'9999999999.9999') 
           FROM CARTCARD.CONSTANTES C
           WHERE C.ID_CONSTANTES = 'COMISION_VENTANILLA') * OV.TIPOCAMBIOUSD AS COMISION,
          (OV.CANTIDADDEPOSITADA / OV.TIPOCAMBIOUSD) AS DEPOSITO_DOLARES
    FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID
    LEFT JOIN CARTCARD.CARD CC ON CC.CARTCARDID = T.CARTCARDID, CARTCARD.USUARIO U
    WHERE  OV.OPERADORID != -1 AND OV.OPERADORID != -2
    AND OV.SUCURSALID != -1 AND OV.SUCURSALID != -2
    AND UPPER(OV.MENSAJEOPERACION) = 'FONDEO DE REFERENCIA'
    AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
    AND U.USUARIOID = CC.USUARIOID
    AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
    AND OV.CODIGORESULTADO = '000'
    GROUP BY OV.FECHASYS, T.NUMEROTARJETA, OV.SUCURSALID, TO_CHAR(OV.FECHASYS, 'yy'), 
            TO_CHAR(OV.FECHASYS, 'ww'),   
            TO_CHAR(OV.FECHASYS, 'dd'),    
			T.NOMBRETITULAR,                                        
            OV.TIPOCAMBIOUSD, 
            OV.CANTIDADDEPOSITADA;
               

      -- TOTAL Y PROMEDIO DE COMISIONES COBRADAS POR FONDEO
     SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS TOTAL_COMISION_USD,
            (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_COMISION
       INTO P_TOTALCOMISION, P_PROM_COMISION
       FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
         ON CC.CARTCARDID = OV.CARTCARDID LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID, CARTCARD.USUARIO U
      WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%COMISION%'
        AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') 
        AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
        AND U.USUARIOID = CC.USUARIOID
       AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
        AND OV.CODIGORESULTADO = '000'
      ORDER BY OV.FECHASYS ASC;

      -- TOTAL Y PROMEDIO DE FONDEOS POR USUARIO
      SELECT SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD) AS FONDEOS_USD,
             (SUM(OV.CANTIDADDEPOSITADA/OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_FONDEOS
        INTO P_TOTALFONDEOS, P_PROM_FONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID, CARTCARD.USUARIO U
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') 
         AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND U.USUARIOID = CC.USUARIOID
        AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
      
      -- TOTAL Y PROMEDIO DE TIPO DE CAMBIO POR USUARIO
      SELECT SUM(OV.TIPOCAMBIOUSD) AS TOTAL_TIPOCAMBIO, 
             (SUM(OV.TIPOCAMBIOUSD)/COUNT(*)) AS PROM_TIPOCAMBIO 
        INTO P_TOTALTIPOCAMBIO, P_PROM_TIPOCAMBIO
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID, CARTCARD.USUARIO U
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy')
         AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
         AND U.USUARIOID = CC.USUARIOID
         AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;

      -- NUMERO TOTAL DE FONDEOS 
      SELECT COUNT(OV.CANTIDADDEPOSITADA) 
        INTO P_NUMTOTALFONDEOS
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN CARTCARD.CARD CC 
          ON CC.CARTCARDID = OV.CARTCARDID LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID, CARTCARD.USUARIO U
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
	     AND OV.FECHASYS BETWEEN TO_DATE(P_FECHAINICIO,'dd/mm/yyyy') AND TO_DATE(P_FECHAFIN,'dd/mm/yyyy')
	     AND U.USUARIOID = CC.USUARIOID
		 AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
         AND OV.CODIGORESULTADO = '000'
       ORDER BY OV.FECHASYS ASC;
	   
	   -- NUMERO TOTAL DE FONDEOS PRIMERA VEZ
       SELECT COUNT(OV.REFERENCIA)
        INTO P_NUMTOTALFONPRIMVEZ
        FROM CARTCARD.OPERACIONVENTANILLA OV LEFT JOIN PASARELBAZ.PCC_SUITES SU 
       ON OV.CARTCARDID = SU.CARTCARDID LEFT JOIN PASARELBAZ.PCC_TARJETAS T ON OV.CARTCARDID = T.CARTCARDID,
            (SELECT MIN(NCONSECUTIVO) AS MIN_CONSECUTIVO, REFERENCIA
               FROM CARTCARD.OPERACIONVENTANILLA
              WHERE UPPER(MENSAJEOPERACION) LIKE '%FONDEO%' 
              GROUP BY REFERENCIA) PRIMERA_VEZ                    
       WHERE UPPER(OV.MENSAJEOPERACION) LIKE '%FONDEO%'
         AND UPPER(T.NOMBRETITULAR) like '%'||UPPER(P_NOMUSUARIO)||'%'
         AND OV.CODIGORESULTADO = '000'         
         AND OV.REFERENCIA = PRIMERA_VEZ.REFERENCIA
         AND OV.NCONSECUTIVO = PRIMERA_VEZ.MIN_CONSECUTIVO                  
       ORDER BY OV.FECHASYS ASC;
   
      -- NUMERO TOTAL DE FONDEOS SUBSECUENTES
      P_NUMTOTALFONSIG := P_NUMTOTALFONDEOS - P_NUMTOTALFONPRIMVEZ;
       
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      RAISE_APPLICATION_ERROR (-20100, 'Error al obtener FONDEOS POR USUARIO (' || SQLCODE || '  ' || SQLERRM || ')');

END OBTENFONDEOUSUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENIDENTIDADVALIDADA (
   pUsuarioId     		IN   Integer,
   pValorIdentidad		Out   Integer
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: obtenIdentidadValidada        					   */
/* Objetivo: Verifica si la identidad de un usuario ha sido validada.  	   */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Oct/2008                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec obtenIdentidadValidada(<<UsuarioId>>,<<:ValorIdentidad>)*/
/* ----------------------------------------------------------------------- */ 
BEGIN
   select identidadvalidada into pValorIdentidad
   from
   CARTCARD.usuario
   where usuarioId= pUsuarioId;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END obtenIdentidadValidada;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE OBTENLISTAMEMBRECIAS (
   P_FECHAINICIO   IN       VARCHAR2,
   P_FECHAFIN      IN       VARCHAR2,
   P_CURSOR        OUT      SYS_REFCURSOR
)
IS
/*   ---------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENLISTAMEBRECIAS                                                      */
/* OBJETIVO: OBTIENE UNA LISTA DE LAS MEMBRECIAS                                                  */
/* AUTOR: EQUIPO IUPICARD                                                                         */
/* FECHA CREACION: JULIO / 2010                                                                   */
/* FECHA MODIFICACION:                                                                            */
/* EJEMPLO EJECUCION: EXEC OBTENRIBESAFOLIOS(<<:CURSOR>>)                                         */
/* ---------------------------------------------------------------------------------------------- */
BEGIN
    OPEN P_CURSOR FOR
    SELECT TO_CHAR(HORAFONDEO,'DD/MM/YYYY') FECHA, 
        NUMEROTARJETA,
        TIPOMEMBRESIA,
        MONTOPESOS,
        MONTODOLARES,
        NOMBRETITULAR,
        REFERENCIA,
        TIPOCAMBIO
        FROM
        (
         SELECT C.CARTCARDID, 
         C.FECHAALTA HORAFONDEO,
         M.DURACION,
         M.MEMBRECIAID,    
         T.NUMEROTARJETA NUMEROTARJETA,
         T.NOMBRETITULAR NOMBRETITULAR,
          OP.REFERENCIA REFERENCIA,
            M.DURACION || ' MESES' TIPOMEMBRESIA,
         U.NOMBRE || ' ' || U.APATERNO || ' ' || U.AMATERNO NOMBRE,
         'C' || OP.OPERACIONID OPERACIONID,
         OP.CANTIDADDEPOSITADA MONTOPESOS,
            OP.CANTIDADDEPOSITADA/OP.TIPOCAMBIOUSD MONTODOLARES,    
            TIPOCAMBIOUSD TIPOCAMBIO  
            FROM CARTCRDDES.CARD C 
                INNER JOIN CARTCRDDES.OPERACIONVENTANILLA OP ON C.CARTCARDID = OP.CARTCARDID
          INNER JOIN PASBAZDES.PCC_TARJETAS T ON T.CARTCARDID = C.CARTCARDID
          INNER JOIN CARTCRDDES.USUARIO U ON C.USUARIOID = U.USUARIOID
          INNER JOIN CARTCRDDES.MEMBRECIA M ON M.MEMBRECIAID = C.MEMBRECIAID, CARTCRDDES.CC_TARJETASEXPIRADAS TX
                WHERE (BLOQUEO = 0 OR BLOQUEO = 1)
				AND TX.CARTCARDID = C.CARTCARDID
                   AND CODIGORESULTADO = '000'
                   AND (lower(MENSAJEOPERACION) LIKE ('%membrecia%') or
           lower(MENSAJEOPERACION) LIKE ('%membresia%'))           
                   AND TO_DATE (C.FECHAALTA) >= TO_DATE (COALESCE(P_FECHAINICIO, '' || TO_CHAR(FECHAOPERACION,'DD/MM/YYYY')), 'DD/MM/YYYY')
                   AND TO_DATE (C.FECHAALTA) <= TO_DATE (COALESCE(P_FECHAFIN, '' || TO_CHAR(FECHAOPERACION,'DD/MM/YYYY')), 'DD/MM/YYYY')
        );
EXCEPTION
   WHEN NO_DATA_FOUND THEN
      ROLLBACK;
END OBTENLISTAMEMBRECIAS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENREFERENCIAPORCARDID (
   P_CARTCARDID     IN      CARTCARD.CARD.CARTCARDID%TYPE,
   P_REFERENCIA     OUT     CARTCARD.CARD.REFERENCIA%TYPE
)  
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENREFERENCIAPORCARDID                                        */
/* OBJETIVO: OBTIENE UNA REFERENCIA APARTIR DEL NUMERO DE TARJETA.                       */
/* AUTOR: EQUIPO IUPICARD                                                                */
/* FECHA CREACION: JUL/2010                                                              */
/* FECHA MODIFICACION:                                                                   */
/* EJEMPLO EJECUCION: EXEC OBTENREFERENCIAPORCARDID (<<P_CARTCARDID>>,<<:P_REFERENCIA>)  */
/* ------------------------------------------------------------------------------------- */
BEGIN
      SELECT T.REFERENCIA  
        INTO P_REFERENCIA
        FROM CARTCARD.CARD T
       WHERE T.CARTCARDID = P_CARTCARDID;

 EXCEPTION
    WHEN NO_DATA_FOUND THEN
   P_REFERENCIA := '0';
END OBTENREFERENCIAPORCARDID;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENREFERENCIAPORTARJETA (
   P_NUMEROTARJETA     IN       PASARELBAZ.PCC_TARJETAS.NUMEROTARJETA%TYPE,
   P_CARDID            OUT      CARTCARD.CARD.CARTCARDID%TYPE,
   P_REFERENCIA        OUT      CARTCARD.CARD.REFERENCIA%TYPE,
   P_RESULTADO         OUT      VARCHAR2
)
IS
/* ------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENREFERENCIAPORTARJETA                                                   */
/* OBJETIVO: OBTIENE LA REFERENCIA APARTIR DEL NUMERO DE TARJETA.                                    */
/* AUTOR: EQUIPO IUPICARD                                                                            */
/* FECHA CREACION: JUL/2010                                                                          */
/* FECHA MODIFICACION:                                                                               */
/* EJEMPLO EJECUCION: EXEC OBTENREFERENCIAPORTARJETA(<<P_NUMEROTARJETA>>,...,<<:P_RESULTADO>>)       */
/* ------------------------------------------------------------------------------------------------- */
BEGIN
    SELECT CD.REFERENCIA, CD.CARTCARDID
      INTO P_REFERENCIA, P_CARDID
      FROM CARTCARD.CARD CD INNER JOIN PASARELBAZ.PCC_TARJETAS PT ON CD.CARTCARDID = PT.CARTCARDID
     WHERE PT.NUMEROTARJETA = P_NUMEROTARJETA;

    P_RESULTADO := '000';

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := '001';

END OBTENREFERENCIAPORTARJETA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENTARJPREACTIVAS (
    P_NUMTARJETAS           IN       INTEGER, 
    P_CURSOR                OUT      SYS_REFCURSOR,
    P_TOTAL_DISPONIBLE      OUT      INTEGER,
    P_RESULTADO             OUT      VARCHAR2
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENTARJPREACTIVAS                                             */
/* OBJETIVO: OBTIENE UN LOTE DE TARJETAS PREACTIVADAS DE ACUERDO AL NUMERO DE TARJETAS.  */
/* AUTOR: EQUIPO IUPICARD                                                                */
/* FECHA CREACION: JUL/2010                                                              */
/* FECHA MODIFICACION:                                                                   */
/* EJEMPLO EJECUCION: EXEC OBTENTARJPREACTIVAS(<<P_NUMTARJETAS>>,...,<<:P_RESULTADO>))   */
/* ------------------------------------------------------------------------------------- */
    V_CANT_TARJETAS         INTEGER;
BEGIN
    SELECT COUNT(*) 
      INTO P_TOTAL_DISPONIBLE  
      FROM CARTCARD.T_P_ACTIVADAS TPA
     WHERE TPA.NUMLOTE_MATERIALES IS NULL;

    IF P_NUMTARJETAS > P_TOTAL_DISPONIBLE THEN 
       P_RESULTADO := '001';   -- ERROR  
       
    ELSE
       P_RESULTADO := '000';  -- EXITO  

       OPEN P_CURSOR FOR
            SELECT TPA.ID_T_P_ACTIVADAS, TPA.ACTUALCARDNUMBER, TPA.IDSUITE, 
                   TPA.FECHAVENCIMIENTO, TPA.CVV2, TPA.REFERENCIA    
              FROM CARTCARD.T_P_ACTIVADAS TPA
             WHERE ROWNUM BETWEEN 1 AND P_NUMTARJETAS
               AND TPA.NUMLOTE_MATERIALES IS NULL
             ORDER BY TPA.ID_T_P_ACTIVADAS ASC;

    END IF;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_RESULTADO := '001';

END OBTENTARJPREACTIVAS;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENTOKENPORCARDID (
   P_CARTCARDID       IN       CARTCARD.CARD.CARTCARDID%TYPE,
   P_TOKENTARJETA     OUT      PASARELBAZ.PCC_TARJETASCARDMARTE.TOKENTARJETA%TYPE,
   P_RESULTADO        OUT      INTEGER
)
IS
/* ---------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENTOKENPORCARDID                                                */
/* OBJETIVO: RETORNA EL TOKEN DEL USUARIO SOLICITADO POR EL P_CARTCARDID                    */
/* AUTOR: EQUIPO IUPICARD                                                                   */
/* FECHA CREACION: JUL/2010                                                                 */
/* FECHA MODIFICACION:                                                                      */
/* EJEMPLO EJECUCION: EXEC OBTENTOKENPORCARDID(<<P_CARTCARDID>>,<<:P_TOKENTARJETA>>))       */
/* ---------------------------------------------------------------------------------------- */
BEGIN
     P_RESULTADO := 1;

     SELECT PT.TOKENTARJETA
       INTO P_TOKENTARJETA
       FROM CARTCARD.CARD CD INNER JOIN PASARELBAZ.PCC_TARJETASCARDMARTE PT
         ON CD.CARTCARDID = PT.CARTCARDID
      WHERE CD.CARTCARDID = P_CARTCARDID;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_TOKENTARJETA := 'NO SE ENCONTRÓ';
      P_RESULTADO := 0;

END OBTENTOKENPORCARDID;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE Obtentokenporreferencia (
   P_REFERENCIA       IN       CARTCARD.ICN_TARJETA.REFERENCIA%TYPE,
   P_TOKENTARJETA     OUT      CARTCARD.ICN_TARJETA.TOKEN%TYPE,
   P_RESULTADO        OUT      INTEGER
)
IS
/* ---------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENTOKENPORCARDID                                                */
/* OBJETIVO: RETORNA EL TOKEN DEL USUARIO SOLICITADO POR EL P_CARTCARDID                    */
/* AUTOR: EQUIPO IUPICARD                                                                   */
/* FECHA CREACION: JUL/2010                                                                 */
/* FECHA MODIFICACION:                                                                      */
/* EJEMPLO EJECUCION: EXEC OBTENTOKENPORCARDID(<<P_CARTCARDID>>,<<:P_TOKENTARJETA>>))       */
/* ---------------------------------------------------------------------------------------- */
BEGIN
     P_RESULTADO := 1;

     SELECT T.TOKEN
       INTO P_TOKENTARJETA
       FROM CARTCARD.ICN_TARJETA T
      WHERE T.REFERENCIA = P_REFERENCIA;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_TOKENTARJETA := 'NO SE ENCONTRÓ';
      P_RESULTADO := 0;

END Obtentokenporreferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENTOKENPORUSUIDCORE (
   P_USUARIOID      IN       CARTCARD.CARD.USUARIOID%TYPE,
   P_TOKENTARJETA   OUT      PASARELBAZ.PCC_TARJETASCARDMARTE.TOKENTARJETA%TYPE
)
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENERTOKENPORUSUARIOID                                        */
/* OBJETIVO: RETORNA EL TOKEN DEL USUARIO SOLICITADO POR EL ID DE USUARIO                */
/* AUTOR: EQUIPO IUPICARD                                                                */
/* FECHA CREACION: JUL/2010                                                              */
/* FECHA MODIFICACION:                                                                   */
/* EJEMPLO EJECUCION: EXEC OBTENERTOKENPORUSUARIOID(<<USUARIOID>>,<<:TOKENTARJETA>>))    */
/* ------------------------------------------------------------------------------------- */
BEGIN

     SELECT PT.TOKENTARJETA
       INTO P_TOKENTARJETA
       FROM CARTCARD.CARD CD INNER JOIN PASARELBAZ.PCC_TARJETASCARDMARTE PT
         ON CD.CARTCARDID = PT.CARTCARDID
      WHERE CD.USUARIOID = P_USUARIOID;

EXCEPTION
   WHEN NO_DATA_FOUND THEN
      P_TOKENTARJETA := '';

END OBTENTOKENPORUSUIDCORE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTENUMLOTE (
    P_NUMLOTE    OUT    VARCHAR2
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENUMLOTE                                       */
/* OBJETIVO: OBTIENE DE UNA SECUENCIA UN NUMERO DE LOTE PARA MATERIALES    */
/* AUTOR: EQUIPO IUPICARD                                                  */
/* FECHA CREACION: JUL/2010                                                */
/* FECHA MODIFICACION:                                                     */
/* EJEMPLO EJECUCION: EXEC OBTENUMLOTE(<<:P_NUMLOTE>>))                    */
/* ----------------------------------------------------------------------- */
BEGIN
   
    SELECT CARTCARD.NUMLOTE_SEQ.NEXTVAL
      INTO P_NUMLOTE
      FROM DUAL;

    EXCEPTION
       WHEN NO_DATA_FOUND THEN
           P_NUMLOTE := '';
  
END OBTENUMLOTE;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTIENEDIRECCIONLAREDO (
   p_direccionlaredo   OUT   VARCHAR2
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: obtienedireccionlaredo        						   */
/* Objetivo: Obtiene la dirección de laredo.						   */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Oct/2008                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec obtienedireccionlaredo(<<:Direccion>)              	   */
/* ----------------------------------------------------------------------- */
BEGIN
   SELECT valor_caracter
     INTO p_direccionlaredo
     FROM CARTCARD.constantes
    WHERE ID_CONSTANTES = 'DIRECCION_LAREDO';
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_direccionlaredo := '';
END obtienedireccionlaredo;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTIENEMEMBRESIACOMISION (
   p_cartcardid   IN       NUMBER,
   p_cursor       OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTIENEMEMBRESIACOMISION                                                */
/* Objetivo: Obtiene los valores del pago de membresia y comision.                               */
/* Autor:    Equipo CartCard (Siscon)                                                            */
/* Fecha Creacion: Ene/2009                                                                      */
/* Fecha Modificacion:                                                                           */
/* Ejemplo Ejecucion: exec OBTIENEMEMBRESIACOMISION(<<cartcardid>>,<<:cursor>>)                  */
/* --------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT operacionid,
             TO_CHAR (fechaoperacion, 'DD-mm-YYYY') AS fechaoperacion,
             CASE mensajeoperacion
                WHEN 'Pago de Membresia'
                   THEN    mensajeoperacion
                        || ' por '
                        || CARTCARD.obtendescripcionmembrecia
                                    (CARTCARD.operacionventanilla.cartcardid)
                ELSE mensajeoperacion
             END AS mensajeoperacion,
             cantidaddepositada, tipocambiousd, tipocambiotesoreria,
             usuariodepositante, 
             DECODE(UPPER(CARTCARD.operacionventanilla.USUARIODEPOSITANTE),'SPEI','SPEI','SWIFT','SWIFT','TEF','TEF','Banco Azteca') AS lugar
        FROM CARTCARD.operacionventanilla
       WHERE codigoresultado = '000'
         AND CARTCARD.operacionventanilla.cartcardid = p_cartcardid
         AND (   mensajeoperacion LIKE ('Comision por Pago')
              OR mensajeoperacion LIKE ('Pago de Membresia')
              OR mensajeoperacion LIKE ('Fondeo de referencia')
             );
END obtienemembresiacomision;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          obtienemembresiacomisionfecha (
   p_cartcardid    IN       NUMBER,
   p_fechainicio   IN       VARCHAR2,
   p_fechafin      IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTIENEMEMBRESIACOMISIONFECHA                                                                                                                 */
/* Objetivo: Obtiene los valores del pago de membresia y comision.                                                                                                                */
/* Autor:    Equipo CartCard (Siscon)                                                                                                                                                                         */
/* Fecha Creacion: Ene/2009                                                                                                                                                                                   */
/* Fecha Modificacion:                                                                                                                                                                                                    */
/* Ejemplo Ejecucion: exec OBTIENEMEMBRESIACOMISIONFECHA(<<cartcardid>>,<<:cursor>>)                                                                             */
/* -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT operacionid,
             TO_CHAR (fechaoperacion, 'DD-mm-YYYY') AS fechaoperacion,
             CASE mensajeoperacion
                WHEN 'Pago de Membresia'
                   THEN    mensajeoperacion
                        || ' por '
                        || CARTCARD.Obtendescripcionmembrecia
                                    (CARTCARD.OPERACIONVENTANILLA.cartcardid)
                ELSE mensajeoperacion
             END AS mensajeoperacion,
             cantidaddepositada, tipocambiousd, tipocambiotesoreria,
             usuariodepositante,
              CASE WHEN mensajeoperacion != 'Verificacion' THEN
              DECODE
                 (UPPER (CARTCARD.OPERACIONVENTANILLA.usuariodepositante),
                  'SPEI', 'SPEI',
                  'SWIFT', 'SWIFT',
                  'TEF', 'TEF',                      
                  'Banco Azteca'
                 ) 
    ELSE
      'Verificacion'
    END AS lugar
        FROM CARTCARD.OPERACIONVENTANILLA
       WHERE codigoresultado = '000'
         AND CARTCARD.OPERACIONVENTANILLA.cartcardid = p_cartcardid
         AND TO_DATE (fechaoperacion) >= TO_DATE (p_fechainicio, 'YYYYmmDD')
         AND TO_DATE (fechaoperacion) <= TO_DATE (p_fechafin, 'YYYYmmDD')
         AND (   mensajeoperacion LIKE ('Comision por Pago')
              OR mensajeoperacion LIKE ('Pago de Membresia')
     OR mensajeoperacion LIKE ('Fondeo de referencia')
              OR mensajeoperacion LIKE ('Verificacion')
             );
END obtienemembresiacomisionfecha;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTIENEMEMBRESIAPORREFERENCIA (
   p_referencia   IN       VARCHAR2,
   p_cursor       OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTIENEMEMBRESIAPORREFERENCIA                                           */
/* Objetivo: Obtiene los datos de la membresia conforme a la referencia solicitada.              */
/* Autor:    Equipo CartCard (Siscon)                                                            */
/* Fecha Creacion: Ene/2009                                                                      */
/* Fecha Modificacion:                                                                           */
/* Ejemplo Ejecucion: exec OBTIENEMEMBRESIAPORREFERENCIA(<<referencia>>,<<:cursor>>)             */
/* --------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT CARTCARD.membrecia.membreciaid, duracion, descripcion, costo,
             tipomoneda,
             (SELECT descripcion
                FROM CARTCARD.moneda
               WHERE CARTCARD.moneda.tipomoneda =
                         CARTCARD.membrecia.tipomoneda)
                                                        AS descripcionmoneda
        FROM CARTCARD.card INNER JOIN CARTCARD.membrecia ON CARTCARD.card.membreciaid =
                                                                  CARTCARD.membrecia.membreciaid
       WHERE referencia = p_referencia;
END obtienemembresiaporreferencia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTIENEPREGUNTAS (
   p_nombreusuario   IN       VARCHAR2,
   p_mail            IN       VARCHAR2,
   p_cursor          OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: obtienepreguntas        						   */
/* Objetivo: Obtiene las preguntas de un usuario.						   */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Oct/2008                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec obtienepreguntas(<<:Cursor>>)              	   */
/* ----------------------------------------------------------------------- */
   v_usuarioid   INTEGER;
BEGIN
   SELECT NVL (MAX (usuarioid), 0)
     INTO v_usuarioid
     FROM CARTCARD.usuario
    WHERE p_nombreusuario = nombreusuario AND mail = p_mail;

   OPEN p_cursor FOR
      SELECT usuario.usuarioid, preguntaestandar1id,
             (SELECT pregunta
                FROM CARTCARD.preguntasestandar INNER JOIN CARTCARD.preguntasusuario ON CARTCARD.preguntasusuario.preguntaestandar1id =
                                                                        CARTCARD.preguntasestandar.idpreguntaestandar
               WHERE usuarioid = v_usuarioid) AS pregunta1,
             preguntaestandar2id,
             (SELECT pregunta
                FROM CARTCARD.preguntasestandar INNER JOIN CARTCARD.preguntasusuario ON CARTCARD.preguntasusuario.preguntaestandar2id =
                                                                        CARTCARD.preguntasestandar.idpreguntaestandar
               WHERE usuarioid = v_usuarioid) AS pregunta2, pregunta3,
             pregunta4
        FROM CARTCARD.preguntasusuario INNER JOIN CARTCARD.usuario ON CARTCARD.preguntasusuario.usuarioid =
                                                             CARTCARD.usuario.usuarioid
       WHERE CARTCARD.preguntasusuario.usuarioid = v_usuarioid AND mail = p_mail;
END obtienepreguntas;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          OBTIENETIPOSDOCUMENTO (p_cursor OUT sys_refcursor)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTIENETIPOSDOCUMENTO                             */
/* Objetivo: Agrega un documento con los datos especificados.              */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Oct/2008                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec OBTIENETIPOSDOCUMENTO(<<:Cursor>>)              */
/* ----------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT   idtipodocumento, descripcion
          FROM CARTCARD.cc_tipodocumento
      ORDER BY idtipodocumento ASC;
END obtienetiposdocumento;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE PAISES (
   p_cursor   OUT   sys_refcursor
--   mensaje    OUT   VARCHAR2
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: paises                        					  */
/* Objetivo: Recupera los paises standar				   		  		  */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec paises(<<:Cursor>>, <<>:Mensaje>) 			  */
/* ---------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT   paisid, nombrepais, clavetelefonica
          FROM CARTCARD.pais
      ORDER BY nombrepais;

--   mensaje := 'Mensaje de prueba';
END paises;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          PREGUNTAS (p_preguntas OUT sys_refcursor)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: preguntas                        				  */
/* Objetivo: Recupera las preguntas standar				   		  		  */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec preguntas(<<:Cursor>>) 						  */
/* ---------------------------------------------------------------------- */
BEGIN
   OPEN p_preguntas FOR
      SELECT   idpreguntaestandar, pregunta
          FROM CARTCARD.preguntasestandar
      ORDER BY pregunta;
END preguntas;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE PREGUNTASCONFIRMACION (
   p_nombreusuario   IN       VARCHAR2,
   p_cursor          OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: PREGUNTASCONFIRMACION        					   */
/* Objetivo: Obtiene las preguntas de un usuario.						   */
/* Autor:    Equipo CartCard (Siscon)                                      */
/* Fecha Creacion: Feb/2009                                                */
/* Fecha Modificacion:                                                     */
/* Ejemplo Ejecucion: exec PREGUNTASCONFIRMACION(<<:Cursor>>)         	   */
/* ----------------------------------------------------------------------- */
BEGIN



OPEN p_cursor FOR

	select * from
	(
	select usuarioid, 1 columnaPregunta, preguntaestandar1id preguntaid, pregunta textopregunta, respuesta1 respuestaPregunta
	    from CARTCARD.preguntasusuario PU inner join CARTCARD.preguntasestandar P on PU.preguntaestandar1id = P.idpreguntaestandar
	union
	select usuarioid, 2 columnaPregunta, preguntaestandar2id preguntaid, pregunta textopregunta, respuesta2 respuestaPregunta
	    from CARTCARD.preguntasusuario PU inner join CARTCARD.preguntasestandar P on PU.preguntaestandar2id = P.idpreguntaestandar
	union
	select usuarioid, 3 columnaPregunta, -1 preguntaid, pregunta3 textopregunta, respuesta3 respuestaPregunta
	    from CARTCARD.preguntasusuario PU 
	union
	select usuarioid, 4 columnaPregunta, -1 preguntaid, pregunta4 textopregunta, respuesta4 respuestaPregunta
	    from CARTCARD.preguntasusuario PU 
	) P
	inner join CARTCARD.usuario U on P.usuarioid = U.usuarioid
	
	where nombreusuario = p_nombreusuario;

END PREGUNTASCONFIRMACION;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE PRUEBA_DEC  (p_usuarioid IN cartcard.icn_clientes.id_usuario%type,

                          PSCod_Error  out  number,
                          PSMsg_Error     out  varchar2) IS
BEGIN
  declare  TYPE cliente IS RECORD ( id_usuario             NUMBER,  nombre                 VARCHAR2(30), apaterno               VARCHAR2(30), amaterno               VARCHAR2(30), nombre_usuario         VARCHAR2(51), contrasenia            VARCHAR2(50), correo_electronico     VARCHAR2(50), cp                     VARCHAR2(5), ciudad                 VARCHAR2(40), colonia                VARCHAR2(50),  id_municipio           NUMBER, id_estado              NUMBER, id_pais                NUMBER, calle                  VARCHAR2(80), num_ext                VARCHAR2(30), num_int                VARCHAR2(30), telefono               VARCHAR2(30), celular                VARCHAR2(30), fecha_nacimiento       DATE, id_tipo_identificacion NUMBER, numero_identificacion  VARCHAR2(30), tipo_cliente           VARCHAR2(1), b_ldap                 VARCHAR2(1),  estatus                VARCHAR2(2), fecha_creacion         DATE, usuario_modifico       VARCHAR2(30),  ultima_modificacion    DATE, canal                  VARCHAR2(15),  telefono_oficina    VARCHAR2(30), extension    VARCHAR2(6)); pereg cliente; p_cod NUMBER;  p_mensaje VARCHAR2(200);  begin  pereg.id_usuario:=6682; pereg.correo_electronico:='perpo2015@gmail.com'; pereg.nombre_usuario:='perpo2015@gmail.com'; pereg.usuario_modifico:='IUPICARD';  cartcard.pkg_icn_servicio.Modifica_CLIENTE(pereg,p_cod,p_mensaje);   end;




   COMMIT;
EXCEPTION
    WHEN others THEN
     PSCod_Error:=0;
     PSMsg_Error:=SQLCODE || '  ' || SQLERRM;
     ROLLBACK;
     RAISE_APPLICATION_ERROR (-20120, 'Error ocurrido al O  (' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          RECUPERACONTRASENIAVALIDA (
   p_nombre            IN       VARCHAR2,
   p_apaterno          IN       VARCHAR2,
   p_amaterno          IN       VARCHAR2,
   p_fechanacimiento   IN       VARCHAR2,
   p_preguntaid1       IN       INTEGER,
   p_respuestaes1      IN       VARCHAR2,
   p_mensaje           OUT      VARCHAR2
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: recuperacontraseniavalida                        */
/* Objetivo: Recupera la contraseña de un usuario           */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec recuperacontraseniavalida(<<NombreUsuario>>...<<:Mensaje>>) */
/* ---------------------------------------------------------------------- */
   p_usuarioid   INTEGER := 0;
BEGIN
   BEGIN
      SELECT NVL (MAX (usuarioid), 0)
        INTO p_usuarioid
        FROM CARTCARD.USUARIO
       WHERE UPPER (nombre) = UPPER (p_nombre)
         AND UPPER (apaterno) = UPPER (p_apaterno)
         AND UPPER (amaterno) = UPPER (p_amaterno)
         AND fechanacimiento =
                            TO_DATE (p_fechanacimiento, 'ddMMYYYY-HH24:MI:ss');

      IF p_usuarioid != 0
      THEN
         SELECT NVL (MAX (usuarioid), 0)
           INTO p_usuarioid
           FROM CARTCARD.PREGUNTASUSUARIO
          WHERE     usuarioid = p_usuarioid
                AND (    preguntaestandar1id = p_preguntaid1
                     AND respuesta1 = p_respuestaes1
                    )
             OR     (    preguntaestandar2id = p_preguntaid1
                     AND respuesta2 = p_respuestaes1
                    );

         IF p_usuarioid != 0
         THEN
            p_mensaje := 'Usuario valido';
  
         ELSE
            p_mensaje := 'Una o las dos respuestas son incorrectas';
         END IF;
      ELSE
         p_mensaje := 'Usuario no identificado o sus datos no corresponden';
      END IF;
   END;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_mensaje := 'No valido';
END Recuperacontraseniavalida;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          REGISTRALOGINHST (
   p_nombreusuario   IN   VARCHAR2,
   p_ip              IN   VARCHAR2
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: registraloginhst                                 */
/* Objetivo: Guarda los intentos de login de un usuario          		  */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec registraloginhst(<<NombreUsuario>>,<<Ip>>)     */
/* ---------------------------------------------------------------------- */
   v_max         INTEGER;
   v_usuarioid   INTEGER;
BEGIN
   BEGIN
      SELECT usuarioid
        INTO v_usuarioid
        FROM CARTCARD.usuario
       WHERE p_nombreusuario = nombreusuario;

      SELECT NVL (MAX (ID), 0)
        INTO v_max
        FROM CARTCARD.loginhst
       WHERE usuarioid = v_usuarioid;

      IF v_max != 0
      THEN
         DELETE FROM CARTCARD.loginhst
               WHERE ID = v_max AND usuarioid = v_usuarioid;
      END IF;

      INSERT INTO CARTCARD.loginhst
                  (ID, usuarioid, fecha_login,
                   alias,
                   intento, ip
                  )
           VALUES ((SELECT NVL (MAX (ID), 0) + 1
                      FROM CARTCARD.loginhst), v_usuarioid, SYSDATE,
                   p_nombreusuario,
                   (SELECT CASE estadodecuentaid
                              WHEN 2
                                 THEN 3
                              ELSE 0
                           END
                      FROM CARTCARD.usuario
                     WHERE nombreusuario = p_nombreusuario), p_ip
                  );
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END registraloginhst;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          REGRESACONSTANTES (
   p_id           IN       VARCHAR2,
   p_constantes   OUT      sys_refcursor
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: regresaconstantes                              	  */
/* Objetivo: Regresa todos los valores de una constante   		  */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec regresaconstantes(<<IdConstante>>...<<:cursor>>)                           */
/* ---------------------------------------------------------------------- */
BEGIN
   OPEN p_constantes FOR
      SELECT CARTCARD.constantes.descripcion, CARTCARD.constantes.tipo_valor, 
             CARTCARD.constantes.valor_entero, CARTCARD.constantes.valor_decimal,
             CARTCARD.constantes.valor_fecha, CARTCARD.constantes.valor_caracter, 
             CARTCARD.constantes.valor_imagen, CARTCARD.constantes.usuario,
             CARTCARD.constantes.fecha_registro
      FROM   CARTCARD.constantes
       WHERE ID_CONSTANTES = p_id;
END regresaconstantes;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          Renuevaconiupicard (
   p_usuarioid    IN   INTEGER,
   p_costo        IN   FLOAT,
   p_tipomoneda   IN   INTEGER
)
IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: RENUEVACONIUPICARD                                            */
/* Objetivo: Extiende la fecha de vencimiento de la membrecia.                         */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Feb/2009                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec RENUEVACONIUPICARD()                                        */
/* ----------------------------------------------------------------------------------- */
   v_duracion      INTEGER;
   v_membreciaid   INTEGER;
BEGIN
   BEGIN
      SELECT CARTCARD.MEMBRECIA.membreciaid, CARTCARD.MEMBRECIA.duracion
        INTO v_membreciaid, v_duracion
        FROM CARTCARD.MEMBRECIA
       WHERE costo = p_costo AND p_tipomoneda = tipomoneda;

      UPDATE CARTCARD.CARD
         SET CARTCARD.CARD.bloqueo = 1,
             CARTCARD.CARD.fechaalta = SYSDATE,
             CARTCARD.CARD.membreciaid = v_membreciaid,
             CARTCARD.CARD.fechavencimiento =
                ADD_MONTHS
                   (CASE
                       WHEN TO_DATE (CARTCARD.CARD.fechavencimiento) >
                                                             TO_DATE (SYSDATE)
                          THEN CARTCARD.CARD.fechavencimiento
                       ELSE SYSDATE
                    END,
                    v_duracion
                   )
       WHERE CARTCARD.CARD.usuarioid = p_usuarioid
         AND (CARTCARD.CARD.bloqueo = 0 OR CARTCARD.CARD.bloqueo = 1);
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END Renuevaconiupicard;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE RENUEVAMEMBRESIA (
   p_tipomoneda   IN   INTEGER,
   p_costo        IN   FLOAT,
   p_fechaalta    IN   VARCHAR2,
   p_usuarioid    IN   INTEGER
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: RENUEVAMEMBRESIA                              	  */
/* Objetivo: Realiza la actualización para la nueva membresia.   		  */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec RENUEVAMEMBRESIA(<<TipoMoneda>>...<<UsuarioId>>)                           */
/* ---------------------------------------------------------------------- */
   v_existe   INTEGER;
BEGIN
   BEGIN
      UPDATE CARTCARD.card
         SET fechaalta = TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
             bloqueo = 0,
             fechasys = SYSDATE,
             membreciaid =
                        (SELECT membreciaid
                           FROM CARTCARD.membrecia
                          WHERE costo = p_costo AND p_tipomoneda = tipomoneda)
       WHERE usuarioid = p_usuarioid AND bloqueo in (0,1);
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END renuevamembresia;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          REPORTEFONDEOS (
   p_fechaincial   IN       VARCHAR2,
   p_fechafinal    IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: REPORTEFONDEOS                                                          */
/* Objetivo: Obtiene una lista de los fondeos realizados en el rango de fecha especificado.      */
/* Autor:    Equipo CartCard (Siscon)                                                            */
/* Fecha Creacion: Oct/2008                                                                      */
/* Fecha Modificacion:                                                                           */
/* Ejemplo Ejecucion: exec REPORTEFONDEOS(<<fechaincial>>,<<fechafinal>>,<<:cursor>>)            */
/* --------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT fechaoperacion, mensajeoperacion, cantidaddepositada,
             tipocambiousd, tipocambiotesoreria
        FROM CARTCARD.operacionventanilla INNER JOIN CARTCARD.card ON CARTCARD.operacionventanilla.cartcardid =
                                                              CARTCARD.card.cartcardid
       WHERE (bloqueo = 0 OR bloqueo = 1)
         AND TO_DATE (fechaoperacion) >= TO_DATE (p_fechaincial, 'DDmmYYYY')
         AND TO_DATE (fechaoperacion) <= TO_DATE (p_fechafinal, 'DDmmYYYY')
         AND codigoresultado = '000'
         AND mensajeoperacion LIKE ('Fondeo%');
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
END reportefondeos;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE REPORTEMEMBRESIASEXPIRADAS (
   p_fechaincial   IN       VARCHAR2,
   p_fechafinal    IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* ---------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: REPORTEMEMBRESIASEXPIRADAS                                               */
/* Objetivo: Obtiene una lista de los fondeos realizados en el rango de fecha especificado.       */
/* Autor:    Equipo CartCard (Siscon)                                                             */
/* Fecha Creacion: Oct/2008                                                                       */
/* Fecha Modificacion:                                                                            */
/* Ejemplo Ejecucion: exec REPORTEMEMBRESIASEXPIRADAS(<<fechaincial>>,<<fechafinal>>,<<:cursor>>) */
/* ---------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT cartcardid, referencia, fechaalta, fechavencimiento
        FROM CARTCARD.card
       WHERE bloqueo in (0,1,4)
         AND TO_DATE (fechaalta) >= TO_DATE (p_fechaincial, 'DDmmYYYY')
         AND TO_DATE (fechaalta) <= TO_DATE (p_fechafinal, 'DDmmYYYY')
         AND TO_DATE (fechavencimiento) <= TO_DATE (SYSDATE);
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
END reportemembresiasexpiradas;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE REPORTEREPOSICIONES (
   p_fechaincial   IN       VARCHAR2,
   p_fechafinal    IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: REPORTEREPOSICIONES                                                  	 */
/* Objetivo: Obtiene una lista de los reposiciones realizadas en el rango de fecha especificado. */
/* Autor:    Equipo CartCard (Siscon)                                                            */
/* Fecha Creacion: Oct/2008                                                                      */
/* Fecha Modificacion:                                                                           */
/* Ejemplo Ejecucion: exec REPORTEREPOSICIONES(<<fechaincial>>,<<fechafinal>>,<<:cursor>>)    	 */
/* --------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT referencia, cartcardidcancela, cartcardidrepone, fecharegistro
        FROM CARTCARD.cc_reposiciones INNER JOIN CARTCARD.card ON CARTCARD.cc_reposiciones.cartcardidrepone =
                                                              CARTCARD.card.cartcardid
       WHERE CARTCARD.cc_reposiciones.usuarioid = CARTCARD.card.usuarioid
         AND bloqueo in (0,1,4)
         AND TO_DATE (fecharegistro) >= TO_DATE (p_fechaincial, 'DDmmYYYY')
         AND TO_DATE (fecharegistro) <= TO_DATE (p_fechafinal, 'DDmmYYYY');
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
END reportereposiciones;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          REPORTESOLICITUDESPLASTICO (
   p_estadodecuentaid   IN       INTEGER,
   p_fechaincial        IN       VARCHAR2,
   p_fechafinal         IN       VARCHAR2,
   p_cursor             OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: REPORTESOLICITUDPLASTICO                                      */
/* Objetivo: Agrega una nueva solicitud de plastico.                                   */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Nov/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec REPORTESOLICITUDPLASTICO(<<estadodecuentaid>>...<<:cursor>>)  */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT numerosolicitud, cartcardid, usuarioid, fechasolicitud
        FROM CARTCARD.cc_solicitudplastico
       WHERE estadodecuentaid = p_estadodecuentaid
         AND TO_DATE (fechasolicitud) >= TO_DATE (p_fechaincial, 'DDmmYYYY')
         AND TO_DATE (fechasolicitud) <= TO_DATE (p_fechafinal, 'DDmmYYYY');
END reportesolicitudesplastico;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE REPORTETARJETASCANCELADAS (
   p_fechaincial   IN       VARCHAR2,
   p_fechafinal    IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* ---------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: REPORTETARJETASCANCELADAS                                                */
/* Objetivo: Obtiene una lista de los fondeos realizados en el rango de fecha especificado.       */
/* Autor:    Equipo CartCard (Siscon)                                                             */
/* Fecha Creacion: Oct/2008                                                                       */
/* Fecha Modificacion:                                                                            */
/* Ejemplo Ejecucion: exec REPORTETARJETASCANCELADAS(<<fechaincial>>,<<fechafinal>>,<<:cursor>>)  */
/* ---------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT referencia, descripcion, fechasolicitudusr, fechaautorizaadmin
        FROM CARTCARD.cc_cancelaciones, CARTCARD.estadodecuenta, CARTCARD.card
       WHERE CARTCARD.cc_cancelaciones.estadodecuentaid =
                                              CARTCARD.estadodecuenta.estadodecuentaid
         AND CARTCARD.cc_cancelaciones.cartcardid = CARTCARD.card.cartcardid
         AND bloqueo in (0,1,4)
         AND TO_DATE (fechasolicitudusr) >=
                                           TO_DATE (p_fechaincial, 'DDmmYYYY')
         AND TO_DATE (fechasolicitudusr) <= TO_DATE (p_fechafinal, 'DDmmYYYY');
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
END reportetarjetascanceladas;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE reportetesoreria (
   p_fechaincial   IN       VARCHAR2,
   p_fechafinal    IN       VARCHAR2,
   p_cursor        OUT      sys_refcursor
)
IS
/* --------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: reportetesoreria                                                        */
/* Objetivo: Obtiene una lista de los fondeos realizados en el rango de fecha especificada -1.   */
/* Autor:    Equipo CartCard (Siscon)                                                            */
/* Fecha Creacion: Mar/2009                                                                      */
/* Fecha Modificacion:                                                                           */
/* Ejemplo Ejecucion: exec reportetesoreria(<<fechaincial>>,<<fechafinal>>,<<:cursor>>)          */
/* --------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT fechaoperacion, mensajeoperacion, cantidaddepositada,
             tipocambiousd, tipocambiotesoreria
        FROM CARTCARD.operacionventanilla INNER JOIN CARTCARD.card ON CARTCARD.operacionventanilla.cartcardid =
                                                                            CARTCARD.card.cartcardid
       WHERE bloqueo in (0,1)
         AND TO_DATE (fechaoperacion) >=
                                        TO_DATE (p_fechaincial, 'DDmmYYYY')
                                        - 1
         AND TO_DATE (fechaoperacion) <= TO_DATE (p_fechafinal, 'DDmmYYYY')
                                         - 1
         AND codigoresultado = '000'
         AND mensajeoperacion LIKE ('Fondeo%');
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      NULL;
END reportetesoreria;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          RESTABLECEADESBLOQUEADO (
   p_nombreusuario   IN   VARCHAR2
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: restableceadesbloqueado                                   */
/* Objetivo: Actualiza el bloqueo a la cuenta de un usuario.                 	  */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec restableceadesbloqueado(<<NombreUsuario>>)   */
/* ---------------------------------------------------------------------- */
BEGIN
   BEGIN
      actualizaestadocuenta (p_nombreusuario, 1);

      UPDATE CARTCARD.login_users
         SET intentos = 0,
             fecha_login = SYSDATE
       WHERE usuarioid = (SELECT usuarioid
                            FROM CARTCARD.usuario
                           WHERE nombreusuario = p_nombreusuario);
   END;

   COMMIT;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      ROLLBACK;
END restableceadesbloqueado;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE RESTABLECECARD(
   pereferencia         IN   CARTCARD.ICN_TARJETA.REFERENCIA%type,
   p_tipoMembresia      IN cartcard.icn_tarjeta.id_tipo_membresia%type,
   peUsuarioModifica    IN   CARTCARD.ICN_CLIENTES.USUARIO_MODIFICO%TYPE
   ) IS

   v_duracion  CARTCARD.IC_CAT_TIPO_MEMBRESIA.DURACION%TYPE;
BEGIN
   SELECT TM.DURACION
   INTO v_duracion
   FROM IC_CAT_TIPO_MEMBRESIA TM WHERE TM.ID_TIPO_MEMBRESIA =  p_tipoMembresia;


   UPDATE CARTCARD.ICN_TARJETA
      SET  icn_tarjeta.id_tipo_membresia= nvl(p_tipoMembresia,icn_tarjeta.id_tipo_membresia),
           ICN_TARJETA.FECHA_MEMBRECIA  = ADD_MONTHS(SYSDATE,v_duracion),
           ICN_TARJETA.USUARIO_MODIFICO = peUsuarioModifica,
           ICN_TARJETA.ULTIMA_MODIFICACION = SYSDATE
    WHERE ICN_TARJETA.REFERENCIA =  pereferencia;
    COMMIT;
    EXCEPTION
   WHEN OTHERS THEN
      ROLLBACK;
     RAISE_APPLICATION_ERROR (-20130, 'Error ocurrido al PKG_ICN_DATOS.RESTABLECECARD(' || SQLCODE || '  ' || SQLERRM || ')');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE RestablececardV2 (
   p_referencia         IN   INTEGER,
   p_fechaalta          IN   VARCHAR,
   p_fechavencimiento   IN   VARCHAR
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: RESTABLECECARD                                   */
/* Objetivo: Restablece la card a su estatus anterior.                    */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec RESTABLECECARD(<<CartCardI>>,<<FechaAlta>>,<<FechaVEncimiento>>)   */
/* ---------------------------------------------------------------------- */
BEGIN
   UPDATE CARTCARD.ICN_TARJETA
      SET FECHA_CREACION = TO_DATE (p_fechaalta, 'DDmmYYYY-HH24:MI:SS'),
          EXPIRATIONDATE =
                           TO_DATE (p_fechavencimiento, 'DDmmYYYY-HH24:MI:SS')
    WHERE REFERENCIA = p_referencia;
END RestablececardV2;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          SOLICITUDESPLASTICOUSUARIO (
   p_cartcardid   IN       INTEGER,
   p_cursor       OUT      sys_refcursor
)
IS
/* ----------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: SOLICITUDESPLASTICOUSUARIO                                    */
/* Objetivo: Retorna todas las solicitudes de un usuario especifico.                   */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Nov/2008                                                            */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec SOLICITUDESPLASTICOUSUARIO(<<cartcardid>>,<<:cursor>>)  	   */
/* ----------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT numerosolicitud, fechasolicitud, estadodecuentaid
        FROM CARTCARD.cc_solicitudplastico
       WHERE cartcardid = p_cartcardid;
END solicitudesplasticousuario;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          SpUpdateFlagMontoMax(                
        V_USUARIOID                     CARTCARD.USUARIO.USUARIOID%TYPE
)
IS

BEGIN    
        BEGIN
           
          UPDATE CARTCARD.USUARIO SET IDENTIDADVALIDADA = 1 
                WHERE USUARIOID = V_USUARIOID;
            
       EXCEPTION
             WHEN OTHERS THEN                    
                   RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al actualizar el campo IDENTIDADVALIDADA en la tabla USUARIO  (' || SQLCODE || '  ' || SQLERRM || ')');
     END;
END SpUpdateFlagMontoMax;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          STATUS_ESTADOCUENTA (
   p_usuarioid          IN       INTEGER,
   p_estadodecuentaid   OUT      INTEGER
)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: status_estadocuenta                     */
/* Objetivo: Verifica el status de una cuenta.    */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2008                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: exec status_estadocuenta(<<UsuarioId>>,<<:EstadoDeCuenta>>)      */
/* ------------------------------------------------------ */
   v_usuarioid   INTEGER := 0;
BEGIN
   BEGIN
      SELECT usuarioid_seq.NEXTVAL, usu.estadodecuentaid
        INTO v_usuarioid, p_estadodecuentaid
        FROM CARTCARD.usuario usu
       WHERE usu.usuarioid = p_usuarioid;

      IF (v_usuarioid = p_usuarioid)
      THEN
         SELECT estadodecuentaid
           INTO p_estadodecuentaid
           FROM CARTCARD.usuario;
      END IF;
   END;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_estadodecuentaid := 0;
END status_estadocuenta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          TIPOPRODUCTO (p_cursor OUT sys_refcursor)
IS
/* ------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: TIPOPRODUCTO                     */
/* Objetivo: Obtiene los tipos de producto existentes.    */
/* Autor:    Equipo CartCard (Siscon)                     */
/* Fecha Creacion: Oct/2008                               */
/* Fecha Modificacion:                                    */
/* Ejemplo Ejecucion: exec TIPOPRODUCTO(<<:cursor>>)      */
/* ------------------------------------------------------ */
BEGIN
   OPEN p_cursor FOR
      SELECT idtipoproducto, desccorta, desclarga, porcentajeimpuesto
        FROM CARTCARD.cc_tipoproducto;
END tipoproducto;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE USUARIOCARDESTADO (
   p_usuarioid     IN       INTEGER,
   p_descripcion   OUT      VARCHAR
)
IS
/* ------------------------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: usuariocardestado                                              	*/
/* Objetivo: Verifica el estado de cuenta de un usuario.           	*/
/* Autor:    Equipo CartCard (Siscon)                                                              	*/
/* Fecha Creacion: Oct/2008                                                                        	*/
/* Fecha Modificacion:                                                                             	*/
/* Ejemplo Ejecucion: exec usuariocardestado(<<UsuarioId>>,<<:Descripcion>>) */
/* ------------------------------------------------------------------------------------------------ */
BEGIN
   SELECT descripcion
     INTO p_descripcion
     FROM CARTCARD.card INNER JOIN CARTCARD.estadodecuenta ON CARTCARD.card.bloqueo =
                                               CARTCARD.estadodecuenta.estadodecuentaid
    WHERE usuarioid = p_usuarioid 
	AND bloqueo IN (0,1,4);
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_descripcion := 'Sin estado';
END usuariocardestado;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE USUARIOCONTARJETA (
   p_usuarioid   IN       INTEGER,
   p_out         OUT      VARCHAR
)
IS
/* ------------------------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: usuariocontarjeta                                              	*/
/* Objetivo: Verifica si un usuario tiene tarjeta.           	*/
/* Autor:    Equipo CartCard (Siscon)                                                              	*/
/* Fecha Creacion: Oct/2008                                                                        	*/
/* Fecha Modificacion:                                                                             	*/
/* Ejemplo Ejecucion: exec usuariocontarjeta(<<UsuarioId>>,<<:Tiene>>) */
/* ------------------------------------------------------------------------------------------------ */
   vusuario   INTEGER;
BEGIN
   SELECT COUNT (usuarioid)
     INTO vusuario
     FROM CARTCARD.card 
 	 WHERE usuarioid = p_usuarioid AND bloqueo IN (0,1,4);

   IF (vusuario = 0)
   THEN
      p_out := 'No Tiene';
   ELSE
      p_out := 'Si Tiene';
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_out := 'No existe';
END usuariocontarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          USUARIOLOGEADO (
   p_nombreusuario   IN       VARCHAR2,
   p_haslogged    OUT      VARCHAR2
)
IS
/* ----------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: USUARIOLOGEADO                                             */
/* Objetivo: Consulta el identificador de usuario.                                     */
/* Autor:    Equipo CartCard (Siscon)                                                  */
/* Fecha Creacion: Feb. 2009                                                           */
/* Fecha Modificacion:                                                                 */
/* Ejemplo Ejecucion: exec USUARIOLOGEADO(<<nombreusuario>>,<<:haslogged>>)         */
/* ----------------------------------------------------------------------------------- */
BEGIN

select 
   case count(1) 
      when 0 then 0
	  else 1 end  into p_haslogged  
   from login_users LU
   inner join usuario U on LU.usuarioid = U.usuarioid
	   
where nombreusuario = p_nombreusuario;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_haslogged := 0;


END USUARIOLOGEADO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          USUARIOSIDENTIDAD (
   p_identidadvalidada   IN       INTEGER,
   p_cursor              OUT      sys_refcursor
)
IS
/* ------------------------------------------------------------------------------------------------ */
/* NOMBRE PROCEDIMIENTO: USUARIOSCIDENTIDAD                                              	*/
/* Objetivo: Obtiene una lista de los documentos de usuarios con identidad especificada.           	*/
/* Autor:    Equipo CartCard (Siscon)                                                              	*/
/* Fecha Creacion: Oct/2008                                                                        	*/
/* Fecha Modificacion:                                                                             	*/
/* Ejemplo Ejecucion: exec USUARIOSIDENTIDAD(<<IdentidadValidada>>,<<:cursor>>) */
/* ------------------------------------------------------------------------------------------------ */
BEGIN
   OPEN p_cursor FOR
      SELECT   iddocumento, CARTCARD.usuario.usuarioid,
               nombre || ' ' || apaterno || ' ' || amaterno
                                                           AS nombrecompleto,
               nombredocumento, documento, idtipodocumento,
               (SELECT descripcion
                  FROM CARTCARD.cc_tipodocumento td
                 WHERE CARTCARD.cc_documentosusr.idtipodocumento =
                                          td.idtipodocumento)
                                                            AS tipodocumento,
               identidadvalidada AS idestatusidentidad,
               (SELECT descripcion
                  FROM CARTCARD.cc_estatusidentidad ei
                 WHERE CARTCARD.usuario.identidadvalidada =
                                     ei.identidadvalidada)
                                                         AS estatusidentidad,
               docaceptado AS idestatusdocumento,
               (SELECT descripcion
                  FROM CARTCARD.cc_estatusdocumento ed
                 WHERE CARTCARD.cc_documentosusr.docaceptado =
                                           ed.docaceptado)
                                                         AS estatusdocumento
          FROM CARTCARD.usuario INNER JOIN CARTCARD.cc_documentosusr ON CARTCARD.usuario.usuarioid =
                                                        CARTCARD.cc_documentosusr.usuarioid
         WHERE identidadvalidada = p_identidadvalidada
      ORDER BY CARTCARD.usuario.usuarioid;
END usuariosidentidad;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          USUARIOSIDENTIDADTODOS (p_cursor OUT sys_refcursor)
IS
/* ----------------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: USUARIOSCONIDENTIDADVALIDADA                                              */
/* Objetivo: Obtiene una lista de los documentos de usuarios con identidad especificada.           */
/* Autor:    Equipo CartCard (Siscon)                                                              */
/* Fecha Creacion: Oct/2008                                                                        */
/* Fecha Modificacion:                                                                             */
/* Ejemplo Ejecucion: exec USUARIOSCONIDENTIDADVALIDADA(<<:cursor>>)         */
/* ----------------------------------------------------------------------------------------------- */
BEGIN
   OPEN p_cursor FOR
      SELECT   iddocumento, CARTCARD.usuario.usuarioid,
               nombre || ' ' || apaterno || ' ' || amaterno
                                                           AS nombrecompleto,
               nombredocumento, documento, idtipodocumento,
               (SELECT descripcion
                  FROM CARTCARD.cc_tipodocumento td
                 WHERE CARTCARD.cc_documentosusr.idtipodocumento =
                                          td.idtipodocumento)
                                                            AS tipodocumento,
               identidadvalidada AS idestatusidentidad,
               (SELECT descripcion
                  FROM CARTCARD.cc_estatusidentidad ei
                 WHERE CARTCARD.usuario.identidadvalidada =
                                     ei.identidadvalidada)
                                                         AS estatusidentidad,
               docaceptado AS idestatusdocumento,
               (SELECT descripcion
                  FROM CARTCARD.cc_estatusdocumento ed
                 WHERE CARTCARD.cc_documentosusr.docaceptado =
                                           ed.docaceptado)
                                                         AS estatusdocumento
          FROM CARTCARD.usuario INNER JOIN CARTCARD.cc_documentosusr ON CARTCARD.usuario.usuarioid =
                                                        CARTCARD.cc_documentosusr.usuarioid
      ORDER BY CARTCARD.usuario.usuarioid;
END usuariosidentidadtodos;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          VALIDAVIGENCIA (
   p_cartcardid         IN       INTEGER,
   p_diasexpiracion     OUT      INTEGER,
   p_diasbloqueo        OUT      INTEGER,
   p_fechaexpiracion    OUT      VARCHAR2,
   p_fechabloqueo       OUT      VARCHAR2,
   p_codigoexpiracion   OUT      INTEGER,
   p_codigobloqueo      OUT      INTEGER
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: VALIDAVIGENCIA                                   */
/* Objetivo: Verifica el estatus de la vigencia, para generar el aviso.   */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion: Abril / 2009                                                   */
/* Ejemplo Ejecucion: exec VALIDAVIGENCIA(<<CartCardId>>...<<:CodigoBloqueo>>)                             */
/* ---------------------------------------------------------------------- */
   v_diasavisorm     INTEGER;
   v_diasbloqueotv   INTEGER;
BEGIN
   BEGIN
      SELECT valor_entero
        INTO v_diasavisorm
        FROM CARTCARD.CONSTANTES
       WHERE ID_CONSTANTES = 'DIASAVISORM';

      SELECT valor_entero
        INTO v_diasbloqueotv
        FROM CARTCARD.CONSTANTES
       WHERE ID_CONSTANTES = 'DIASBLOQUEOTV';

      SELECT TO_DATE (fechavencimiento) - TO_DATE (SYSDATE),
             TO_CHAR (fechavencimiento + 1, 'DD/mm/YYYY'),
             TO_DATE (fechavencimiento - v_diasbloqueotv) - TO_DATE (SYSDATE),
             TO_CHAR (fechavencimiento + 1 - v_diasbloqueotv, 'DD/mm/YYYY')
        INTO p_diasexpiracion,
             p_fechaexpiracion,
             p_diasbloqueo,
             p_fechabloqueo
        FROM CARTCARD.CARD
       WHERE cartcardid = p_cartcardid;

      IF p_diasexpiracion < 0
      THEN
         p_codigoexpiracion := 3;
      ELSE
         IF p_diasexpiracion = 0
         THEN
            p_codigoexpiracion := 2;
         ELSE
            IF p_diasexpiracion <= v_diasavisorm
            THEN
               p_codigoexpiracion := 1;
            ELSE
               p_codigoexpiracion := 0;
            END IF;
         END IF;
      END IF;

      IF p_diasbloqueo < 0
      THEN
         p_codigobloqueo := 3;
      ELSE
         IF p_diasbloqueo = 0
         THEN
            p_codigobloqueo := 2;
         ELSE
            IF p_diasbloqueo <= v_diasavisorm + v_diasbloqueotv
            THEN
               p_codigobloqueo := 1;
            ELSE
               p_codigobloqueo := 0;
            END IF;
         END IF;
      END IF;
   END;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_diasexpiracion := 0;
      p_diasbloqueo := 0;
      p_fechaexpiracion := '';
      p_fechabloqueo := '';
      p_codigoexpiracion := 0;
      p_codigobloqueo := 0;
END VALIDAVIGENCIA;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE VERIFICAPAGO (
   p_usuarioid       IN       INTEGER,
   p_pagorealizado   OUT      VARCHAR2
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: verificapago                                   */
/* Objetivo: Verifica si un pago ya fue realizado.   */
/* Autor:    Equipo CartCard (Siscon)                                     */
/* Fecha Creacion: Oct/2008                                               */
/* Fecha Modificacion:                                                    */
/* Ejemplo Ejecucion: exec verificapago(<<usuarioId>>,<<:PagoRealizado>>)                             */
/* ---------------------------------------------------------------------- */
   v_bloqueo   INTEGER;
BEGIN
   SELECT bloqueo
     INTO v_bloqueo
     FROM CARTCARD.card INNER JOIN CARTCARD.usuario ON CARTCARD.card.usuarioid = CARTCARD.usuario.usuarioid
    WHERE CARTCARD.usuario.usuarioid = p_usuarioid 
	AND bloqueo in (0,1,4);

   IF v_bloqueo = 0
   THEN
      p_pagorealizado := 'NO';
   ELSE
      p_pagorealizado := 'SI';
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      p_pagorealizado := 'Sin tarjeta';
END verificapago;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE          VERIFICATOKENCORE (
   P_CARTCARDID     IN       PASARELBAZ.PCC_TARJETAS.CARTCARDID%TYPE,
   P_EXISTE         OUT      INTEGER
)
IS
/* ---------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: VERIFICATOKEN                                    */
/* OBJETIVO: VERIFICA SI EXISTE O NO UN TOKEN TARJETA VALIDO.             */
/* AUTOR: EQUIPO IUPICARD                                                 */
/* FECHA CREACION: JUL/2010                                               */
/* FECHA MODIFICACION:                                                    */
/* EJEMPLO EJECUCION: EXEC VERIFICATOKEN(<<CARTCARDID>>,<<:EXISTE>>)      */
/* ---------------------------------------------------------------------- */
BEGIN
   SELECT COUNT (PT.CARTCARDID)
     INTO P_EXISTE
     FROM PASARELBAZ.PCC_TARJETAS PT
    WHERE PT.CARTCARDID = P_CARTCARDID
      AND PT.IDTIPOTARJETA = 3
      AND PT.IDEMISOR = 3
      AND PT.IDESTADOTARJETA = 1;

 EXCEPTION 
  WHEN NO_DATA_FOUND THEN
   P_EXISTE := 0;
END VERIFICATOKENCORE;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION APPEND_FIELD (sqlstr in varchar2, sep in varchar2 ) return CLOB is
ret CLOB := '';
TYPE cur_typ IS REF CURSOR;
rec cur_typ;
field varchar2(200);
begin
     OPEN rec FOR sqlstr;
     LOOP
         FETCH rec INTO field;
         EXIT WHEN rec%NOTFOUND;
         ret := ret || field || sep;
     END LOOP;
     if length(ret) = 0 then
          RETURN '';
     else
          RETURN substr(ret,1,length(ret)-length(sep));
     end if;
end;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION Fic_Test_Imagen(PEIdTipoDocto IN CARTCARD.IC_TEST_IMAGEN.ID_TIPO_DOCUMENTO%TYPE,
                       PENombre         IN CARTCARD.IC_TEST_IMAGEN.NOMBRE%TYPE,
                        PEImagen   IN CARTCARD.IC_TEST_IMAGEN.DOCUMENTO%TYPE)
 RETURN INTEGER IS
 vlResultado INTEGER;
 vlIdDocto  INTEGER;
 Ccero   INTEGER:=0;
 Cuno   INTEGER:=1; 
BEGIN
   
   SELECT CARTCARD.IC_SEQ_TEST.NEXTVAL INTO vlIdDocto FROM DUAL;
   
   INSERT INTO CARTCARD.IC_TEST_IMAGEN(ID_DOCUMENTO,ID_TIPO_DOCUMENTO,DOCUMENTO,FECHA_REGISTRO,NOMBRE)
   VALUES(vlIdDocto,PEIdTipoDocto,PEImagen,SYSDATE,PENombre);

   RETURN Cuno;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN Ccero;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RETURN Ccero;
END Fic_Test_Imagen;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          GENERAREFERENCIA     RETURN VARCHAR2
IS
/* ---------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: GENERAREFERENCIA                                          	  */
/* Objetivo: Genera la referencia basada en el algoritmo del digito verificador.      */
/* Autor:    Equipo CartCard (Siscon)                                                 */
/* Fecha Creacion: Ene/2009                                                           */
/* Fecha Modificacion:                                                                */
/* Ejemplo Ejecucion: exec GENERAREFERENCIA()   									  */
/* ---------------------------------------------------------------------------------- */
   v_referencia   VARCHAR2 (20);
   v_residuo      INTEGER;
   v_dv           INTEGER       := 0;
BEGIN
   SELECT CARTCARD.referencia_seq.NEXTVAL
     INTO v_referencia
     FROM DUAL;

   v_residuo := MOD (LENGTH (v_referencia), 2);

   FOR i IN REVERSE 1 .. LENGTH (v_referencia)
   LOOP
      IF MOD (i, 2) = v_residuo
      THEN
         v_dv :=
              v_dv
            + CASE
                 WHEN (SUBSTR (v_referencia, i, 1) * 2) >= 10
                    THEN (SUBSTR (v_referencia, i, 1) * 2) - 10 + 1
                 ELSE SUBSTR (v_referencia, i, 1) * 2
              END;
      ELSE
         v_dv := v_dv + SUBSTR (v_referencia, i, 1);
      END IF;
   END LOOP;

   RETURN v_referencia || SUBSTR (v_dv, 2, 1);
END generareferencia;
/

SHOW ERRORS;


CREATE OR REPLACE function getIupiCard(PEcadena in varchar2)
return sys_refcursor is
TYPE CUR_TYP IS REF CURSOR;
c_cursor   CUR_TYP;
fila cartcard.pais%ROWTYPE;
v_query     VARCHAR2(255);
BEGIN
  v_query := 'SELECT * FROM cartcard.PAIS';
  OPEN c_cursor FOR PEcadena;
  --LOOP
/*  FETCH c_cursor INTO fila;
  EXIT WHEN c_cursor%NOTFOUND;
  dbms_output.put_line(fila.nombrepais);
  END LOOP;
  CLOSE c_cursor;*/
  return c_cursor;
END;
/

SHOW ERRORS;


CREATE OR REPLACE function          GETMONITORFONDEO RETURN sys_refcursor IS
  datos sys_refcursor;
BEGIN
  OPEN datos FOR
    select m.referencia,
           cli.nombre || ' ' || cli.apaterno || ' ' || cli.amaterno nombre,
           c.descripcion canal,
           p.descripcion tipoPago,
           m.importe_dls,
           m.comision_dls,
           m.fecha_aplicacion,
           nvl(o.descripcion, m.transaccion) operacion,
           m.descripcion,
           m.institucion_emisora
      from CARTCARD.icn_movimientos   m,
           CARTCARD.ic_cat_canal      c,
           CARTCARD.ic_cat_tipo_pago  p,
           CARTCARD.icn_cat_operacion o,
           CARTCARD.icn_contrato      cto,
           CARTCARD.icn_clientes      cli
     where m.id_canal = c.id_canal
       and m.id_tipo_pago = p.id_tipo_pago
       and m.referencia = cto.referencia
       and cto.id_usuario = cli.id_usuario
       and m.transaccion = o.codigooperacion(+)
       and m.fecha_aplicacion > trunc(sysdate)-1
       and m.id_canal in (1,2,3);
  return datos;
exception
  WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20121,
                            'Error ocurrido al GETMONITORFONDEO(' ||
                            SQLCODE || '  ' || SQLERRM || ')');
END GETMONITORFONDEO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_CANT_MERC(
   v_id_estado   IN       PASARELBAZ.pcc_estadosproducto.IDESTADO%TYPE
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
	 open datos for
	SELECT count(PASARELBAZ.pcc_pedidos.numerofolio)
	FROM PASARELBAZ.pcc_pedidos , PASARELBAZ.pcc_estadosproducto 
	WHERE PASARELBAZ.pcc_pedidos.numerofolio = PASARELBAZ.pcc_estadosproducto.numerofolio
	AND PASARELBAZ.pcc_estadosproducto.idestado = v_id_estado;
	RETURN datos;
	
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Cantidad de Mercancias (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Cantidad de Mercancias ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)');	
END GET_CANT_MERC;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_COMISIONES

RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT PP.NUMEROFOLIO, PD.COSTO, PD.IDCONCEPTO, PC.DESCCORTA
 FROM PASARELBAZ.pcc_desglocecosto PD, PASARELBAZ.pcc_pedidos PP, PASARELBAZ.PCC_CONCEPTOSCARGOS PC
 WHERE PD.NUMEROFOLIO = PP.NUMEROFOLIO
 AND PD.IDCONCEPTO = PC.IDCONCEPTO 
 GROUP BY PP.NUMEROFOLIO, PD.COSTO, PD.IDCONCEPTO, PC.DESCCORTA, PC.DESCLARGA;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Comisiones en pedido (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Comisiones en pedido ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_COMISIONES;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_COMI_SOBREPESO(
	   v_id_concepto	   IN	PASARELBAZ.pcc_desglocecosto.IDCONCEPTO%TYPE    
)

RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT SU.USUARIOID, SU.IDSUITE, PD.COSTO as "Importe de sobrepeso"
 FROM PASARELBAZ.pcc_desglocecosto PD, PASARELBAZ.pcc_pedidos PP, PASARELBAZ.pcc_suites SU
 WHERE PD.numerofolio = PP.numerofolio
 AND PD.idconcepto = v_id_concepto AND SU.IDSUITE = PP.IDSUITE ORDER BY SU.USUARIOID ASC;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Comisiones por Sobrepeso (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Comisiones por Sobrepeso ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_COMI_SOBREPESO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          GET_COSTO_MEMBRESIA(
  P_DURACION    IN    CARTCARD.MEMBRECIA.DURACION%TYPE
) RETURN FLOAT
/* ----------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: GET_COSTO_MEMBRESIA                                     */
/* Objetivo: OBTIENE EL COSTO DE LA MEMBRESIA DE ACUERDO A SU DURACION           */
/* Autor:    EQUIPO IUPICARD                                                     */
/* Fecha Creacion: JUNIO/2010                                                    */
/* Fecha Modificacion:                                                           */
/* Ejemplo Ejecucion: exec GET_COSTO_MEMBRESIA(<<P_DURACION>>)                   */
/* ----------------------------------------------------------------------------- */
IS
V_COSTO CARTCARD.MEMBRECIA.COSTO%TYPE;
BEGIN
   V_COSTO := 0;

   SELECT MM.COSTO 
   INTO V_COSTO
   FROM CARTCARD.MEMBRECIA MM 
   WHERE MM.DURACION = P_DURACION;
   
   RETURN V_COSTO;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
        RETURN V_COSTO;

END GET_COSTO_MEMBRESIA;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          GET_EXISTE_HTPACTIVADA(
   P_CARDNUMBER    IN    CARTCARD.T_P_ACTIVADAS.CARDNUMBER%TYPE,
   P_REFERENCIA    IN  CARTCARD.T_P_ACTIVADAS.REFERENCIA%TYPE
) RETURN NUMBER 
IS
/* ------------------------------------------------------------------------------- */
/* NOMBRE FUNCION: GET_EXISTE_HTPACTIVADA                                          */
/* OBJETIVO: REGRESA LA SUITE DEL USUARIO DADO                                     */
/* AUTOR: EQUIPO IUPICARD                                                          */
/* FECHA CREACION: JUL/2010                                                        */
/* FECHA MODIFICACION:                                                             */
/* EJEMPLO EJECUCION: EXEC GET_EXISTE_HTPACTIVADA(<<P_USUARIOID>>,<<:VARCHAR2>>)   */
/* ------------------------------------------------------------------------------- */
P_EXISTE   INTEGER;

BEGIN
    IF ( P_CARDNUMBER IS NOT NULL ) THEN
            SELECT COUNT(TPA.ID_T_P_ACTIVADAS)
     INTO P_EXISTE
              FROM CARTCARD.T_P_ACTIVADAS TPA
             WHERE TPA.ACTUALCARDNUMBER = P_CARDNUMBER;

    ELSIF ( P_REFERENCIA IS NOT NULL ) THEN
            SELECT COUNT(TPA.ID_T_P_ACTIVADAS)
     INTO P_EXISTE
              FROM CARTCARD.T_P_ACTIVADAS TPA
             WHERE TPA.REFERENCIA = P_REFERENCIA;
    END IF;
   
   RETURN P_EXISTE;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
    RETURN 0;

END GET_EXISTE_HTPACTIVADA;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          GET_FONDEO(
   v_fecha_inicial   IN       VARCHAR2,
   v_fecha_final     IN       VARCHAR2,
   v_codigo_res      IN       CARTCARD.OPERACIONVENTANILLA.CODIGORESULTADO%TYPE,
   v_sucursalid      IN    CARTCARD.OPERACIONVENTANILLA.SUCURSALID%TYPE,
   v_operadorid   IN    CARTCARD.OPERACIONVENTANILLA.OPERADORID%TYPE
) 
RETURN sys_refcursor 

IS
datos sys_refcursor;
BEGIN
  open datos for
 SELECT OV.CANTIDADDEPOSITADA,OV.MENSAJEOPERACION 
 FROM CARTCARD.OPERACIONVENTANILLA OV
 WHERE  TO_CHAR(to_date(OV.FECHAOPERACION, 'dd/MM/yyyy')) 
 between TO_DATE(v_fecha_inicial, 'dd/MM/yyyy') and TO_DATE(v_fecha_final, 'dd/MM/yyyy')
 AND OV.CODIGORESULTADO = v_codigo_res and OV.SUCURSALID = v_sucursalid and OV.OPERADORID = v_operadorid;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Fondeo (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Fondeo ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_FONDEO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION  GET_IMPORTE_FONDEO(PEDuracion in cartcard.membrecia.duracion%type,
                                  PETipoCambio in FLOAT)
RETURN sys_refcursor IS
/* ----------------------------------------------------------------------------------  */
/* NOMBRE PROCEDIMIENTO: GET_MONTO_FONDEO                                            */
/* Objetivo: Obtiene los IMPORTES por fondeo.  */
/* Autor:    Equipo IupiCard                                                   */
/* Fecha Creacion: Feb/2011                                                            */
/* Fecha Modificacion:                                                                 */
/* ----------------------------------------------------------------------------------- */
  CurImporte   sys_refcursor;
BEGIN
   OPEN CurImporte FOR
        SELECT nvl(M.COSTO,0) / PETipoCambio ImporteMinUSD,
               (SELECT TO_NUMBER(C.VALOR_CARACTER,'999999999999.99')
                  FROM CARTCARD.constantes C WHERE ID_CONSTANTES = 'MONTO_MAXIMOSV') / PETipoCambio ImporteMaxUSD
        FROM CARTCARD.MEMBRECIA M
        WHERE M.DURACION = PEDuracion;
   RETURN CurImporte;
END GET_IMPORTE_FONDEO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          GET_MEMBRECIA(PEDuracion in cartcard.membrecia.duracion%type)
RETURN sys_refcursor

IS
datos sys_refcursor;
BEGIN
  open datos for
 SELECT membreciaid, tipomoneda, descripcion, costo
 FROM CARTCARD.membrecia m
 WHERE  m.duracion = PEDuracion;
 RETURN datos;

END GET_MEMBRECIA;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_MEMB_COBR(
   v_fecha_inicial     IN    VARCHAR2,
   v_fecha_final    IN       VARCHAR2,
   v_men_oper     IN    CARTCARD.OPERACIONVENTANILLA.MENSAJEOPERACION%TYPE
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT T.NOMBRETITULAR, T.NUMEROTARJETA, OP.FECHAOPERACION, OP.MENSAJEOPERACION, OP.CANTIDADDEPOSITADA 
 FROM PASARELBAZ.PCC_TARJETAS T INNER JOIN CARTCARD.OPERACIONVENTANILLA OP 
 ON T.CARTCARDID = OP.CARTCARDID  
 WHERE OP.FECHAOPERACION
 BETWEEN TO_DATE(v_fecha_inicial, 'dd/MM/yyyy') 
 AND TO_DATE(v_fecha_final, 'dd/MM/yyyy')
 AND OP.MENSAJEOPERACION <> 'Consulta de referencia'
 ORDER BY OP.FECHAOPERACION ASC;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Membresias cobradas (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Membresias cobradas ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_MEMB_COBR;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_MEMB_COBRADAS(
   v_fecha_inicial   IN       VARCHAR2,
   v_fecha_final     IN       VARCHAR2,
   v_codigo_res      IN       CARTCARD.OPERACIONVENTANILLA.CODIGORESULTADO%TYPE,
   v_men_oper   IN    CARTCARD.OPERACIONVENTANILLA.MENSAJEOPERACION%TYPE,
   v_memb_id    IN    CARTCARD.card.MEMBRECIAID%TYPE             
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT  OV.CANTIDADDEPOSITADA       
 FROM CARTCARD.OPERACIONVENTANILLA OV, CARTCARD.card CD  
 WHERE  OV.FECHAOPERACION
 between TO_DATE(v_fecha_inicial, 'dd/MM/yyyy') and TO_DATE(v_fecha_final, 'dd/MM/yyyy')    
 AND OV.CODIGORESULTADO = v_codigo_res AND OV.MENSAJEOPERACION like v_men_oper and  
 ov.CARTCARDID = CD.CARTCARDID and CD.MEMBRECIAID = v_memb_id;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Membresias cobredas (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Membresias cobredas ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_MEMB_COBRADAS;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_MONTOS_MERC(
   v_nvl     IN    NUMBER,
   v_id_concepto IN       NUMBER,
   v_id_estado   IN       PASARELBAZ.pcc_estadosproducto.IDESTADO%TYPE
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT (SELECT NVL (MAX (costo), v_nvl)
     FROM PASARELBAZ.pcc_desglocecosto
       WHERE PASARELBAZ.pcc_desglocecosto.numerofolio =
            PASARELBAZ.pcc_pedidos.numerofolio
      AND idconcepto = v_id_concepto) AS monto
 FROM PASARELBAZ.pcc_pedidos, PASARELBAZ.pcc_estadosproducto
 WHERE PASARELBAZ.pcc_pedidos.numerofolio = PASARELBAZ.pcc_estadosproducto.numerofolio
 AND PASARELBAZ.pcc_estadosproducto.idestado = v_id_estado;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Montos de Mercancias (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Montos de Mercancias ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_MONTOS_MERC;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_PAQ_NOM_ID
 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT DISTINCT(SU.USUARIOID), US.NOMBREUSUARIO
 FROM PASARELBAZ.pcc_pedidos PP, PASARELBAZ.pcc_suites SU, CARTCARD.USUARIO US
 WHERE SU.IDSUITE = PP.IDSUITE
 AND US.USUARIOID = SU.USUARIOID
 ORDER BY SU.USUARIOID;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Paquetes con nombre e id (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Paquetes con nombre e id ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_PAQ_NOM_ID;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          GET_PROD_NOM_PESO(
   v_id_concepto IN       NUMBER
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT PP.pesoproducto, USU.NOMBRE, SU.IDSUITE
 FROM PASARELBAZ.pcc_desglocecosto PD, PASARELBAZ.pcc_pedidos PP, PASARELBAZ.pcc_suites SU, CARTCARD.USUARIO USU 
 WHERE PD.numerofolio = PP.numerofolio
 AND idconcepto = v_id_concepto AND SU.USUARIOID=USU.USUARIOID AND SU.IDSUITE = PP.IDSUITE ORDER BY SU.USUARIOID;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Productos con nombre y peso (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Productos con nombre y peso ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_PROD_NOM_PESO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_PROD_SOBREPESO(
   v_id_concepto IN       NUMBER
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT count(PP.pesoproducto)
 FROM PASARELBAZ.pcc_desglocecosto PD, PASARELBAZ.pcc_pedidos PP
 WHERE PD.numerofolio = PP.numerofolio
 AND idconcepto = v_id_concepto ;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Productos con Sobrepeso (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Productos con Sobrepeso ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_PROD_SOBREPESO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_RECARGA_VENT(
   v_fecha_inicial   IN       VARCHAR2,
   v_fecha_final     IN       VARCHAR2,
   v_codigo_res      IN       CARTCARD.OPERACIONVENTANILLA.CODIGORESULTADO%TYPE,
   v_men_oper   IN    CARTCARD.OPERACIONVENTANILLA.MENSAJEOPERACION%TYPE
) 
RETURN types.refCursor 

IS
datos types.refCursor;
cadena VARCHAR2(2000);
BEGIN
  cadena:='SELECT OV.CANTIDADDEPOSITADA as "' || v_men_oper || '" FROM CARTCARD.OPERACIONVENTANILLA OV WHERE  TO_CHAR(to_date(OV.FECHAOPERACION, ''dd/MM/yyyy'')) between TO_DATE(:v_fecha_inicial, ''dd/MM/yyyy'') and TO_DATE(:v_fecha_final, ''dd/MM/yyyy'') AND OV.CODIGORESULTADO = :v_codigo_res AND OV.MENSAJEOPERACION = :v_men_oper';
 open datos for cadena USING v_fecha_inicial, v_fecha_final, v_codigo_res, v_men_oper;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Recarga ventanilla (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Recarga ventanilla ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_RECARGA_VENT;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_REC_MONTO_PROM(
   v_fecha_inicial   IN       VARCHAR2,
   v_fecha_final     IN       VARCHAR2
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT count(1) as "Recargas SPEI", TRUNC(SUM(DLAMONTO)/count(*),2) as "Monto Promedio"
 FROM PASARELBAZ.PCC_INGRESOSPORSPEI PI
 WHERE  PI.DLAFECHAOPERACION
    between TO_DATE(v_fecha_inicial, 'dd/MM/yyyy') and TO_DATE(v_fecha_final, 'dd/MM/yyyy');
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Recargas Monto Promedio (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Recargas Monto Promedio ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_REC_MONTO_PROM;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_REC_VENT(
   v_fecha_inicial   IN       VARCHAR2,
   v_fecha_final     IN       VARCHAR2,
   v_codigo_res      IN       CARTCARD.OPERACIONVENTANILLA.CODIGORESULTADO%TYPE
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT count(OV.CANTIDADDEPOSITADA) as "Recargas Ventanilla", 
 TRUNC(SUM(OV.CANTIDADDEPOSITADA)/count(OV.CANTIDADDEPOSITADA),2) as "Monto Promedio" 
 FROM CARTCARD.OPERACIONVENTANILLA OV
 WHERE  OV.FECHAOPERACION
 between TO_DATE(v_fecha_inicial, 'dd/MM/yyyy') and TO_DATE(v_fecha_final, 'dd/MM/yyyy')
 AND OV.CODIGORESULTADO = v_codigo_res;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener recibo ventanilla (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener recibo ventanilla ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_REC_VENT;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION GET_REC_VENT_SPEI(
   v_fecha_inicial   IN       VARCHAR2,
   v_fecha_final     IN       VARCHAR2,
   v_codigo_res      IN       CARTCARD.OPERACIONVENTANILLA.CODIGORESULTADO%TYPE,
   v_usuario_dep     IN    CARTCARD.OPERACIONVENTANILLA.USUARIODEPOSITANTE%TYPE
) 
RETURN types.refCursor 

IS
datos types.refCursor;
BEGIN
  open datos for
 SELECT count(OV.CANTIDADDEPOSITADA) as "Recargas VentanillaSPEI", 
     TRUNC(SUM(OV.CANTIDADDEPOSITADA)/count(OV.CANTIDADDEPOSITADA),2) as "Monto Promedio" 
 FROM CARTCARD.OPERACIONVENTANILLA OV
 WHERE  OV.FECHAOPERACION
 between TO_DATE(v_fecha_inicial, 'dd/MM/yyyy') and TO_DATE(v_fecha_final, 'dd/MM/yyyy') 
 AND OV.CODIGORESULTADO = v_codigo_res AND OV.USUARIODEPOSITANTE = v_usuario_dep;
 RETURN datos;
 
EXCEPTION

WHEN NO_DATA_FOUND THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Recargas VentanillaSPEI (' || SQLCODE || '  ' || SQLERRM || ')');
WHEN OTHERS THEN  RAISE_APPLICATION_ERROR (-20100, 'Error obtener Recargas VentanillaSPEI ( * ' || SQLCODE || '  ' || SQLERRM ||  '   *)'); 
END GET_REC_VENT_SPEI;
/

SHOW ERRORS;


CREATE OR REPLACE function          GET_REFERENCIA(PENUMEROTARJETA IN CARTCARD.IC_TARJETAS.NUMERO_TARJETA%TYPE)
 return sys_refcursor is
  RECDATOS sys_refcursor;
begin
  
 OPEN RECDATOS FOR
  select t.id_tarjeta,t.id_usuario,t.token_tarjeta,t.fecha_expiracion ,c.referencia
  from cartcard.IC_TARJETAS t,cartcard.card c
  where t.id_usuario = c.usuarioid
  and T.NUMERO_TARJETA = PENUMEROTARJETA
  and c.ESTADOCONSULTAIT=1;

  return RECDATOS;
  
end GET_REFERENCIA;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION Get_ReferenciaV2(PENUMEROTARJETA IN CARTCARD.ICN_TARJETA.CARDNUMBER%TYPE)
 RETURN sys_refcursor IS
  RECDATOS sys_refcursor;
BEGIN
  
 OPEN RECDATOS FOR
  SELECT C.id_usuario,t.token,t.EXPIRATIONDATE ,T.referencia
  FROM cartcard.ICN_TARJETA t INNER JOIN cartcard.ICN_CONTRATO c ON T.REFERENCIA = C.REFERENCIA
  AND T.CARDNUMBER = PENUMEROTARJETA;

  RETURN RECDATOS;
  
END Get_ReferenciaV2;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          GET_SUITE (
    P_USUARIOID    IN    CARTCARD.USUARIO.USUARIOID%TYPE
) RETURN VARCHAR2
IS
   P_SUITE    PASARELBAZ.PCC_SUITES.IDSUITE%TYPE;
BEGIN
   SELECT NVL (MAX (PSU.IDSUITE), '0000')
     INTO P_SUITE
     FROM PASARELBAZ.PCC_SUITES PSU
    WHERE PSU.USUARIOID = P_USUARIOID;

   RETURN P_SUITE;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       P_SUITE := '';
       RETURN P_SUITE;
END GET_SUITE;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          GET_T_PREACTIVADA(
   P_CARDNUMBER   CARTCARD.T_P_ACTIVADAS.ACTUALCARDNUMBER%TYPE,
   P_REFERENCIA   CARTCARD.T_P_ACTIVADAS.REFERENCIA%TYPE
)
RETURN SYS_REFCURSOR
/* ----------------------------------------------------------------------------- */
/* NOMBRE FUNCION: GET_T_PREACTIVADA                                             */
/* OBJETIVO: REGRESA TODOS LOS DATOS DE LA TARJETA PRE ACTIVADA                  */
/* AUTOR: EQUIPO IUPICARD                                                        */
/* FECHA CREACION: JUN/2010                                                      */
/* FECHA MODIFICACION:                                                           */
/* EJEMPLO EJECUCION: EXEC GET_T_PREACTIVADA(<<P_CARDNUMBER>>,<<P_REFERENCIA>>)  */
/* ------------------------------------------------------------------------------*/
IS
DATOS SYS_REFCURSOR;
BEGIN

   IF ( P_CARDNUMBER IS NOT NULL ) THEN
       OPEN DATOS FOR
            SELECT TPA.ACTUALCARDNUMBER, TPA.CARDNUMBER,
                   TPA.FECHAVENCIMIENTO, TPA.IDSUITE, TPA.REFERENCIA
              FROM CARTCARD.T_P_ACTIVADAS TPA
             WHERE TPA.ACTUALCARDNUMBER = P_CARDNUMBER;

    ELSIF ( P_REFERENCIA IS NOT NULL ) THEN

       OPEN DATOS FOR
            SELECT TPA.ACTUALCARDNUMBER, TPA.CARDNUMBER,
                   TPA.FECHAVENCIMIENTO, TPA.IDSUITE, TPA.REFERENCIA
              FROM CARTCARD.T_P_ACTIVADAS TPA
             WHERE TPA.REFERENCIA = P_REFERENCIA;
    END IF;

   RETURN DATOS;

   EXCEPTION
     WHEN NO_DATA_FOUND THEN
            NULL;


END GET_T_PREACTIVADA;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION icn_obtiene_datos_tarjeta (
   p_usuarioid           IN       INTEGER
)
   RETURN sys_refcursor
IS
   recdatos   sys_refcursor;
BEGIN
   OPEN recdatos FOR
      SELECT cl.id_usuario, t.cardnumber AS numerotarjeta,
             t.id_emisor AS idemisor, t.pembossedname AS nombretitular,
             SUBSTR (t.pidexpiration, 5, 2) AS mesexpira,
             SUBSTR (t.pidexpiration, 0, 4) AS anoexpira, t.cvv,
             t.token AS tokentarjeta, t.expirationdate AS fechaexpiracion,
             t.pembossedname AS embossedname,t.id_status_tarjeta estatus,
             SC.DESCRIPCION estatusdesc
        FROM icn_tarjeta t INNER JOIN icn_contrato co
             ON t.referencia = co.referencia
             INNER JOIN icn_clientes cl ON cl.id_usuario = co.id_usuario
             INNER JOIN IC_CAT_STATUS_CUENTA sc ON to_number(SC.ID_STATUS_CUENTA) = T.ID_STATUS_TARJETA
       WHERE cl.id_usuario = p_usuarioid;
   RETURN recdatos;
END icn_obtiene_datos_tarjeta;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          icn_obtiene_datos_usuario (
   pelogin      IN   cartcard.icn_clientes.nombre_usuario%TYPE,
   pepassword   IN   cartcard.icn_clientes.contrasenia%TYPE
)
   RETURN sys_refcursor
IS
   vlnumusuario   NUMBER;
   recdatos       sys_refcursor;
BEGIN
   OPEN recdatos FOR
        SELECT '' usuarioid, '' nombre, '' apaterno, '' amaterno, '' calle,
             '' colonia, '' municipioid, '' ciudad, '' codigopostal, '' telefono,
             '' paisid, '' estadoid, '' nombreusuario,
             '' identificacionid, '' numeroidentificacion, 
             '' celular, '' mail,
             '' nombrepais, '' nombreestado, '' nombremunicipio,
             '' ESTADODECUENTAID, '' suite, '' referencia, '' nombrepais,
             '' nombreestado, '' nombremunicipio, '' num_ext, '' num_int
        FROM DUAL;

   -- VALIDA LOGIN
   SELECT COUNT (1)
     INTO vlnumusuario
     FROM cartcard.icn_clientes cl
    WHERE cl.nombre_usuario = pelogin;

   IF vlnumusuario > 0
   THEN
      -- VALIDA PASSWORD
      SELECT COUNT (1)
        INTO vlnumusuario
        FROM cartcard.icn_clientes cl
       WHERE cl.contrasenia = pepassword AND cl.nombre_usuario = pelogin;

      IF vlnumusuario > 0
      THEN
         OPEN recdatos FOR
            SELECT cl.id_usuario AS usuarioid, cl.nombre, cl.apaterno,
                   cl.amaterno, cl.calle, cl.colonia,
                   cl.id_municipio AS municipioid, cl.ciudad,
                   cl.cp AS codigopostal, cl.telefono, cl.id_pais AS paisid,
                   cl.id_estado AS estadoid,
                   cl.nombre_usuario AS nombreusuario,
                   cl.id_tipo_identificacion AS identificacionid,
                   cl.numero_identificacion AS numeroidentificacion,
                   cl.celular, cl.correo_electronico AS mail,
                   p.nombre_pais AS nombrepais,
                   es.nombre_estado AS nombreestado,
                   mun.nombre_municipio AS nombremunicipio,
                   t.id_status_tarjeta AS estadodecuentaid,
                   co.suite AS id_suite, t.referencia,
                   cl.num_ext,cl.num_int
              FROM icn_clientes cl INNER JOIN ic_municipio mun
                   ON cl.id_municipio = mun.id_municipio and cl.id_estado = mun.id_estado and cl.id_pais = mun.id_pais
                   INNER JOIN ic_estado es ON mun.id_estado = es.id_estado and mun.id_estado = cl.id_estado
                   INNER JOIN ic_pais p ON p.id_pais = es.id_pais and p.id_pais = cl.id_pais
                   INNER JOIN icn_contrato co ON co.id_usuario =
                                                                cl.id_usuario
                   INNER JOIN icn_tarjeta t ON t.referencia = co.referencia
             WHERE cl.nombre_usuario = pelogin;
      END IF;
   END IF;

   RETURN recdatos;
END icn_obtiene_datos_usuario;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION IC_DATOSUSRCARD (
   PENUMTARJETA       IN       PASARELBAZ.PCC_TARJETAS.NUMEROTARJETA%TYPE)
 RETURN SYS_REFCURSOR IS
   V_CARTCARDID  CARTCARD.IC_TARJETAS.ID_TARJETA%TYPE;
   RecDatos SYS_REFCURSOR;
BEGIN
  BEGIN
     SELECT NVL(PT.CARTCARDID, -1)
     INTO V_CARTCARDID
     FROM PASARELBAZ.PCC_TARJETAS PT
     WHERE PT.NUMEROTARJETA = PENUMTARJETA;
  EXCEPTION
  WHEN NO_DATA_FOUND THEN
         OPEN   RecDatos FOR
         SELECT NULL ID_USUARIO FROM CARTCARD.IC_USUARIO WHERE ID_USUARIO=-1;                     
  END;   

   IF V_CARTCARDID != -1 THEN
          OPEN RecDatos FOR
             SELECT A.ID_USUARIO, A.NOMBRE, A.APATERNO, A.AMATERNO,
                    A.CALLE, A.COLONIA, A.ID_MUNICIPIO, A.CIUDAD, A.CP, 
                    A.ID_PAIS, A.ID_ESTADO,
                    A.NOMBRE_USUARIO, A.CONTRASENIA,A.ID_STATUS_CUENTA, A.ID_TIPO_IDENTIFICACION,
                    A.NUMERO_IDENTIFICACION, A.CELULAR, B.CARTCARDID, B.FECHAVENCIMIENTO,
                    A.TELEFONO, C.PAISIDCARDMARTE, D.ESTADOIDCARDMARTE, A.CORREO_ELECTRONICO,
                    A.FECHA_NACIMIENTO, A.FECHA_CREACION, A.REFERENCIA,B.BLOQUEO
               FROM CARTCARD.IC_USUARIO A,
                    CARTCARD.CARD B,
                    CARTCARD.PAIS C,
                    CARTCARD.ESTADO D
              WHERE A.ID_USUARIO = B.USUARIOID
                AND C.PAISID = A.ID_PAIS
                AND D.PAISID = A.ID_PAIS
                AND D.ESTADOID = A.ID_ESTADO
                AND B.CARTCARDID = V_CARTCARDID;
    END IF;

    RETURN RecDatos;
    EXCEPTION
       WHEN NO_DATA_FOUND THEN
             RETURN RecDatos;
       WHEN OTHERS THEN
             RETURN RecDatos;
END;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION IC_DATOSUSRNICK (
   PENombreUsuario       IN       CARTCARD.Ic_Usuario.NOMBRE_USUARIO%TYPE)
 RETURN SYS_REFCURSOR IS
   RecDatos SYS_REFCURSOR;
BEGIN
          OPEN RecDatos FOR
             SELECT A.ID_USUARIO, A.NOMBRE, A.APATERNO, A.AMATERNO,
                    A.CALLE, A.COLONIA, A.ID_MUNICIPIO, A.CIUDAD, A.CP,
                    A.ID_PAIS, A.ID_ESTADO,
                    A.NOMBRE_USUARIO, A.CONTRASENIA,A.ID_STATUS_CUENTA, A.ID_TIPO_IDENTIFICACION,
                    A.NUMERO_IDENTIFICACION, A.CELULAR, B.CARTCARDID, B.FECHAVENCIMIENTO,
                    A.TELEFONO, C.PAISIDCARDMARTE, D.ESTADOIDCARDMARTE, A.CORREO_ELECTRONICO,
                    A.FECHA_NACIMIENTO, A.FECHA_CREACION, A.REFERENCIA,B.BLOQUEO
               FROM CARTCARD.IC_USUARIO A,
                    CARTCARD.PAIS C,
                    CARTCARD.ESTADO D,
                    CARTCARD.MUNICIPIO F,
                    CARTCARD.CARD B                    
              WHERE A.ID_PAIS = C.PAISID 
                AND D.PAISID = A.ID_PAIS 
                AND D.ESTADOID = A.ID_ESTADO
                AND A.ID_USUARIO = B.USUARIOID(+)
                AND F.paisid = A.ID_PAIS
                AND F.estadoid = A.ID_ESTADO
                AND F.municipioid = A.ID_MUNICIPIO
                AND A.NOMBRE_USUARIO = PENombreUsuario;
return RecDatos;
END;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          IC_EXISTEMEMBRECIAUSU (paUsuarioId CARTCARD.IC_USUARIO.ID_USUARIO%TYPE)
   RETURN INTEGER
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: IC_MEMBRECIAUSUARIO                                            */
/* Objetivo: Verifica si existe la memebrecia de un usuario                             */
/* Autor:    Equipo CartCard (Siscon)                                                   */
/* Fecha Creacion: Oct/2010                                                             */
/* Fecha Modificacion:                                                                  */
/* Ejemplo Ejecucion: exec IC_MEMBRECIAUSUARIO(<<paUsuarioId>))                         */
/* ------------------------------------------------------------------------------------- */
   v_existe  INTEGER;
BEGIN
   
   
   SELECT  COUNT( MEMBRS )
   INTO v_existe
   FROM( 
       SELECT MAX( M.ID_MEMBRESIA ) AS MEMBRS        
       FROM IC_MEMBRESIAS M
       WHERE  M.ID_TARJETA IN (   
        SELECT  T.ID_TARJETA       
          FROM CARTCARD.IC_TARJETAS T 
        WHERE T.ID_USUARIO = paUsuarioId AND
           T.FECHA_EXPIRACION > SYSDATE) AND
         M.FECHA_EXPIRACION > SYSDATE
     );

     
     dbms_output.put_line( 'Resultado = ' || v_existe );
     
     
   RETURN v_existe;

EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN 0;
     WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_EXISTEMEMBRECIAUSU;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION Ic_Existesuite (
    
    p_usuarioId      PASARELBAZ.PCC_SUITES.USUARIOID%TYPE
    
) RETURN NUMBER IS
p_existe NUMBER;

BEGIN
   p_existe := 0;
   
   
   
   SELECT COUNT(1) INTO p_existe FROM CARTCARD.IC_SUITE A 
             WHERE A.ID_USUARIO=p_usuarioId;
             
   IF p_existe >0 THEN
         p_existe :=1;
   END IF;      
   
   RETURN p_existe;
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       RETURN 0;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END Ic_Existesuite;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION IC_EXISTETARJETA (paUsuarioId CARTCARD.IC_USUARIO.ID_USUARIO%TYPE)
RETURN NUMBER IS
tarjetaActiva NUMBER;

BEGIN
   tarjetaActiva := 0;
   SELECT count(1) into tarjetaActiva FROM CARTCARD.IC_TARJETAS A 
   WHERE A.ID_USUARIO=paUsuarioId AND 
         A.FECHA_EXPIRACION >= SYSDATE;
   
   
  
   IF  tarjetaActiva>0 THEN
          RETURN 1;
   END IF;
   
   RETURN 0;
   
   
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END IC_EXISTETARJETA;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          IC_EXISTEUSUARIO (paUsuarioId CARTCARD.IC_USUARIO.ID_USUARIO%TYPE)
   RETURN INTEGER
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: IC_EXISTEUSUARIO                                                */
/* Objetivo: Verifica si existe un usuario en la tabla de ic_usuarios                    */
/* Autor:    Equipo CartCard (Siscon)                                                   */
/* Fecha Creacion: Oct/2010                                                             */
/* Fecha Modificacion:                                                                  */
/* Ejemplo Ejecucion: exec IC_EXISTEUSUARIO(<<paUsuarioId>))       */
/* ------------------------------------------------------------------------------------- */
   v_existe  INTEGER;
BEGIN
   SELECT count( ID_USUARIO )
     INTO v_existe
     FROM CARTCARD.IC_USUARIO 
   WHERE ID_USUARIO = paUsuarioId;
  
      
   RETURN v_existe;
EXCEPTION
     WHEN OTHERS THEN
          RAISE_APPLICATION_ERROR(-20001,SUBSTR(SQLERRM,1,512));
END IC_EXISTEUSUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION IC_OBTENMERCANCIAIDBYFOLIO(
	   p_folio   CARTCARD.IC_MERCANCIA.FOLIO%TYPE
)
RETURN NUMBER IS
P_ID_MERCANCIA INTEGER;

BEGIN
   P_ID_MERCANCIA := 0;
   
   
   SELECT COUNT(1) INTO P_ID_MERCANCIA FROM CARTCARD.IC_MERCANCIA A WHERE A.FOLIO=p_folio;
   
   IF P_ID_MERCANCIA!=0 THEN
   	  SELECT A.ID_MERCANCIA INTO P_ID_MERCANCIA FROM CARTCARD.IC_MERCANCIA A WHERE A.FOLIO=p_folio;
   END IF;
   
   DBMS_OUTPUT.PUT_LINE(P_ID_MERCANCIA);
   
   
   RETURN P_ID_MERCANCIA;
   
   EXCEPTION
     WHEN NO_DATA_FOUND THEN
       NULL;
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END IC_OBTENMERCANCIAIDBYFOLIO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          Ic_Obtienetipomem (
	p_costo   CARTCARD.IC_CAT_TIPO_MEMBRESIA.COSTO%TYPE
) RETURN INTEGER IS

p_id_membresia INTEGER;

BEGIN
   p_id_membresia := 0;
   
   SELECT A.ID_TIPO_MEMBRESIA INTO p_id_membresia FROM CARTCARD.IC_CAT_TIPO_MEMBRESIA A
   		  WHERE TRUNC(A.COSTO)=TRUNC(p_costo);

   
   RETURN p_id_membresia;
   
   
   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE_APPLICATION_ERROR (-20100, 'Error ocurrido al agregar la IC_OBTIENETIPOMEM  (' || SQLCODE || '  ' || SQLERRM || ')');
END Ic_Obtienetipomem;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          OBTENCOSTOMEMBRECIA (p_cartcardid NUMBER)
   RETURN FLOAT
IS
/* ---------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENCOSTOMEMBRECIA                                          */
/* Objetivo: Obtiene el costo de una membrecia por cartCardId.                        */
/* Autor:    Equipo CartCard (Siscon)                                                 */
/* Fecha Creacion: Ene/2009                                                           */
/* Fecha Modificacion:                                                                */
/* Ejemplo Ejecucion: exec OBTENCOSTOMEMBRECIA(<<cartcardid>>,<<:costomembresia>>))   */
/* ---------------------------------------------------------------------------------- */
   v_costomembresia   FLOAT;
BEGIN
   SELECT costo
     INTO v_costomembresia
     FROM CARTCARD.membrecia INNER JOIN CARTCARD.card ON CARTCARD.membrecia.membreciaid =
                                                               CARTCARD.card.membreciaid
    WHERE cartcardid = p_cartcardid;

   RETURN v_costomembresia;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN 0.0;
END obtencostomembrecia;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION          OBTENDESCRIPCIONMEMBRECIA (p_cartcardid NUMBER)
   RETURN VARCHAR2
IS
/* ------------------------------------------------------------------------------------- */
/* NOMBRE PROCEDIMIENTO: OBTENDESCRIPCIONEMBRECIA                                        */
/* Objetivo: Obtiene el costo de una membrecia por cartCardId.                        	 */
/* Autor:    Equipo CartCard (Siscon)                                                 	 */
/* Fecha Creacion: Ene/2009                                                           	 */
/* Fecha Modificacion:                                                                	 */
/* Ejemplo Ejecucion: exec OBTENDESCRIPCIONEMBRECIA(<<cartcardid>>,<<:costomembresia>>)) */
/* ------------------------------------------------------------------------------------- */
   v_descripcion   VARCHAR2 (20);
BEGIN
   SELECT descripcion
     INTO v_descripcion
     FROM CARTCARD.membrecia INNER JOIN CARTCARD.card ON CARTCARD.membrecia.membreciaid =
                                                               CARTCARD.card.membreciaid
    WHERE cartcardid = p_cartcardid;

   RETURN v_descripcion;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      RETURN '';
END obtendescripcionmembrecia;
/

SHOW ERRORS;


CREATE OR REPLACE function          OBTIENE_DATOS_USUARIO(PELOGIN In CARTCARD.IC_USUARIO.NOMBRE_USUARIO%TYPE,
                                                 PEPASSWORD IN CARTCARD.IC_USUARIO.CONTRASENIA%TYPE)
RETURN sys_refcursor is
 
  vlnumUsuario number;
  RecDatos sys_refcursor;
  
begin
           open RecDatos for
              SELECT '' usuarioid, '' nombre, '' apaterno, '' amaterno, '' calle, '' colonia,
                '' municipioid, '' ciudad, '' codigopostal, '' telefono, 
                '' paisid, '' estadoid, ''nombreusuario,
                '' identificacionid, 
                '' numeroidentificacion, '' celular, '' mail,
                '' nombrepais, '' nombreestado, '' nombremunicipio,
                '' ESTADODECUENTAID,'' SUITE, '' referencia,
                '' nombrepais,''nombreestado,''nombremunicipio
                from dual;

  -- VALIDA LOGIN
    SELECT COUNT(1) INTO vlnumUsuario
        FROM CARTCARD.IC_USUARIO U 
           WHERE U.NOMBRE_USUARIO=PELOGIN; 
     
      IF vlnumUsuario > 0 THEN
        -- VALIDA PASSWORD  
        SELECT COUNT(1) INTO vlnumUsuario
        FROM CARTCARD.IC_USUARIO U 
           WHERE U.CONTRASENIA = PEPASSWORD and
		   		 U.NOMBRE_USUARIO=PELOGIN; 
        IF vlnumUsuario > 0 THEN
           open RecDatos for
             SELECT us.usuarioid, nombre, apaterno, amaterno, calle, colonia,
                us.municipioid, ciudad, us.codigopostal, telefono, 
                us.paisid, us.estadoid, us.nombreusuario,
                us.identificacionid, 
                us.numeroidentificacion, celular, us.mail,
                ps.nombrepais, ed.nombreestado, mu.nombremunicipio,
                US.ESTADODECUENTAID,
                SUI.ID_SUITE,
                c.referencia,
                ps.nombrepais,ed.nombreestado,mu.nombremunicipio     
           FROM CARTCARD.usuario us,
                CARTCARD.municipio mu,
                CARTCARD.pais ps,
                CARTCARD.estado ed,
                CARTCARD.IC_SUITE SUI,
                CARTCARD.CARD C
          WHERE us.Nombreusuario = PELOGIN
            AND ps.paisid = us.paisid
            AND ed.paisid = us.paisid
            AND ed.estadoid = us.estadoid
            AND mu.paisid = us.paisid
            AND mu.estadoid = us.estadoid
            AND mu.municipioid = us.municipioid
            AND US.USUARIOID = SUI.ID_USUARIO(+)
            AND US.USUARIOID = C.USUARIOID(+);
        END IF;   
    END IF;  

  return RecDatos;
end OBTIENE_DATOS_USUARIO;
/

SHOW ERRORS;


CREATE OR REPLACE function split_calle
(
    p_list varchar2,
    p_del varchar2 := '|'
) return split_tbl pipelined
is
    l_idx    pls_integer;
    l_list    varchar2(32767) := p_list;
    l_value    varchar2(32767);
begin
    loop
        l_idx := instr(l_list,p_del);
        if l_idx > 0 then
            pipe row(substr(l_list,1,l_idx-1));
            l_list := substr(l_list,l_idx+length(p_del));
        else
            pipe row(l_list);
            exit;
        end if;
    end loop;
    return;
end split_calle;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION tab_to_string (p_varchar2_tab  IN  t_varchar2_tab,
                                          p_delimiter     IN  VARCHAR2 DEFAULT ',') RETURN VARCHAR2 IS
  l_string     VARCHAR2(32767);
BEGIN
  FOR i IN p_varchar2_tab.FIRST .. p_varchar2_tab.LAST LOOP
    IF i != p_varchar2_tab.FIRST THEN
      l_string := l_string || p_delimiter;
    END IF;
    l_string := l_string || p_varchar2_tab(i);
  END LOOP;
  RETURN l_string;
END tab_to_string;
/

SHOW ERRORS;


CREATE OR REPLACE VIEW PRUEBA
AS 
select i.id_movimiento,
       i.referencia
  from cartcard.icn_movimientos i
 where  i.FECHA_APLICACION BETWEEN TO_DATE('01-FEB-2011','DD-MON-YY') AND TRUNC (SYSDATE);


CREATE OR REPLACE VIEW PRUEBADES
AS 
select i.id_movimiento,
       i.referencia,
       i.id_canal,
       i.operacionid,
       i.tipo_cambio,
       i.importe_mx,
       i.importe_dls,
       i.fecha_aplicacion,
       i.usuario,
       i.sucursal,
       i.operador
  from icn_movimientos i
 where (i.referencia, i.id_movimiento) in
       (select m.referencia, min(m.id_movimiento)
          from icn_movimientos M
         where m.referencia in
               (select t.referencia
                  from icn_tarjeta t
                 where t.tipo_tarjeta in ('PP') )
           and m.transaccion = 'F000'
         group by m.referencia);


CREATE OR REPLACE VIEW VPRIMERFONDEO
AS 
select i.id_movimiento,
       i.referencia,
       i.id_canal,
       i.operacionid,
       i.tipo_cambio,
       i.importe_mx,
       i.importe_dls,
       i.fecha_aplicacion,
       i.usuario,
       i.sucursal,
       i.operador
  from cartcard.icn_movimientos i
 where (i.referencia, i.id_movimiento) in
       (select m.referencia, min(m.id_movimiento)
          from cartcard.icn_movimientos M
         where m.referencia in
               (select t.referencia
                  from cartcard.icn_tarjeta t
                 where t.tipo_tarjeta in ('PP') )
           and m.transaccion = 'F000' and m.id_canal = 8
         group by m.referencia)
         and i.FECHA_APLICACION BETWEEN TO_DATE('01-FEB-2011','DD-MON-YYYY') AND TRUNC (SYSDATE);


CREATE OR REPLACE VIEW VPRIMERFONDEO2
AS 
select i.id_movimiento,
       i.referencia,
       i.id_canal,
       i.operacionid,
       i.tipo_cambio,
       i.importe_mx,
       i.importe_dls,
       i.fecha_aplicacion,
       i.usuario,
       i.sucursal,
       i.operador
  from cartcard.icn_movimientos i
 where (i.referencia, i.id_movimiento) in
       (select m.referencia, min(m.id_movimiento)
          from cartcard.icn_movimientos M
         where m.referencia in
               (select t.referencia
                  from cartcard.icn_tarjeta t
                 where t.tipo_tarjeta in ('PP') )
           and m.transaccion = 'F000' and m.id_canal = 8
         group by m.referencia)
         and i.FECHA_APLICACION between '01-FEB-2011' and trunc(sysdate);


CREATE OR REPLACE VIEW V_ICN_FONDEO
AS 
select m.referencia,t.cardnumber,m.fecha_aplicacion,c.nombre,c.apaterno,c.amaterno,
       can.descripcion tipoFondeo,
       case
         when m.id_canal = 1 then m.sucursal
         when m.id_canal = 2 then 'N/A'
         when m.id_canal = 8 then m.sucursal
         else b.nombre
       end sucursal ,
       m.importe_mx,
       m.importe_dls,
       m.tipo_cambio,
       can.id_canal,
       decode(cartcard.pkg_icn_reportes.getTotalFondeo(m.referencia),1,'SI','NO') recarga
  from cartcard.icn_clientes c,
       cartcard.icn_contrato cto,
       cartcard.icn_tarjeta t,
       cartcard.ICN_MOVIMIENTOS m,
       cartcard.ic_cat_canal can,
       cartcard.icn_cat_banco b
 where c.id_usuario = cto.id_usuario
       and cto.referencia = t.referencia
       and t.referencia = m.referencia
       and m.id_canal  = can.id_canal
       and m.institucion_emisora = b.codigo(+)
       and m.id_canal in (1,2,3,8);


CREATE OR REPLACE VIEW V_ICN_MEMBRESIA
AS 
select t.referencia,t.cardnumber,t.fecha_creacion,c.nombre,c.apaterno,c.amaterno,
       t.fecha_membrecia,
pkg_icn_reportes.getfechafondeo(t.referencia) fechaFondeo,
pkg_icn_reportes.getTipoFondeo(t.referencia) TipoFondeo,
pkg_icn_reportes.getSucursalFondeo(t.referencia) Sucursal,
pkg_icn_reportes.getAnualidad(t.referencia) Anualidad,
pkg_icn_reportes.getImporteMxpFondeo(t.referencia) DepositoMxp,
pkg_icn_reportes.getTipoCambioFondeo(t.referencia) TipoCambio,
pkg_icn_reportes.getImporteDlsFondeo(t.referencia) DepositoDls,
pkg_icn_reportes.getFechaUltimaFondeo(t.referencia) FechaUltimoFondeo
  from cartcard.icn_clientes c,
       cartcard.icn_contrato cto,
       cartcard.icn_tarjeta t
 where c.id_usuario = cto.id_usuario
       and cto.referencia = t.referencia;


CREATE OR REPLACE VIEW V_ICN_PAQUETES
AS 
select p.numerofolio,p.fecharecepcion,
card.cardnumber,c.nombre,c.apaterno,c.amaterno,
pasarelbaz.PKG_PAQUETES.GetEstadoProducto(p.numerofolio,1) fechaestafeta, -- 1-recibido
decode((pasarelbaz.PKG_PAQUETES.GetEstadoProducto(p.numerofolio,1)-p.fecharecepcion),null,'NA',ROUND((pasarelbaz.PKG_PAQUETES.GetEstadoProducto(p.numerofolio,1)-p.fecharecepcion))) TiempoRibesaEstafeta,
pasarelbaz.PKG_PAQUETES.GetEstadoProducto(p.numerofolio,4) fechaliberacion, -- 4-aduana
decode((pasarelbaz.PKG_PAQUETES.GetEstadoProducto(p.numerofolio,4) - pasarelbaz.PKG_PAQUETES.GetEstadoProducto(p.numerofolio,1)),
       NULL,'NA',ROUND(pasarelbaz.PKG_PAQUETES.GetEstadoProducto(p.numerofolio,4) - pasarelbaz.PKG_PAQUETES.GetEstadoProducto(p.numerofolio,1))) tiempoEsatfetaLiberacion,
(select t.descripcion
from cartcard.IC_IMPORTES_IUPICARD i,cartcard.ic_cat_tipo_servicio t
where i.id_tipo_servicio = t.id_tipo_servicio
 and i.id_mercancia = m.id_mercancia and rownum=1) tipoEnvio,
(select sta.descripcion
 from cartcard.IC_CAT_STATUS sta
 where sta.id_status = m.id_status_mercancia) status,
m.costo,
pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,7) sobrepeso,
pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,15) sobrepesoEstafeta,
pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,40) sobrepesoCliente,
pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,17) importe_importacion,
pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,6) seguro,
case pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,38)
   when 2 then
        pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,35)
   when 1 then
        pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,37)
   else
        pasarelbaz.PKG_PAQUETES.GetDesgloceCosto(p.numerofolio,20)
end totalenvio
from pasarelbaz.PCC_PEDIDOS p,
     cartcard.icn_clientes c,
     cartcard.icn_contrato cto,
     cartcard.icn_tarjeta card,
     cartcard.IC_MERCANCIA m
where c.id_usuario = cto.id_usuario
  and cto.referencia = card.referencia
  and p.idsuite = cto.suite
  and p.numerofolio = m.folio(+);


CREATE OR REPLACE VIEW V_ICN_PRIMER_FONDEO
AS 
select i.id_movimiento,
       i.referencia,
       i.id_canal,
       i.operacionid,
       i.tipo_cambio,
       i.importe_mx,
       i.importe_dls,
       i.fecha_aplicacion,
       i.usuario,
       i.sucursal,
       i.operador
  from icn_movimientos i
 where (i.referencia, i.id_movimiento) in
       (select m.referencia, min(m.id_movimiento)
          from icn_movimientos M
         where m.referencia in
               (select t.referencia
                  from icn_tarjeta t
                 where t.tipo_tarjeta in ('PP') )
           and m.transaccion = 'F000'
         group by m.referencia);


CREATE OR REPLACE TRIGGER SINC_CLIE_US
AFTER DELETE OR INSERT OR UPDATE
ON IC_USUARIO 
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
DECLARE
    varcalle CARTCARD.ICN_CLIENTES.CALLE%TYPE;
    varnumext CARTCARD.ICN_CLIENTES.num_ext%TYPE;
    varnumint CARTCARD.ICN_CLIENTES.num_int%TYPE;

BEGIN

/*TRIGGER PARA SINCRONIZAR LOS MOVIMIENTOS DE LA
         TABLA DE IC_USUARIO Y LA TABLA ICN_CLIENTES*/ 

	  -- Se asignan los valores del domicilio
	  IF (:NEW.calle LIKE '%|%|%' ) THEN
	  	 			 varcalle := SUBSTR(:NEW.calle, 1 ,INSTR(:NEW.calle,  '|' , 1 , 1) - 1);
		   			 varnumext:= SUBSTR(:NEW.calle, INSTR(:NEW.calle,'|', 1, 1) +1, INSTR(:NEW.calle,'|',1,2)-INSTR(:NEW.calle,'|',1,1)-1);
					 varnumint:= SUBSTR(:NEW.calle, INSTR(:NEW.calle,'|', 1, 2)+1);
	  ELSIF (:NEW.calle LIKE '%|%') THEN 
   	  		varcalle := SUBSTR(:NEW.calle, 1 ,INSTR(:NEW.calle,  '|' , 1 , 1) - 1);
			varnumext := SUBSTR(:NEW.calle, INSTR(:NEW.calle,'|', 1, 1)+1);
			varnumint := ' ';
	 ELSIF (:NEW.calle NOT LIKE '%|%') THEN 
			 varcalle := :NEW.calle;
			 varnumext := ' ';
			 varnumint := ' ';
END IF;
   --Verifica si es insercion
   IF INSERTING THEN
       INSERT INTO ICN_CLIENTES (
        ICN_CLIENTES.ID_USUARIO, ICN_CLIENTES.nombre, ICN_CLIENTES.apaterno,
		ICN_CLIENTES.amaterno, ICN_CLIENTES.calle, ICN_CLIENTES.num_ext,
        ICN_CLIENTES.num_int, ICN_CLIENTES.colonia, ICN_CLIENTES.id_municipio,
        ICN_CLIENTES.ciudad, ICN_CLIENTES.cp, ICN_CLIENTES.telefono,
		ICN_CLIENTES.correo_electronico, ICN_CLIENTES.id_pais, ICN_CLIENTES.id_estado,
        ICN_CLIENTES.nombre_usuario, ICN_CLIENTES.estatus, ICN_CLIENTES.numero_identificacion,
        ICN_CLIENTES.contrasenia, ICN_CLIENTES.fecha_creacion, ICN_CLIENTES.celular,
        ICN_CLIENTES.fecha_nacimiento, ICN_CLIENTES.usuario_modifico,
        ICN_CLIENTES.ultima_modificacion
        )

     VALUES (
        :NEW.id_usuario, :NEW.nombre, :NEW.apaterno, :NEW.amaterno,  varcalle,  varnumext,
        varnumint, :NEW.colonia, :NEW.id_municipio, :NEW.ciudad, :NEW.cp, :NEW.telefono,
        :NEW.correo_electronico, :NEW.id_pais, :NEW.id_estado, :NEW.nombre_usuario,
        :NEW.id_status_cuenta, :NEW.numero_identificacion, :NEW.contrasenia,
        :NEW.fecha_creacion, :NEW.celular, :NEW.fecha_nacimiento, :NEW.usuario_modifico,
        SYSDATE );
        --Si no es insercion verifica si es actualizacion
   ELSIF UPDATING THEN
     UPDATE ICN_CLIENTES
     SET
        ICN_CLIENTES.nombre = NVL(:NEW.nombre, ICN_CLIENTES.nombre),
		ICN_CLIENTES.apaterno = NVL(:NEW.apaterno, ICN_CLIENTES.apaterno), 
		ICN_CLIENTES.amaterno = NVL(:NEW.amaterno,ICN_CLIENTES.amaterno),
        ICN_CLIENTES.calle = NVL(varcalle, ICN_CLIENTES.calle),
		ICN_CLIENTES.num_ext = NVL(varnumext, ICN_CLIENTES.num_ext),
        ICN_CLIENTES.num_int = NVL(varnumint, ICN_CLIENTES.num_int), 
		ICN_CLIENTES.colonia = NVL(:NEW.colonia, ICN_CLIENTES.colonia),
        ICN_CLIENTES.id_municipio = NVL(:NEW.id_municipio, ICN_CLIENTES.id_municipio),
		ICN_CLIENTES.ciudad = NVL(:NEW.ciudad, ICN_CLIENTES.ciudad),
        ICN_CLIENTES.cp =NVL(:NEW.cp, ICN_CLIENTES.cp),
		ICN_CLIENTES.telefono = NVL(:NEW.telefono, ICN_CLIENTES.telefono),
        ICN_CLIENTES.correo_electronico = NVL(:NEW.correo_electronico, ICN_CLIENTES.correo_electronico),
        ICN_CLIENTES.id_pais = NVL(:NEW.id_pais, ICN_CLIENTES.id_pais), 
		ICN_CLIENTES.id_estado = NVL(:NEW.id_estado, ICN_CLIENTES.id_estado),
        ICN_CLIENTES.nombre_usuario = NVL(:NEW.nombre_usuario, ICN_CLIENTES.nombre_usuario),
		ICN_CLIENTES.estatus = NVL(:NEW.id_status_cuenta, ICN_CLIENTES.estatus),
        ICN_CLIENTES.numero_identificacion = NVL(:NEW.numero_identificacion, ICN_CLIENTES.numero_identificacion),
        ICN_CLIENTES.contrasenia = NVL(:NEW.contrasenia, ICN_CLIENTES.contrasenia),
        ICN_CLIENTES.celular = NVL(:NEW.celular,  ICN_CLIENTES.celular),
        ICN_CLIENTES.fecha_nacimiento = NVL(:NEW.fecha_nacimiento, ICN_CLIENTES.fecha_nacimiento),
        ICN_CLIENTES.usuario_modifico = NVL(:NEW.usuario_modifico, ICN_CLIENTES.usuario_modifico),
        ICN_CLIENTES.ultima_modificacion = SYSDATE
      WHERE ICN_CLIENTES.id_usuario = :NEW.id_usuario;
  -- Por ultimo se verifica si es eliminacion
   ELSIF DELETING THEN
       DELETE FROM ICN_CLIENTES
      WHERE ICN_CLIENTES.ID_USUARIO = :OLD.id_usuario;
   END IF;

   EXCEPTION
     WHEN OTHERS THEN
       -- Consider logging the error and then re-raise
       RAISE;
END sinc_clie_us;
/
SHOW ERRORS;

ALTER TRIGGER SINC_CLIE_US DISABLE;


ALTER TABLE CARD ADD (
  CONSTRAINT PK_CARD
 PRIMARY KEY
 (CARTCARDID, USUARIOID));

ALTER TABLE CAT_ESTATUS_VENTA ADD (
  CONSTRAINT PK_CAT_ESTATUS_VENTA
 PRIMARY KEY
 (IDESTATUS));

ALTER TABLE CAT_OPERACIONFONDEOS ADD (
  PRIMARY KEY
 (MENSAJEOPERACIONID));

ALTER TABLE CAT_STATUS_TARJETA ADD (
  CONSTRAINT XPKCAT_STATUS_TARJETA
 PRIMARY KEY
 (ID_STATUS_TARJETA));

ALTER TABLE CC_CANCELACIONES ADD (
  PRIMARY KEY
 (IDREGISTRO));

ALTER TABLE CC_COSTOFLETEPORKG ADD (
  PRIMARY KEY
 (IDREGISTRO));

ALTER TABLE CC_DOCUMENTOSUSR ADD (
  PRIMARY KEY
 (IDDOCUMENTO, USUARIOID));

ALTER TABLE CC_ESTATUSACLARACION ADD (
  PRIMARY KEY
 (ESTATUSACLARACION));

ALTER TABLE CC_ESTATUSDOCUMENTO ADD (
  PRIMARY KEY
 (DOCACEPTADO));

ALTER TABLE CC_ESTATUSIDENTIDAD ADD (
  PRIMARY KEY
 (IDENTIDADVALIDADA));

ALTER TABLE CC_RENOVACIONES ADD (
  PRIMARY KEY
 (NUMERORENOVACION));

ALTER TABLE CC_REPOSICIONES ADD (
  PRIMARY KEY
 (IDREGISTRO));

ALTER TABLE CC_RSPACLARACION ADD (
  PRIMARY KEY
 (NUMERORESPUESTA, NUMEROREGISTRO, NUMEROACLARACION, USUARIOID));

ALTER TABLE CC_SITIOSFAVORITOS ADD (
  PRIMARY KEY
 (NUMSITIOUSUARIO, USUARIOID));

ALTER TABLE CC_SLCACLARACION ADD (
  PRIMARY KEY
 (NUMEROREGISTRO, NUMEROACLARACION, USUARIOID));

ALTER TABLE CC_SOLICITUDPLASTICO ADD (
  PRIMARY KEY
 (NUMEROSOLICITUD));

ALTER TABLE CC_TARJETASEXPIRADAS ADD (
  PRIMARY KEY
 (IDREGISTROTE));

ALTER TABLE CC_TIPODOCUMENTO ADD (
  PRIMARY KEY
 (IDTIPODOCUMENTO));

ALTER TABLE CC_TIPOPRODUCTO ADD (
  PRIMARY KEY
 (IDTIPOPRODUCTO));

ALTER TABLE CLIENTE_TELEFONOS ADD (
  CONSTRAINT PK_CLIENTE_TELEFONOS
 PRIMARY KEY
 (CTE_CLI_ID));

ALTER TABLE CONNECTION ADD (
  PRIMARY KEY
 (ID));

ALTER TABLE CONSTANTES ADD (
  PRIMARY KEY
 (ID_CONSTANTES));

ALTER TABLE ESTADO ADD (
  CONSTRAINT ESTADO_PK
 PRIMARY KEY
 (PAISID, ESTADOID));

ALTER TABLE ESTADODECUENTA ADD (
  CONSTRAINT ESTADODECUENTA_PK
 PRIMARY KEY
 (ESTADODECUENTAID));

ALTER TABLE HSTUSUARIO ADD (
  PRIMARY KEY
 (HSTUSUARIOID, CONSECUTIVO));

ALTER TABLE H_T_P_ACTIVADAS ADD (
  CONSTRAINT PK_H_T_P_ACTIVADAS
 PRIMARY KEY
 (ID_H_T_P_ACTIVADAS));

ALTER TABLE ICN_APLIC ADD (
  CONSTRAINT XPKICN_APLIC
 PRIMARY KEY
 (IDAPLICACION));

ALTER TABLE ICN_CAT_BANCO ADD (
  CONSTRAINT XPKICN_CAT_BANCO
 PRIMARY KEY
 (CODIGO));

ALTER TABLE ICN_CAT_OPERACION ADD (
  CONSTRAINT XPKICN_CAT_OPERACION
 PRIMARY KEY
 (CODIGOOPERACION));

ALTER TABLE ICN_CAT_TIPO_BLOQUEO ADD (
  CONSTRAINT XPKICN_CAT_TIPO_BLOQUEO
 PRIMARY KEY
 (ESTATUS_BLOQUEO));

ALTER TABLE ICN_CC_TARJETASEXPIRADAS ADD (
  CONSTRAINT REGISTRO
 PRIMARY KEY
 (ID_REGISTROTE));

ALTER TABLE ICN_CLIENTES ADD (
  CONSTRAINT XPKICN_CLIENTES
 PRIMARY KEY
 (ID_USUARIO));

ALTER TABLE ICN_CONTRATO ADD (
  CONSTRAINT XPKICN_CONTRATO
 PRIMARY KEY
 (REFERENCIA));

ALTER TABLE ICN_CP ADD (
  CONSTRAINT XPKICN_CP
 PRIMARY KEY
 (CODIGOPOSTAL, ASENTAMIENTO, TIPO_ASENTAMIENTO, ID_MUNICIPIO, ID_ESTADO, ID_PAIS));

ALTER TABLE ICN_FUNCION ADD (
  CONSTRAINT XPKICN_FUNCION
 PRIMARY KEY
 (IDFUNCION));

ALTER TABLE ICN_GPOPERFIL ADD (
  CONSTRAINT XPKICN_GPOPFIL
 PRIMARY KEY
 (IDGPOPFIL));

ALTER TABLE ICN_GRUPO ADD (
  CONSTRAINT XPKICN_GRUPO
 PRIMARY KEY
 (IDGRUPO));

ALTER TABLE ICN_MOVIMIENTOS ADD (
  CONSTRAINT XPKICN_MOVIMIENTOS
 PRIMARY KEY
 (ID_MOVIMIENTO, REFERENCIA));

ALTER TABLE ICN_OPERACIONES_HISTORICO ADD (
  CONSTRAINT XPKICN_OPERACIONES_HIST
 PRIMARY KEY
 (FECHA));

ALTER TABLE ICN_PERFIL ADD (
  CONSTRAINT XPKICN_PERFIL
 PRIMARY KEY
 (IDPERFIL));

ALTER TABLE ICN_PERMISO ADD (
  CONSTRAINT XPKICN_PERMISO
 PRIMARY KEY
 (IDPERMISO));

ALTER TABLE ICN_TARJETA ADD (
  CONSTRAINT XPKICN_TARJETA
 PRIMARY KEY
 (REFERENCIA));

ALTER TABLE ICN_USR_ROL ADD (
  CONSTRAINT XPKICN_USR_ROL
 PRIMARY KEY
 (IDUSUARIO, IDFUNCION, IDPERMISO));

ALTER TABLE ICN_USUARIO_ROL ADD (
  CONSTRAINT XPKICN_USUARIO_ROL
 PRIMARY KEY
 (IDUSUARIO, IDFUNCION, IDPERMISO));

ALTER TABLE IC_BXI ADD (
  CONSTRAINT XPKIC_BXI
 PRIMARY KEY
 (ID_BXI));

ALTER TABLE IC_CAT_CANAL ADD (
  CONSTRAINT XPKIC_CAT_CANAL
 PRIMARY KEY
 (ID_CANAL));

ALTER TABLE IC_CAT_DOCUMENTO ADD (
  CONSTRAINT PK_IC_CAT_DOCUMENTO
 PRIMARY KEY
 (ID_TIPO_DOCUMENTO));

ALTER TABLE IC_CAT_EMISOR_TARJETA ADD (
  CONSTRAINT XPKIC_CAT_EMISOR_TARJETA
 PRIMARY KEY
 (ID_EMISOR));

ALTER TABLE IC_CAT_GRUPO_ROLES ADD (
  CONSTRAINT XPKIC_CAT_GRUPO_ROLES
 PRIMARY KEY
 (ID));

ALTER TABLE IC_CAT_PERMISO ADD (
  CONSTRAINT XPKIC_CAT_PERMISO
 PRIMARY KEY
 (ID_PERMISO));

ALTER TABLE IC_CAT_PREGUNTA_SECRETA ADD (
  CONSTRAINT XPKIC_CAT_PREGUNTA_SECRETA
 PRIMARY KEY
 (ID_PREGUNTA_SECRETA));

ALTER TABLE IC_CAT_PROV_ALMACENAMIENTO ADD (
  CONSTRAINT XPKIC_CAT_PROV_ALMACENAMIENTO
 PRIMARY KEY
 (ID_PROVEEDOR));

ALTER TABLE IC_CAT_ROLES ADD (
  CONSTRAINT XPKIC_CAT_ROLES
 PRIMARY KEY
 (ID_ROLES));

ALTER TABLE IC_CAT_STATUS ADD (
  CONSTRAINT XPKIC_CAT_STATUS
 PRIMARY KEY
 (ID_STATUS));

ALTER TABLE IC_CAT_STATUS_CUENTA ADD (
  CONSTRAINT XPKIC_CAT_STATUS_CUENTA
 PRIMARY KEY
 (ID_STATUS_CUENTA));

ALTER TABLE IC_CAT_STATUS_TARJETA ADD (
  CONSTRAINT XPKIC_CAT_STATUS_TARJETA
 PRIMARY KEY
 (ID_STATUS_TARJETA));

ALTER TABLE IC_CAT_TIPO_IDENTIFICACION ADD (
  CONSTRAINT XPKIC_CAT_TIPO_IDENTIFICACION
 PRIMARY KEY
 (ID_TIPO_IDENTIFICACION));

ALTER TABLE IC_CAT_TIPO_MEMBRESIA ADD (
  CONSTRAINT XPKIC_CAT_TIPO_MEMBRESIA
 PRIMARY KEY
 (ID_TIPO_MEMBRESIA));

ALTER TABLE IC_CAT_TIPO_PAGO ADD (
  CONSTRAINT XPKIC_CAT_TIPO_PAGO
 PRIMARY KEY
 (ID_TIPO_PAGO));

ALTER TABLE IC_CAT_TIPO_SERVICIO ADD (
  CONSTRAINT XPKIC_CAT_TIPO_SERVICIO
 PRIMARY KEY
 (ID_TIPO_SERVICIO));

ALTER TABLE IC_DOCUMENTO ADD (
  CONSTRAINT PK_IC_DOCUMENTO
 PRIMARY KEY
 (ID_DOCUMENTO));

ALTER TABLE IC_ENVIO_ESTAFETA ADD (
  CONSTRAINT XPKIC_ENVIO_ESTAFETA
 PRIMARY KEY
 (ID_ESTAFETA));

ALTER TABLE IC_ESTADO ADD (
  CONSTRAINT XPKIC_ESTADO
 PRIMARY KEY
 (ID_ESTADO, ID_PAIS));

ALTER TABLE IC_FACTURA ADD (
  CONSTRAINT XPKIC_FACTURA
 PRIMARY KEY
 (ID_FACTURA));

ALTER TABLE IC_FONDEOS_WS ADD (
  CONSTRAINT XPKIC_FONDEOS_WS
 PRIMARY KEY
 (ID_FONDEO));

ALTER TABLE IC_IMPORTES_ESTAFETA ADD (
  CONSTRAINT XPKIC_IMPORTES_ESTAFETA
 PRIMARY KEY
 (ID_IMPORTE_EST));

ALTER TABLE IC_IMPORTES_IUPICARD ADD (
  CONSTRAINT XPKIC_IMPORTES_IUPICARD
 PRIMARY KEY
 (ID_IMPORTE_IC));

ALTER TABLE IC_MEMBRECIAS_PORPAGAR ADD (
  CONSTRAINT IC_MEMBRECIAS_PORPAGAR_PK
 PRIMARY KEY
 (ID_MEMBRECIA));

ALTER TABLE IC_MEMBRECIA_UNLOAD ADD (
  CONSTRAINT XPKIC_MEMBRECIA_UNLOAD
 PRIMARY KEY
 (ID_MEMBRECIA_UNLOAD));

ALTER TABLE IC_MEMBRESIAS ADD (
  CONSTRAINT XPKIC_MEMBRESIAS
 PRIMARY KEY
 (ID_MEMBRESIA));

ALTER TABLE IC_MERCANCIA ADD (
  CONSTRAINT IC_MERCANCIA_PK
 PRIMARY KEY
 (ID_MERCANCIA));

ALTER TABLE IC_MERCANCIAS_UNLOAD ADD (
  CONSTRAINT XPKIC_MERCANCIAS_UNLOAD
 PRIMARY KEY
 (ID_MERCANCIA_UNLOAD));

ALTER TABLE IC_MUNICIPIO ADD (
  CONSTRAINT XPKIC_MUNICIPIO
 PRIMARY KEY
 (ID_MUNICIPIO, ID_ESTADO, ID_PAIS));

ALTER TABLE IC_PAIS ADD (
  CONSTRAINT XPKIC_PAIS
 PRIMARY KEY
 (ID_PAIS));

ALTER TABLE IC_PREGUNTAS_USUARIO ADD (
  CONSTRAINT XPKIC_PREGUNTAS_USUARIO
 PRIMARY KEY
 (ID_PREGUNTA_USUARIO));

ALTER TABLE IC_SPEI ADD (
  CONSTRAINT XPKIC_SPEI
 PRIMARY KEY
 (ID_SPEI));

ALTER TABLE IC_SUITE ADD (
  CONSTRAINT IC_SUITE_PK
 PRIMARY KEY
 (ID_SUITE));

ALTER TABLE IC_TARJETAS ADD (
  CONSTRAINT XPKIC_TARJETAS
 PRIMARY KEY
 (ID_TARJETA));

ALTER TABLE IC_TA_USUARIO_ROL ADD (
  CONSTRAINT XPKIC_TA_USUARIO_ROL
 PRIMARY KEY
 (ID_USUARIO_ROL));

ALTER TABLE IC_TEST_IMAGEN ADD (
  CONSTRAINT PK_IC_TEST_IMAGEN
 PRIMARY KEY
 (ID_DOCUMENTO));

ALTER TABLE IC_TRACKING_MERCANCIA ADD (
  CONSTRAINT XPKIC_TRACKING_MERCANCIA
 PRIMARY KEY
 (ID_TRACKING));

ALTER TABLE IC_TX_CARDMARTE_LOAD ADD (
  CONSTRAINT XPKIC_TX_CARDMARTE_LOAD
 PRIMARY KEY
 (ID_LOAD));

ALTER TABLE IC_TX_CARDMARTE_PCARDCREATION ADD (
  CONSTRAINT XPKIC_TX_CARDMARTE_PCARDCREATI
 PRIMARY KEY
 (ID_PCC));

ALTER TABLE IC_TX_CARDMARTE_UNLOAD ADD (
  CONSTRAINT XPKIC_TX_CARDMARTE_UNLOAD
 PRIMARY KEY
 (ID_UNLOAD));

ALTER TABLE IC_USUARIO ADD (
  CONSTRAINT XPKIC_USUARIO
 PRIMARY KEY
 (ID_USUARIO));

ALTER TABLE IC_VENTANILLA ADD (
  CONSTRAINT XPKIC_VENTANILLA
 PRIMARY KEY
 (ID_VENTANILLA));

ALTER TABLE JMS_ROLES ADD (
  PRIMARY KEY
 (USERID, ROLEID));

ALTER TABLE JMS_SUBSCRIPTIONS ADD (
  PRIMARY KEY
 (CLIENTID, SUBNAME));

ALTER TABLE JMS_TRANSACTIONS ADD (
  PRIMARY KEY
 (TXID));

ALTER TABLE JMS_USERS ADD (
  PRIMARY KEY
 (USERID));

ALTER TABLE LOGINHST ADD (
  CONSTRAINT LOGINHST_PK
 PRIMARY KEY
 (ID, USUARIOID));

ALTER TABLE LOGIN_USERS ADD (
  CONSTRAINT LOGIN_PK
 PRIMARY KEY
 (USUARIOID));

ALTER TABLE MEMBRECIA ADD (
  CONSTRAINT PK_MEMBRECIA
 PRIMARY KEY
 (MEMBRECIAID));

ALTER TABLE MONEDA ADD (
  CONSTRAINT PK_MONEDA
 PRIMARY KEY
 (TIPOMONEDA));

ALTER TABLE MUNICIPIO ADD (
  CONSTRAINT MUNICIPIO_PK
 PRIMARY KEY
 (PAISID, ESTADOID, MUNICIPIOID));

ALTER TABLE OPERACIONTIENDA ADD (
  PRIMARY KEY
 (OPERACIONID, NCONSECUTIVO));

ALTER TABLE OPERACIONVENTANILLA ADD (
  PRIMARY KEY
 (OPERACIONID, NCONSECUTIVO));

ALTER TABLE PAIS ADD (
  CONSTRAINT PAIS_PK
 PRIMARY KEY
 (PAISID));

ALTER TABLE PREGUNTASESTANDAR ADD (
  CONSTRAINT PK_PREGUNTASESTANDAR
 PRIMARY KEY
 (IDPREGUNTAESTANDAR));

ALTER TABLE PROVINCIAS ADD (
  CONSTRAINT PK_PROVINCIAS
 PRIMARY KEY
 (USUARIOID));

ALTER TABLE RMA_EJBS ADD (
  CONSTRAINT XPKRMA_EJBS
 PRIMARY KEY
 (IDEJB));

ALTER TABLE RMA_MACS ADD (
  PRIMARY KEY
 (MAC, NOMBRE_APLICACION));

ALTER TABLE RMA_METODOS ADD (
  CONSTRAINT XPKRMA_METODOS
 PRIMARY KEY
 (IDMETODO));

ALTER TABLE RMA_ROL ADD (
  CONSTRAINT XPKRMA_ROL
 PRIMARY KEY
 (IDROL));

ALTER TABLE RMA_ROL_METODOS ADD (
  CONSTRAINT XPKRMA_ROL_METODOS
 PRIMARY KEY
 (IDROL_METODO));

ALTER TABLE T_P_ACTIVADAS ADD (
  CONSTRAINT PK_T_P_ACTIVADAS
 PRIMARY KEY
 (ID_T_P_ACTIVADAS));

ALTER TABLE USUARIO ADD (
  CONSTRAINT USUARIO_PK
 PRIMARY KEY
 (USUARIOID));

ALTER TABLE USUARIO_CORE ADD (
  CONSTRAINT PK_USUARIO_CORE
 PRIMARY KEY
 (ID_USUARIO));

ALTER TABLE CARD ADD (
  FOREIGN KEY (MEMBRECIAID) 
 REFERENCES MEMBRECIA (MEMBRECIAID));

ALTER TABLE CC_CANCELACIONES ADD (
  FOREIGN KEY (ESTADODECUENTAID) 
 REFERENCES ESTADODECUENTA (ESTADODECUENTAID),
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE CC_DOCUMENTOSUSR ADD (
  FOREIGN KEY (DOCACEPTADO) 
 REFERENCES CC_ESTATUSDOCUMENTO (DOCACEPTADO),
  FOREIGN KEY (IDTIPODOCUMENTO) 
 REFERENCES CC_TIPODOCUMENTO (IDTIPODOCUMENTO),
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE CC_RENOVACIONES ADD (
  FOREIGN KEY (MEMBRECIAID) 
 REFERENCES MEMBRECIA (MEMBRECIAID),
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE CC_REPOSICIONES ADD (
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE CC_RSPACLARACION ADD (
  FOREIGN KEY (NUMEROREGISTRO, NUMEROACLARACION, USUARIOID) 
 REFERENCES CC_SLCACLARACION (NUMEROREGISTRO,NUMEROACLARACION,USUARIOID));

ALTER TABLE CC_SITIOSFAVORITOS ADD (
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE CC_SLCACLARACION ADD (
  FOREIGN KEY (ESTATUSACLARACION) 
 REFERENCES CC_ESTATUSACLARACION (ESTATUSACLARACION),
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE CC_SOLICITUDPLASTICO ADD (
  FOREIGN KEY (ESTADODECUENTAID) 
 REFERENCES ESTADODECUENTA (ESTADODECUENTAID),
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE CC_TARJETASEXPIRADAS ADD (
  FOREIGN KEY (MEMBRECIAID) 
 REFERENCES MEMBRECIA (MEMBRECIAID),
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE ESTADO ADD (
  FOREIGN KEY (PAISID) 
 REFERENCES PAIS (PAISID));

ALTER TABLE H_T_P_ACTIVADAS ADD (
  FOREIGN KEY (ID_ESTATUS_VENTA) 
 REFERENCES CAT_ESTATUS_VENTA (IDESTATUS));

ALTER TABLE ICN_CC_TARJETASEXPIRADAS ADD (
  FOREIGN KEY (ID_TIPO_MEMBRESIA) 
 REFERENCES IC_CAT_TIPO_MEMBRESIA (ID_TIPO_MEMBRESIA),
  FOREIGN KEY (REFERENCIA) 
 REFERENCES ICN_TARJETA (REFERENCIA));

ALTER TABLE ICN_CLIENTES ADD (
  CONSTRAINT FK01_ICN_CLIENTES 
 FOREIGN KEY (ID_TIPO_IDENTIFICACION) 
 REFERENCES IC_CAT_TIPO_IDENTIFICACION (ID_TIPO_IDENTIFICACION),
  CONSTRAINT FK02_ICN_CLIENTES 
 FOREIGN KEY (ID_MUNICIPIO, ID_ESTADO, ID_PAIS) 
 REFERENCES IC_MUNICIPIO (ID_MUNICIPIO,ID_ESTADO,ID_PAIS));

ALTER TABLE ICN_CONTRATO ADD (
  CONSTRAINT FK01_ICN_CONTRATO 
 FOREIGN KEY (ID_USUARIO) 
 REFERENCES ICN_CLIENTES (ID_USUARIO));

ALTER TABLE ICN_CP ADD (
  CONSTRAINT FK01_ICN_CP 
 FOREIGN KEY (ID_MUNICIPIO, ID_ESTADO, ID_PAIS) 
 REFERENCES IC_MUNICIPIO (ID_MUNICIPIO,ID_ESTADO,ID_PAIS));

ALTER TABLE ICN_FUNCION ADD (
  CONSTRAINT FK1_ICNFUNCION 
 FOREIGN KEY (IDGPOPFIL) 
 REFERENCES ICN_GPOPERFIL (IDGPOPFIL));

ALTER TABLE ICN_GPOPERFIL ADD (
  CONSTRAINT FK01_ICN_GPOPFIL 
 FOREIGN KEY (IDAPLICACION) 
 REFERENCES ICN_APLIC (IDAPLICACION),
  CONSTRAINT FK02_ICN_GPOPFIL 
 FOREIGN KEY (IDGRUPO) 
 REFERENCES ICN_GRUPO (IDGRUPO),
  CONSTRAINT FK03_ICN_GPOPFIL 
 FOREIGN KEY (IDPERFIL) 
 REFERENCES ICN_PERFIL (IDPERFIL));

ALTER TABLE ICN_MOVIMIENTOS ADD (
  CONSTRAINT FK01_ICN_MOVIMIENTOS 
 FOREIGN KEY (ID_CANAL) 
 REFERENCES IC_CAT_CANAL (ID_CANAL),
  CONSTRAINT FK02_ICN_MOVIMIENTOS 
 FOREIGN KEY (ID_TIPO_SERVICIO) 
 REFERENCES IC_CAT_TIPO_SERVICIO (ID_TIPO_SERVICIO),
  CONSTRAINT FK03_ICN_MOVIMIENTOS 
 FOREIGN KEY (ID_TIPO_PAGO) 
 REFERENCES IC_CAT_TIPO_PAGO (ID_TIPO_PAGO));

ALTER TABLE ICN_TARJETA ADD (
  CONSTRAINT FK01_ICN_TARJETA 
 FOREIGN KEY (REFERENCIA) 
 REFERENCES ICN_CONTRATO (REFERENCIA),
  CONSTRAINT FK02_ICN_TARJETA 
 FOREIGN KEY (ID_EMISOR) 
 REFERENCES IC_CAT_EMISOR_TARJETA (ID_EMISOR),
  CONSTRAINT FK03_ICN_TARJETA 
 FOREIGN KEY (ID_TIPO_MEMBRESIA) 
 REFERENCES IC_CAT_TIPO_MEMBRESIA (ID_TIPO_MEMBRESIA),
  CONSTRAINT FK04_ICN_TARJETA 
 FOREIGN KEY (ID_STATUS_TARJETA) 
 REFERENCES IC_CAT_STATUS_CUENTA (ID_STATUS_CUENTA),
  CONSTRAINT FK05_ICN_TARJETA 
 FOREIGN KEY (ESTATUS_BLOQUEO) 
 REFERENCES ICN_CAT_TIPO_BLOQUEO (ESTATUS_BLOQUEO));

ALTER TABLE ICN_TARJETA_COMPLEMENTO ADD (
  CONSTRAINT FK01_ICN_TARJETA_COMPLEMENTO 
 FOREIGN KEY (REFERENCIA) 
 REFERENCES ICN_TARJETA (REFERENCIA));

ALTER TABLE ICN_USR_ROL ADD (
  CONSTRAINT FK2_ICN_USR_ROL 
 FOREIGN KEY (IDPERMISO) 
 REFERENCES ICN_PERMISO (IDPERMISO),
  CONSTRAINT FK1_ICN_USR_ROL 
 FOREIGN KEY (IDFUNCION) 
 REFERENCES ICN_FUNCION (IDFUNCION));

ALTER TABLE IC_BXI ADD (
  CONSTRAINT FK_FONDEO_BXI 
 FOREIGN KEY (ID_FONDEO) 
 REFERENCES IC_FONDEOS_WS (ID_FONDEO)
    ON DELETE SET NULL);

ALTER TABLE IC_CAT_ROLES ADD (
  CONSTRAINT FK_GRUPO_ROL 
 FOREIGN KEY (ID_GRUP_ROL) 
 REFERENCES IC_CAT_GRUPO_ROLES (ID)
    ON DELETE SET NULL,
  CONSTRAINT FK_PERMISO 
 FOREIGN KEY (ID_PERMISO) 
 REFERENCES IC_CAT_PERMISO (ID_PERMISO)
    ON DELETE SET NULL);

ALTER TABLE IC_DOCUMENTO ADD (
  CONSTRAINT FK02_IC_DOCUMENTO 
 FOREIGN KEY (ID_TIPO_DOCUMENTO) 
 REFERENCES IC_CAT_DOCUMENTO (ID_TIPO_DOCUMENTO));

ALTER TABLE IC_ENVIO_ESTAFETA ADD (
  FOREIGN KEY (ID_MERCANCIA) 
 REFERENCES IC_MERCANCIA (ID_MERCANCIA),
  CONSTRAINT FK_MUNICIPIO_ENVIO 
 FOREIGN KEY (ID_MUNICIPIO, ID_ESTADO, ID_PAIS) 
 REFERENCES IC_MUNICIPIO (ID_MUNICIPIO,ID_ESTADO,ID_PAIS)
    ON DELETE SET NULL);

ALTER TABLE IC_ESTADO ADD (
  CONSTRAINT FK_PAIS 
 FOREIGN KEY (ID_PAIS) 
 REFERENCES IC_PAIS (ID_PAIS));

ALTER TABLE IC_FACTURA ADD (
  CONSTRAINT IC_FACTURA_R01 
 FOREIGN KEY (ID_MERCANCIA) 
 REFERENCES IC_MERCANCIA (ID_MERCANCIA));

ALTER TABLE IC_FONDEOS_WS ADD (
  CONSTRAINT FK_TIPO_PAGO 
 FOREIGN KEY (ID_TIPO_PAGO) 
 REFERENCES IC_CAT_TIPO_PAGO (ID_TIPO_PAGO)
    ON DELETE SET NULL,
  CONSTRAINT FK_TARJETA_FONDEO 
 FOREIGN KEY (ID_TARJETA) 
 REFERENCES IC_TARJETAS (ID_TARJETA)
    ON DELETE SET NULL,
  CONSTRAINT FK_CANAL 
 FOREIGN KEY (ID_CANAL) 
 REFERENCES IC_CAT_CANAL (ID_CANAL)
    ON DELETE SET NULL);

ALTER TABLE IC_IMPORTES_ESTAFETA ADD (
  FOREIGN KEY (ID_MERCANCIA) 
 REFERENCES IC_MERCANCIA (ID_MERCANCIA),
  CONSTRAINT FK_SERVICIO_IMPORTES 
 FOREIGN KEY (ID_TIPO_SERVICIO) 
 REFERENCES IC_CAT_TIPO_SERVICIO (ID_TIPO_SERVICIO)
    ON DELETE SET NULL);

ALTER TABLE IC_IMPORTES_IUPICARD ADD (
  FOREIGN KEY (ID_MERCANCIA) 
 REFERENCES IC_MERCANCIA (ID_MERCANCIA),
  CONSTRAINT FK_SERVICIO_IUPI 
 FOREIGN KEY (ID_TIPO_SERVICIO) 
 REFERENCES IC_CAT_TIPO_SERVICIO (ID_TIPO_SERVICIO)
    ON DELETE SET NULL);

ALTER TABLE IC_MEMBRECIAS_PORPAGAR ADD (
  CONSTRAINT IC_MEMBRECIAS_PORPAGAR_R02 
 FOREIGN KEY (ID_TIPO_MEMBRECIA) 
 REFERENCES IC_CAT_TIPO_MEMBRESIA (ID_TIPO_MEMBRESIA));

ALTER TABLE IC_MEMBRECIA_UNLOAD ADD (
  CONSTRAINT FK_MEMBRESIA_UNLOAD 
 FOREIGN KEY (ID_UNLOAD) 
 REFERENCES IC_TX_CARDMARTE_UNLOAD (ID_UNLOAD)
    ON DELETE SET NULL,
  CONSTRAINT FK_UNLOAD_MEMBRESIA 
 FOREIGN KEY (ID_MEMBRESIA) 
 REFERENCES IC_MEMBRESIAS (ID_MEMBRESIA)
    ON DELETE SET NULL);

ALTER TABLE IC_MEMBRESIAS ADD (
  CONSTRAINT FK_TARJETA_MEMBRESIA 
 FOREIGN KEY (ID_TARJETA) 
 REFERENCES IC_TARJETAS (ID_TARJETA)
    ON DELETE SET NULL,
  CONSTRAINT FK_TIPO_MEMBRESIA 
 FOREIGN KEY (ID_TIPO_MEMBRESIA) 
 REFERENCES IC_CAT_TIPO_MEMBRESIA (ID_TIPO_MEMBRESIA)
    ON DELETE SET NULL);

ALTER TABLE IC_MERCANCIA ADD (
  CONSTRAINT IC_MERCANCIA_R01 
 FOREIGN KEY (ID_SUITE) 
 REFERENCES IC_SUITE (ID_SUITE),
  CONSTRAINT IC_MERCANCIA_R02 
 FOREIGN KEY (ID_STATUS_FACTURA) 
 REFERENCES IC_CAT_STATUS (ID_STATUS),
  CONSTRAINT IC_MERCANCIA_R03 
 FOREIGN KEY (ID_STATUS_MERCANCIA) 
 REFERENCES IC_CAT_STATUS (ID_STATUS));

ALTER TABLE IC_MERCANCIAS_UNLOAD ADD (
  CONSTRAINT FK_UNLOAD_MERCANCIA 
 FOREIGN KEY (ID_UNLOAD) 
 REFERENCES IC_TX_CARDMARTE_UNLOAD (ID_UNLOAD)
    ON DELETE SET NULL,
  CONSTRAINT IC_MERCANCIAS_UNLOAD_R02 
 FOREIGN KEY (ID_MERCANCIA) 
 REFERENCES IC_MERCANCIA (ID_MERCANCIA));

ALTER TABLE IC_MUNICIPIO ADD (
  CONSTRAINT FK_ESTADO 
 FOREIGN KEY (ID_ESTADO, ID_PAIS) 
 REFERENCES IC_ESTADO (ID_ESTADO,ID_PAIS));

ALTER TABLE IC_PREGUNTAS_USUARIO ADD (
  CONSTRAINT FK_PREGUNTA 
 FOREIGN KEY (ID_PREGUNTA_SECRETA) 
 REFERENCES IC_CAT_PREGUNTA_SECRETA (ID_PREGUNTA_SECRETA)
    ON DELETE SET NULL);

ALTER TABLE IC_SPEI ADD (
  FOREIGN KEY (ID_FONDEO) 
 REFERENCES IC_FONDEOS_WS (ID_FONDEO));

ALTER TABLE IC_SUITE ADD (
  CONSTRAINT IC_SUITE_R02 
 FOREIGN KEY (ID_PROVEEDOR) 
 REFERENCES IC_CAT_PROV_ALMACENAMIENTO (ID_PROVEEDOR));

ALTER TABLE IC_TARJETAS ADD (
  CONSTRAINT FK_EMISOR 
 FOREIGN KEY (ID_EMISOR) 
 REFERENCES IC_CAT_EMISOR_TARJETA (ID_EMISOR)
    ON DELETE SET NULL,
  CONSTRAINT FK_TARJETA_USUARIO 
 FOREIGN KEY (ID_USUARIO) 
 REFERENCES IC_USUARIO (ID_USUARIO)
    ON DELETE SET NULL,
  CONSTRAINT FK_STATUS_TARJETA 
 FOREIGN KEY (ID_STATUS_TARJETA) 
 REFERENCES IC_CAT_STATUS_TARJETA (ID_STATUS_TARJETA)
    ON DELETE SET NULL,
  CONSTRAINT FK_PCC_TARJETA 
 FOREIGN KEY (ID_PCC) 
 REFERENCES IC_TX_CARDMARTE_PCARDCREATION (ID_PCC)
    ON DELETE SET NULL);

ALTER TABLE IC_TA_USUARIO_ROL ADD (
  CONSTRAINT FK_ROL 
 FOREIGN KEY (ID_ROL) 
 REFERENCES IC_CAT_ROLES (ID_ROLES)
    ON DELETE SET NULL,
  CONSTRAINT FK_USUARIO_ROL 
 FOREIGN KEY (ID_USUARIO) 
 REFERENCES IC_USUARIO (ID_USUARIO)
    ON DELETE SET NULL);

ALTER TABLE IC_TRACKING_MERCANCIA ADD (
  CONSTRAINT IC_TRACKING_MERCANCIA_R02 
 FOREIGN KEY (ID_MERCANCIA) 
 REFERENCES IC_MERCANCIA (ID_MERCANCIA),
  CONSTRAINT FK_STATUS 
 FOREIGN KEY (ID_STATUS) 
 REFERENCES IC_CAT_STATUS (ID_STATUS)
    ON DELETE SET NULL);

ALTER TABLE IC_TX_CARDMARTE_LOAD ADD (
  CONSTRAINT FK_LOAD_FONDEO 
 FOREIGN KEY (ID_FONDEO) 
 REFERENCES IC_FONDEOS_WS (ID_FONDEO)
    ON DELETE SET NULL);

ALTER TABLE IC_TX_CARDMARTE_PCARDCREATION ADD (
  CONSTRAINT FK_USUARIO_PCC 
 FOREIGN KEY (ID_USUARIO) 
 REFERENCES IC_USUARIO (ID_USUARIO)
    ON DELETE SET NULL);

ALTER TABLE IC_TX_CARDMARTE_UNLOAD ADD (
  CONSTRAINT FK_UNLOAD_TARJETA 
 FOREIGN KEY (ID_TARJETA) 
 REFERENCES IC_TARJETAS (ID_TARJETA));

ALTER TABLE IC_USUARIO ADD (
  CONSTRAINT FK_MUNICIPIO_USUARIO 
 FOREIGN KEY (ID_MUNICIPIO, ID_ESTADO, ID_PAIS) 
 REFERENCES IC_MUNICIPIO (ID_MUNICIPIO,ID_ESTADO,ID_PAIS)
    ON DELETE SET NULL,
  CONSTRAINT FK_TIPO_IDENTIFICACION 
 FOREIGN KEY (ID_TIPO_IDENTIFICACION) 
 REFERENCES IC_CAT_TIPO_IDENTIFICACION (ID_TIPO_IDENTIFICACION)
    ON DELETE SET NULL,
  CONSTRAINT FK_ID_STATUS_CUENTA 
 FOREIGN KEY (ID_STATUS_CUENTA) 
 REFERENCES IC_CAT_STATUS_CUENTA (ID_STATUS_CUENTA)
    ON DELETE SET NULL);

ALTER TABLE IC_VENTANILLA ADD (
  CONSTRAINT FK_FONDEO_VENTANILLA 
 FOREIGN KEY (ID_FONDEO) 
 REFERENCES IC_FONDEOS_WS (ID_FONDEO)
    ON DELETE SET NULL);

ALTER TABLE LOGINHST ADD (
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE LOGIN_USERS ADD (
  FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID));

ALTER TABLE MEMBRECIA ADD (
  FOREIGN KEY (TIPOMONEDA) 
 REFERENCES MONEDA (TIPOMONEDA));

ALTER TABLE MUNICIPIO ADD (
  FOREIGN KEY (PAISID, ESTADOID) 
 REFERENCES ESTADO (PAISID,ESTADOID));

ALTER TABLE OPERACIONTIENDA ADD (
  FOREIGN KEY (CARTCARDID) 
 REFERENCES CARD (CARTCARDID),
  FOREIGN KEY (MENSAJEOPERACIONID) 
 REFERENCES CAT_OPERACIONFONDEOS (MENSAJEOPERACIONID));

ALTER TABLE PREGUNTASUSUARIO ADD (
  CONSTRAINT PREGUNTA1_FK 
 FOREIGN KEY (PREGUNTAESTANDAR1ID) 
 REFERENCES PREGUNTASESTANDAR (IDPREGUNTAESTANDAR),
  CONSTRAINT PREGUNTA2_FK 
 FOREIGN KEY (PREGUNTAESTANDAR2ID) 
 REFERENCES PREGUNTASESTANDAR (IDPREGUNTAESTANDAR));

ALTER TABLE PROVINCIAS ADD (
  CONSTRAINT USUARIOPROVINCIA 
 FOREIGN KEY (USUARIOID) 
 REFERENCES USUARIO (USUARIOID),
  FOREIGN KEY (PAISID) 
 REFERENCES PAIS (PAISID));

ALTER TABLE RMA_MACS ADD (
  CONSTRAINT RMA_MACS_R02 
 FOREIGN KEY (IDROL) 
 REFERENCES RMA_ROL (IDROL));

ALTER TABLE RMA_METODOS ADD (
  FOREIGN KEY (IDEJB) 
 REFERENCES RMA_EJBS (IDEJB));

ALTER TABLE RMA_ROL_METODOS ADD (
  FOREIGN KEY (IDMETODO) 
 REFERENCES RMA_METODOS (IDMETODO),
  FOREIGN KEY (IDROL) 
 REFERENCES RMA_ROL (IDROL));

ALTER TABLE USUARIO ADD (
  FOREIGN KEY (IDENTIDADVALIDADA) 
 REFERENCES CC_ESTATUSIDENTIDAD (IDENTIDADVALIDADA),
  CONSTRAINT USUARIO_FK 
 FOREIGN KEY (PAISID) 
 REFERENCES PAIS (PAISID),
  CONSTRAINT ESTADODECUENTA_FK 
 FOREIGN KEY (ESTADODECUENTAID) 
 REFERENCES ESTADODECUENTA (ESTADODECUENTAID));

ALTER TABLE USUARIO_CORE ADD (
  FOREIGN KEY (ID_USUARIO) 
 REFERENCES USUARIO (USUARIOID));

GRANT EXECUTE ON MOD_BAND_LOGIN TO CARTCARD;

GRANT EXECUTE ON MODIF_FONDEOS TO CARTCARD;

GRANT SELECT ON OPERACIONVENTANILLA TO PASARELBAZ;

GRANT EXECUTE ON PKG_ICN_SERVICIO TO PASARELBAZ;

GRANT SELECT ON USUARIO TO PASARELBAZ;

GRANT SELECT ON PRUEBADES TO PRUEBADES;

GRANT EXECUTE ON ACTUALIZACANCELACIONPENDIENTE TO USERCART;

GRANT EXECUTE ON ACTUALIZADATOSUSUARIO TO USERCART;

GRANT EXECUTE ON ACTUALIZADOCUMENTOUSR TO USERCART;

GRANT EXECUTE ON ACTUALIZAESTADOCONSULTA TO USERCART;

GRANT EXECUTE ON ACTUALIZAESTADOCORE TO USERCART;

GRANT EXECUTE ON ACTUALIZAESTADOCUENTA TO USERCART;

GRANT EXECUTE ON ACTUALIZAMAILUSUARIO TO USERCART;

GRANT EXECUTE ON ACTUALIZANROIDENTIFICACION TO USERCART;

GRANT EXECUTE ON ACTUALIZASOLICITUDPLASTICO TO USERCART;

GRANT EXECUTE ON ACTUALIZASTATUS TO USERCART;

GRANT EXECUTE ON ACTUALIZAVENTANILLA TO USERCART;

GRANT EXECUTE ON ADDTARJETAEXPIRADA TO USERCART;

GRANT EXECUTE ON AGREGACANCELACION TO USERCART;

GRANT EXECUTE ON AGREGACANCELACIONREPOSICION TO USERCART;

GRANT EXECUTE ON AGREGACONSTANTE TO USERCART;

GRANT EXECUTE ON AGREGADOCUMENTOUSR TO USERCART;

GRANT EXECUTE ON AGREGAHTPACTIVADA TO USERCART;

GRANT EXECUTE ON AGREGAMEMBRECIA1 TO USERCART;

GRANT EXECUTE ON AGREGAMEMBRESIA TO USERCART;

GRANT EXECUTE ON AGREGAPETICIONCARDMARTECORE TO USERCART;

GRANT EXECUTE ON AGREGARESPUESTAACLARACION TO USERCART;

GRANT EXECUTE ON AGREGARESPUESTACARDMARTECORE TO USERCART;

GRANT EXECUTE ON AGREGAR_MEMBRECIA TO USERCART;

GRANT EXECUTE ON AGREGARSOLICITUDPLASTICO TO USERCART;

GRANT EXECUTE ON AGREGASITIOSFAVORITOS TO USERCART;

GRANT EXECUTE ON AGREGASOLICITUDACLARACION TO USERCART;

GRANT EXECUTE ON AGREGATARJETACORE TO USERCART;

GRANT EXECUTE ON AGREGAUSUARIO TO USERCART;

GRANT EXECUTE ON AGREGAUSUARIO_CORE TO USERCART;

GRANT EXECUTE ON AGREGAUSUARIOTEMP TO USERCART;

GRANT EXECUTE ON AGREGAVERIFICACIONVENTANILLA TO USERCART;

GRANT EXECUTE ON ASIGNANUMLOTE TO USERCART;

GRANT EXECUTE ON ASIGNASUITECORE TO USERCART;

GRANT EXECUTE ON BLOQUEATARJETA TO USERCART;

GRANT EXECUTE ON BUSCAIPSUSUARIO TO USERCART;

GRANT EXECUTE ON BUSCARPROVINCIA TO USERCART;

GRANT EXECUTE ON BUSCARUSUARIOPORTARJETA TO USERCART;

GRANT EXECUTE ON BUSCASITIOSFAVORITOS TO USERCART;

GRANT EXECUTE ON BUSCATARJETASUSUARIO TO USERCART;

GRANT EXECUTE ON BUSCAUSUARIONICK TO USERCART;

GRANT EXECUTE ON BUSCAUSUARIOPORID TO USERCART;

GRANT EXECUTE ON BUSCAUSUARIOPORIDUSUARIO TO USERCART;

GRANT EXECUTE ON BUSCAUSUARIOPORMAIL TO USERCART;

GRANT EXECUTE ON BUSCAUSUARIOPORREFERENCIA TO USERCART;

GRANT EXECUTE ON BUSCAUSUARIOPORREFERENCIAGASU TO USERCART;

GRANT EXECUTE ON BUSQUEDA_MEMBRECIA_ID TO USERCART;

GRANT EXECUTE ON BUSQUEDA_MEMBRECIAS TO USERCART;

GRANT EXECUTE ON CONSTANTESMES TO USERCART;

GRANT EXECUTE ON CONSULTABLOQUEOREFERENCIA TO USERCART;

GRANT EXECUTE ON CONSULTADATOSUSUARIO TO USERCART;

GRANT EXECUTE ON CONSULTAEROR TO USERCART;

GRANT EXECUTE ON CONSULTAESTADOCUENTA TO USERCART;

GRANT EXECUTE ON CONSULTAESTADOTARJETA TO USERCART;

GRANT EXECUTE ON CONSULTAESTADOTARJETACANCELADO TO USERCART;

GRANT EXECUTE ON CONSULTAESTADOTARJETAREF TO USERCART;

GRANT EXECUTE ON CONSULTAFECHA TO USERCART;

GRANT EXECUTE ON CONSULTAFECHAVENCIMIENTO TO USERCART;

GRANT EXECUTE ON CONSULTAOPERACIONID TO USERCART;

GRANT EXECUTE ON CONSULTAREFERENCIA TO USERCART;

GRANT EXECUTE ON CONSULTAREFERENCIACARTCARD TO USERCART;

GRANT EXECUTE ON CONSULTARESPUESTAACLARACION TO USERCART;

GRANT EXECUTE ON CONSULTASOLICITUDACLARACION TO USERCART;

GRANT EXECUTE ON CONTABILIZAESTADOCUENTA TO USERCART;

GRANT EXECUTE ON COSTOMEMBRECIAPORREFERENCIA TO USERCART;

GRANT EXECUTE ON DOCUMENTOSPORUSUARIO TO USERCART;

GRANT EXECUTE ON ELIMINACONSTANTE TO USERCART;

GRANT EXECUTE ON ELIMINAMEMBRESIA TO USERCART;

GRANT EXECUTE ON ELIMINAOPERACIONVENTANILLA TO USERCART;

GRANT EXECUTE ON ELIMINAR_MEMBRECIA TO USERCART;

GRANT EXECUTE ON ELIMINARTPACTIVADA TO USERCART;

GRANT EXECUTE ON ELIMINAUSUARIO TO USERCART;

GRANT EXECUTE ON ELIMINAUSUARIOCORE TO USERCART;

GRANT EXECUTE ON ESTABLECEESTATUSDOCUMENTO TO USERCART;

GRANT EXECUTE ON ESTADOS TO USERCART;

GRANT EXECUTE ON ESTADOS2 TO USERCART;

GRANT EXECUTE ON EXISTEIDENTIFICACION TO USERCART;

GRANT EXECUTE ON EXISTEMAIL TO USERCART;

GRANT EXECUTE ON FLETESPORKG TO USERCART;

GRANT EXECUTE ON FONDEACARTCARDID TO USERCART;

GRANT EXECUTE ON FONDEAREFERENCIA TO USERCART;

GRANT EXECUTE ON FONDEAREFERENCIAUNUSD TO USERCART;

GRANT EXECUTE ON FONDEARENOVACIONREFERENCIA TO USERCART;

GRANT EXECUTE ON FONDEOPERACIONTIENDA TO USERCART;

GRANT EXECUTE ON GENERAREFERENCIA TO USERCART;

GRANT EXECUTE ON GET_COSTO_MEMBRESIA TO USERCART;

GRANT EXECUTE ON GET_EXISTE_HTPACTIVADA TO USERCART;

GRANT EXECUTE ON GET_SUITE TO USERCART;

GRANT EXECUTE ON GET_T_PREACTIVADA TO USERCART;

GRANT EXECUTE ON INSERTAOPERTIENDA TO USERCART;

GRANT EXECUTE ON MEMBRECIAS TO USERCART;

GRANT EXECUTE ON MEMBRESIASAEXPIRAR TO USERCART;

GRANT EXECUTE ON MEMBRESIASAEXPIRARRANGO TO USERCART;

GRANT EXECUTE ON MIPROVINCIA TO USERCART;

GRANT EXECUTE ON MODIFICACONSTANTE TO USERCART;

GRANT EXECUTE ON MODIFICAR_MEMBRECIA TO USERCART;

GRANT EXECUTE, DEBUG ON MOD_LISTA_CARTCARD TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_BLOQUEADAS_DETALLE TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_CANCEL_DETALLE TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_CREADAS_DETALLE TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_FISICAS_DETALLE TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_FONDEOS_ADMIN TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_FONDEOS_DETALLE TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_REACTIVAS_DETALLE TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_REPOS_DETALLE TO USERCART;

GRANT EXECUTE ON MOD_REPORTE_TIPO_USUARIO TO USERCART;

GRANT EXECUTE ON MONEDAS TO USERCART;

GRANT EXECUTE ON MONTOMAXIMO TO USERCART;

GRANT EXECUTE ON MONTOMAXIMOPORUSUARIOID TO USERCART;

GRANT EXECUTE ON MUNICIPIOS TO USERCART;

GRANT EXECUTE ON MUNICIPIOS2 TO USERCART;

GRANT EXECUTE ON NUEVOREGISTRO TO USERCART;

GRANT EXECUTE ON OBTENCANCELACIONESPENDIENTES TO USERCART;

GRANT EXECUTE ON OBTENCARTCARDIDREF TO USERCART;

GRANT EXECUTE ON OBTENCARTCARDIDUSU TO USERCART;

GRANT EXECUTE ON OBTENCOMISIONFONDEO TO USERCART;

GRANT EXECUTE ON OBTENCONSTANTE TO USERCART;

GRANT EXECUTE ON OBTENCONSTANTEPORID TO USERCART;

GRANT EXECUTE ON OBTENCONSTANTES TO USERCART;

GRANT EXECUTE ON OBTENCOSTOMEMBRECIA TO USERCART;

GRANT EXECUTE ON OBTENDATOSTARJETA TO USERCART;

GRANT EXECUTE ON OBTENDESCRIPCIONMEMBRECIA TO USERCART;

GRANT EXECUTE ON OBTENEIDENTVALIDCORE TO USERCART;

GRANT EXECUTE ON OBTENER_IDUSUARIO TO USERCART;

GRANT EXECUTE ON OBTENERNOMBREUSARIO TO USERCART;

GRANT EXECUTE ON OBTENERTARJETASBLOQUEAR TO USERCART;

GRANT EXECUTE ON OBTENERTARJETASNOTIFICAR TO USERCART;

GRANT EXECUTE ON OBTENERTOKENPORCARTCARDIDCORE TO USERCART;

GRANT EXECUTE ON OBTENESTADOCONSULTA TO USERCART;

GRANT EXECUTE ON OBTENFONDEOS TO USERCART;

GRANT EXECUTE ON OBTENFONDEOSCOMISION TO USERCART;

GRANT EXECUTE ON OBTENFONDEOSPORFECHA TO USERCART;

GRANT EXECUTE ON OBTENFONDEOSPORSUITE TO USERCART;

GRANT EXECUTE ON OBTENFONDEOSREFERENCIA TO USERCART;

GRANT EXECUTE ON OBTENFONDEOTARJETA TO USERCART;

GRANT EXECUTE ON OBTENFONDEOUSUARIO TO USERCART;

GRANT EXECUTE ON OBTENIDENTIDADVALIDADA TO USERCART;

GRANT EXECUTE ON OBTENLISTAMEMBRECIAS TO USERCART;

GRANT EXECUTE ON OBTENREFERENCIAPORCARDID TO USERCART;

GRANT EXECUTE ON OBTENREFERENCIAPORTARJETA TO USERCART;

GRANT EXECUTE ON OBTENTARJPREACTIVAS TO USERCART;

GRANT EXECUTE ON OBTENTOKENPORCARDID TO USERCART;

GRANT EXECUTE ON OBTENTOKENPORUSUIDCORE TO USERCART;

GRANT EXECUTE ON OBTENUMLOTE TO USERCART;

GRANT EXECUTE ON OBTIENEDIRECCIONLAREDO TO USERCART;

GRANT EXECUTE ON OBTIENEMEMBRESIACOMISION TO USERCART;

GRANT EXECUTE ON OBTIENEMEMBRESIACOMISIONFECHA TO USERCART;

GRANT EXECUTE ON OBTIENEMEMBRESIAPORREFERENCIA TO USERCART;

GRANT EXECUTE ON OBTIENEPREGUNTAS TO USERCART;

GRANT EXECUTE ON OBTIENETIPOSDOCUMENTO TO USERCART;

GRANT EXECUTE ON PAISES TO USERCART;

GRANT EXECUTE ON PKG_LOGIN TO USERCART;

GRANT EXECUTE ON PREGUNTAS TO USERCART;

GRANT EXECUTE ON PREGUNTASCONFIRMACION TO USERCART;

GRANT EXECUTE ON RECUPERACONTRASENIAVALIDA TO USERCART;

GRANT EXECUTE ON REGISTRALOGINHST TO USERCART;

GRANT EXECUTE ON REGRESACONSTANTES TO USERCART;

GRANT EXECUTE ON RENUEVACONIUPICARD TO USERCART;

GRANT EXECUTE ON RENUEVAMEMBRESIA TO USERCART;

GRANT EXECUTE ON REPORTEFONDEOS TO USERCART;

GRANT EXECUTE ON REPORTEMEMBRESIASEXPIRADAS TO USERCART;

GRANT EXECUTE ON REPORTEREPOSICIONES TO USERCART;

GRANT EXECUTE ON REPORTESOLICITUDESPLASTICO TO USERCART;

GRANT EXECUTE ON REPORTETARJETASCANCELADAS TO USERCART;

GRANT EXECUTE ON REPORTETESORERIA TO USERCART;

GRANT EXECUTE ON RESTABLECEADESBLOQUEADO TO USERCART;

GRANT EXECUTE ON RESTABLECECARD TO USERCART;

GRANT EXECUTE ON SOLICITUDESPLASTICOUSUARIO TO USERCART;

GRANT EXECUTE ON STATUS_ESTADOCUENTA TO USERCART;

GRANT EXECUTE ON TIPOPRODUCTO TO USERCART;

GRANT EXECUTE ON USUARIOCARDESTADO TO USERCART;

GRANT EXECUTE ON USUARIOCONTARJETA TO USERCART;

GRANT EXECUTE ON USUARIOLOGEADO TO USERCART;

GRANT EXECUTE ON USUARIOSIDENTIDAD TO USERCART;

GRANT EXECUTE ON USUARIOSIDENTIDADTODOS TO USERCART;

GRANT EXECUTE ON VALIDAVIGENCIA TO USERCART;

GRANT EXECUTE ON VERIFICAPAGO TO USERCART;

GRANT EXECUTE ON VERIFICATOKENCORE TO USERCART;

GRANT SELECT ON VPRIMERFONDEO TO USERCART;

GRANT SELECT ON V_ICN_FONDEO TO USRINCART2DES;

GRANT SELECT ON VPRIMERFONDEO TO USRINFSIEDES;

GRANT EXECUTE ON PKG_LOGIN TO USRPASBAZ;
